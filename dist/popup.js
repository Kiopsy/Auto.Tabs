(()=>{var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var r={},s={},a=e.parcelRequire3f73;null==a&&((a=function(e){if(e in r)return r[e].exports;if(e in s){var t=s[e];delete s[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){s[e]=t},e.parcelRequire3f73=a),a.register("foUwZ",(function(e,t){})),a.register("gj6Et",(function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new r(e),a=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("4gDjz",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("HLBv4",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("ktaoY",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("gBs5C",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("ktLSh",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));var o={};o=class{constructor(){this.tabDict={},this.tabUrlDict={},this.urls=[],this.allTabs=[],this.tabIds=[],this.g=this.ut=this.t=0}getAllTabs(){return this.allTabs}getNonGroupTabs(){}async sortTabs(){this.urls.sort((function(e,t){return e.toLowerCase().localeCompare(t.toLowerCase())}));for(let e=0;e<this.urls.length;e++)chrome.tabs.move(this.tabUrlDict[this.urls[e]],{index:1e3+e}),this.tabUrlDict[this.urls[e]]=e}async queryTabs(){let e=await chrome.tabs.query({currentWindow:!0,groupId:-1});console.log(e);let t=[];e.forEach((e=>{this.tabDict[e.title]?t.push(e.id):(this.allTabs.push(e.title),this.urls.push(e.url),this.tabIds.push(e.id),this.tabUrlDict[e.url]=e.id,this.tabDict[e.title]=e.id)}))}async removeTabs(e){e.forEach((e=>{chrome.tabs.remove(e)}))}async createChromeGroups(e){var t;this.sortTabs(),chrome.windows.getCurrent((function(e){t=e.id}));for(let n in e){console.log("Group:"+n);let r=[];for(let t in e[n])r.push(this.tabDict[this.allTabs[e[n][t]]]),console.log(e[n][t],this.allTabs[e[n][t]]);console.log("Creating groups..");await chrome.tabs.group({createProperties:{windowId:t},tabIds:r})}}async updateLogData(e,t){let n=await chrome.tabs.query({currentWindow:!0}),r=new Set;n.forEach((e=>{-1!=e.groupId&&r.add(e.groupId)}));let s=n.length,a=r.size-e,o=this.allTabs.length,i=(new Date).toUTCString();await chrome.storage.sync.get(["log"],(function(e){let n=e.log?e.log:[];console.log(e),console.log(n);let r={date:i,groups:a,tabsOpen:s,threshold:t,ungroupedTabs:o};n.push(r),chrome.storage.sync.set({log:n},(function(){console.log("saved")}))}))}async getLogData(){await chrome.storage.sync.get(["log"],(function(e){let t=e.log;console.log(t)}))}};var i={};class u{refCount(e){return l("refCount")}incRef(e){return l("incRef")}timerAvailable(){return!0}time(e){return l("time")}read(e){return l("read")}readSync(e){return l("readSync")}readToGPU(e,t){return l("readToGPU")}numDataIds(){return l("numDataIds")}disposeData(e,t){return l("disposeData")}write(e,t,n){return l("write")}move(e,t,n,r,s){return l("move")}memory(){return l("memory")}floatPrecision(){return l("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return l("dispose")}}function l(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var c={};function p(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,m(e,t,n)}function h(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,m(e,n,r),m(t,n,r)}function d(e,t,n){return Math.max(e,Math.min(t,n))}function f(e){return e%2==0?e:e+1}function m(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function g(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function y(e,t){const n=Math.random();return t*n+(1-n)*e}function b(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function x(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function w(e,t,n=""){x(I(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function k(e){x(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function v(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||P(e)&&!n)for(let r=0;r<e.length;++r)v(e[r],t,n);else t.push(e);return t}function N(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function S(e){return 0===e.length}function I(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function T(e){return e%1==0}function E(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function $(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function C(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return p(t),t}function A(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function _(e,t=(e=>0),n,r=setTimeout){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const u=t(o);null!=n&&o>=n?a():r(i,u)};i()}))}function R(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function D(e,t){const n=t.length;return x((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),x(e.every((e=>T(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function F(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:D(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function M(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function L(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function z(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function B(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function P(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function W(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function V(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function U(e){return"string"==typeof e||e instanceof String}function G(e){return"boolean"==typeof e}function H(e){return"number"==typeof e}function q(e){return Array.isArray(e)?q(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":H(e)?"float32":U(e)?"string":G(e)?"bool":"float32"}function j(e){return!!(e&&e.constructor&&e.call&&e.apply)}function K(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function X(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Y(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=Y(e+t*i,o,n,r)}return s}function Z(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Y(0,e,t,n)}function J(e,t){const n=Q(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Q(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ee(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Z(e,new Float32Array(n));if("int32"===t)return Z(e,new Int32Array(n));if("bool"===t)return Z(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function te(e){e.forEach((t=>{x(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ne(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function re(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function se(e){return e&&e.then&&"function"==typeof e.then}t(c,"shuffle",(()=>p)),t(c,"swap",(()=>m)),t(c,"shuffleCombo",(()=>h)),t(c,"clamp",(()=>d)),t(c,"nearestLargerEven",(()=>f)),t(c,"sum",(()=>g)),t(c,"randUniform",(()=>y)),t(c,"distSquared",(()=>b)),t(c,"assert",(()=>x)),t(c,"assertShapesMatch",(()=>w)),t(c,"arraysEqual",(()=>I)),t(c,"assertNonNull",(()=>k)),t(c,"flatten",(()=>v)),t(c,"isTypedArray",(()=>P)),t(c,"sizeFromShape",(()=>N)),t(c,"isScalarShape",(()=>S)),t(c,"isInt",(()=>T)),t(c,"tanh",(()=>E)),t(c,"sizeToSquarishShape",(()=>$)),t(c,"createShuffledIndices",(()=>C)),t(c,"rightPad",(()=>A)),t(c,"repeatedTry",(()=>_)),t(c,"inferFromImplicitShape",(()=>R)),t(c,"parseAxisParam",(()=>D)),t(c,"squeezeShape",(()=>F)),t(c,"getTypedArrayFromDType",(()=>O)),t(c,"getArrayFromDType",(()=>M)),t(c,"checkConversionForErrors",(()=>L)),t(c,"isValidDtype",(()=>z)),t(c,"hasEncodingLoss",(()=>B)),t(c,"bytesPerElement",(()=>W)),t(c,"bytesFromStringArray",(()=>V)),t(c,"isString",(()=>U)),t(c,"isBoolean",(()=>G)),t(c,"isNumber",(()=>H)),t(c,"inferDtype",(()=>q)),t(c,"isFunction",(()=>j)),t(c,"nearestDivisor",(()=>K)),t(c,"computeStrides",(()=>X)),t(c,"toNestedArray",(()=>Z)),t(c,"makeOnesTypedArray",(()=>J)),t(c,"makeZerosTypedArray",(()=>Q)),t(c,"makeZerosNestedTypedArray",(()=>ee)),t(c,"assertNonNegativeIntegerDimensions",(()=>te)),t(c,"locToIndex",(()=>ne)),t(c,"indexToLoc",(()=>re)),t(c,"isPromise",(()=>se));const ae="tfjsflags";class oe{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ie,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(ue().getBool("IS_TEST")||ue().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];ue().getBool("IS_TEST")||ue().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(se(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(ae in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function ie(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function ue(){return le}let le=null;var ce,pe,he={},de=he={};function fe(){throw new Error("setTimeout has not been defined")}function me(){throw new Error("clearTimeout has not been defined")}function ge(e){if(ce===setTimeout)return setTimeout(e,0);if((ce===fe||!ce)&&setTimeout)return ce=setTimeout,setTimeout(e,0);try{return ce(e,0)}catch(t){try{return ce.call(null,e,0)}catch(t){return ce.call(this,e,0)}}}!function(){try{ce="function"==typeof setTimeout?setTimeout:fe}catch(e){ce=fe}try{pe="function"==typeof clearTimeout?clearTimeout:me}catch(e){pe=me}}();var ye,be=[],xe=!1,we=-1;function ke(){xe&&ye&&(xe=!1,ye.length?be=ye.concat(be):we=-1,be.length&&ve())}function ve(){if(!xe){var e=ge(ke);xe=!0;for(var t=be.length;t;){for(ye=be,be=[];++we<t;)ye&&ye[we].run();we=-1,t=be.length}ye=null,xe=!1,function(e){if(pe===clearTimeout)return clearTimeout(e);if((pe===me||!pe)&&clearTimeout)return pe=clearTimeout,clearTimeout(e);try{pe(e)}catch(t){try{return pe.call(null,e)}catch(t){return pe.call(this,e)}}}(e)}}function Ne(e,t){this.fun=e,this.array=t}function Se(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Ie;function Te(){if(null==Ie){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==he)t=he;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Ie=t}return Ie}function Ee(e,t){const n=function(){const e=Te();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}de.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];be.push(new Ne(e,t)),1!==be.length||xe||ge(ve)},Ne.prototype.run=function(){this.fun.apply(null,this.array)},de.title="browser",de.browser=!0,de.env={},de.argv=[],de.version="",de.versions={},de.on=Se,de.addListener=Se,de.once=Se,de.off=Se,de.removeListener=Se,de.removeAllListeners=Se,de.emit=Se,de.prependListener=Se,de.prependOnceListener=Se,de.listeners=function(e){return[]},de.binding=function(e){throw new Error("process.binding is not supported")},de.cwd=function(){return"/"},de.chdir=function(e){throw new Error("process.chdir is not supported")},de.umask=function(){return 0};const $e="Cast",Ce="Identity",Ae="Tile",_e="Transpose",Re="_FusedMatMul",De="FusedConv2D",Fe="FusedDepthwiseConv2D";function Oe(...e){ue().getBool("IS_TEST")||ue().getBool("PROD")||console.warn(...e)}const Me=Ee("kernelRegistry",(()=>new Map)),Le=Ee("gradRegistry",(()=>new Map));function ze(e,t){const n=We(e,t);return Me.get(n)}function Be(e){return Le.get(e)}function Pe(e){const t=Me.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function We(e,t){return`${t}_${e}`}var Ve={};t(Ve,"createScalarValue",(()=>$t)),t(Ve,"encodeString",(()=>Rt)),t(Ve,"toTypedArray",(()=>Ct)),t(Ve,"now",(()=>At)),t(Ve,"fetch",(()=>_t)),t(Ve,"decodeString",(()=>Dt));var Ue={};t(Ue,"hexToLong",(()=>gt)),t(Ue,"fingerPrint64",(()=>Et));var Ge;Ge=qe;var He=null;try{He=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function qe(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function je(e){return!0===(e&&e.__isLong__)}qe.prototype.__isLong__,Object.defineProperty(qe.prototype,"__isLong__",{value:!0}),qe.isLong=je;var Ke={},Xe={};function Ye(e,t){var n,r,s;return t?(s=0<=(e>>>=0)&&e<256)&&(r=Xe[e])?r:(n=Je(e,(0|e)<0?-1:0,!0),s&&(Xe[e]=n),n):(s=-128<=(e|=0)&&e<128)&&(r=Ke[e])?r:(n=Je(e,e<0?-1:0,!1),s&&(Ke[e]=n),n)}function Ze(e,t){if(isNaN(e))return t?it:ot;if(t){if(e<0)return it;if(e>=rt)return ht}else{if(e<=-st)return dt;if(e+1>=st)return pt}return e<0?Ze(-e,t).neg():Je(e%nt|0,e/nt|0,t)}function Je(e,t,n){return new qe(e,t,n)}qe.fromInt=Ye,qe.fromNumber=Ze,qe.fromBits=Je;var Qe=Math.pow;function et(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return ot;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return et(e.substring(1),t,n).neg();for(var s=Ze(Qe(n,8)),a=ot,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),u=parseInt(e.substring(o,o+i),n);if(i<8){var l=Ze(Qe(n,i));a=a.mul(l).add(Ze(u))}else a=(a=a.mul(s)).add(Ze(u))}return a.unsigned=t,a}function tt(e,t){return"number"==typeof e?Ze(e,t):"string"==typeof e?et(e,t):Je(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}qe.fromString=et,qe.fromValue=tt;var nt=4294967296,rt=nt*nt,st=rt/2,at=Ye(16777216),ot=Ye(0);qe.ZERO=ot;var it=Ye(0,!0);qe.UZERO=it;var ut=Ye(1);qe.ONE=ut;var lt=Ye(1,!0);qe.UONE=lt;var ct=Ye(-1);qe.NEG_ONE=ct;var pt=Je(-1,2147483647,!1);qe.MAX_VALUE=pt;var ht=Je(-1,-1,!0);qe.MAX_UNSIGNED_VALUE=ht;var dt=Je(0,-2147483648,!1);qe.MIN_VALUE=dt;var ft=qe.prototype;ft.toInt=function(){return this.unsigned?this.low>>>0:this.low},ft.toNumber=function(){return this.unsigned?(this.high>>>0)*nt+(this.low>>>0):this.high*nt+(this.low>>>0)},ft.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(dt)){var t=Ze(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=Ze(Qe(e,6),this.unsigned),a=this,o="";;){var i=a.div(s),u=(a.sub(i.mul(s)).toInt()>>>0).toString(e);if((a=i).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},ft.getHighBits=function(){return this.high},ft.getHighBitsUnsigned=function(){return this.high>>>0},ft.getLowBits=function(){return this.low},ft.getLowBitsUnsigned=function(){return this.low>>>0},ft.getNumBitsAbs=function(){if(this.isNegative())return this.eq(dt)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},ft.isZero=function(){return 0===this.high&&0===this.low},ft.eqz=ft.isZero,ft.isNegative=function(){return!this.unsigned&&this.high<0},ft.isPositive=function(){return this.unsigned||this.high>=0},ft.isOdd=function(){return 1==(1&this.low)},ft.isEven=function(){return 0==(1&this.low)},ft.equals=function(e){return je(e)||(e=tt(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},ft.eq=ft.equals,ft.notEquals=function(e){return!this.eq(e)},ft.neq=ft.notEquals,ft.ne=ft.notEquals,ft.lessThan=function(e){return this.comp(e)<0},ft.lt=ft.lessThan,ft.lessThanOrEqual=function(e){return this.comp(e)<=0},ft.lte=ft.lessThanOrEqual,ft.le=ft.lessThanOrEqual,ft.greaterThan=function(e){return this.comp(e)>0},ft.gt=ft.greaterThan,ft.greaterThanOrEqual=function(e){return this.comp(e)>=0},ft.gte=ft.greaterThanOrEqual,ft.ge=ft.greaterThanOrEqual,ft.compare=function(e){if(je(e)||(e=tt(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},ft.comp=ft.compare,ft.negate=function(){return!this.unsigned&&this.eq(dt)?dt:this.not().add(ut)},ft.neg=ft.negate,ft.add=function(e){je(e)||(e=tt(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=0,l=0,c=0,p=0;return c+=(p+=s+(65535&e.low))>>>16,l+=(c+=r+i)>>>16,u+=(l+=n+o)>>>16,u+=t+a,Je((c&=65535)<<16|(p&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},ft.subtract=function(e){return je(e)||(e=tt(e)),this.add(e.neg())},ft.sub=ft.subtract,ft.multiply=function(e){if(this.isZero())return ot;if(je(e)||(e=tt(e)),He)return Je(He.mul(this.low,this.high,e.low,e.high),He.get_high(),this.unsigned);if(e.isZero())return ot;if(this.eq(dt))return e.isOdd()?dt:ot;if(e.eq(dt))return this.isOdd()?dt:ot;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(at)&&e.lt(at))return Ze(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=65535&e.low,l=0,c=0,p=0,h=0;return p+=(h+=s*u)>>>16,c+=(p+=r*u)>>>16,p&=65535,c+=(p+=s*i)>>>16,l+=(c+=n*u)>>>16,c&=65535,l+=(c+=r*i)>>>16,c&=65535,l+=(c+=s*o)>>>16,l+=t*u+n*i+r*o+s*a,Je((p&=65535)<<16|(h&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},ft.mul=ft.multiply,ft.divide=function(e){if(je(e)||(e=tt(e)),e.isZero())throw Error("division by zero");var t,n,r;if(He)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?Je((this.unsigned?He.div_u:He.div_s)(this.low,this.high,e.low,e.high),He.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?it:ot;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return it;if(e.gt(this.shru(1)))return lt;r=it}else{if(this.eq(dt))return e.eq(ut)||e.eq(ct)?dt:e.eq(dt)?ut:(t=this.shr(1).div(e).shl(1)).eq(ot)?e.isNegative()?ut:ct:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(dt))return this.unsigned?it:ot;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=ot}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),a=s<=48?1:Qe(2,s-48),o=Ze(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=Ze(t-=a,this.unsigned)).mul(e);o.isZero()&&(o=ut),r=r.add(o),n=n.sub(i)}return r},ft.div=ft.divide,ft.modulo=function(e){return je(e)||(e=tt(e)),He?Je((this.unsigned?He.rem_u:He.rem_s)(this.low,this.high,e.low,e.high),He.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},ft.mod=ft.modulo,ft.rem=ft.modulo,ft.not=function(){return Je(~this.low,~this.high,this.unsigned)},ft.and=function(e){return je(e)||(e=tt(e)),Je(this.low&e.low,this.high&e.high,this.unsigned)},ft.or=function(e){return je(e)||(e=tt(e)),Je(this.low|e.low,this.high|e.high,this.unsigned)},ft.xor=function(e){return je(e)||(e=tt(e)),Je(this.low^e.low,this.high^e.high,this.unsigned)},ft.shiftLeft=function(e){return je(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Je(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Je(0,this.low<<e-32,this.unsigned)},ft.shl=ft.shiftLeft,ft.shiftRight=function(e){return je(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Je(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Je(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},ft.shr=ft.shiftRight,ft.shiftRightUnsigned=function(e){if(je(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?Je(this.low>>>e|t<<32-e,t>>>e,this.unsigned):Je(32===e?t:t>>>e-32,0,this.unsigned)},ft.shru=ft.shiftRightUnsigned,ft.shr_u=ft.shiftRightUnsigned,ft.toSigned=function(){return this.unsigned?Je(this.low,this.high,!1):this},ft.toUnsigned=function(){return this.unsigned?this:Je(this.low,this.high,!0)},ft.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},ft.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},ft.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},qe.fromBytes=function(e,t,n){return n?qe.fromBytesLE(e,t):qe.fromBytesBE(e,t)},qe.fromBytesLE=function(e,t){return new qe(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},qe.fromBytesBE=function(e,t){return new qe(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const mt=Ge.default||Ge;function gt(e){return mt.fromString(e,!0,16)}const yt=gt("c3a5c85c97cb3127"),bt=gt("b492b66fbe98f273"),xt=gt("9ae16a3b2f90404f");function wt(e){return e.xor(e.shru(47))}function kt(e,t,n){const r=e.slice(t,t+n);return mt.fromBytes(Array.from(r),!0,!0)}function vt(e,t){return kt(e,t,8)}function Nt(e,t){return kt(e,t,4)}function St(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function It(e,t,n=gt("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function Tt(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=St(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(St(s,44)),[s.add(r),a.add(o)]}(vt(e,t),vt(e,t+8),vt(e,t+16),vt(e,t+24),n,r)}function Et(e,t=e.length){const n=mt.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=xt.add(2*t),r=vt(e,0).add(xt),s=vt(e,t-8);return It(St(s,37).mul(n).add(r),St(r,25).add(s).mul(n),n)}if(t>=4){const n=xt.add(2*t);return It(Nt(e,0).shl(3).add(t),Nt(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return wt(xt.mul(n).xor(yt.mul(r))).mul(xt)}return xt}(e,t):function(e,t=e.length){const n=xt.add(2*t),r=vt(e,0).mul(bt),s=vt(e,8),a=vt(e,t-8).mul(n),o=vt(e,t-16).mul(xt);return It(St(r.add(s),43).add(St(a,30)).add(o),r.add(St(s.add(xt),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=xt.add(2*t),r=vt(e,0).mul(xt),s=vt(e,8),a=vt(e,t-8).mul(n),o=vt(e,t-16).mul(xt),i=St(r.add(s),43).add(St(a,30)).add(o),u=It(i,r.add(St(s.add(xt),18)).add(a),n),l=vt(e,16).mul(n),c=vt(e,24),p=i.add(vt(e,t-32)).mul(n),h=u.add(vt(e,t-24)).mul(n);return It(St(l.add(c),43).add(St(p,30)).add(h),l.add(St(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(bt).add(113),a=wt(s.mul(xt).add(113)).mul(xt),o=[mt.UZERO,mt.UZERO],i=[mt.UZERO,mt.UZERO];r=r.mul(xt).add(vt(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=St(r.add(s).add(o[0]).add(vt(e,u+8)),37).mul(bt),s=St(s.add(o[1]).add(vt(e,u+48)),42).mul(bt),r=r.xor(i[1]),s=s.add(o[0]).add(vt(e,u+40)),a=St(a.add(i[0]),33).mul(bt),o=Tt(e,u,o[1].mul(bt),r.add(i[0])),i=Tt(e,u+32,a.add(i[1]),s.add(vt(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const p=bt.add(a.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=St(r.add(s).add(o[0]).add(vt(e,u+8)),37).mul(p),s=St(s.add(o[1]).add(vt(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(vt(e,u+40))),a=St(a.add(i[0]),33).mul(p),o=Tt(e,u,o[1].mul(p),r.add(i[0])),i=Tt(e,u+32,a.add(i[1]),s.add(vt(e,u+16))),[a,r]=[r,a],It(It(o[0],i[0],p).add(wt(s).mul(yt)).add(a),It(o[1],i[1],p).add(r),p)}function $t(e,t){return"string"===t?Rt(e):Ct([e],t)}function Ct(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=v(e)),ue().getBool("DEBUG")&&L(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function At(){return ue().platform.now()}function _t(e,t){return ue().platform.fetch(e,t)}function Rt(e,t="utf-8"){return t=t||"utf-8",ue().platform.encode(e,t)}function Dt(e,t="utf-8"){return t=t||"utf-8",ue().platform.decode(e,t)}n(Ve,c),n(Ve,Ue);class Ft{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Mt)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=At();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:At()-o})}if(ue().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Ot(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function Ot(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Mt{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?A(`${r}ms`,9):r.error,i=A(e,25),u=t.rank,l=t.size,c=A(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Lt(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function zt(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!I(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function Bt(e,t,n,r){const s=X(t),a=function(e,t,n,r){const s=N(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?Ut(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],Pt(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=Vt(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function Pt(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:U(e)?`'${e}'`:"bool"===n?Wt(e):parseFloat(e.toFixed(7)).toString(),A(r,t)}function Wt(e){return 0===e?"false":"true"}function Vt(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[Pt(Ut(e)[0],0,n)]}return"bool"===n?[Wt(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Ut(r),a=Ut(a)),["["+r.map(((e,t)=>Pt(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Pt(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Ut(e):Array.from(e)).map(((e,t)=>Pt(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...Vt(e.slice(r,a),l,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...Vt(e.slice(r,a),l,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...Vt(e.slice(r,a),l,n,c,s,t===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function Ut(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Gt{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=N(e),null!=n){const e=n.length;x(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(t,this.size),this.strides=X(e)}set(e,...t){0===t.length&&(t=[0]),x(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ht().makeTensor(this.values,this.shape,this.dtype)}}let Ht=null,qt=null,jt=null;class Kt{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=N(e),this.strides=X(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return qt.buffer(this.shape,this.dtype,e)}bufferSync(){return qt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Z(this.shape,e,"complex64"===this.dtype)}arraySync(){return Z(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Ht().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Dt(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Ht().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Ht().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Dt(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ht().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ht().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return qt.print(this,e)}clone(){return this.throwIfDisposed(),qt.clone(this)}toString(e=!1){return Bt(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),qt.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Ht().makeVariable(this,e,t,n)}}Object.defineProperty(Kt,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Ee("Tensor",(()=>Kt));class Xt extends Kt{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!I(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ht().disposeTensor(this),this.dataId=e.dataId,Ht().incRef(this,null)}dispose(){Ht().disposeVariable(this),this.isDisposedInternal=!0}}var Yt,Zt,Jt,Qt,en,tn,nn,rn,sn,an;Object.defineProperty(Xt,Symbol.hasInstance,{value:e=>e instanceof Kt&&null!=e.assign&&e.assign instanceof Function}),(Zt=Yt||(Yt={})).R0="R0",Zt.R1="R1",Zt.R2="R2",Zt.R3="R3",Zt.R4="R4",Zt.R5="R5",Zt.R6="R6",(Qt=Jt||(Jt={})).float32="float32",Qt.int32="int32",Qt.bool="int32",Qt.complex64="complex64",(tn=en||(en={})).float32="float32",tn.int32="int32",tn.bool="bool",tn.complex64="complex64",(rn=nn||(nn={})).float32="float32",rn.int32="float32",rn.bool="float32",rn.complex64="complex64",(an=sn||(sn={})).float32="complex64",an.int32="complex64",an.bool="complex64",an.complex64="complex64";const on={float32:nn,int32:Jt,bool:en,complex64:sn};function un(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return on[e][t]}function ln(e,t){if(e.dtype===t.dtype)return[e,t];const n=un(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function cn(e){const t=[];return pn(e,t,new Set),t}function pn(e,t,n){if(null==e)return;if(e instanceof Kt)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),pn(r,t,n))}}function hn(e){return null!=e.kernelName}class dn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class fn{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new dn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Oe(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Ft(this.backendInstance),!0}setupRegisteredKernels(){Pe(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Pe(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof u||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Oe(`Initialization of backend ${e} failed`),Oe(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return Oe(`Initialization of backend ${e} failed`),Oe(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return fn.nextTensorId++}nextVariableId(){return fn.nextVariableId++}clone(e){const t=gn.runKernel(Ce,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return gn.runKernel($e,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=ze(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=hn(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(hn(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=ze(t,this.backendName);x(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,p=hn(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(u,l,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Be(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(x(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&U(e[0])&&(s=e.map((e=>Rt(e))));const a=r.write(s,t,n),o=new Kt(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=V(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new Kt(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Xt(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*W(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Xt||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*W(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=Be(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Q(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=cn(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(x(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));x(s instanceof Kt,(()=>"The result y returned by f() must be a tensor."));const a=Lt(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=J(N(e),"float32");return gn.makeTensor(t,e,"float32")}(s.shape):n,zt(e,a,(e=>this.tidy(e)),yn);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return x(j(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;x(t.every((e=>e instanceof Kt)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),x(n.value instanceof Kt,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),x(j(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];x(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),x(a.every((e=>e instanceof Kt)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=At(),n=await this.backend.time(e);return n.wallMs=At()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new dn;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function mn(){const e=Te();if(null==e._tfengine){const t=new oe(e);e._tfengine=new fn(t)}var t;return t=e._tfengine.ENV,le=t,Ht=()=>e._tfengine,e._tfengine}fn.nextTensorId=0,fn.nextVariableId=0;const gn=mn();function yn(e,t){const n={a:e,b:t};return gn.runKernel("Add",n)}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const bn=ue();function xn(e,t){let n=e;if(P(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||P(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&ue().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&wn(e,r,[]),r}function wn(e,t,n){if(n=n||[],!Array.isArray(e)&&!P(e))return void x(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));x(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),x(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)wn(e[t],r,n.concat(t))}function kn(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function vn(e,t,n,r="numeric"){if(e instanceof Kt)return kn(r,e.dtype,t,n),e;let s=q(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),kn(r,s,t,n),null==e||!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=xn(e,s);P(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?Ct(e,s):v(e,[],!0);return gn.makeTensor(o,a,s)}function Nn(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>vn(e,`${t}[${s}]`,n,r)))}bn.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),bn.registerFlag("IS_BROWSER",(()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope)),bn.registerFlag("IS_NODE",(()=>void 0!==he&&void 0!==he.versions&&void 0!==he.versions.node)),bn.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),bn.registerFlag("PROD",(()=>!1)),bn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>bn.getBool("DEBUG"))),bn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),bn.registerFlag("IS_TEST",(()=>!1)),bn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),bn.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),bn.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),bn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),bn.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Sn="__op";function In(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Sn;const s=(...e)=>{gn.startScope(n);try{const t=r(...e);return se(t)&&console.error("Cannot return a Promise inside of tidy."),gn.endScope(t),t}catch(e){throw gn.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Tn=In({complex_:function(e,t){const n=vn(e,"real","complex"),r=vn(t,"imag","complex");w(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return gn.runKernel("Complex",s)}});function En(e,t,n,r){if(null==r&&(r=q(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){te(t);const e=N(t),r=N(n);x(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==N(t.slice(e));x(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return P(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Ct(e,r):v(e,[],!0),gn.makeTensor(e,t,r)}function $n(e,t,n){return En(e,t,xn(e,n),n)}const Cn={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var An,_n,Rn;_n=function(e){var t,n,r=Wn(e),s=r[0],a=r[1],o=new Ln(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),i=0,u=a>0?s-4:s;for(n=0;n<u;n+=4)t=Mn[e.charCodeAt(n)]<<18|Mn[e.charCodeAt(n+1)]<<12|Mn[e.charCodeAt(n+2)]<<6|Mn[e.charCodeAt(n+3)],o[i++]=t>>16&255,o[i++]=t>>8&255,o[i++]=255&t;2===a&&(t=Mn[e.charCodeAt(n)]<<2|Mn[e.charCodeAt(n+1)]>>4,o[i++]=255&t);1===a&&(t=Mn[e.charCodeAt(n)]<<10|Mn[e.charCodeAt(n+1)]<<4|Mn[e.charCodeAt(n+2)]>>2,o[i++]=t>>8&255,o[i++]=255&t);return o},Rn=function(e){for(var t,n=e.length,r=n%3,s=[],a=16383,o=0,i=n-r;o<i;o+=a)s.push(Vn(e,o,o+a>i?i:o+a));1===r?(t=e[n-1],s.push(On[t>>2]+On[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],s.push(On[t>>10]+On[t>>4&63]+On[t<<2&63]+"="));return s.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var Dn,Fn,On=[],Mn=[],Ln="undefined"!=typeof Uint8Array?Uint8Array:Array,zn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Bn=0,Pn=zn.length;Bn<Pn;++Bn)On[Bn]=zn[Bn],Mn[zn.charCodeAt(Bn)]=Bn;function Wn(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function Vn(e,t,n){for(var r,s,a=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(On[(s=r)>>18&63]+On[s>>12&63]+On[s>>6&63]+On[63&s]);return a.join("")}Mn["-".charCodeAt(0)]=62,Mn["_".charCodeAt(0)]=63,Dn=function(e,t,n,r,s){var a,o,i=8*s-r-1,u=(1<<i)-1,l=u>>1,c=-7,p=n?s-1:0,h=n?-1:1,d=e[t+p];for(p+=h,a=d&(1<<-c)-1,d>>=-c,c+=i;c>0;a=256*a+e[t+p],p+=h,c-=8);for(o=a&(1<<-c)-1,a>>=-c,c+=r;c>0;o=256*o+e[t+p],p+=h,c-=8);if(0===a)a=1-l;else{if(a===u)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,r),a-=l}return(d?-1:1)*o*Math.pow(2,a-r)},Fn=function(e,t,n,r,s,a){var o,i,u,l=8*a-s-1,c=(1<<l)-1,p=c>>1,h=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),(t+=o+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(o++,u/=2),o+p>=c?(i=0,o=c):o+p>=1?(i=(t*u-1)*Math.pow(2,s),o+=p):(i=t*Math.pow(2,p-1)*Math.pow(2,s),o=0));s>=8;e[n+d]=255&i,d+=f,i/=256,s-=8);for(o=o<<s|i,l+=s;l>0;e[n+d]=255&o,d+=f,o/=256,l-=8);e[n+d-f]|=128*m};const Un="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;An=qn;const Gn=2147483647;function Hn(e){if(e>Gn)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,qn.prototype),t}function qn(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return Xn(e)}return jn(e,t,n)}function jn(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!qn.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|Qn(e,t);let r=Hn(n);const s=r.write(e,t);s!==n&&(r=r.slice(0,s));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Dr(e,Uint8Array)){const t=new Uint8Array(e);return Zn(t.buffer,t.byteOffset,t.byteLength)}return Yn(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Dr(e,ArrayBuffer)||e&&Dr(e.buffer,ArrayBuffer))return Zn(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(Dr(e,SharedArrayBuffer)||e&&Dr(e.buffer,SharedArrayBuffer)))return Zn(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return qn.from(r,t,n);const s=function(e){if(qn.isBuffer(e)){const t=0|Jn(e.length),n=Hn(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Fr(e.length)?Hn(0):Yn(e);if("Buffer"===e.type&&Array.isArray(e.data))return Yn(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return qn.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function Kn(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function Xn(e){return Kn(e),Hn(e<0?0:0|Jn(e))}function Yn(e){const t=e.length<0?0:0|Jn(e.length),n=Hn(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function Zn(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,qn.prototype),r}function Jn(e){if(e>=Gn)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Gn.toString(16)+" bytes");return 0|e}function Qn(e,t){if(qn.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Dr(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Ar(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return _r(e).length;default:if(s)return r?-1:Ar(e).length;t=(""+t).toLowerCase(),s=!0}}function er(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return fr(this,t,n);case"utf8":case"utf-8":return cr(this,t,n);case"ascii":return hr(this,t,n);case"latin1":case"binary":return dr(this,t,n);case"base64":return lr(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return mr(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function tr(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function nr(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Fr(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=qn.from(t,r)),qn.isBuffer(t))return 0===t.length?-1:rr(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):rr(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function rr(e,t,n,r,s){let a,o=1,i=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,i/=2,u/=2,n/=2}function l(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s){let r=-1;for(a=n;a<i;a++)if(l(e,a)===l(t,-1===r?0:a-r)){if(-1===r&&(r=a),a-r+1===u)return r*o}else-1!==r&&(a-=a-r),r=-1}else for(n+u>i&&(n=i-u),a=n;a>=0;a--){let n=!0;for(let r=0;r<u;r++)if(l(e,a+r)!==l(t,r)){n=!1;break}if(n)return a}return-1}function sr(e,t,n,r){n=Number(n)||0;const s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;const a=t.length;let o;for(r>a/2&&(r=a/2),o=0;o<r;++o){const r=parseInt(t.substr(2*o,2),16);if(Fr(r))return o;e[n+o]=r}return o}function ar(e,t,n,r){return Rr(Ar(t,e.length-n),e,n,r)}function or(e,t,n,r){return Rr(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function ir(e,t,n,r){return Rr(_r(t),e,n,r)}function ur(e,t,n,r){return Rr(function(e,t){let n,r,s;const a=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,s=n%256,a.push(s),a.push(r);return a}(t,e.length-n),e,n,r)}function lr(e,t,n){return 0===t&&n===e.length?Rn(e):Rn(e.slice(t,n))}function cr(e,t,n){n=Math.min(e.length,n);const r=[];let s=t;for(;s<n;){const t=e[s];let a=null,o=t>239?4:t>223?3:t>191?2:1;if(s+o<=n){let n,r,i,u;switch(o){case 1:t<128&&(a=t);break;case 2:n=e[s+1],128==(192&n)&&(u=(31&t)<<6|63&n,u>127&&(a=u));break;case 3:n=e[s+1],r=e[s+2],128==(192&n)&&128==(192&r)&&(u=(15&t)<<12|(63&n)<<6|63&r,u>2047&&(u<55296||u>57343)&&(a=u));break;case 4:n=e[s+1],r=e[s+2],i=e[s+3],128==(192&n)&&128==(192&r)&&128==(192&i)&&(u=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&i,u>65535&&u<1114112&&(a=u))}}null===a?(a=65533,o=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),s+=o}return function(e){const t=e.length;if(t<=pr)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=pr));return n}(r)}qn.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),qn.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(qn.prototype,"parent",{enumerable:!0,get:function(){if(qn.isBuffer(this))return this.buffer}}),Object.defineProperty(qn.prototype,"offset",{enumerable:!0,get:function(){if(qn.isBuffer(this))return this.byteOffset}}),qn.poolSize=8192,qn.from=function(e,t,n){return jn(e,t,n)},Object.setPrototypeOf(qn.prototype,Uint8Array.prototype),Object.setPrototypeOf(qn,Uint8Array),qn.alloc=function(e,t,n){return function(e,t,n){return Kn(e),e<=0?Hn(e):void 0!==t?"string"==typeof n?Hn(e).fill(t,n):Hn(e).fill(t):Hn(e)}(e,t,n)},qn.allocUnsafe=function(e){return Xn(e)},qn.allocUnsafeSlow=function(e){return Xn(e)},qn.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==qn.prototype},qn.compare=function(e,t){if(Dr(e,Uint8Array)&&(e=qn.from(e,e.offset,e.byteLength)),Dr(t,Uint8Array)&&(t=qn.from(t,t.offset,t.byteLength)),!qn.isBuffer(e)||!qn.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let s=0,a=Math.min(n,r);s<a;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},qn.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},qn.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return qn.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=qn.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(Dr(t,Uint8Array))s+t.length>r.length?(qn.isBuffer(t)||(t=qn.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else{if(!qn.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,s)}s+=t.length}return r},qn.byteLength=Qn,qn.prototype._isBuffer=!0,qn.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)tr(this,t,t+1);return this},qn.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)tr(this,t,t+3),tr(this,t+1,t+2);return this},qn.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)tr(this,t,t+7),tr(this,t+1,t+6),tr(this,t+2,t+5),tr(this,t+3,t+4);return this},qn.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?cr(this,0,e):er.apply(this,arguments)},qn.prototype.toLocaleString=qn.prototype.toString,qn.prototype.equals=function(e){if(!qn.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===qn.compare(this,e)},qn.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},Un&&(qn.prototype[Un]=qn.prototype.inspect),qn.prototype.compare=function(e,t,n,r,s){if(Dr(e,Uint8Array)&&(e=qn.from(e,e.offset,e.byteLength)),!qn.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(s>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0);const i=Math.min(a,o),u=this.slice(r,s),l=e.slice(t,n);for(let e=0;e<i;++e)if(u[e]!==l[e]){a=u[e],o=l[e];break}return a<o?-1:o<a?1:0},qn.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},qn.prototype.indexOf=function(e,t,n){return nr(this,e,t,n,!0)},qn.prototype.lastIndexOf=function(e,t,n){return nr(this,e,t,n,!1)},qn.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let a=!1;for(;;)switch(r){case"hex":return sr(this,e,t,n);case"utf8":case"utf-8":return ar(this,e,t,n);case"ascii":case"latin1":case"binary":return or(this,e,t,n);case"base64":return ir(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ur(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},qn.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const pr=4096;function hr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function dr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function fr(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let s="";for(let r=t;r<n;++r)s+=Or[e[r]];return s}function mr(e,t,n){const r=e.slice(t,n);let s="";for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}function gr(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function yr(e,t,n,r,s,a){if(!qn.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function br(e,t,n,r,s){Tr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,n}function xr(e,t,n,r,s){Tr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=o,o>>=8,e[n+2]=o,o>>=8,e[n+1]=o,o>>=8,e[n]=o,n+8}function wr(e,t,n,r,s,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function kr(e,t,n,r,s){return t=+t,n>>>=0,s||wr(e,0,n,4),Fn(e,t,n,r,23,4),n+4}function vr(e,t,n,r,s){return t=+t,n>>>=0,s||wr(e,0,n,8),Fn(e,t,n,r,52,8),n+8}qn.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,qn.prototype),r},qn.prototype.readUintLE=qn.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||gr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return r},qn.prototype.readUintBE=qn.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||gr(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},qn.prototype.readUint8=qn.prototype.readUInt8=function(e,t){return e>>>=0,t||gr(e,1,this.length),this[e]},qn.prototype.readUint16LE=qn.prototype.readUInt16LE=function(e,t){return e>>>=0,t||gr(e,2,this.length),this[e]|this[e+1]<<8},qn.prototype.readUint16BE=qn.prototype.readUInt16BE=function(e,t){return e>>>=0,t||gr(e,2,this.length),this[e]<<8|this[e+1]},qn.prototype.readUint32LE=qn.prototype.readUInt32LE=function(e,t){return e>>>=0,t||gr(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},qn.prototype.readUint32BE=qn.prototype.readUInt32BE=function(e,t){return e>>>=0,t||gr(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},qn.prototype.readBigUInt64LE=Mr((function(e){Er(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||$r(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(s)<<BigInt(32))})),qn.prototype.readBigUInt64BE=Mr((function(e){Er(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||$r(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(s)})),qn.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||gr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},qn.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||gr(e,t,this.length);let r=t,s=1,a=this[e+--r];for(;r>0&&(s*=256);)a+=this[e+--r]*s;return s*=128,a>=s&&(a-=Math.pow(2,8*t)),a},qn.prototype.readInt8=function(e,t){return e>>>=0,t||gr(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},qn.prototype.readInt16LE=function(e,t){e>>>=0,t||gr(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},qn.prototype.readInt16BE=function(e,t){e>>>=0,t||gr(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},qn.prototype.readInt32LE=function(e,t){return e>>>=0,t||gr(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},qn.prototype.readInt32BE=function(e,t){return e>>>=0,t||gr(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},qn.prototype.readBigInt64LE=Mr((function(e){Er(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||$r(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),qn.prototype.readBigInt64BE=Mr((function(e){Er(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||$r(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),qn.prototype.readFloatLE=function(e,t){return e>>>=0,t||gr(e,4,this.length),Dn(this,e,!0,23,4)},qn.prototype.readFloatBE=function(e,t){return e>>>=0,t||gr(e,4,this.length),Dn(this,e,!1,23,4)},qn.prototype.readDoubleLE=function(e,t){return e>>>=0,t||gr(e,8,this.length),Dn(this,e,!0,52,8)},qn.prototype.readDoubleBE=function(e,t){return e>>>=0,t||gr(e,8,this.length),Dn(this,e,!1,52,8)},qn.prototype.writeUintLE=qn.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){yr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=1,a=0;for(this[t]=255&e;++a<n&&(s*=256);)this[t+a]=e/s&255;return t+n},qn.prototype.writeUintBE=qn.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){yr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=n-1,a=1;for(this[t+s]=255&e;--s>=0&&(a*=256);)this[t+s]=e/a&255;return t+n},qn.prototype.writeUint8=qn.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,1,255,0),this[t]=255&e,t+1},qn.prototype.writeUint16LE=qn.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},qn.prototype.writeUint16BE=qn.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},qn.prototype.writeUint32LE=qn.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},qn.prototype.writeUint32BE=qn.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},qn.prototype.writeBigUInt64LE=Mr((function(e,t=0){return br(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),qn.prototype.writeBigUInt64BE=Mr((function(e,t=0){return xr(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),qn.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);yr(this,e,t,n,r-1,-r)}let s=0,a=1,o=0;for(this[t]=255&e;++s<n&&(a*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},qn.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);yr(this,e,t,n,r-1,-r)}let s=n-1,a=1,o=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},qn.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},qn.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},qn.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},qn.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},qn.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||yr(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},qn.prototype.writeBigInt64LE=Mr((function(e,t=0){return br(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),qn.prototype.writeBigInt64BE=Mr((function(e,t=0){return xr(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),qn.prototype.writeFloatLE=function(e,t,n){return kr(this,e,t,!0,n)},qn.prototype.writeFloatBE=function(e,t,n){return kr(this,e,t,!1,n)},qn.prototype.writeDoubleLE=function(e,t,n){return vr(this,e,t,!0,n)},qn.prototype.writeDoubleBE=function(e,t,n){return vr(this,e,t,!1,n)},qn.prototype.copy=function(e,t,n,r){if(!qn.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},qn.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!qn.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const a=qn.isBuffer(e)?e:qn.from(e,r),o=a.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=a[s%o]}return this};const Nr={};function Sr(e,t,n){Nr[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Ir(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function Tr(e,t,n,r,s,a){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let s;throw s=a>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(a+1)}${r}`:`>= -(2${r} ** ${8*(a+1)-1}${r}) and < 2 ** ${8*(a+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new Nr.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){Er(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||$r(t,e.length-(n+1))}(r,s,a)}function Er(e,t){if("number"!=typeof e)throw new Nr.ERR_INVALID_ARG_TYPE(t,"number",e)}function $r(e,t,n){if(Math.floor(e)!==e)throw Er(e,n),new Nr.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new Nr.ERR_BUFFER_OUT_OF_BOUNDS;throw new Nr.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}Sr("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Sr("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Sr("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=Ir(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=Ir(s)),s+="n"),r+=` It must be ${t}. Received ${s}`,r}),RangeError);const Cr=/[^+/0-9A-Za-z-_]/g;function Ar(e,t){let n;t=t||1/0;const r=e.length;let s=null;const a=[];for(let o=0;o<r;++o){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function _r(e){return _n(function(e){if((e=(e=e.split("=")[0]).trim().replace(Cr,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Rr(e,t,n,r){let s;for(s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function Dr(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Fr(e){return e!=e}const Or=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let s=0;s<16;++s)t[r+s]=e[n]+e[s]}return t}();function Mr(e){return"undefined"==typeof BigInt?Lr:e}function Lr(){throw new Error("BigInt not supported")}var zr=An;async function Br(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:Wr(await Promise.all(r)),specs:n}}function Pr(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=N(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=Cn[n.dtype],c=e.slice(s,s+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Qr()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=N(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=Cn[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=$n(e,i,"float32"),o=$n(r,i,"float32");n[t]=Tn(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=$n(l,i,o))}return n}function Wr(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Vr=void 0!==zr&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ur(e){return Vr?zr.byteLength(e):new Blob([e]).size}function Gr(e){if(Vr)return zr.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function Hr(e){if(Vr){const t=zr.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function qr(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function jr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Kr(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Xr(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function Yr(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Xr(e,n,r)}function Zr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ur(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ur(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Jr(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Qr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class es{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==es.instance&&(es.instance=new es),es.instance}static registerSaveRouter(e){es.getInstance().saveRouters.push(e)}static registerLoadRouter(e){es.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return es.getHandlers(e,"save")}static getLoadHandlers(e,t){return es.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?es.getInstance().loadRouters:es.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const ts=e=>es.registerSaveRouter(e),ns=e=>es.registerLoadRouter(e),rs=e=>es.getSaveHandlers(e),ss=(e,t)=>es.getLoadHandlers(e,t),as="tensorflowjs",os="models_store",is="model_info_store";function us(){if(!ue().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ls(e){const t=e.result;t.createObjectStore(os,{keyPath:"modelPath"}),t.createObjectStore(is,{keyPath:"modelPath"})}class cs{constructor(e){if(this.indexedDB=us(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(as,1);r.onupgradeneeded=()=>ls(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(os,"readonly"),r=t.objectStore(os).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Zr(t),a=s.transaction(is,"readwrite");let o=a.objectStore(is);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction(os,"readwrite");const i=u.objectStore(os).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore(is);const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}cs.URL_SCHEME="indexeddb://";const ps=e=>{return ue().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(cs.URL_SCHEME)?(t=e.slice(cs.URL_SCHEME.length),new cs(t)):null;var t};es.registerSaveRouter(ps),es.registerLoadRouter(ps);class hs{constructor(){this.indexedDB=us()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(as,1);n.onupgradeneeded=()=>ls(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(is,"readonly"),a=s.objectStore(is).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(cs.URL_SCHEME)?t.slice(cs.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(as,1);r.onupgradeneeded=()=>ls(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(is,"readwrite"),o=a.objectStore(is),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction(os,"readwrite");const r=u.objectStore(os).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const ds="/",fs="tensorflowjs_models",ms="info",gs="model_topology",ys="weight_specs",bs="weight_data",xs="model_metadata";function ws(e){return{info:[fs,e,ms].join(ds),topology:[fs,e,gs].join(ds),weightSpecs:[fs,e,ys].join(ds),weightData:[fs,e,bs].join(ds),modelMetadata:[fs,e,xs].join(ds)}}function ks(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function vs(e){const t=e.split(ds);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(ds)}class Ns{constructor(e){if(!ue().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ws(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Zr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Gr(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw ks(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Hr(a),t}}Ns.URL_SCHEME="localstorage://";const Ss=e=>{return ue().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ns.URL_SCHEME)?(t=e.slice(Ns.URL_SCHEME.length),new Ns(t)):null;var t};es.registerSaveRouter(Ss),es.registerLoadRouter(Ss);class Is{constructor(){x(ue().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),x("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=fs+ds,n=ds+ms;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[vs(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=ws(e=(t=e).startsWith(Ns.URL_SCHEME)?t.slice(Ns.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return ks(n),r}}const Ts="://";class Es{constructor(){this.managers={}}static getInstance(){return null==Es.instance&&(Es.instance=new Es),Es.instance}static registerManager(e,t){x(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Ts)&&(e=e.slice(0,e.indexOf(Ts))),x(e.length>0,(()=>"scheme must not be an empty string."));const n=Es.getInstance();x(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Es.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Es.getInstance().managers)}}function $s(e){if(-1===e.indexOf(Ts))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Es.getSchemes().join(",")}`);return{scheme:e.split(Ts)[0],path:e.split(Ts)[1]}}async function Cs(e,t,n=!1){x(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=es.getLoadHandlers(e);x(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),x(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=es.getSaveHandlers(t);x(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),x(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=$s(e).scheme,u=$s(e).path,l=i===$s(e).scheme,c=await s.load();n&&l&&await Es.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await Es.getManager(i).removeModel(u),p.modelArtifactsInfo}async function As(){const e=Es.getSchemes(),t={};for(const n of e){const e=await Es.getManager(n).listModels();for(const r in e){t[n+Ts+r]=e[r]}}return t}async function _s(e){const t=$s(e);return Es.getManager(t.scheme).removeModel(t.path)}async function Rs(e,t){return Cs(e,t,!1)}async function Ds(e,t){return Cs(e,t,!0)}class Fs{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&ue().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(ue().get("IS_BROWSER")){ue().setPlatform("browser",new Fs);try{Es.registerManager(Ns.URL_SCHEME,new Is)}catch(e){}try{Es.registerManager(cs.URL_SCHEME,new hs)}catch(e){}}const Os=()=>a("foUwZ");let Ms;function Ls(e,t="float32",n){return t=t||"float32",te(e),new Gt(e,t,n)}ue().get("IS_NODE")&&!ue().get("IS_BROWSER")&&ue().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=ue().global.fetch?ue().global.fetch(e,t):(null==Ms&&(Ms=Os()),Ms(e,t))}now(){const e=he.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const zs=In({cast_:function(e,t){const n=vn(e,"x","cast");if(!z(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return gn.runKernel($e,r,s)}});const Bs=In({clone_:function(e){const t={x:vn(e,"x","clone","string_or_numeric")};return gn.runKernel(Ce,t)}});function Ps(e,t=!1){console.log(e.toString(t))}mn();qt={buffer:Ls,cast:zs,clone:Bs,print:Ps};var Ws={};t(Ws,"copyModel",(()=>Rs)),t(Ws,"listModels",(()=>As)),t(Ws,"moveModel",(()=>Ds)),t(Ws,"removeModel",(()=>_s)),t(Ws,"browserFiles",(()=>Hs)),t(Ws,"browserHTTPRequest",(()=>ea)),t(Ws,"concatenateArrayBuffers",(()=>qr)),t(Ws,"decodeWeights",(()=>Pr)),t(Ws,"encodeWeights",(()=>Br)),t(Ws,"fromMemory",(()=>sa)),t(Ws,"fromMemorySync",(()=>aa)),t(Ws,"getLoadHandlers",(()=>ss)),t(Ws,"getModelArtifactsForJSON",(()=>Yr)),t(Ws,"getModelArtifactsForJSONSync",(()=>Xr)),t(Ws,"getModelArtifactsInfoForJSON",(()=>Zr)),t(Ws,"getSaveHandlers",(()=>rs)),t(Ws,"getWeightSpecs",(()=>Jr)),t(Ws,"http",(()=>Qs)),t(Ws,"isHTTPScheme",(()=>Zs)),t(Ws,"loadWeights",(()=>Ks)),t(Ws,"registerLoadRouter",(()=>ns)),t(Ws,"registerSaveRouter",(()=>ts)),t(Ws,"weightsLoaderFactory",(()=>Xs)),t(Ws,"withSaveHandler",(()=>oa)),t(Ws,"withSaveHandlerSync",(()=>ia));function Vs(e){return new Promise((e=>setTimeout(e))).then(e)}class Us{constructor(e){if(!ue().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Us.URL_SCHEME)&&(e=e.slice(Us.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Kr(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Vs((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Vs((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Zr(e)}}}}Us.URL_SCHEME="downloads://";class Gs{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Yr(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,qr(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>jr(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=jr(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Hs(e){return new Gs(e)}function qs(e,t,n,r){!function(e){x(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){x(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),x(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),x(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function js(e,t){null==t&&(t={});const n=null==t.fetchFunc?ue().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await qs(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await qs(s,t.onProgress,.5,1)}async function Ks(e,t="",n,r){return Xs((e=>js(e,{requestInit:r})))(e,t,n)}function Xs(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=Cn[u]*N(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=Pr(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}es.registerSaveRouter((e=>ue().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Us.URL_SCHEME)?function(e="model"){return new Us(e)}(e.slice(Us.URL_SCHEME.length)):null));class Ys{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(x("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=ue().platform.fetch,x(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&x(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Kr(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Zr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Yr(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Jr(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,qr(await js(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Zs(e){return null!=e.match(Ys.URL_SCHEME_REGEX)}Ys.URL_SCHEME_REGEX=/^https?:\/\//;const Js=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Zs(e))):Zs(e),n)return Qs(e,t)}return null};function Qs(e,t){return new Ys(e,t)}function ea(e,t){return Qs(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */es.registerSaveRouter(Js),es.registerLoadRouter(Js);class ta{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class na{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class ra{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function sa(e,t,n,r){const s=arguments;return new ra(aa(...s))}function aa(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new ta(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ta({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ta({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function oa(e){return new na(e)}function ia(e){return new na(e)}var ua={};t(ua,"spectral",(()=>Pc)),t(ua,"signal",(()=>Wc)),t(ua,"image",(()=>Vc)),t(ua,"linalg",(()=>Uc)),t(ua,"losses",(()=>Gc)),t(ua,"sparse",(()=>Hc)),t(ua,"string",(()=>qc)),t(ua,"abs",(()=>ni)),t(ua,"acos",(()=>Xi)),t(ua,"acosh",(()=>Yi)),t(ua,"add",(()=>Ta)),t(ua,"addN",(()=>Zi)),t(ua,"all",(()=>Ji)),t(ua,"any",(()=>Qi)),t(ua,"argMax",(()=>eu)),t(ua,"argMin",(()=>tu)),t(ua,"asin",(()=>nu)),t(ua,"asinh",(()=>ru)),t(ua,"atan",(()=>su)),t(ua,"atan2",(()=>au)),t(ua,"atanh",(()=>ou)),t(ua,"avgPool",(()=>iu)),t(ua,"avgPool3d",(()=>uu)),t(ua,"basicLSTMCell",(()=>cu)),t(ua,"batchToSpaceND",(()=>pu)),t(ua,"batchNorm",(()=>du)),t(ua,"batchNorm2d",(()=>fu)),t(ua,"batchNorm3d",(()=>mu)),t(ua,"batchNorm4d",(()=>gu)),t(ua,"bincount",(()=>zo)),t(ua,"broadcastArgs",(()=>yu)),t(ua,"broadcastTo",(()=>Ho)),t(ua,"buffer",(()=>Ls)),t(ua,"cast",(()=>zs)),t(ua,"ceil",(()=>bu)),t(ua,"clipByValue",(()=>xu)),t(ua,"clone",(()=>Bs)),t(ua,"complex",(()=>Tn)),t(ua,"concat",(()=>la)),t(ua,"concat1d",(()=>wu)),t(ua,"concat2d",(()=>ku)),t(ua,"concat3d",(()=>vu)),t(ua,"concat4d",(()=>Nu)),t(ua,"conv1d",(()=>Su)),t(ua,"conv2d",(()=>Ma)),t(ua,"conv2dTranspose",(()=>Iu)),t(ua,"conv3d",(()=>Tu)),t(ua,"conv3dTranspose",(()=>$u)),t(ua,"cos",(()=>Cu)),t(ua,"cosh",(()=>Au)),t(ua,"cumprod",(()=>_u)),t(ua,"cumsum",(()=>Ru)),t(ua,"denseBincount",(()=>Du)),t(ua,"depthToSpace",(()=>Fu)),t(ua,"depthwiseConv2d",(()=>Ja)),t(ua,"diag",(()=>Ou)),t(ua,"dilation2d",(()=>Mu)),t(ua,"div",(()=>Vo)),t(ua,"divNoNan",(()=>zu)),t(ua,"dot",(()=>Bu)),t(ua,"einsum",(()=>Pu)),t(ua,"elu",(()=>Ba)),t(ua,"equal",(()=>Lu)),t(ua,"erf",(()=>Wu)),t(ua,"euclideanNorm",(()=>Vu)),t(ua,"exp",(()=>Li)),t(ua,"expandDims",(()=>mi)),t(ua,"expm1",(()=>Uu)),t(ua,"eye",(()=>gi)),t(ua,"fill",(()=>co)),t(ua,"floor",(()=>Gu)),t(ua,"floorDiv",(()=>Wo)),t(ua,"gather",(()=>Hu)),t(ua,"greater",(()=>Po)),t(ua,"greaterEqual",(()=>Yo)),t(ua,"imag",(()=>ca)),t(ua,"isFinite",(()=>qu)),t(ua,"isInf",(()=>ju)),t(ua,"isNaN",(()=>Ku)),t(ua,"leakyRelu",(()=>Pa)),t(ua,"less",(()=>Xu)),t(ua,"lessEqual",(()=>Bo)),t(ua,"linspace",(()=>Yu)),t(ua,"localResponseNormalization",(()=>Zu)),t(ua,"log",(()=>Di)),t(ua,"log1p",(()=>zi)),t(ua,"logSigmoid",(()=>Qu)),t(ua,"logSoftmax",(()=>el)),t(ua,"logSumExp",(()=>Pi)),t(ua,"logicalAnd",(()=>Zo)),t(ua,"logicalNot",(()=>tl)),t(ua,"logicalOr",(()=>nl)),t(ua,"logicalXor",(()=>rl)),t(ua,"lowerBound",(()=>il)),t(ua,"matMul",(()=>no)),t(ua,"max",(()=>si)),t(ua,"maxPool",(()=>ul)),t(ua,"maxPool3d",(()=>ll)),t(ua,"maxPoolWithArgmax",(()=>cl)),t(ua,"maximum",(()=>pl)),t(ua,"mean",(()=>Si)),t(ua,"meshgrid",(()=>hl)),t(ua,"min",(()=>ai)),t(ua,"minimum",(()=>_i)),t(ua,"mirrorPad",(()=>dl)),t(ua,"mod",(()=>fl)),t(ua,"moments",(()=>ml)),t(ua,"mul",(()=>wa)),t(ua,"multiRNNCell",(()=>gl)),t(ua,"multinomial",(()=>yl)),t(ua,"neg",(()=>yi)),t(ua,"notEqual",(()=>Ii)),t(ua,"oneHot",(()=>bl)),t(ua,"ones",(()=>Ti)),t(ua,"onesLike",(()=>xl)),t(ua,"outerProduct",(()=>wl)),t(ua,"pad",(()=>kl)),t(ua,"pad1d",(()=>vl)),t(ua,"pad2d",(()=>Nl)),t(ua,"pad3d",(()=>Sl)),t(ua,"pad4d",(()=>Il)),t(ua,"pool",(()=>El)),t(ua,"pow",(()=>oi)),t(ua,"prelu",(()=>Wa)),t(ua,"print",(()=>Ps)),t(ua,"prod",(()=>$l)),t(ua,"raggedGather",(()=>Cl)),t(ua,"raggedTensorToTensor",(()=>Al)),t(ua,"rand",(()=>_l)),t(ua,"randomGamma",(()=>Ul)),t(ua,"randomNormal",(()=>Gl)),t(ua,"randomStandardNormal",(()=>Hl)),t(ua,"randomUniform",(()=>ql)),t(ua,"range",(()=>jo)),t(ua,"real",(()=>pa)),t(ua,"reciprocal",(()=>jl)),t(ua,"relu",(()=>Va)),t(ua,"relu6",(()=>Ua)),t(ua,"reshape",(()=>ha)),t(ua,"reverse",(()=>ka)),t(ua,"reverse1d",(()=>Kl)),t(ua,"reverse2d",(()=>Xl)),t(ua,"reverse3d",(()=>Yl)),t(ua,"reverse4d",(()=>Zl)),t(ua,"round",(()=>Go)),t(ua,"rsqrt",(()=>Jl)),t(ua,"scalar",(()=>va)),t(ua,"selu",(()=>Ql)),t(ua,"separableConv2d",(()=>ec)),t(ua,"setdiff1dAsync",(()=>tc)),t(ua,"sigmoid",(()=>Ga)),t(ua,"sign",(()=>nc)),t(ua,"sin",(()=>rc)),t(ua,"sinh",(()=>sc)),t(ua,"slice",(()=>da)),t(ua,"slice1d",(()=>ac)),t(ua,"slice2d",(()=>oc)),t(ua,"slice3d",(()=>ic)),t(ua,"slice4d",(()=>uc)),t(ua,"softmax",(()=>lc)),t(ua,"softplus",(()=>Ju)),t(ua,"spaceToBatchND",(()=>Tl)),t(ua,"fft",(()=>ya)),t(ua,"ifft",(()=>xa)),t(ua,"irfft",(()=>Na)),t(ua,"rfft",(()=>ba)),t(ua,"split",(()=>fa)),t(ua,"sqrt",(()=>ii)),t(ua,"square",(()=>ui)),t(ua,"squaredDifference",(()=>Oi)),t(ua,"squeeze",(()=>pi)),t(ua,"stack",(()=>Jo)),t(ua,"step",(()=>Ha)),t(ua,"stridedSlice",(()=>cc)),t(ua,"sub",(()=>Uo)),t(ua,"sum",(()=>qa)),t(ua,"tan",(()=>pc)),t(ua,"tanh",(()=>lu)),t(ua,"tensor",(()=>$n)),t(ua,"tensor1d",(()=>ao)),t(ua,"tensor2d",(()=>po)),t(ua,"tensor3d",(()=>hc)),t(ua,"tensor4d",(()=>dc)),t(ua,"tensor5d",(()=>fc)),t(ua,"tensor6d",(()=>mc)),t(ua,"tile",(()=>yo)),t(ua,"topk",(()=>gc)),t(ua,"truncatedNormal",(()=>yc)),t(ua,"unique",(()=>bc)),t(ua,"unsortedSegmentSum",(()=>xc)),t(ua,"unstack",(()=>Qo)),t(ua,"upperBound",(()=>wc)),t(ua,"variable",(()=>kc)),t(ua,"where",(()=>qo)),t(ua,"whereAsync",(()=>Nc)),t(ua,"zeros",(()=>ma)),t(ua,"zerosLike",(()=>ga)),t(ua,"op",(()=>In)),t(ua,"OP_SCOPE_SUFFIX",(()=>Sn)),t(ua,"fused",(()=>Sa));const la=In({concat_:function(e,t=0){x(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Nn(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Bs(n[0]);const r=n,s={axis:t};return gn.runKernel("Concat",r,s)}});const ca=In({imag_:function(e){const t={input:vn(e,"input","imag")};return gn.runKernel("Imag",t)}});const pa=In({real_:function(e){const t={input:vn(e,"input","real")};return gn.runKernel("Real",t)}});const ha=In({reshape_:function(e,t){const n={x:vn(e,"x","reshape","string_or_numeric")},r={shape:t};return gn.runKernel("Reshape",n,r)}});const da=In({slice_:function(e,t,n){const r=vn(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return gn.runKernel("Slice",s,a)}});const fa=In({split_:function(e,t,n=0){const r={x:vn(e,"x","split")},s={numOrSizeSplits:t,axis:n};return gn.runKernel("SplitV",r,s)}});function ma(e,t="float32"){if("complex64"===t){const t=ma(e,"float32"),n=ma(e,"float32");return Tn(t,n)}const n=Q(N(e),t);return gn.makeTensor(n,e,t)}const ga=In({zerosLike_:function(e){const t={x:vn(e,"x","zerosLike")};return gn.runKernel("ZerosLike",t)}});const ya=In({fft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return gn.runKernel("FFT",t)}});const ba=In({rfft_:function(e,t){x("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=da(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=la([e,ma(r)],e.shape.length-1),n=t}else s=e;const a=ga(s),o=ha(Tn(s,a),[r,n]),i=ya(o),u=Math.floor(n/2)+1,l=pa(i),c=ca(i),p=fa(l,[u,n-u],l.shape.length-1),h=fa(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,ha(Tn(p[0],h[0]),d)}});const xa=In({ifft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return gn.runKernel("IFFT",t)}});const wa=In({mul_:function(e,t){let n=vn(e,"a","mul"),r=vn(t,"b","mul");[n,r]=ln(n,r);const s={a:n,b:r};return gn.runKernel("Multiply",s)}});const ka=In({reverse_:function(e,t){const n={x:vn(e,"x","reverse")},r={dims:t};return gn.runKernel("Reverse",n,r)}});function va(e,t){if((P(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&P(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return En(e,[],[],t)}const Na=In({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=ha(e,[n,t]);r=xa(s)}else{const s=[n,2*(t-1)],a=ha(pa(e),[n,t]),o=ha(ca(e),[n,t]),i=ka(da(a,[0,1],[n,t-2]),1),u=wa(ka(da(o,[0,1],[n,t-2]),1),va(-1)),l=la([a,i],1),c=la([o,u],1),p=ha(Tn(l,c),[s[0],s[1]]);r=xa(p)}if(r=pa(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=ha(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var Sa={};function Ia(e){return gn.customGrad(e)}t(Sa,"conv2d",(()=>Za)),t(Sa,"depthwiseConv2d",(()=>to)),t(Sa,"matMul",(()=>ro));const Ta=In({add_:function(e,t){let n=vn(e,"a","add"),r=vn(t,"b","add");[n,r]=ln(n,r);const s={a:n,b:r};return gn.runKernel("Add",s)}});function Ea(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}function $a(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[h,d,,f]=t,[m,g]=Aa(n),[y,b]=Aa(r),x=_a(h,y),w=_a(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Ca(e,t,n));const a=e[0],o=e[1],i=Ra((a-t+2*r)/n+1,s),u=Ra((o-t+2*r)/n+1,s);return[i,u]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);l={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ra((t-a+h+d)/r+1,i),p=Ra((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[u,S,v,N]:"channelsLast"===i&&(I=[u,v,N,S]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function Ca(e,t,n,r=1){const s=_a(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Aa(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function _a(e,t){return t<=1?e:e+(e-1)*(t-1)}function Ra(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Da(e){const[t,n,r]=Aa(e);return 1===t&&1===n&&1===r}function Fa(e,t){return Da(e)||Da(t)}function Oa(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const Ma=In({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=vn(e,"x","conv2d","float32"),u=vn(t,"filter","conv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=ha(i,[1,i.shape[0],i.shape[1],i.shape[2]])),x(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),Oa("conv2d",r,o);const p="NHWC"===s?l.shape[3]:l.shape[1];x(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),x(Fa(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=gn.runKernel("Conv2D",h,d);return c?ha(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const La=In({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=ha(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ha(t,[1,t.shape[0],t.shape[1],t.shape[2]])),x(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),x(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),x(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];x(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),x(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Oa("conv2dDerFilter",s,o);const p={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return gn.runKernel("Conv2DBackpropFilter",p,h)}});const za=In({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=ha(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),x(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),x(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),x(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];x(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),x(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Oa("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=gn.runKernel("Conv2DBackpropInput",h,d);return l?ha(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Ba=In({elu_:function(e){const t={x:vn(e,"x","elu","float32")};return gn.runKernel("Elu",t)}});const Pa=In({leakyRelu_:function(e,t=.2){const n={x:vn(e,"x","leakyRelu")},r={alpha:t};return gn.runKernel("LeakyRelu",n,r)}});const Wa=In({prelu_:function(e,t){const n={x:vn(e,"x","prelu"),alpha:vn(t,"alpha","prelu")};return gn.runKernel("Prelu",n)}});const Va=In({relu_:function(e){const t={x:vn(e,"x","relu")};return gn.runKernel("Relu",t)}});const Ua=In({relu6_:function(e){const t={x:vn(e,"x","relu6")};return gn.runKernel("Relu6",t)}});const Ga=In({sigmoid_:function(e){const t={x:vn(e,"x","sigmoid","float32")};return gn.runKernel("Sigmoid",t)}});const Ha=In({step_:function(e,t=0){const n={x:vn(e,"x","step")},r={alpha:t};return gn.runKernel("Step",n,r)}});const qa=In({sum_:function(e,t=null,n=!1){let r=vn(e,"x","sum");"bool"===r.dtype&&(r=zs(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return gn.runKernel("Sum",s,a)}});function ja(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return wa(e,Ha(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ka(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(e.shape,t.shape);return r.length>0&&(n=qa(n,r)),ha(n,e.shape)}function Xa(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Va(e);if("elu"===t)return Ba(e);if("relu6"===t)return Ua(e);if("prelu"===t)return Wa(e,n);if("leakyrelu"===t)return Pa(e,r);if("sigmoid"===t)return Ga(e);throw new Error(`Unknown fused activation ${t}.`)}const Ya=(e,t)=>!(e>0)||"linear"===t;const Za=In({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===Ya(gn.state.gradientDepth,u)){x("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=Ma(e,t,n,r,s,a,o);return null!=i&&(p=Ta(p,i)),Xa(p,u,l,c)}const p=vn(e,"x","conv2d","float32"),h=vn(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=ha(p,[1,p.shape[0],p.shape[1],p.shape[2]])),x(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),Oa("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];x(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),x(Fa(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=$a(d.shape,h.shape,n,a,r,o);let y,b;if(null!=i&&(y=vn(i,"bias","fused conv2d"),[y]=ln(y,p),"NHWC"===s?Ea(g.outShape,y.shape):(x(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),x(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(x(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)x(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Ea(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=vn(l,"prelu weights","fused conv2d")}const w=(e,t)=>{x("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,l,c]=t,p=ja(e,l,u);x(Da(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[za(i.shape,p,o,n,r),La(i,p,o.shape,n,r)];if(null!=c){const e=Ka(c,p);h.push(e)}return h},k={x:d,filter:h,bias:y,preluActivationWeights:b},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Ia(((e,t,n)=>{let r=gn.runKernel(De,k,v);return n([t,e,r]),f&&(r=ha(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}));return e(d,h)}{const e=Ia(((e,t,n,r)=>{let s=gn.runKernel(De,k,v);return r([t,e,s,n]),f&&(s=ha(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}));return e(d,h,y)}}});const Ja=In({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=vn(e,"x","depthwiseConv2d","float32"),u=vn(t,"filter","depthwiseConv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=ha(i,[1,i.shape[0],i.shape[1],i.shape[2]])),x(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const p="NHWC"===s?l.shape[3]:l.shape[1];x(p===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Oa("depthwiseConv2d",r,o);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=gn.runKernel("DepthwiseConv2dNative",h,d);return c?ha(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Qa=In({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=ha(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ha(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return gn.runKernel("DepthwiseConv2dNativeBackpropFilter",l,c)}});const eo=In({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=ha(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=gn.runKernel("DepthwiseConv2dNativeBackpropInput",l,c);return u?ha(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const to=In({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===Ya(gn.state.gradientDepth,u)){let p=Ja(e,t,n,r,s,a,o);return null!=i&&(p=Ta(p,i)),Xa(p,u,l,c)}const p=vn(e,"x","depthwiseConv2d","float32"),h=vn(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=ha(p,[1,p.shape[0],p.shape[1],p.shape[2]])),x(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),x(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),x(Fa(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Oa("fused depthwiseConv2d",r,o);const m=$a(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=vn(i,"bias","fused conv2d"),[g]=ln(g,p),Ea(m.outShape,g.shape)),null!=l&&(y=vn(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{x(Da(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,l,c]=t,p=ja(e,l,u),h=eo(i.shape,p,s,n,r,a,o),d=Qa(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,Ka(g,p)]}return[h,d]},w={x:d,filter:h,bias:g,preluActivationWeights:y},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Ia(((e,t,n)=>{let r=gn.runKernel(Fe,w,k);return n([t,e,r]),f&&(r=ha(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=Ia(((e,t,n,r)=>{let s=gn.runKernel(Fe,w,k);return r([t,e,s,n]),f&&(s=ha(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,g)}}});const no=In({matMul_:function(e,t,n=!1,r=!1){let s=vn(e,"a","matMul"),a=vn(t,"b","matMul");[s,a]=ln(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return gn.runKernel("BatchMatMul",o,i)}});const ro=In({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Ya(gn.state.gradientDepth,a)){let u=no(e,t,n,r);return null!=s&&(u=Ta(u,s)),Xa(u,a,o,i)}let u=vn(e,"a","fused matMul"),l=vn(t,"b","fused matMul");[u,l]=ln(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],p=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=N(f),y=N(m);x(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=Ea(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,d]),w=ha(u,n?[g,c,h]:[g,h,c]),k=ha(l,r?[y,d,p]:[y,p,d]);let v,S;null!=s&&(v=vn(s,"bias","fused matMul"),[v]=ln(v,u),Ea(b,v.shape)),null!=o&&(S=vn(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,u,l]=t,c=ja(ha(e,u.shape),u,a);let p,h;if(n||r?!n&&r?(p=no(c,i,!1,!1),h=no(c,o,!0,!1)):n&&!r?(p=no(i,c,!1,!0),h=no(o,c,!1,!1)):(p=no(i,c,!0,!0),h=no(c,o,!0,!0)):(p=no(c,i,!1,!0),h=no(o,c,!0,!1)),null!=s){return[p,h,Ka(l,c)]}return[p,h]},T={a:w,b:k,bias:v,preluActivationWeights:S},E={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=Ia(((e,t,n)=>{const r=gn.runKernel(Re,T,E);return n([e,t,r]),{value:ha(r,b),gradFunc:I}}));return e(w,k)}{const e=Ia(((e,t,n,r)=>{const s=gn.runKernel(Re,T,E);return r([e,t,s,n]),{value:ha(s,b),gradFunc:I}}));return e(w,k,v)}}});var so={};function ao(e,t){k(e);const n=xn(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return En(e,null,n,t)}function oo(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function io(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return ao(s,"float32")}t(so,"enclosingPowerOfTwo",(()=>oo)),t(so,"cosineWindow",(()=>io));const uo=In({hammingWindow_:function(e){return io(e,.54,.46)}});const lo=In({hannWindow_:function(e){return io(e,.5,.5)}});function co(e,t,n){const r={shape:e,value:t,dtype:n};return gn.runKernel("Fill",{},r)}function po(e,t,n){if(k(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=xn(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return En(e,t,r,n)}const ho=In({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(da(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=la([da(e,a,t-r),co([r],s)]);o.push(i),a+=n}return 0===o.length?po([],[0,t]):ha(la(o),[o.length,t])}});const fo=In({stft_:function(e,t,n,r,s=lo){null==r&&(r=oo(t));const a=ho(e,t,n),o=wa(a,s(t));return ba(o,r)}});const mo=In({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=vn(e,"image","cropAndResize"),i=vn(t,"boxes","cropAndResize","float32"),u=vn(n,"boxInd","cropAndResize","int32"),l=i.shape[0];x(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),x(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),x(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),x(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),x(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),x("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return gn.runKernel("CropAndResize",c,p)}});const go=In({flipLeftRight_:function(e){const t=vn(e,"image","flipLeftRight","float32");x(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return gn.runKernel("FlipLeftRight",n,{})}});const yo=In({tile_:function(e,t){const n=vn(e,"x","tile","string_or_numeric");x(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return gn.runKernel(Ae,r,s)}});const bo=In({grayscaleToRGB_:function(e){const t=vn(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];x(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),x(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,yo(t,s)}});const xo=In({rotateWithOffset_:function(e,t,n=0,r=.5){const s=vn(e,"image","rotateWithOffset","float32");x(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return gn.runKernel("RotateWithOffset",a,o)}});function wo(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),x(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),x(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),x(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),x(1===t.rank,(()=>"scores must be a 1D tensor")),x(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),x(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const ko=In({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=vn(e,"boxes","nonMaxSuppression","float32"),o=vn(t,"scores","nonMaxSuppression","float32"),i=wo(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return gn.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function vo(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||No)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function No(e,t){return e>t?1:e<t?-1:0}function So(e,t,n,r,s){return Eo(e,t,n,r,s,0)}function Io(e,t,n,r,s,a){return Eo(e,t,n,r,s,0,!1,a,!0)}function To(e,t,n,r,s,a){return Eo(e,t,n,r,s,a,!0)}function Eo(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Ao);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=$o(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*Co(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&vo(l,t,Ao))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),u&&(m.validOutputs=d),m}function $o(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),f=(p-l)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(u,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Co(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Ao(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const _o=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=vn(e,"boxes","nonMaxSuppressionAsync"),o=vn(t,"scores","nonMaxSuppressionAsync"),i=wo(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=So(l,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),ao(p,"int32")};const Ro=In({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=vn(e,"boxes","nonMaxSuppression"),i=vn(t,"scores","nonMaxSuppression"),u=wo(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=gn.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const Do=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=vn(e,"boxes","nonMaxSuppressionAsync"),i=vn(t,"scores","nonMaxSuppressionAsync"),u=wo(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:h,selectedScores:d}=To(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:ao(h,"int32"),selectedScores:ao(d)}};const Fo=In({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=vn(e,"boxes","nonMaxSuppression"),i=vn(t,"scores","nonMaxSuppression"),u=wo(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=gn.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Oo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=vn(e,"boxes","nonMaxSuppressionAsync"),i=vn(t,"scores","nonMaxSuppressionAsync"),u=wo(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=Io(h,d,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:ao(f,"int32"),validOutputs:va(m,"int32")}};const Mo=In({resizeBilinear_:function(e,t,n=!1,r=!1){const s=vn(e,"images","resizeBilinear");x(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),x(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),x(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ha(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=gn.runKernel("ResizeBilinear",i,u);return o?ha(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Lo=In({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=vn(e,"images","resizeNearestNeighbor");x(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),x(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),x("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),x(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ha(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=gn.runKernel("ResizeNearestNeighbor",i,u);return o?ha(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const zo=In({bincount_:function(e,t,n){const r=vn(e,"x","bincount"),s=vn(t,"weights","bincount");x("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return gn.runKernel("Bincount",a,o)}});const Bo=In({lessEqual_:function(e,t){let n=vn(e,"a","lessEqual","string_or_numeric"),r=vn(t,"b","lessEqual","string_or_numeric");[n,r]=ln(n,r),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("LessEqual",s)}});const Po=In({greater_:function(e,t){let n=vn(e,"a","greater","string_or_numeric"),r=vn(t,"b","greater","string_or_numeric");[n,r]=ln(n,r),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("Greater",s)}});const Wo=In({floorDiv_:function(e,t){let n=vn(e,"a","floorDiv"),r=vn(t,"b","floorDiv");[n,r]=ln(n,r);const s={a:n,b:r};return gn.runKernel("FloorDiv",s)}});const Vo=In({div_:function(e,t){let n=vn(e,"a","div"),r=vn(t,"b","div");if([n,r]=ln(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Wo(n,r);const s={a:n,b:r};return gn.runKernel("RealDiv",s,{})}});const Uo=In({sub_:function(e,t){let n=vn(e,"a","sub"),r=vn(t,"b","sub");[n,r]=ln(n,r);const s={a:n,b:r};return gn.runKernel("Sub",s)}});const Go=In({round_:function(e){const t={x:vn(e,"x","round")};return gn.runKernel("Round",t)}});const Ho=In({broadcastTo_:function(e,t){let n=vn(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ha(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Bs(n);const o={x:n},i={reps:a};return gn.runKernel(Ae,o,i)}});const qo=In({where_:function(e,t,n){const r=vn(t,"a","where"),s=vn(n,"b","where"),a=vn(e,"condition","where","bool"),o=Ea(Ea(a.shape,r.shape),s.shape),i={condition:Ho(a,o),t:Ho(r,o),e:Ho(s,o)};return gn.runKernel("Select",i)}});function jo(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return gn.runKernel("Range",{},s)}const Ko=In({threshold_:function(e,t="binary",n=!1,r=.5){const s=vn(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,c=wa(ao([r]),255);if(x(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),x(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),x("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),x("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=fa(s,[1,1,1],-1);const e=wa(o,.2989),t=wa(i,.587),n=wa(u,.114);l=Ta(Ta(e,t),n)}else l=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,u=ao([-1]),l=ao([0]),c=ao([0]);for(let p=0;p<e.size-1;p++){n=da(e,0,p+1),r=da(e,p+1),o=Vo(qa(n),t),i=Vo(qa(r),t);const h=qa(wa(n,jo(0,n.size)));s=Vo(h,qa(n));const d=co(r.shape,n.size),f=Ta(jo(0,r.size),d),m=wa(r,f);a=Vo(qa(m),qa(r));const g=Uo(s,a),y=Uo(s,a),b=wa(o,i);c=wa(wa(b,g),y);const x=Po(c,l);l=qo(x,c,l),u=qo(x,ao([p]),u)}return u}(zo(zs(Go(l),"int32"),$n([]),256),a)}const p=n?Bo(l,c):Po(l,c);return zs(wa(p,255),"int32")}});const Xo=In({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=vn(e,"image","transform","float32"),i=vn(t,"transforms","transform","float32");x(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),x(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),x(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return gn.runKernel("Transform",u,l)}});const Yo=In({greaterEqual_:function(e,t){let n=vn(e,"a","greaterEqual","string_or_numeric"),r=vn(t,"b","greaterEqual","string_or_numeric");[n,r]=ln(n,r),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("GreaterEqual",s)}});const Zo=In({logicalAnd_:function(e,t){const n=vn(e,"a","logicalAnd","bool"),r=vn(t,"b","logicalAnd","bool");Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("LogicalAnd",s)}});const Jo=In({stack_:function(e,t=0){const n=Nn(e,"tensors","stack","string_or_numeric");x(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&x(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return gn.runKernel("Pack",r,s)}});const Qo=In({unstack_:function(e,t=0){const n=vn(e,"x","unstack","string_or_numeric");x(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return gn.runKernel("Unpack",r,s)}});const ei=In({bandPart_:function(e,t,n){x(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),x(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=vn(e,"a","bandPart");x(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=ha(jo(0,a,1,"int32"),[-1,1]),u=jo(0,o,1,"int32"),l=Uo(i,u),c=Zo(Bo(l,va(+t,"int32")),Yo(l,va(-n,"int32"))),p=ma([a,o],r.dtype);return ha(Jo(Qo(ha(r,[-1,a,o])).map((e=>qo(c,e,p)))),s)}});var ti={};t(ti,"norm",(()=>ci));const ni=In({abs_:function(e){const t=vn(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return gn.runKernel("ComplexAbs",e)}{const e={x:t};return gn.runKernel("Abs",e)}}});function ri(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}(e,t.map((e=>1)),t)}const si=In({max_:function(e,t=null,n=!1){const r={x:vn(e,"x","max")},s={reductionIndices:t,keepDims:n};return gn.runKernel("Max",r,s)}});const ai=In({min_:function(e,t=null,n=!1){const r={x:vn(e,"x","min")},s={axis:t,keepDims:n};return gn.runKernel("Min",r,s)}});const oi=In({pow_:function(e,t){let n=vn(e,"base","pow"),r=vn(t,"exp","pow");[n,r]=ln(n,r);const s={a:n,b:r};return gn.runKernel("Pow",s)}});const ii=In({sqrt_:function(e){const t={x:vn(e,"x","sqrt","float32")};return gn.runKernel("Sqrt",t)}});const ui=In({square_:function(e){const t=vn(e,"x","square");return gn.runKernel("Square",{x:t},{})}});function li(e,t,n=null){if(0===e.rank)return ni(e);if(1!==e.rank&&null===n)return li(ha(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return qa(ni(e),n);if(t===1/0)return si(ni(e),n);if(t===-1/0)return ai(ni(e),n);if("euclidean"===t||2===t)return ii(qa(oi(ni(e),va(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return si(qa(ni(e),n[0]),n[1]-1);if(t===1/0)return si(qa(ni(e),n[1]),n[0]);if(t===-1/0)return ai(qa(ni(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ii(qa(ui(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ci=In({norm_:function(e,t="euclidean",n=null,r=!1){const s=li(e=vn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=D(n,e.shape);a=ri(s.shape,t)}return ha(s,a)}});const pi=In({squeeze_:function(e,t){const n=vn(e,"x","squeeze","string_or_numeric");return ha(n,F(n.shape,t).newShape)}});const hi=In({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,x(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)x(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=fa(e,e.shape[0],0).map((e=>pi(e,[0])));x(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(gn.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=wa(qa(wa(n[r],e)),n[r]);e=Uo(e,t)}return Vo(e,ci(e,"euclidean"))})));return t?Jo(n,0):n}});function di(e,t){return gn.tidy(e,t)}function fi(e){return gn.keep(e)}jt=function(e){ue().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const mi=In({expandDims_:function(e,t=0){const n=vn(e,"x","expandDims","string_or_numeric");x(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return gn.runKernel("ExpandDims",r,s)}});const gi=In({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Ls([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=ha(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return yo(mi(o,0),[n[0],1,1]);if(2===n.length)return yo(mi(mi(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return yo(mi(mi(mi(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const yi=In({neg_:function(e){const t={x:vn(e,"x","neg")};return gn.runKernel("Neg",t)}});var bi={};t(bi,"transpose",(()=>xi));const xi=In({transpose_:function(e,t,n){const r=vn(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),x(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{x(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?di((()=>{let e=pa(r),t=ca(r);return e=gn.runKernel(_e,{x:e},a),t=gn.runKernel(_e,{x:t},a),n&&(t=yi(t)),Tn(e,t)})):gn.runKernel(_e,s,a)}});function wi(e,t=!1){return gn.tidy((()=>{x(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=gi(n),a=Bs(e);const o=po([[1]],[1,1]);let i=Bs(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=gn.tidy((()=>{const t=da(a,[e,e],[n-e,1]),u=ci(t),l=da(a,[e,e],[1,1]),c=qo(Po(l,0),po([[-1]]),po([[1]])),p=Uo(l,wa(c,u)),h=Vo(t,p);i=1===h.shape[0]?Bs(o):la([o,da(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=yi(Vo(no(c,p),u)),f=da(a,[e,0],[n-e,r]),m=wa(d,i),g=xi(i);if(0===e)a=Uo(f,no(m,no(g,f)));else{const t=Uo(f,no(m,no(g,f)));a=la([da(a,[0,0],[e,r]),t],0)}const y=xi(m),b=da(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Uo(b,no(no(b,i),y));else{const t=Uo(b,no(no(b,i),y));s=la([da(s,[0,0],[n,e]),t],1)}return[i,a,s]})),cn([t,u,l]).forEach((e=>e.dispose()))}return!t&&n>r&&(s=da(s,[0,0],[n,r]),a=da(a,[0,0],[r,r])),[s,a]}))}const ki=In({qr_:function(e,t=!1){if(x(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return wi(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Qo(ha(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=wi(e,t);s.push(n),a.push(r)}));return[ha(Jo(s,0),e.shape),ha(Jo(a,0),e.shape)]}}});var vi,Ni;(Ni=vi||(vi={}))[Ni.NONE=0]="NONE",Ni[Ni.MEAN=1]="MEAN",Ni[Ni.SUM=2]="SUM",Ni[Ni.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const Si=In({mean_:function(e,t=null,n=!1){const r={x:vn(e,"x","mean")},s={axis:t,keepDims:n};return gn.runKernel("Mean",r,s)}});const Ii=In({notEqual_:function(e,t){let n=vn(e,"a","notEqual","string_or_numeric"),r=vn(t,"b","notEqual","string_or_numeric");[n,r]=ln(n,r),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("NotEqual",s)}});function Ti(e,t="float32"){if("complex64"===t){const t=Ti(e,"float32"),n=ma(e,"float32");return Tn(t,n)}const n=J(N(e),t);return gn.makeTensor(n,e,t)}const Ei=In({computeWeightedLoss_:function(e,t,n=vi.SUM_BY_NONZERO_WEIGHTS){const r=vn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=vn(t,"weights","computeWeightedLoss"));const a=null==s?r:wa(r,s);if(n===vi.NONE)return a;if(n===vi.SUM)return qa(a);if(n===vi.MEAN){if(null==s)return Si(a);{const e=r.size/s.size,t=Vo(qa(a),qa(s));return e>1?Vo(t,va(e)):t}}if(n===vi.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Vo(qa(a),va(r.size));{const e=wa(s,Ti(r.shape)),t=zs(qa(Ii(e,va(0))),"float32");return Vo(qa(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const $i=In({absoluteDifference_:function(e,t,n,r=vi.SUM_BY_NONZERO_WEIGHTS){const s=vn(e,"labels","absoluteDifference"),a=vn(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=vn(n,"weights","absoluteDifference")),w(s.shape,a.shape,"Error in absoluteDifference: ");const i=ni(Uo(s,a));return Ei(i,o,r)}});const Ci=In({cosineDistance_:function(e,t,n,r,s=vi.SUM_BY_NONZERO_WEIGHTS){const a=vn(e,"labels","cosineDistance"),o=vn(t,"predictions","cosineDistance");let i=null;null!=r&&(i=vn(r,"weights","cosineDistance")),w(a.shape,o.shape,"Error in cosineDistance: ");const u=va(1),l=Uo(u,qa(wa(a,o),n,!0));return Ei(l,i,s)}});const Ai=In({hingeLoss_:function(e,t,n,r=vi.SUM_BY_NONZERO_WEIGHTS){let s=vn(e,"labels","hingeLoss");const a=vn(t,"predictions","hingeLoss");let o=null;null!=n&&(o=vn(n,"weights","hingeLoss")),w(s.shape,a.shape,"Error in hingeLoss: ");const i=va(1);s=Uo(wa(va(2),s),i);const u=Va(Uo(i,wa(s,a)));return Ei(u,o,r)}});const _i=In({minimum_:function(e,t){let n=vn(e,"a","minimum"),r=vn(t,"b","minimum");[n,r]=ln(n,r),"bool"===n.dtype&&(n=zs(n,"int32"),r=zs(r,"int32")),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("Minimum",s)}});const Ri=In({huberLoss_:function(e,t,n,r=1,s=vi.SUM_BY_NONZERO_WEIGHTS){const a=vn(e,"labels","huberLoss"),o=vn(t,"predictions","huberLoss");let i=null;null!=n&&(i=vn(n,"weights","huberLoss")),w(a.shape,o.shape,"Error in huberLoss: ");const u=va(r),l=ni(Uo(o,a)),c=_i(l,u),p=Uo(l,c),h=Ta(wa(va(.5),ui(c)),wa(u,p));return Ei(h,i,s)}});const Di=In({log_:function(e){const t={x:vn(e,"x","log","float32")};return gn.runKernel("Log",t)}});const Fi=In({logLoss_:function(e,t,n,r=1e-7,s=vi.SUM_BY_NONZERO_WEIGHTS){const a=vn(e,"labels","logLoss"),o=vn(t,"predictions","logLoss");let i=null;null!=n&&(i=vn(n,"weights","logLoss")),w(a.shape,o.shape,"Error in logLoss: ");const u=va(1),l=va(r),c=yi(wa(a,Di(Ta(o,l)))),p=wa(Uo(u,a),Di(Ta(Uo(u,o),l))),h=Uo(c,p);return Ei(h,i,s)}});const Oi=In({squaredDifference_:function(e,t){let n=vn(e,"a","squaredDifference"),r=vn(t,"b","squaredDifference");[n,r]=ln(n,r),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("SquaredDifference",s,{})}});const Mi=In({meanSquaredError_:function(e,t,n,r=vi.SUM_BY_NONZERO_WEIGHTS){const s=vn(e,"labels","meanSquaredError"),a=vn(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=vn(n,"weights","meanSquaredError")),w(s.shape,a.shape,"Error in meanSquaredError: ");const i=Oi(s,a);return Ei(i,o,r)}});const Li=In({exp_:function(e){const t={x:vn(e,"x","exp")};return gn.runKernel("Exp",t)}});const zi=In({log1p_:function(e){const t={x:vn(e,"x","log1p")};return gn.runKernel("Log1p",t)}});const Bi=In({sigmoidCrossEntropy_:function(e,t,n,r=0,s=vi.SUM_BY_NONZERO_WEIGHTS){let a=vn(e,"multiClassLabels","sigmoidCrossEntropy");const o=vn(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=vn(n,"weights","sigmoidCrossEntropy")),w(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=va(r),t=va(1),n=va(.5);a=Ta(wa(a,Uo(t,e)),wa(n,e))}const u=function(e,t){const n=vn(e,"labels","sigmoidCrossEntropyWithLogits"),r=vn(t,"logits","sigmoidCrossEntropyWithLogits");w(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Va(r),a=wa(r,n),o=zi(Li(yi(ni(r))));return Ta(Uo(s,a),o)}(a,o);return Ei(u,i,s)}});const Pi=In({logSumExp_:function(e,t=null,n=!1){const r=vn(e,"x","logSumExp"),s=D(t,r.shape),a=si(r,s,!0),o=Uo(r,a),i=Li(o),u=qa(i,s),l=Di(u),c=Ta(ha(a,l.shape),l);if(n){const e=ri(c.shape,s);return ha(c,e)}return c}});const Wi=In({softmaxCrossEntropy_:function(e,t,n,r=0,s=vi.SUM_BY_NONZERO_WEIGHTS){let a=vn(e,"onehotLabels","softmaxCrossEntropy");const o=vn(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=vn(n,"weights","softmaxCrossEntropy")),w(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=va(r),t=va(1),n=va(a.shape[1]);a=Ta(wa(a,Uo(t,e)),Vo(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Ia(((e,t,r)=>{const s=Pi(t,[n],!0),a=Uo(zs(t,"float32"),s);r([e,a]);const o=yi(wa(a,e));return{value:qa(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=ri(e.shape,[n]);return[wa(ha(e,a),Uo(zs(r,"float32"),Li(s))),wa(ha(e,a),Uo(Li(s),zs(r,"float32")))]}}}));return r(e,t)}(a,o);return Ei(u,i,s)}});const Vi=In({sparseFillEmptyRows_:function(e,t,n,r){const s=vn(e,"indices","sparseFillEmptyRows","int32"),a=vn(t,"values","sparseFillEmptyRows"),o=vn(n,"denseShape","sparseFillEmptyRows","int32"),i=vn(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=gn.runKernel("SparseFillEmptyRows",u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Ui=In({sparseReshape_:function(e,t,n){const r=vn(e,"inputIndices","sparseReshape","int32"),s=vn(t,"inputShape","sparseReshape","int32"),a=vn(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=gn.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Gi=In({sparseSegmentMean_:function(e,t,n){const r=vn(e,"data","sparseSegmentMean"),s=vn(t,"indices","sparseSegmentMean","int32"),a=vn(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return gn.runKernel("SparseSegmentMean",o)}});const Hi=In({sparseSegmentSum_:function(e,t,n){const r=vn(e,"data","sparseSegmentSum"),s=vn(t,"indices","sparseSegmentSum","int32"),a=vn(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return gn.runKernel("SparseSegmentSum",o)}});const qi=In({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=vn(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=vn(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},h=gn.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const ji=In({stringSplit_:function(e,t,n=!0){const r=vn(e,"input","stringSplit","string"),s=vn(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=gn.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const Ki=In({stringToHashBucketFast_:function(e,t){const n=vn(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return gn.runKernel("StringToHashBucketFast",s,r)}});const Xi=In({acos_:function(e){const t={x:vn(e,"x","acos")};return gn.runKernel("Acos",t)}});const Yi=In({acosh_:function(e){const t={x:vn(e,"x","acosh")};return gn.runKernel("Acosh",t)}});const Zi=In({addN_:function(e){x(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),x(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>vn(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!I(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return gn.runKernel("AddN",r)}});const Ji=In({all_:function(e,t=null,n=!1){const r={x:vn(e,"x","all","bool")},s={axis:t,keepDims:n};return gn.runKernel("All",r,s)}});const Qi=In({any_:function(e,t=null,n=!1){const r={x:vn(e,"x","any","bool")},s={axis:t,keepDims:n};return gn.runKernel("Any",r,s)}});const eu=In({argMax_:function(e,t=0){const n={x:vn(e,"x","argMax")},r={axis:t};return gn.runKernel("ArgMax",n,r)}});const tu=In({argMin_:function(e,t=0){const n={x:vn(e,"x","argMin")},r={axis:t};return gn.runKernel("ArgMin",n,r)}});const nu=In({asin_:function(e){const t={x:vn(e,"x","asin")};return gn.runKernel("Asin",t)}});const ru=In({asinh_:function(e){const t={x:vn(e,"x","asinh")};return gn.runKernel("Asinh",t)}});const su=In({atan_:function(e){const t={x:vn(e,"x","atan")};return gn.runKernel("Atan",t)}});const au=In({atan2_:function(e,t){let n=vn(e,"a","atan2"),r=vn(t,"b","atan2");[n,r]=ln(n,r);const s={a:n,b:r};return gn.runKernel("Atan2",s)}});const ou=In({atanh_:function(e){const t={x:vn(e,"x","atanh")};return gn.runKernel("Atanh",t)}});const iu=In({avgPool_:function(e,t,n,r,s){const a=vn(e,"x","avgPool","float32");x(Fa(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=ha(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Oa("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=gn.runKernel("AvgPool",u,l);return c=zs(c,a.dtype),i?ha(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const uu=In({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=vn(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=ha(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),x("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Oa("avgPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=gn.runKernel("AvgPool3D",l,c);return p=zs(p,i.dtype),u?ha(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const lu=In({tanh_:function(e){const t={x:vn(e,"x","tanh","float32")};return gn.runKernel("Tanh",t)}});const cu=In({basicLSTMCell_:function(e,t,n,r,s,a){const o=vn(e,"forgetBias","basicLSTMCell"),i=vn(t,"lstmKernel","basicLSTMCell"),u=vn(n,"lstmBias","basicLSTMCell"),l=vn(r,"data","basicLSTMCell"),c=vn(s,"c","basicLSTMCell"),p=vn(a,"h","basicLSTMCell"),h=la([l,p],1),d=no(h,i),f=Ta(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=da(f,[0,0],y),x=da(f,[0,g],y),w=da(f,[0,2*g],y),k=da(f,[0,3*g],y),v=Ta(wa(Ga(b),lu(x)),wa(c,Ga(Ta(o,w))));return[v,wa(lu(v),Ga(k))]}});const pu=In({batchToSpaceND_:function(e,t,n){const r=vn(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));x(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),x(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),x(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return gn.runKernel("BatchToSpaceND",a,o)}});function hu(e){let t;return t=0===e.rank||1===e.rank?ha(e,[1,1,1,e.size]):2===e.rank?ha(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ha(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const du=In({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=vn(e,"x","batchNorm"),i=vn(t,"mean","batchNorm"),u=vn(n,"variance","batchNorm");let l,c;null!=s&&(l=vn(s,"scale","batchNorm")),null!=r&&(c=vn(r,"offset","batchNorm")),x(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),x(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),x(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:hu(o),scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},d=gn.runKernel("FusedBatchNorm",p,h);return ha(d,o.shape)}});const fu=In({batchNorm2d_:function(e,t,n,r,s,a){const o=vn(e,"x","batchNorm"),i=vn(t,"mean","batchNorm"),u=vn(n,"variance","batchNorm");let l,c;return null!=s&&(l=vn(s,"scale","batchNorm")),null!=r&&(c=vn(r,"offset","batchNorm")),x(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),x(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),x(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&x(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&x(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),du(o,i,u,c,l,a)}});const mu=In({batchNorm3d_:function(e,t,n,r,s,a){const o=vn(e,"x","batchNorm"),i=vn(t,"mean","batchNorm"),u=vn(n,"variance","batchNorm");let l,c;return null!=s&&(l=vn(s,"scale","batchNorm")),null!=r&&(c=vn(r,"offset","batchNorm")),x(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),x(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),x(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&x(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&x(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),du(o,i,u,c,l,a)}});const gu=In({batchNorm4d_:function(e,t,n,r,s,a){const o=vn(e,"x","batchNorm"),i=vn(t,"mean","batchNorm"),u=vn(n,"variance","batchNorm");let l,c;return null!=s&&(l=vn(s,"scale","batchNorm")),null!=r&&(c=vn(r,"offset","batchNorm")),x(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),x(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),x(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&x(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&x(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),du(o,i,u,c,l,a)}});const yu=In({broadcastArgs_:function(e,t){const n=vn(e,"s0","broadcastArgs","int32"),r=vn(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return gn.runKernel("BroadcastArgs",s)}});const bu=In({ceil_:function(e){const t={x:vn(e,"x","ceil","float32")};return gn.runKernel("Ceil",t)}});const xu=In({clipByValue_:function(e,t,n){const r=vn(e,"x","clipByValue");if(x(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return co(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return gn.runKernel("ClipByValue",s,a)}});const wu=In({concat1d_:function(e){return la(e,0)}});const ku=In({concat2d_:function(e,t){return la(e,t)}});const vu=In({concat3d_:function(e,t){return la(e,t)}});const Nu=In({concat4d_:function(e,t){return la(e,t)}});const Su=In({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=vn(e,"x","conv1d"),u=vn(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=ha(i,[1,i.shape[0],i.shape[1]])),x(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),x(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),Oa("conv1d",r,o),x(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),x(Fa(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),x("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=ha(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=ha(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Ma(h,p,[1,n],r,"NHWC",[1,a],o);return ha(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Iu=In({conv2dTranspose_:function(e,t,n,r,s,a){const o=vn(e,"x","conv2dTranspose"),i=vn(t,"filter","conv2dTranspose");return za(n,o,i,r,s,"NHWC",a)}});const Tu=In({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=vn(e,"x","conv3d"),i=vn(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=ha(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),x(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),x(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),x(Fa(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=gn.runKernel("Conv3D",c,p);return l?ha(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Eu=In({conv3DBackpropInput_:function(e,t,n,r,s){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=ha(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];x(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),x(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),x(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),x(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),x(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=gn.runKernel("Conv3DBackpropInputV2",c,p);return i?ha(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const $u=In({conv3dTranspose_:function(e,t,n,r,s){const a=vn(e,"x","conv3dTranspose"),o=vn(t,"filter","conv3dTranspose");return Eu(n,a,o,r,s)}});const Cu=In({cos_:function(e){const t={x:vn(e,"x","cos","float32")};return gn.runKernel("Cos",t)}});const Au=In({cosh_:function(e){const t={x:vn(e,"x","cosh","float32")};return gn.runKernel("Cosh",t)}});const _u=In({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:vn(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return gn.runKernel("Cumprod",s,a)}});const Ru=In({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:vn(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return gn.runKernel("Cumsum",s,a)}});const Du=In({denseBincount_:function(e,t,n,r=!1){const s=vn(e,"x","denseBincount"),a=vn(t,"weights","denseBincount");x("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),x(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return gn.runKernel("DenseBincount",o,i)}});const Fu=In({depthToSpace_:function(e,t,n="NHWC"){const r=vn(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];x(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),x(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),x(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),x(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return gn.runKernel("DepthToSpace",i,u)}});const Ou=In({diag_:function(e){const t={x:vn(e,"x","diag")};return gn.runKernel("Diag",t)}});const Mu=In({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=vn(e,"x","dilation2d"),i=vn(t,"filter","dilation2d");x(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),x(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),x("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=ha(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},h=gn.runKernel("Dilation2D",c,p);return l?ha(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Lu=In({equal_:function(e,t){let n=vn(e,"a","equal","string_or_numeric"),r=vn(t,"b","equal","string_or_numeric");[n,r]=ln(n,r),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("Equal",s)}});const zu=In({divNoNan_:function(e,t){let n=vn(e,"a","div"),r=vn(t,"b","div");[n,r]=ln(n,r);const s=Vo(n,r),a=ga(s),o=Lu(r,a);return qo(o,a,s)}});const Bu=In({dot_:function(e,t){const n=vn(e,"t1","dot"),r=vn(t,"t2","dot");x(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(x(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=ha(n,[1,-1]),t=ha(r,[-1,1]),s=no(e,t);return ha(s,[])}if(1===n.rank&&2===r.rank){const e=ha(n,[1,-1]),t=ha(r,[r.shape[0],r.shape[1]]),s=no(e,t);return ha(s,[s.size])}if(2===n.rank&&1===r.rank){const e=ha(r,[-1,1]),t=no(n,e);return ha(t,[t.size])}{const e=ha(r,[r.shape[0],r.shape[1]]);return no(n,e)}}});const Pu=In({einsum_:function(e,...t){const n=t.map(((e,t)=>vn(e,`tensors${t}`,"einsum"))),r={equation:e};return gn.runKernel("Einsum",n,r)}});const Wu=In({erf_:function(e){let t=vn(e,"x","erf");x("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=zs(t,"float32"));const n={x:t};return gn.runKernel("Erf",n)}});const Vu=In({euclideanNorm_:function(e,t=null,n=!1){return ci(e,"euclidean",t,n)}});const Uu=In({expm1_:function(e){const t={x:vn(e,"x","expm1")};return gn.runKernel("Expm1",t)}});const Gu=In({floor_:function(e){const t={x:vn(e,"x","floor","float32")};return gn.runKernel("Floor",t)}});const Hu=In({gather_:function(e,t,n=0,r=0){const s={x:vn(e,"x","gather"),indices:vn(t,"indices","gather","int32")},a={axis:n,batchDims:r};return gn.runKernel("GatherV2",s,a)}});const qu=In({isFinite_:function(e){const t={x:vn(e,"x","isFinite")};return gn.runKernel("IsFinite",t)}});const ju=In({isInf_:function(e){const t={x:vn(e,"x","isInf")};return gn.runKernel("IsInf",t)}});const Ku=In({isNaN_:function(e){const t={x:vn(e,"x","isNaN")};return gn.runKernel("IsNan",t)}});const Xu=In({less_:function(e,t){let n=vn(e,"a","less","string_or_numeric"),r=vn(t,"b","less","string_or_numeric");[n,r]=ln(n,r),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("Less",s)}});function Yu(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return gn.runKernel("LinSpace",{},r)}const Zu=In({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=vn(e,"x","localResponseNormalization");x(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),x(T(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=ha(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=gn.runKernel("LRN",u,l);return i?ha(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Ju=In({softplus_:function(e){const t={x:vn(e,"x","softplus")};return gn.runKernel("Softplus",t)}});const Qu=In({logSigmoid_:function(e){const t=vn(e,"x","logSigmoid"),n=Ia((e=>({value:yi(Ju(yi(e))),gradFunc:t=>wa(t,Ga(yi(e)))})));return n(t)}});const el=In({logSoftmax_:function(e,t=-1){const n=vn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Ia(((e,n)=>{const r=si(e,t,!0),s=Uo(e,r),a=Uo(zs(s,"float32"),Di(qa(Li(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=Li(r);return Uo(e,wa(qa(e,t,!0),s))}}}));return r(n)}});const tl=In({logicalNot_:function(e){const t={x:vn(e,"x","logicalNot","bool")};return gn.runKernel("LogicalNot",t)}});const nl=In({logicalOr_:function(e,t){const n=vn(e,"a","logicalOr","bool"),r=vn(t,"b","logicalOr","bool");Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("LogicalOr",s)}});const rl=In({logicalXor_:function(e,t){const n=vn(e,"a","logicalXor","bool"),r=vn(t,"b","logicalXor","bool");return Ea(n.shape,r.shape),Zo(nl(e,t),tl(Zo(e,t)))}});var sl={};t(sl,"searchSorted",(()=>ol));const al=2147483648;const ol=In({searchSorted_:function(e,t,n="left"){const r=vn(e,"sortedSequence","searchSorted"),s=vn(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=ha(r,[-1,a]),u=ha(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(N(u.shape)>=al)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=al)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},c={side:n};return gn.runKernel("SearchSorted",l,c)}});function il(e,t){return ol(e,t,"left")}const ul=In({maxPool_:function(e,t,n,r,s){const a=vn(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=ha(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),x(Fa(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Oa("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=gn.runKernel("MaxPool",u,l);return i?ha(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ll=In({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=vn(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=ha(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),x("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Oa("maxPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=gn.runKernel("MaxPool3D",l,c);return u?ha(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const cl=In({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:vn(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=gn.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const pl=In({maximum_:function(e,t){let n=vn(e,"a","maximum"),r=vn(t,"b","maximum");[n,r]=ln(n,r),"bool"===n.dtype&&(n=zs(n,"int32"),r=zs(r,"int32")),Ea(n.shape,r.shape);const s={a:n,b:r};return gn.runKernel("Maximum",s)}});function hl(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=vn(e,"x","meshgrid",e instanceof Kt?e.dtype:"float32");if(void 0===t)return[r];let s=vn(t,"y","meshgrid",t instanceof Kt?t.dtype:"float32");const a=N(r.shape),o=N(s.shape);return"xy"===n?(r=ha(r,[1,-1]),s=ha(s,[-1,1]),[no(Ti([o,1],r.dtype),r),no(s,Ti([1,a],s.dtype))]):(r=ha(r,[-1,1]),s=ha(s,[1,-1]),[no(r,Ti([1,o],r.dtype)),no(Ti([a,1],s.dtype),s)])}const dl=In({mirrorPad_:function(e,t,n){x("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=vn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");x(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)x(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),x(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return gn.runKernel("MirrorPad",o,a)}});const fl=In({mod_:function(e,t){let n=vn(e,"a","mod"),r=vn(t,"b","mod");[n,r]=ln(n,r);const s={a:n,b:r};return gn.runKernel("Mod",s)}});const ml=In({moments_:function(e,t=null,n=!1){const r=D(t,(e=vn(e,"x","moments")).shape),s=Si(e,r,n);let a=s.shape;n||(a=ri(s.shape,r));const o=ui(Uo(zs(e,"float32"),ha(s,a)));return{mean:s,variance:Si(o,r,n)}}});const gl=In({multiRNNCell_:function(e,t,n,r){const s=vn(t,"data","multiRNNCell"),a=Nn(n,"c","multiRNNCell"),o=Nn(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const yl=In({multinomial_:function(e,t,n,r=!1){const s=vn(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?ha(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=gn.runKernel("Multinomial",i,u);return 1===o?ha(l,[l.size]):l}});const bl=In({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:vn(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return gn.runKernel("OneHot",a,o)}});const xl=In({onesLike_:function(e){const t={x:vn(e,"x","onesLike")};return gn.runKernel("OnesLike",t)}});const wl=In({outerProduct_:function(e,t){const n=vn(e,"v1","outerProduct"),r=vn(t,"v2","outerProduct");x(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=ha(n,[-1,1]),a=ha(r,[1,-1]);return no(s,a)}});const kl=In({pad_:function(e,t,n=0){const r=vn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return gn.runKernel("PadV2",a,s)}});const vl=In({pad1d_:function(e,t,n=0){return x(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),kl(e,[t],n)}});const Nl=In({pad2d_:function(e,t,n=0){return x(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),kl(e,t,n)}});const Sl=In({pad3d_:function(e,t,n=0){return x(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),kl(e,t,n)}});const Il=In({pad4d_:function(e,t,n=0){return x(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),kl(e,t,n)}});const Tl=In({spaceToBatchND_:function(e,t,n){const r=vn(e,"x","spaceToBatchND");x(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),x(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),x(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return gn.runKernel("SpaceToBatchND",s,a)}});const El=In({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=vn(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=ha(i,[1,i.shape[0],i.shape[1],i.shape[2]])),x(Fa(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=function(e,t,n,r,s,a,o="channelsLast"){const[i,u]=Aa(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return $a(e,l,n,r,s,a,!1,o)}(u.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?u:Tl(u,p,f),b=("avg"===n?()=>iu(y,t,a,g,o):()=>ul(y,t,a,g,o))(),w=d?b:pu(b,p,m);return l?ha(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const $l=In({prod_:function(e,t=null,n=!1){let r=vn(e,"x","prod");"bool"===r.dtype&&(r=zs(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return gn.runKernel("Prod",s,a)}});const Cl=In({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>vn(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:vn(t,"paramsDenseValues","raggedGather"),indices:vn(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=gn.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const Al=In({raggedTensorToTensor_:function(e,t,n,r,s){const a=vn(e,"shape","raggedTensorToTensor","int32"),o=vn(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:vn(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>vn(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return gn.runKernel("RaggedTensorToTensor",i,u)}});const _l=In({rand_:function(e,t,n){const r=N(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return gn.makeTensor(s,e,n)}});var Rl={},Dl=a("gj6Et"),Fl=a("4gDjz"),Ol=a("HLBv4"),Ml=a("ktaoY"),Ll=a("gBs5C"),zl=a("ktLSh"),Bl={};!function(e,t,n){var r,s=256,o=n.pow(s,6),i=n.pow(2,52),u=2*i,l=255;function c(a,l,c){var g=[],y=f(d((l=1==l?{entropy:!0}:l||{}).entropy?[a,m(t)]:null==a?function(){try{var n;return r&&(n=r.randomBytes)?n=n(s):(n=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(n)),m(n)}catch(n){var a=e.navigator,o=a&&a.plugins;return[+new Date,e,o,e.screen,m(t)]}}():a,3),g),b=new p(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*s,t*=s,n=b.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(l.pass||c||function(e,t,r,s){return s&&(s.S&&h(s,b),e.state=function(){return h(b,{})}),r?(n.random=e,t):e})(x,y,"global"in l?l.global:this==n,l.state)}function p(e){var t,n=e.length,r=this,a=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<s;)i[a]=a++;for(a=0;a<s;a++)i[a]=i[o=l&o+e[a%n]+(t=i[a])],i[o]=t;(r.g=function(e){for(var t,n=0,a=r.i,o=r.j,i=r.S;e--;)t=i[a=l&a+1],n=n*s+i[l&(i[a]=i[o=l&o+t])+(i[o]=t)];return r.i=a,r.j=o,n})(s)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(d(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function f(e,t){for(var n,r=e+"",s=0;s<r.length;)t[l&s]=l&(n^=19*t[l&s])+r.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),Bl){Bl=c;try{r=a("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n.seedrandom=c}("undefined"!=typeof self?self:Bl,[],Math),Bl.alea=Dl,Bl.xor128=Fl,Bl.xorwow=Ol,Bl.xorshift7=Ml,Bl.xor4096=Ll,Bl.tychei=zl,Rl=Bl;class Pl{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Rl.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Wl{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Rl.alea(s.toString()),this.randn=new Pl(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Vl{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Rl.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ul=In({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Wl(t,n,r,s),o=Ls(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Gl=In({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Pl(t,n,r,!1,s),o=Ls(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Hl=In({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Gl(e,0,1,t,n)}});const ql=In({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Ls(e,r),o=new Vl(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const jl=In({reciprocal_:function(e){const t={x:vn(e,"x","reciprocal")};return gn.runKernel("Reciprocal",t)}});const Kl=In({reverse1d_:function(e){const t=vn(e,"x","reverse");return x(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),ka(t,0)}});const Xl=In({reverse2d_:function(e,t){const n=vn(e,"x","reverse");return x(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),ka(n,t)}});const Yl=In({reverse3d_:function(e,t){const n=vn(e,"x","reverse");return x(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),ka(n,t)}});const Zl=In({reverse4d_:function(e,t){const n=vn(e,"x","reverse");return x(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),ka(n,t)}});const Jl=In({rsqrt_:function(e){const t={x:vn(e,"x","rsqrt","float32")};return gn.runKernel("Rsqrt",t)}});const Ql=In({selu_:function(e){const t={x:vn(e,"x","selu")};return gn.runKernel("Selu",t)}});const ec=In({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=vn(e,"x","separableConv2d"),u=vn(t,"depthwiseFilter","separableConv2d"),l=vn(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=ha(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");x(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),x(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),x(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),x(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const h=u.shape[2],d=u.shape[3];x(l.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${l.shape[2]}.`));const f=Ja(c,u,r,s,o,a),m=Ma(f,l,1,"valid",o);return p?ha(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const tc=async function(e,t){const n=vn(e,"x","setdiff1d"),r=vn(t,"y","setdiff1d");x(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),x(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),x(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new Gt([i],n.dtype),l=new Gt([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const nc=In({sign_:function(e){const t={x:vn(e,"x","sign")};return gn.runKernel("Sign",t)}});const rc=In({sin_:function(e){const t={x:vn(e,"x","sin","float32")};return gn.runKernel("Sin",t)}});const sc=In({sinh_:function(e){const t={x:vn(e,"x","sinh")};return gn.runKernel("Sinh",t)}});const ac=In({slice1d_:function(e,t,n){const r=vn(e,"x","slice1d");return x(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),da(r,[t],[n])}});const oc=In({slice2d_:function(e,t,n){const r=vn(e,"x","slice2d");return x(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),da(r,t,n)}});const ic=In({slice3d_:function(e,t,n){const r=vn(e,"x","slice3d");return x(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),da(r,t,n)}});const uc=In({slice4d_:function(e,t,n){const r=vn(e,"x","slice4d");return x(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),da(r,t,n)}});const lc=In({softmax_:function(e,t=-1){const n=vn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return gn.runKernel("Softmax",r,s)}});const cc=In({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const l={x:vn(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return gn.runKernel("StridedSlice",l,c)}});const pc=In({tan_:function(e){const t={x:vn(e,"x","tan","float32")};return gn.runKernel("Tan",t)}});function hc(e,t,n){if(k(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=xn(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return En(e,t,r,n)}function dc(e,t,n){if(k(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=xn(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return En(e,t,r,n)}function fc(e,t,n){if(k(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=xn(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return En(e,t,r,n)}function mc(e,t,n){if(k(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=xn(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return En(e,t=t||r,r,n)}const gc=In({topk_:function(e,t=1,n=!0){const r=vn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=gn.runKernel("TopK",a,o);return{values:i,indices:u}}});const yc=In({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Pl(t,n,r,!0,s),o=Ls(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const bc=In({unique_:function(e,t=0){const n=vn(e,"x","unique","string_or_numeric");x(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=gn.runKernel("Unique",r,s);return{values:a,indices:o}}});const xc=In({unsortedSegmentSum_:function(e,t,n){const r=vn(e,"x","unsortedSegmentSum"),s=vn(t,"segmentIds","unsortedSegmentSum","int32");x(T(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return gn.runKernel("UnsortedSegmentSum",a,o)}});function wc(e,t){return ol(e,t,"right")}function kc(e,t=!0,n,r){return gn.makeVariable(e,t,n,r)}function vc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Ls(e,"int32"),s=Ls([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const Nc=async function(e){const t=vn(e,"condition","whereAsync","bool"),n=await t.data(),r=vc(t.shape,n);return e!==t&&t.dispose(),r};var Sc={};t(Sc,"booleanMaskAsync",(()=>Ic));const Ic=async function(e,t,n){const r=vn(e,"tensor","boolMask"),s=vn(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;x(o>0,(()=>"mask cannot be scalar")),w(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=ha(r,l),p=ha(s,[-1]),h=await Nc(p),d=pi(h,[1]),f=Hu(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var Tc={};t(Tc,"movingAverage",(()=>Ec));const Ec=In({movingAverage_:function(e,t,n,r,s=!0){const a=vn(e,"v","movingAverage"),o=vn(t,"x","movingAverage"),i=vn(n,"decay","movingAverage");var u,l;l=o,x((u=a).dtype===l.dtype,(()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`)),x(I(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const c=va(1),p=Uo(c,i);let h=wa(Uo(o,a),p);if(s){x(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=vn(r,"step","movingAverage");h=Vo(h,Uo(c,oi(i,e)))}return Ta(a,h)}});var $c={};function Cc(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}(n,t,e)}t($c,"scatterND",(()=>Ac));const Ac=In({scatterND_:function(e,t,n){const r=vn(e,"indices","scatterND","int32"),s=vn(t,"updates","scatterND");Cc(s,r,n);const a={indices:r,updates:s},o={shape:n};return gn.runKernel("ScatterNd",a,o)}});var _c={};t(_c,"sparseToDense",(()=>Rc));const Rc=In({sparseToDense_:function(e,t,n,r=0){const s=vn(e,"sparseIndices","sparseToDense","int32"),a=vn(t,"sparseValues","sparseToDense","string_or_numeric"),o=vn(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return gn.runKernel("SparseToDense",i,u)}});var Dc={};t(Dc,"gatherND",(()=>Fc));const Fc=In({gatherND_:function(e,t){const n=vn(t,"indices","gatherND","int32"),r={params:vn(e,"x","gatherND","string_or_numeric"),indices:n};return gn.runKernel("GatherNd",r)}});var Oc={};function Mc(e,t){if(null==t)return e.shape.slice();if(I(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(Oc,"dropout",(()=>Lc));const Lc=In({dropout_:function(e,t,n,r){const s=vn(e,"x","dropout");if(x("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),x(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Kt?s.clone():s;const a=Mc(s,n),o=1-t,i=Vo(Gu(Ta(ql(a,0,1,"float32",r),o)),o);return wa(s,i)}});var zc={};t(zc,"inTopKAsync",(()=>Bc));const Bc=async function(e,t,n=1){const r=vn(e,"predictions","inTopK"),s=vn(t,"targets","inTopK");x(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),x(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),w(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];x(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=O("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),$n(c,s.shape,"bool")},Pc={fft:ya,ifft:xa,rfft:ba,irfft:Na},Wc={hammingWindow:uo,hannWindow:lo,frame:ho,stft:fo},Vc={flipLeftRight:go,grayscaleToRGB:bo,resizeNearestNeighbor:Lo,resizeBilinear:Mo,rotateWithOffset:xo,cropAndResize:mo,nonMaxSuppression:ko,nonMaxSuppressionAsync:_o,nonMaxSuppressionWithScore:Ro,nonMaxSuppressionWithScoreAsync:Do,nonMaxSuppressionPadded:Fo,nonMaxSuppressionPaddedAsync:Oo,threshold:Ko,transform:Xo},Uc={bandPart:ei,gramSchmidt:hi,qr:ki},Gc={absoluteDifference:$i,computeWeightedLoss:Ei,cosineDistance:Ci,hingeLoss:Ai,huberLoss:Ri,logLoss:Fi,meanSquaredError:Mi,sigmoidCrossEntropy:Bi,softmaxCrossEntropy:Wi},Hc={sparseFillEmptyRows:Vi,sparseReshape:Ui,sparseSegmentMean:Gi,sparseSegmentSum:Hi},qc={stringNGrams:qi,stringSplit:ji,stringToHashBucketFast:Ki};n(ua,Sc),n(ua,bi),n(ua,ti),n(ua,Tc),n(ua,$c),n(ua,sl),n(ua,_c),n(ua,Dc),n(ua,Oc),n(ua,so),n(ua,zc);var jc,Kc,Xc;ue().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),(Kc=jc||(jc={}))[Kc.DT_INVALID=0]="DT_INVALID",Kc[Kc.DT_FLOAT=1]="DT_FLOAT",Kc[Kc.DT_DOUBLE=2]="DT_DOUBLE",Kc[Kc.DT_INT32=3]="DT_INT32",Kc[Kc.DT_UINT8=4]="DT_UINT8",Kc[Kc.DT_INT16=5]="DT_INT16",Kc[Kc.DT_INT8=6]="DT_INT8",Kc[Kc.DT_STRING=7]="DT_STRING",Kc[Kc.DT_COMPLEX64=8]="DT_COMPLEX64",Kc[Kc.DT_INT64=9]="DT_INT64",Kc[Kc.DT_BOOL=10]="DT_BOOL",Kc[Kc.DT_QINT8=11]="DT_QINT8",Kc[Kc.DT_QUINT8=12]="DT_QUINT8",Kc[Kc.DT_QINT32=13]="DT_QINT32",Kc[Kc.DT_BFLOAT16=14]="DT_BFLOAT16",Kc[Kc.DT_QINT16=15]="DT_QINT16",Kc[Kc.DT_QUINT16=16]="DT_QUINT16",Kc[Kc.DT_UINT16=17]="DT_UINT16",Kc[Kc.DT_COMPLEX128=18]="DT_COMPLEX128",Kc[Kc.DT_HALF=19]="DT_HALF",Kc[Kc.DT_RESOURCE=20]="DT_RESOURCE",Kc[Kc.DT_VARIANT=21]="DT_VARIANT",Kc[Kc.DT_UINT32=22]="DT_UINT32",Kc[Kc.DT_UINT64=23]="DT_UINT64",Kc[Kc.DT_FLOAT_REF=101]="DT_FLOAT_REF",Kc[Kc.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",Kc[Kc.DT_INT32_REF=103]="DT_INT32_REF",Kc[Kc.DT_UINT8_REF=104]="DT_UINT8_REF",Kc[Kc.DT_INT16_REF=105]="DT_INT16_REF",Kc[Kc.DT_INT8_REF=106]="DT_INT8_REF",Kc[Kc.DT_STRING_REF=107]="DT_STRING_REF",Kc[Kc.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",Kc[Kc.DT_INT64_REF=109]="DT_INT64_REF",Kc[Kc.DT_BOOL_REF=110]="DT_BOOL_REF",Kc[Kc.DT_QINT8_REF=111]="DT_QINT8_REF",Kc[Kc.DT_QUINT8_REF=112]="DT_QUINT8_REF",Kc[Kc.DT_QINT32_REF=113]="DT_QINT32_REF",Kc[Kc.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",Kc[Kc.DT_QINT16_REF=115]="DT_QINT16_REF",Kc[Kc.DT_QUINT16_REF=116]="DT_QUINT16_REF",Kc[Kc.DT_UINT16_REF=117]="DT_UINT16_REF",Kc[Kc.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",Kc[Kc.DT_HALF_REF=119]="DT_HALF_REF",Kc[Kc.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",Kc[Kc.DT_VARIANT_REF=121]="DT_VARIANT_REF",Kc[Kc.DT_UINT32_REF=122]="DT_UINT32_REF",Kc[Kc.DT_UINT64_REF=123]="DT_UINT64_REF",function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Xc||(Xc={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Yc={};function Zc(e){return Yc[e]}function Jc(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Qc(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,o).map((e=>Qc(e,n,r,s)))}const i=Qc(t.inputNames.slice(e)[0],n,r,s),u=i.dataSync();return"number"===a.type?u[0]:Ve.toNestedArray(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function Qc(e,t,n,r){const[s,a]=rp(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[np(s,e)]));return void 0!==o?t[np(s,o)][a]:void 0}function ep(e,t,n){return t[np(e,n.currentContextId)]}function tp(e,t){const[n,r,s]=rp(e);return[np(n,t&&t.currentContextId),r,s]}function np(e,t){return t?`${e}-${t}`:e}function rp(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function sp(e,t,n){let r=Jc("pad",e,t,n);if("explicit"===r){r=Jc("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function ap(e){return e.kept?e:Bs(e)}var op={};t(op,"json",(()=>ip));const ip=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var up={};t(up,"json",(()=>lp));const lp=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var cp={};t(cp,"json",(()=>pp));const pp=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var hp={};t(hp,"json",(()=>dp));const dp=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var fp={};t(fp,"json",(()=>mp));const mp=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var gp={};t(gp,"json",(()=>yp));const yp=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var bp={};t(bp,"json",(()=>xp));const xp=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var wp={};t(wp,"json",(()=>kp));const kp=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var vp={};t(vp,"json",(()=>Np));const Np=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var Sp={};t(Sp,"json",(()=>Ip));const Ip=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var Tp={};t(Tp,"json",(()=>Ep));const Ep=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var $p={};t($p,"json",(()=>Cp));const Cp=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var Ap={};t(Ap,"json",(()=>_p));const _p=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var Rp={};t(Rp,"json",(()=>Dp));const Dp=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var Fp={};t(Fp,"json",(()=>Op));const Op=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var Mp={};t(Mp,"json",(()=>Lp));const Lp=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var zp={};t(zp,"json",(()=>Bp));const Bp=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var Pp={};t(Pp,"json",(()=>Wp));const Wp=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var Vp={};t(Vp,"json",(()=>Up));const Up=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Gp=An;class Hp{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[op,up,cp,hp,fp,gp,bp,wp,vp,Sp,Tp,$p,Ap,Rp,Fp,Mp,zp,Pp,Vp].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=tp(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=tp(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=tp(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Zc(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=jp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=jp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=rh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=rh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Xp(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Xp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=nh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=nh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Kp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Kp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=ah(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ah(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=th(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=th(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=sh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=sh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Jp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Jp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Qp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Qp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Zp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Zp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=tp(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Yp(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=tp(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=tp(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function qp(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=ue().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==Gp)return new Gp(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function jp(e,t,n,r=!1){const s=e[t];return null!=s?qp(s.s,r):n}function Kp(e,t,n){const r=e[t];return r?r.b:n}function Xp(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Yp(e){switch("string"==typeof e&&(e=jc[e]),e){case jc.DT_FLOAT:case jc.DT_HALF:return"float32";case jc.DT_INT32:case jc.DT_INT64:case jc.DT_INT8:case jc.DT_UINT8:return"int32";case jc.DT_BOOL:return"bool";case jc.DT_DOUBLE:return"float32";case jc.DT_STRING:return"string";default:return null}}function Zp(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Jp(e,t,n){const r=e[t];return r&&r.type?Yp(r.type):n}function Qp(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Yp(e))):n}function eh(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function th(e,t,n){const r=e[t];return r&&r.shape?eh(r.shape):n}function nh(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function rh(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>qp(e,r))):n}function sh(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>eh(e))):n}function ah(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class oh{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Qc(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Qc(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Xp(this.node.rawAttrs,e,t);if(null!=n.s)return jp(this.node.rawAttrs,e,t);if(null!=n.b)return Kp(this.node.rawAttrs,e,t);if(null!=n.shape)return th(this.node.rawAttrs,e,t);if(null!=n.type)return Jp(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return nh(this.node.rawAttrs,e,t);if(null!=n.list.s)return rh(this.node.rawAttrs,e,t);if(null!=n.list.shape)return sh(this.node.rawAttrs,e,t);if(null!=n.list.b)return ah(this.node.rawAttrs,e,t);if(null!=n.list.type)return Qp(this.node.rawAttrs,e,t)}return t}}var ih={};n(ih,ua);function uh(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){Ve.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];Ve.assert(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function lh(e){return"number"!=typeof e&&!e.some((e=>e<0))}function ch(e,t,n){let r=ph(e,n);const s=!lh(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=ph(e.shape,r)})),!lh(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function ph(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class hh{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=va(0),fi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),uh(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,fi(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return $n([],[0].concat(this.elementShape));const n=this.readMany(e);return uh(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Jo(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return $n([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return uh(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),la(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Qo(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];di((()=>{t=ha(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=ha(da(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class dh{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);uh(t,e.shape,"TensorList shape mismatch: "),fi(e)})),this.idTensor=va(0),this.maxNumElements=r,fi(this.idTensor)}get id(){return this.idTensor.id}copy(){return new dh([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);uh(e,this.elementShape,"TensorList shape mismatch: ");const r=ch(this.elementShape,this.tensors,e);return di((()=>{const e=this.tensors.map((e=>ha(e,r)));return Jo(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=ch(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,uh(r.shape,e,"TensorList shape mismatch: "),ha(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(uh(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");fi(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new dh([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);uh(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=ch(this.elementShape,this.tensors,t);return ha(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);uh(this.elementShape,t.shape,"TensorList shape mismatch: "),fi(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);uh(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=ch(this.elementShape,this.tensors,n);return 0===e.length?$n([],[0].concat(r)):di((()=>{const t=e.map((e=>ha(this.tensors[e],r)));return Jo(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);uh(this.elementShape,t,"TensorList shape mismatch: ");const n=ch(this.elementShape,this.tensors,t);return 0===this.size()?$n([],[0].concat(n)):di((()=>{const e=this.tensors.map((e=>ha(e,n)));return la(e,0)}))}}function fh(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);uh(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Qo(e);return new dh(s,t,r)}function mh(e,t,n,r){return new dh([],e,t,r)}function gh(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new dh([],n,e.dtype,r),o=Qo(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}function yh(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=ph(e.shape.slice(1),n),o=0===r?0:e.size/r,i=di((()=>{const n=[];e=ha(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,t[r],o];n[r]=ha(da(e,i,u),a)}return e.dispose(),n})),u=new dh([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}const bh=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Jc("thenBranch",e,t,n),s=Jc("elseBranch",e,t,n),a=Jc("cond",e,t,n),o=Jc("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Jc("body",e,t,n),s=Jc("cond",e,t,n),a=Jc("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[ap(Jc("pred",e,t,n))];case"Switch":{const r=Jc("pred",e,t,n);let s=Jc("data",e,t,n);return s.kept||(s=ap(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==Qc(e,t,n)));if(r){return[ap(Qc(r,t,n))]}return}case"Enter":{const r=Jc("frameName",e,t,n),s=Jc("tensor",e,t,n);return n.enterFrame(r),[ap(s)]}case"Exit":{const r=Jc("tensor",e,t,n);return n.exitFrame(),[ap(r)]}case"NextIteration":{const r=Jc("tensor",e,t,n);return n.nextIteration(),[ap(r)]}case"TensorArrayV3":{const r=Jc("size",e,t,n),s=Jc("dtype",e,t,n),a=Jc("elementShape",e,t,n),o=Jc("dynamicSize",e,t,n),i=Jc("clearAfterRead",e,t,n),u=Jc("identicalElementShapes",e,t,n),l=Jc("name",e,t,n),c=new hh(l,s,r,a,u,o,i);return n.addTensorArray(c),[c.idTensor,va(1)]}case"TensorArrayWriteV3":{const r=Jc("tensorArrayId",e,t,n),s=Jc("index",e,t,n),a=Jc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=Jc("tensorArrayId",e,t,n),s=Jc("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Jc("tensorArrayId",e,t,n),s=Jc("indices",e,t,n),a=Jc("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Jc("tensorArrayId",e,t,n),s=Jc("indices",e,t,n),a=Jc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=Jc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=Jc("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Jc("tensorArrayId",e,t,n),s=Jc("tensor",e,t,n),a=Jc("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=Jc("tensorArrayId",e,t,n);return[va(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Jc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Jc("tensorListId",e,t,n),s=Jc("index",e,t,n),a=Jc("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=Jc("tensorListId",e,t,n),s=Jc("index",e,t,n),a=Jc("elementShape",e,t,n),o=Jc("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Jc("indices",e,t,n),s=gh(Jc("tensor",e,t,n),r,Jc("elementShape",e,t,n),Jc("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Jc("elementShape",e,t,n),s=Jc("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=Jc(a,e,t,n),i=mh(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Jc("tensorListId",e,t,n),s=Jc("indices",e,t,n),a=Jc("elementShape",e,t,n),o=Jc("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=Jc("tensorListId",e,t,n),s=Jc("elementShape",e,t,n),a=Jc("elementDType",e,t,n),o=Jc("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=fh(Jc("tensor",e,t,n),Jc("elementShape",e,t,n),Jc("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Jc("tensorListId",e,t,n),s=n.getTensorList(r.id),a=Jc("dtype",e,t,n),o=Jc("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=Jc("tensorListId",e,t,n),s=Jc("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Jc("tensorListId",e,t,n),s=Jc("elementShape",e,t,n),a=Jc("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Jc("tensor",e,t,n),s=Jc("elementShape",e,t,n),a=yh(r,Jc("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=Jc("tensorListId",e,t,n);return[va(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=Jc("tensorListId",e,t,n),s=Jc("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function xh(e,t,n){const[r,s]=Jc("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,u="fusedbatchnorm"===r,l=Jc("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=Jc("strides",e,t,n),p=sp(e,t,n),h=Jc("dataFormat",e,t,n).toUpperCase(),d=Jc("dilations",e,t,n);let[f,m]=Jc("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:Jc("leakyreluAlpha",e,t,n)}}function wh(e,t,n){return{boxes:Jc("boxes",e,t,n),scores:Jc("scores",e,t,n),maxOutputSize:Jc("maxOutputSize",e,t,n),iouThreshold:Jc("iouThreshold",e,t,n),scoreThreshold:Jc("scoreThreshold",e,t,n),softNmsSigma:Jc("softNmsSigma",e,t,n)}}class kh{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=va(0),this.tensorMap=new Map,fi(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return va(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),di((()=>{const e=Qo(t),r=n.length,s=e.length;Ve.assert(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];fi(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return di((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return Jo(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function vh(e,t,n,r,s=di){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(Jc("a",e,t,n),Jc("b",e,t,n))];case"AddN":return[r.addN(Jc("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(Jc("a",e,t,n),Jc("b",e,t,n))];case"Mul":return[r.mul(Jc("a",e,t,n),Jc("b",e,t,n))];case"RealDiv":case"Div":return[r.div(Jc("a",e,t,n),Jc("b",e,t,n))];case"DivNoNan":return[r.divNoNan(Jc("a",e,t,n),Jc("b",e,t,n))];case"FloorDiv":return[r.floorDiv(Jc("a",e,t,n),Jc("b",e,t,n))];case"Sub":return[r.sub(Jc("a",e,t,n),Jc("b",e,t,n))];case"Minimum":return[r.minimum(Jc("a",e,t,n),Jc("b",e,t,n))];case"Maximum":return[r.maximum(Jc("a",e,t,n),Jc("b",e,t,n))];case"Pow":return[r.pow(Jc("a",e,t,n),Jc("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(Jc("a",e,t,n),Jc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(Jc("x",e,t,n))];case"Acos":return[r.acos(Jc("x",e,t,n))];case"Acosh":return[r.acosh(Jc("x",e,t,n))];case"Asin":return[r.asin(Jc("x",e,t,n))];case"Asinh":return[r.asinh(Jc("x",e,t,n))];case"Atan":return[r.atan(Jc("x",e,t,n))];case"Atan2":return[r.atan2(Jc("x",e,t,n),Jc("y",e,t,n))];case"Atanh":return[r.atanh(Jc("x",e,t,n))];case"Ceil":return[r.ceil(Jc("x",e,t,n))];case"Complex":return[r.complex(Jc("real",e,t,n),Jc("imag",e,t,n))];case"Cos":return[r.cos(Jc("x",e,t,n))];case"Cosh":return[r.cosh(Jc("x",e,t,n))];case"Elu":return[r.elu(Jc("x",e,t,n))];case"Erf":return[r.erf(Jc("x",e,t,n))];case"Exp":return[r.exp(Jc("x",e,t,n))];case"Expm1":return[r.expm1(Jc("x",e,t,n))];case"Floor":return[r.floor(Jc("x",e,t,n))];case"Log":return[r.log(Jc("x",e,t,n))];case"Log1p":return[r.log1p(Jc("x",e,t,n))];case"Imag":return[r.imag(Jc("x",e,t,n))];case"Neg":return[r.neg(Jc("x",e,t,n))];case"Reciprocal":return[r.reciprocal(Jc("x",e,t,n))];case"Real":return[r.real(Jc("x",e,t,n))];case"Relu":return[r.relu(Jc("x",e,t,n))];case"Round":return[r.round(Jc("x",e,t,n))];case"Selu":return[r.selu(Jc("x",e,t,n))];case"Sigmoid":return[r.sigmoid(Jc("x",e,t,n))];case"Sin":return[r.sin(Jc("x",e,t,n))];case"Sign":return[r.sign(Jc("x",e,t,n))];case"Sinh":return[r.sinh(Jc("x",e,t,n))];case"Softplus":return[r.softplus(Jc("x",e,t,n))];case"Sqrt":return[r.sqrt(Jc("x",e,t,n))];case"Square":return[r.square(Jc("x",e,t,n))];case"Tanh":return[r.tanh(Jc("x",e,t,n))];case"Tan":return[r.tan(Jc("x",e,t,n))];case"ClipByValue":return[r.clipByValue(Jc("x",e,t,n),Jc("clipValueMin",e,t,n),Jc("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(Jc("x",e,t,n))];case"Rsqrt":return[r.rsqrt(Qc(e.inputNames[0],t,n))];case"Prod":return[r.prod(Jc("x",e,t,n),Jc("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(Jc("x",e,t,n),Jc("alpha",e,t,n))];case"Prelu":return[r.prelu(Jc("x",e,t,n),Jc("alpha",e,t,n))];case"IsNan":return[r.isNaN(Qc(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return bh(e,t,n);case"convolution":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"Conv1D":{const s=Jc("stride",e,t,n),a=Jc("pad",e,t,n),o=Jc("dataFormat",e,t,n).toUpperCase(),i=Jc("dilation",e,t,n);return[r.conv1d(Jc("x",e,t,n),Jc("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=Jc("strides",e,t,n),a=sp(e,t,n),o=Jc("dataFormat",e,t,n).toUpperCase(),i=Jc("dilations",e,t,n);return[r.conv2d(Jc("x",e,t,n),Jc("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=xh(e,t,n);return[r.fused.conv2d({x:Jc("x",e,t,n),filter:Jc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=xh(e,t,n);return[r.fused.depthwiseConv2d({x:Jc("x",e,t,n),filter:Jc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Jc("outputShape",e,t,n),a=Jc("strides",e,t,n),o=sp(e,t,n);return[r.conv2dTranspose(Jc("x",e,t,n),Jc("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Jc("strides",e,t,n),a=sp(e,t,n),o=Jc("dilations",e,t,n),i=Jc("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(Jc("input",e,t,n),Jc("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=Jc("strides",e,t,n),a=Jc("pad",e,t,n),o=Jc("dataFormat",e,t,n).toUpperCase(),i=Jc("dilations",e,t,n);return[r.conv3d(Jc("x",e,t,n),Jc("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Jc("strides",e,t,n),a=Jc("pad",e,t,n),o=Jc("kernelSize",e,t,n);return[r.avgPool(Jc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=Jc("strides",e,t,n),a=Jc("pad",e,t,n),o=Jc("kernelSize",e,t,n);return[r.maxPool(Jc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=Jc("strides",e,t,n),a=Jc("pad",e,t,n),o=Jc("kernelSize",e,t,n),i=Jc("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(Jc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[u,l]}case"AvgPool3D":{const s=Jc("strides",e,t,n),a=Jc("pad",e,t,n),o=Jc("kernelSize",e,t,n);return[r.avgPool3d(Jc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=Jc("strides",e,t,n),a=Jc("pad",e,t,n),o=Jc("kernelSize",e,t,n);return[r.maxPool3d(Jc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=Jc("strides",e,t,n),a=Jc("pad",e,t,n),o=Jc("dilations",e,t,n),i=s[1],u=s[2],l=o[1],c=o[2];return[r.dilation2d(Jc("x",e,t,n),Jc("filter",e,t,n),[i,u],a,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"Fill":{const s=Jc("shape",e,t,n),a=Jc("dtype",e,t,n),o=Jc("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=Jc("start",e,t,n),a=Jc("stop",e,t,n),o=Jc("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=Jc("logits",e,t,n),a=Jc("numSamples",e,t,n),o=Jc("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=Jc("indices",e,t,n),a=Jc("depth",e,t,n),o=Jc("onValue",e,t,n),i=Jc("offValue",e,t,n),u=Jc("dtype",e,t,n);return[r.oneHot(s,a,o,i,u)]}case"Ones":return[r.ones(Jc("shape",e,t,n),Jc("dtype",e,t,n))];case"OnesLike":return[r.onesLike(Jc("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(Jc("shape",e,t,n),Jc("dtype",e,t,n),Jc("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(Jc("shape",e,t,n),Jc("minval",e,t,n),Jc("maxval",e,t,n),Jc("dtype",e,t,n))];case"Range":{const s=Jc("start",e,t,n),a=Jc("stop",e,t,n),o=Jc("step",e,t,n);return[r.range(s,a,o,Jc("dtype",e,t,n))]}case"TruncatedNormal":{const s=Jc("shape",e,t,n),a=Jc("mean",e,t,n),o=Jc("stdDev",e,t,n),i=Jc("seed",e,t,n);return[r.truncatedNormal(s,a,o,Jc("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(Jc("shape",e,t,n),Jc("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(Jc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=ih)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=wh(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=wh(e,t,n),l=Jc("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=wh(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,u)]}case"Where":{const r=s.cast(Jc("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(Jc("x",e,t,n),Jc("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"LowerBound":{const s=Jc("sortedSequence",e,t,n),a=Jc("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=Jc("x",e,t,n),a=Jc("k",e,t,n),o=Jc("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=Jc("sortedSequence",e,t,n),a=Jc("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=Jc("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=Jc("x",e,t,n),a=Jc("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"ResizeBilinear":{const s=Jc("images",e,t,n),a=Jc("size",e,t,n),o=Jc("alignCorners",e,t,n),i=Jc("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=Jc("images",e,t,n),a=Jc("size",e,t,n),o=Jc("alignCorners",e,t,n),i=Jc("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=Jc("image",e,t,n),a=Jc("boxes",e,t,n),o=Jc("boxInd",e,t,n),i=Jc("cropSize",e,t,n),u=Jc("method",e,t,n),l=Jc("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,u,l)]}case"ImageProjectiveTransformV3":{const s=Jc("images",e,t,n),a=Jc("transforms",e,t,n),o=Jc("outputShape",e,t,n),i=Jc("fillValue",e,t,n),u=Jc("interpolation",e,t,n),l=Jc("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Jc("default",e,t,n);return[Qc(e.name,t,n)||s];case"Placeholder":return[Qc(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[ap(Jc("x",e,t,n))];case"IdentityN":return Jc("x",e,t,n).map((e=>ap(e)));case"Shape":return[r.tensor1d(Jc("x",e,t,n).shape,"int32")];case"ShapeN":return Jc("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(Jc("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(Jc("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=Jc("x",e,t,n),o=Jc("data",e,t,n),i=Jc("message",e,t,n),u=Jc("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"Equal":return[r.equal(Jc("a",e,t,n),Jc("b",e,t,n))];case"NotEqual":return[r.notEqual(Jc("a",e,t,n),Jc("b",e,t,n))];case"Greater":return[r.greater(Jc("a",e,t,n),Jc("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(Jc("a",e,t,n),Jc("b",e,t,n))];case"Less":return[r.less(Jc("a",e,t,n),Jc("b",e,t,n))];case"LessEqual":return[r.lessEqual(Jc("a",e,t,n),Jc("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(Jc("a",e,t,n),Jc("b",e,t,n))];case"LogicalNot":return[r.logicalNot(Jc("a",e,t,n))];case"LogicalOr":return[r.logicalOr(Jc("a",e,t,n),Jc("b",e,t,n))];case"Select":case"SelectV2":return[r.where(Jc("condition",e,t,n),Jc("a",e,t,n),Jc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(Jc("a",e,t,n),Jc("b",e,t,n),Jc("transposeA",e,t,n),Jc("transposeB",e,t,n))];case"Einsum":return[r.einsum(Jc("equation",e,t,n),...Jc("tensors",e,t,n))];case"Transpose":return[r.transpose(Jc("x",e,t,n),Jc("perm",e,t,n))];case"_FusedMatMul":const[s,a]=Jc("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,u=Jc("numArgs",e,t,n),l=Jc("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=Jc("args",e,t,n);return[r.fused.matMul({a:Jc("a",e,t,n),b:Jc("b",e,t,n),transposeA:Jc("transposeA",e,t,n),transposeB:Jc("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:p,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(Jc("x",e,t,n),Jc("axis",e,t,n),Jc("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(Jc("x",e,t,n),Jc("mean",e,t,n),Jc("variance",e,t,n),Jc("offset",e,t,n),Jc("scale",e,t,n),Jc("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(Jc("x",e,t,n),Jc("radius",e,t,n),Jc("bias",e,t,n),Jc("alpha",e,t,n),Jc("beta",e,t,n))];case"Softmax":return[r.softmax(Jc("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(Jc("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(Jc("sparseIndices",e,t,n),Jc("outputShape",e,t,n),Jc("sparseValues",e,t,n),Jc("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"Max":{const s=Jc("axis",e,t,n),a=Jc("keepDims",e,t,n);return[r.max(Jc("x",e,t,n),s,a)]}case"Mean":{const s=Jc("axis",e,t,n),a=Jc("keepDims",e,t,n);return[r.mean(Jc("x",e,t,n),s,a)]}case"Min":{const s=Jc("axis",e,t,n),a=Jc("keepDims",e,t,n);return[r.min(Jc("x",e,t,n),s,a)]}case"Sum":{const s=Jc("axis",e,t,n),a=Jc("keepDims",e,t,n);return[r.sum(Jc("x",e,t,n),s,a)]}case"All":{const s=Jc("axis",e,t,n),a=Jc("keepDims",e,t,n);return[r.all(Jc("x",e,t,n),s,a)]}case"Any":{const s=Jc("axis",e,t,n),a=Jc("keepDims",e,t,n);return[r.any(Jc("x",e,t,n),s,a)]}case"ArgMax":{const s=Jc("axis",e,t,n);return[r.argMax(Jc("x",e,t,n),s)]}case"ArgMin":{const s=Jc("axis",e,t,n);return[r.argMin(Jc("x",e,t,n),s)]}case"Prod":{const s=Jc("axis",e,t,n),a=Jc("keepDims",e,t,n);return[r.prod(Jc("x",e,t,n),s,a)]}case"Cumprod":{const s=Jc("axis",e,t,n),a=Jc("exclusive",e,t,n),o=Jc("reverse",e,t,n);return[r.cumprod(Jc("x",e,t,n),s,a,o)]}case"Cumsum":{const s=Jc("axis",e,t,n),a=Jc("exclusive",e,t,n),o=Jc("reverse",e,t,n);return[r.cumsum(Jc("x",e,t,n),s,a,o)]}case"Bincount":const s=Jc("x",e,t,n),a=Jc("weights",e,t,n),o=Jc("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=Jc("x",e,t,n),a=Jc("weights",e,t,n),o=Jc("size",e,t,n),i=Jc("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Jc("n",e,t,n),a=Jc("axis",e,t,n);let o=Jc("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=Jc("x",e,t,n),a=Jc("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=Jc("axis",e,t,n),a=Jc("batchDims",e,t,n),o=Jc("x",e,t,n),i=Jc("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=Jc("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=Jc("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=Jc("axis",e,t,n),a=Jc("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=Jc("begin",e,t,n),a=Jc("size",e,t,n);return[r.slice(Jc("x",e,t,n),s,a)]}case"StridedSlice":{const s=Jc("begin",e,t,n),a=Jc("end",e,t,n),o=Jc("strides",e,t,n),i=Jc("beginMask",e,t,n),u=Jc("endMask",e,t,n),l=Jc("ellipsisMask",e,t,n),c=Jc("newAxisMask",e,t,n),p=Jc("shrinkAxisMask",e,t,n),h=Jc("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,u,l,c,p)]}case"Pack":return di((()=>{const s=Jc("axis",e,t,n),a=Jc("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,u=a.map((e=>{const t=Ve.arraysEqual(e.shape,o);if(!t&&!Ve.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(u,s)]}));case"Unpack":{const s=Jc("axis",e,t,n),a=Jc("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=Jc("reps",e,t,n);return[r.tile(Jc("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Jc("axis",e,t,n),a=Jc("numOrSizeSplits",e,t,n),o=Jc("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=Jc("indices",e,t,n),a=Jc("values",e,t,n),o=Jc("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=Jc("x",e,t,n),a=Jc("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=Jc("sparseIndices",e,t,n),a=Jc("outputShape",e,t,n),o=Jc("sparseValues",e,t,n),i=Jc("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(Jc("indices",e,t,n),Jc("values",e,t,n),Jc("denseShape",e,t,n),Jc("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(Jc("inputIndices",e,t,n),Jc("inputShape",e,t,n),Jc("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(Jc("data",e,t,n),Jc("indices",e,t,n),Jc("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(Jc("data",e,t,n),Jc("indices",e,t,n),Jc("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"FFT":return[r.fft(Jc("x",e,t,n))];case"IFFT":return[r.ifft(Jc("x",e,t,n))];case"RFFT":return[r.rfft(Jc("x",e,t,n))];case"IRFFT":return[r.irfft(Jc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(Jc("data",e,t,n),Jc("dataSplits",e,t,n),Jc("separator",e,t,n),Jc("nGramWidths",e,t,n),Jc("leftPad",e,t,n),Jc("rightPad",e,t,n),Jc("padWidth",e,t,n),Jc("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(Jc("input",e,t,n),Jc("delimiter",e,t,n),Jc("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(Jc("input",e,t,n),Jc("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=ih)=>{switch(e.op){case"Cast":return[r.cast(Jc("x",e,t,n),Jc("dtype",e,t,n))];case"ExpandDims":{const s=Jc("axis",e,t,n);return[r.expandDims(Jc("x",e,t,n),s)]}case"Squeeze":{const s=Jc("axis",e,t,n);return[r.squeeze(Jc("x",e,t,n),s)]}case"Reshape":return[r.reshape(Jc("x",e,t,n),Jc("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(Jc("x",e,t,n),Jc("padding",e,t,n),Jc("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(Jc("x",e,t,n),Jc("padding",e,t,n),Jc("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Jc("blockShape",e,t,n),a=Jc("paddings",e,t,n);return[r.spaceToBatchND(Jc("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=Jc("blockShape",e,t,n),a=Jc("crops",e,t,n);return[r.batchToSpaceND(Jc("x",e,t,n),s,a)]}case"DepthToSpace":{const s=Jc("blockSize",e,t,n),a=Jc("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(Jc("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(Jc("x",e,t,n),Jc("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(Jc("s0",e,t,n),Jc("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=Jc("keyDType",e,t,n),a=Jc("valueDType",e,t,n),o=new kh(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Jc("tableHandle",e,t,n,r),a=Jc("keys",e,t,n),o=Jc("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Jc("tableHandle",e,t,n,r),a=Jc("keys",e,t,n),o=Jc("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=Jc("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=Zc(e.op);if(a&&a.customExecutor)return a.customExecutor(new oh(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Ve.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class Nh{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Sh(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>rp(e)[0]));let c=[];null!=r&&(c=r.map((e=>rp(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(Ch(e)||Ah(e)||_h(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),p.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}function Ih(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((e=>rp(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&a.push(e)}));const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&a.push(e)}))}return l}const Th=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Eh=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],$h=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Ch(e){return Th.indexOf(e.op)>=0}function Ah(e){return Eh.indexOf(e.op)>=0}function _h(e){return $h.indexOf(e.op)>=0}class Rh{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Rh(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Sh(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return Ih(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[rp(e)[0]])),s=t.map((e=>rp(e)[0]));let a=s.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const u={},l={};return di((()=>{const n=new Nh(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=rp(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=vh(t,r,n,this._resourceManager);if(Ve.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map((e=>Qc(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=ep(e.name,n,r);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=tp(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=ue().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new Nh(this.weightMap,r,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const o=t.map((e=>Qc(e,this.tensorsMap,a))),i=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[rp(e)[0]])),o=n.map((e=>rp(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:p}=Sh(e,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=rp(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;h.length>0;){const e=this.processStack(a,h,t,d,g,m,o,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!Ch(e)&&!Qc(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return d}processStack(e,t,n,r,s,a,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Jc("isConstant",e.node,r,n)&&([c]=tp(e.node.name,n)),null==r[e.node.name]){const p=vh(e.node,r,n,this._resourceManager);c||([c]=tp(e.node.name,n));const h=n.currentContext;Ve.isPromise(p)?l.push(p.then((l=>(r[c]=l,n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u),l)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=tp(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Qc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Qc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=rp(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));Ve.assert(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&Ve.assert(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=rp(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=rp(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Dh{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Fh{constructor(e,t={},n=Ws){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new Dh}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return Ve.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Rh(Hp.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Hp.Instance.transformGraph(e.modelInitializer);this.initializer=new Rh(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof Kt?[n]:n).forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(e){if(!(e instanceof Kt||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Oh(e,t={},n=Ws){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}model.json?tfjs-format=file`}
/** @license See the LICENSE file. */(e));const r=new Fh(e,t,n);return await r.load(),r}function Mh(e,t,n,r){return new(n||(n=Promise))((function(s,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function i(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function Lh(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}var zh=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var s=r[n];t.push(s)}return t},Bh=function(){this.parent=null,this.children={},this.end=!1,this.word=[[],0,0]},Ph=function(){function e(){this.root=new Bh}return e.prototype.insert=function(e,t,n){for(var r=this.root,s=zh(e),a=0;a<s.length;a++)r.children[s[a]]||(r.children[s[a]]=new Bh,r.children[s[a]].parent=r,r.children[s[a]].word[0]=r.word[0].concat(s[a])),r=r.children[s[a]],a===s.length-1&&(r.end=!0,r.word[1]=t,r.word[2]=n)},e.prototype.commonPrefixSearch=function(e){for(var t=[],n=this.root.children[e[0]],r=0;r<e.length&&n;r++)n.end&&t.push(n.word),n=n.children[e[r+1]];return t.length||t.push([[e[0]],0,0]),t},e}();var Wh=function(){function e(e,t){void 0===t&&(t=6),this.vocabulary=e,this.reservedSymbolsCount=t,this.trie=new Ph;for(var n=this.reservedSymbolsCount;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n)}return e.prototype.encode=function(e){var t=[],n=[],r=[];e=function(e){var t=e.normalize("NFKC");return t.length>0?"▁"+t.replace(/ /g,"▁"):t}(e);for(var s=zh(e),a=0;a<=s.length;a++)t.push({}),n.push(0),r.push(0);for(a=0;a<s.length;a++)for(var o=this.trie.commonPrefixSearch(s.slice(a)),i=0;i<o.length;i++){var u=o[i],l={key:u[0],score:u[1],index:u[2]};null==t[a+(c=u[0].length)][a]&&(t[a+c][a]=[]),t[a+c][a].push(l)}for(var c=0;c<=s.length;c++)for(var p in t[c]){var h=t[c][p];for(i=0;i<h.length;i++){var d=h[i],f=d.score+r[c-d.key.length];(0===r[c]||f>=r[c])&&(r[c]=f,n[c]=h[i].index)}}for(var m=[],g=n.length-1;g>0;)m.push(n[g]),g-=this.vocabulary[n[g]][0].length;var y=[],b=!1;for(a=0;a<m.length;a++){var x=m[a];b&&0===x||y.push(x),b=0===x}return y.reverse()},e}();function Vh(e){return Mh(this,void 0,void 0,(function(){return Lh(this,(function(t){switch(t.label){case 0:return[4,Ve.fetch(e)];case 1:return[2,t.sent().json()]}}))}))}var Uh="https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1",Gh=[0,1,2],Hh=192;!function(){function e(){}e.prototype.loadModel=function(){return Mh(this,void 0,void 0,(function(){return Lh(this,(function(e){return[2,Oh(Uh,{fromTFHub:!0})]}))}))},e.prototype.load=function(){return Mh(this,void 0,void 0,(function(){var e,t,n;return Lh(this,(function(r){switch(r.label){case 0:return[4,Promise.all([this.loadModel(),Vh(Uh+"/vocab.json?tfjs-format=file")])];case 1:return e=r.sent(),t=e[0],n=e[1],this.model=t,this.tokenizer=new Wh(n,3),[2]}}))}))},e.prototype.embed=function(e){var t=this,n=di((function(){var n=t.tokenizeStrings(e.queries,Hh),r=t.tokenizeStrings(e.responses,Hh);if(null!=e.contexts&&e.contexts.length!==e.responses.length)throw new Error("The length of response strings and context strings need to match.");var s=e.contexts||[];null==e.contexts&&(s.length=e.responses.length,s.fill(""));var a=t.tokenizeStrings(s,Hh),o={};return o.input_inp_text=n,o.input_res_text=r,o.input_res_context=a,t.model.execute(o,["Final/EncodeQuery/mul","Final/EncodeResult/mul"])}));return{queryEmbedding:n[0],responseEmbedding:n[1]}},e.prototype.tokenizeStrings=function(e,t){var n=this;return po(e.map((function(e){return n.shiftTokens(n.tokenizer.encode(e),Hh)})),[e.length,Hh],"int32")},e.prototype.shiftTokens=function(e,t){e.unshift(1);for(var n=0;n<t;n++)n>=e.length?e[n]=2:Gh.includes(e[n])||(e[n]+=3);return e.slice(0,t)}}();var qh=function(){function e(){}return e.prototype.loadModel=function(e){return Mh(this,void 0,void 0,(function(){return Lh(this,(function(t){return[2,e?Oh(e):Oh("https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1",{fromTFHub:!0})]}))}))},e.prototype.load=function(e){return void 0===e&&(e={}),Mh(this,void 0,void 0,(function(){var t,n,r;return Lh(this,(function(s){switch(s.label){case 0:return[4,Promise.all([this.loadModel(e.modelUrl),Vh(e.vocabUrl||"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/vocab.json")])];case 1:return t=s.sent(),n=t[0],r=t[1],this.model=n,this.tokenizer=new Wh(r),[2]}}))}))},e.prototype.embed=function(e){return Mh(this,void 0,void 0,(function(){var t,n,r,s,a,o,i,u,l=this;return Lh(this,(function(c){switch(c.label){case 0:for("string"==typeof e&&(e=[e]),t=e.map((function(e){return l.tokenizer.encode(e)})),n=t.map((function(e,t){return e.map((function(e,n){return[t,n]}))})),r=[],s=0;s<n.length;s++)r=r.concat(n[s]);return a=po(r,[r.length,2],"int32"),o=ao(Ve.flatten(t),"int32"),i={indices:a,values:o},[4,this.model.executeAsync(i)];case 1:return u=c.sent(),a.dispose(),o.dispose(),[2,u]}}))}))},e}();class jh{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class Kh{refCount(e){return Xh("refCount")}incRef(e){return Xh("incRef")}timerAvailable(){return!0}time(e){return Xh("time")}read(e){return Xh("read")}readSync(e){return Xh("readSync")}readToGPU(e,t){return Xh("readToGPU")}numDataIds(){return Xh("numDataIds")}disposeData(e,t){return Xh("disposeData")}write(e,t,n){return Xh("write")}move(e,t,n,r,s){return Xh("move")}createTensorFromTexture(e,t,n){return Xh("createTensorFromTexture")}memory(){return Xh("memory")}floatPrecision(){return Xh("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Xh("dispose")}}function Xh(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var Yh={};function Zh(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,td(e,t,n)}function Jh(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,td(e,n,r),td(t,n,r)}function Qh(e,t,n){return Math.max(e,Math.min(t,n))}function ed(e){return e%2==0?e:e+1}function td(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function nd(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function rd(e,t){const n=Math.random();return t*n+(1-n)*e}function sd(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function ad(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function od(e,t,n=""){ad(pd(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function id(e){ad(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function ud(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||Td(e)&&!n)for(let r=0;r<e.length;++r)ud(e[r],t,n);else t.push(e);return t}function ld(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function cd(e){return 0===e.length}function pd(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function hd(e){return e%1==0}function dd(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function fd(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function md(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return Zh(t),t}function gd(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function yd(e,t=(e=>0),n,r){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const u=t(o);null!=n&&o>=n?a():null!=r?r(i,u):setTimeout(i,u)};i()}))}function bd(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function xd(e,t){const n=t.length;return ad((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),ad(e.every((e=>hd(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function wd(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:xd(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function kd(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function vd(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function Nd(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function Sd(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Id(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function Td(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function Ed(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function $d(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Cd(e){return"string"==typeof e||e instanceof String}function Ad(e){return"boolean"==typeof e}function _d(e){return"number"==typeof e}function Rd(e){return Array.isArray(e)?Rd(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":_d(e)?"float32":Cd(e)?"string":Ad(e)?"bool":"float32"}function Dd(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Fd(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Od(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Md(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=Md(e+t*i,o,n,r)}return s}function Ld(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Md(0,e,t,n)}function zd(e,t){const n=Bd(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Bd(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Pd(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Ld(e,new Float32Array(n));if("int32"===t)return Ld(e,new Int32Array(n));if("bool"===t)return Ld(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Wd(e){e.forEach((t=>{ad(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Vd(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Ud(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Gd(e){return e&&e.then&&"function"==typeof e.then}t(Yh,"shuffle",(()=>Zh)),t(Yh,"swap",(()=>td)),t(Yh,"shuffleCombo",(()=>Jh)),t(Yh,"clamp",(()=>Qh)),t(Yh,"nearestLargerEven",(()=>ed)),t(Yh,"sum",(()=>nd)),t(Yh,"randUniform",(()=>rd)),t(Yh,"distSquared",(()=>sd)),t(Yh,"assert",(()=>ad)),t(Yh,"assertShapesMatch",(()=>od)),t(Yh,"arraysEqual",(()=>pd)),t(Yh,"assertNonNull",(()=>id)),t(Yh,"flatten",(()=>ud)),t(Yh,"isTypedArray",(()=>Td)),t(Yh,"sizeFromShape",(()=>ld)),t(Yh,"isScalarShape",(()=>cd)),t(Yh,"isInt",(()=>hd)),t(Yh,"tanh",(()=>dd)),t(Yh,"sizeToSquarishShape",(()=>fd)),t(Yh,"createShuffledIndices",(()=>md)),t(Yh,"rightPad",(()=>gd)),t(Yh,"repeatedTry",(()=>yd)),t(Yh,"inferFromImplicitShape",(()=>bd)),t(Yh,"parseAxisParam",(()=>xd)),t(Yh,"squeezeShape",(()=>wd)),t(Yh,"getTypedArrayFromDType",(()=>kd)),t(Yh,"getArrayFromDType",(()=>vd)),t(Yh,"checkConversionForErrors",(()=>Nd)),t(Yh,"isValidDtype",(()=>Sd)),t(Yh,"hasEncodingLoss",(()=>Id)),t(Yh,"bytesPerElement",(()=>Ed)),t(Yh,"bytesFromStringArray",(()=>$d)),t(Yh,"isString",(()=>Cd)),t(Yh,"isBoolean",(()=>Ad)),t(Yh,"isNumber",(()=>_d)),t(Yh,"inferDtype",(()=>Rd)),t(Yh,"isFunction",(()=>Dd)),t(Yh,"nearestDivisor",(()=>Fd)),t(Yh,"computeStrides",(()=>Od)),t(Yh,"toNestedArray",(()=>Ld)),t(Yh,"makeOnesTypedArray",(()=>zd)),t(Yh,"makeZerosTypedArray",(()=>Bd)),t(Yh,"makeZerosNestedTypedArray",(()=>Pd)),t(Yh,"assertNonNegativeIntegerDimensions",(()=>Wd)),t(Yh,"locToIndex",(()=>Vd)),t(Yh,"indexToLoc",(()=>Ud)),t(Yh,"isPromise",(()=>Gd));const Hd="tfjsflags";class qd{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=jd,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(Kd().getBool("IS_TEST")||Kd().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];Kd().getBool("IS_TEST")||Kd().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Gd(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(Hd in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function jd(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function Kd(){return Yd}let Xd,Yd=null;function Zd(){if(null==Xd){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==he)t=he;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Xd=t}return Xd}function Jd(e,t){const n=function(){const e=Zd();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Qd="Abs",ef="Acos",tf="Acosh",nf="Add",rf="AddN",sf="All",af="Any",of="ArgMax",uf="ArgMin",lf="Asin",cf="Asinh",pf="Atan",hf="Atanh",df="Atan2",ff="AvgPool",mf="AvgPoolGrad",gf="AvgPool3D",yf="AvgPool3DGrad",bf="BatchMatMul",xf="BatchToSpaceND",wf="Bincount",kf="BroadcastArgs",vf="Cast",Nf="Ceil",Sf="ClipByValue",If="Complex",Tf="ComplexAbs",Ef="Concat",$f="Conv2D",Cf="Conv2DBackpropFilter",Af="Conv2DBackpropInput",_f="Conv3D",Rf="Conv3DBackpropFilterV2",Df="Conv3DBackpropInputV2",Ff="Cos",Of="Cosh",Mf="Cumprod",Lf="Cumsum",zf="CropAndResize",Bf="DenseBincount",Pf="DepthToSpace",Wf="DepthwiseConv2dNative",Vf="DepthwiseConv2dNativeBackpropFilter",Uf="DepthwiseConv2dNativeBackpropInput",Gf="Diag",Hf="Dilation2D",qf="Dilation2DBackpropInput",jf="Dilation2DBackpropFilter",Kf="RealDiv",Xf="Einsum",Yf="Elu",Zf="EluGrad",Jf="Erf",Qf="Equal",em="Exp",tm="ExpandDims",nm="Expm1",rm="FFT",sm="Fill",am="FlipLeftRight",om="Floor",im="FloorDiv",um="FusedBatchNorm",lm="GatherV2",cm="GatherNd",pm="Greater",hm="GreaterEqual",dm="Identity",fm="IFFT",mm="Imag",gm="IsFinite",ym="IsInf",bm="IsNan",xm="LeakyRelu",wm="Less",km="LessEqual",vm="LinSpace",Nm="Log",Sm="Log1p",Im="LogicalAnd",Tm="LogicalNot",Em="LogicalOr",$m="LRN",Cm="LRNGrad",Am="Max",_m="Maximum",Rm="MaxPool",Dm="MaxPoolGrad",Fm="MaxPool3D",Om="MaxPool3DGrad",Mm="MaxPoolWithArgmax",Lm="Mean",zm="Min",Bm="Minimum",Pm="MirrorPad",Wm="Mod",Vm="Multinomial",Um="Multiply",Gm="Neg",Hm="NotEqual",qm="NonMaxSuppressionV3",jm="NonMaxSuppressionV4",Km="NonMaxSuppressionV5",Xm="OnesLike",Ym="OneHot",Zm="Pack",Jm="PadV2",Qm="Pow",eg="Prelu",tg="Prod",ng="RaggedGather",rg="RaggedRange",sg="RaggedTensorToTensor",ag="Range",og="Real",ig="Reciprocal",ug="Relu",lg="Reshape",cg="ResizeNearestNeighbor",pg="ResizeNearestNeighborGrad",hg="ResizeBilinear",dg="ResizeBilinearGrad",fg="Relu6",mg="Reverse",gg="Round",yg="Rsqrt",bg="ScatterNd",xg="SearchSorted",wg="Select",kg="Selu",vg="Slice",Ng="Sin",Sg="Sinh",Ig="Sign",Tg="Sigmoid",Eg="Softplus",$g="Sqrt",Cg="Sum",Ag="SpaceToBatchND",_g="SplitV",Rg="Softmax",Dg="SparseFillEmptyRows",Fg="SparseReshape",Og="SparseSegmentMean",Mg="SparseSegmentSum",Lg="SparseToDense",zg="SquaredDifference",Bg="Square",Pg="StridedSlice",Wg="StringNGrams",Vg="StringSplit",Ug="StringToHashBucketFast",Gg="Sub",Hg="Tan",qg="Tanh",jg="Tile",Kg="TopK",Xg="Transform",Yg="Transpose",Zg="Unique",Jg="Unpack",Qg="UnsortedSegmentSum",ey="ZerosLike",ty="Step",ny="FromPixels",ry="RotateWithOffset",sy="_FusedMatMul",ay="FusedConv2D",oy="FusedDepthwiseConv2D";var iy={};function uy(...e){Kd().getBool("IS_TEST")||Kd().getBool("PROD")||console.warn(...e)}function ly(...e){Kd().getBool("IS_TEST")||Kd().getBool("PROD")||console.log(...e)}t(iy,"warn",(()=>uy)),t(iy,"log",(()=>ly));const cy=Jd("kernelRegistry",(()=>new Map)),py=Jd("gradRegistry",(()=>new Map));function hy(e,t){const n=yy(e,t);return cy.get(n)}function dy(e){return py.get(e)}function fy(e){const t=cy.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function my(e){const{kernelName:t,backendName:n}=e,r=yy(t,n);cy.has(r)&&uy(`The kernel '${t}' for backend '${n}' is already registered`),cy.set(r,e)}function gy(e){const{kernelName:t}=e;py.has(t)&&Kd().getBool("DEBUG")&&uy(`Overriding the gradient for '${t}'`),py.set(t,e)}function yy(e,t){return`${t}_${e}`}var by={};t(by,"createScalarValue",(()=>Dy)),t(by,"encodeString",(()=>Ly)),t(by,"toTypedArray",(()=>Fy)),t(by,"now",(()=>Oy)),t(by,"fetch",(()=>My)),t(by,"decodeString",(()=>zy));var xy={};t(xy,"hexToLong",(()=>ky)),t(xy,"fingerPrint64",(()=>Ry));const wy=Ge.default||Ge;function ky(e){return wy.fromString(e,!0,16)}const vy=ky("c3a5c85c97cb3127"),Ny=ky("b492b66fbe98f273"),Sy=ky("9ae16a3b2f90404f");function Iy(e){return e.xor(e.shru(47))}function Ty(e,t,n){const r=e.slice(t,t+n);return wy.fromBytes(Array.from(r),!0,!0)}function Ey(e,t){return Ty(e,t,8)}function $y(e,t){return Ty(e,t,4)}function Cy(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Ay(e,t,n=ky("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function _y(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=Cy(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(Cy(s,44)),[s.add(r),a.add(o)]}(Ey(e,t),Ey(e,t+8),Ey(e,t+16),Ey(e,t+24),n,r)}function Ry(e,t=e.length){const n=wy.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Sy.add(2*t),r=Ey(e,0).add(Sy),s=Ey(e,t-8);return Ay(Cy(s,37).mul(n).add(r),Cy(r,25).add(s).mul(n),n)}if(t>=4){const n=Sy.add(2*t);return Ay($y(e,0).shl(3).add(t),$y(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return Iy(Sy.mul(n).xor(vy.mul(r))).mul(Sy)}return Sy}(e,t):function(e,t=e.length){const n=Sy.add(2*t),r=Ey(e,0).mul(Ny),s=Ey(e,8),a=Ey(e,t-8).mul(n),o=Ey(e,t-16).mul(Sy);return Ay(Cy(r.add(s),43).add(Cy(a,30)).add(o),r.add(Cy(s.add(Sy),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Sy.add(2*t),r=Ey(e,0).mul(Sy),s=Ey(e,8),a=Ey(e,t-8).mul(n),o=Ey(e,t-16).mul(Sy),i=Cy(r.add(s),43).add(Cy(a,30)).add(o),u=Ay(i,r.add(Cy(s.add(Sy),18)).add(a),n),l=Ey(e,16).mul(n),c=Ey(e,24),p=i.add(Ey(e,t-32)).mul(n),h=u.add(Ey(e,t-24)).mul(n);return Ay(Cy(l.add(c),43).add(Cy(p,30)).add(h),l.add(Cy(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(Ny).add(113),a=Iy(s.mul(Sy).add(113)).mul(Sy),o=[wy.UZERO,wy.UZERO],i=[wy.UZERO,wy.UZERO];r=r.mul(Sy).add(Ey(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=Cy(r.add(s).add(o[0]).add(Ey(e,u+8)),37).mul(Ny),s=Cy(s.add(o[1]).add(Ey(e,u+48)),42).mul(Ny),r=r.xor(i[1]),s=s.add(o[0]).add(Ey(e,u+40)),a=Cy(a.add(i[0]),33).mul(Ny),o=_y(e,u,o[1].mul(Ny),r.add(i[0])),i=_y(e,u+32,a.add(i[1]),s.add(Ey(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const p=Ny.add(a.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=Cy(r.add(s).add(o[0]).add(Ey(e,u+8)),37).mul(p),s=Cy(s.add(o[1]).add(Ey(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(Ey(e,u+40))),a=Cy(a.add(i[0]),33).mul(p),o=_y(e,u,o[1].mul(p),r.add(i[0])),i=_y(e,u+32,a.add(i[1]),s.add(Ey(e,u+16))),[a,r]=[r,a],Ay(Ay(o[0],i[0],p).add(Iy(s).mul(vy)).add(a),Ay(o[1],i[1],p).add(r),p)}function Dy(e,t){return"string"===t?Ly(e):Fy([e],t)}function Fy(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ud(e)),Kd().getBool("DEBUG")&&Nd(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Oy(){return Kd().platform.now()}function My(e,t){return Kd().platform.fetch(e,t)}function Ly(e,t="utf-8"){return t=t||"utf-8",Kd().platform.encode(e,t)}function zy(e,t="utf-8"){return t=t||"utf-8",Kd().platform.decode(e,t)}n(by,Yh),n(by,xy);class By{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Wy)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=Oy();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:Oy()-o})}if(Kd().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Py(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function Py(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Wy{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?gd(`${r}ms`,9):r.error,i=gd(e,25),u=t.rank,l=t.size,c=gd(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Vy(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function Uy(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!pd(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function Gy(e,t,n,r){const s=Od(t),a=function(e,t,n,r){const s=ld(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?Ky(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],Hy(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=jy(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function Hy(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Cd(e)?`'${e}'`:"bool"===n?qy(e):parseFloat(e.toFixed(7)).toString(),gd(r,t)}function qy(e){return 0===e?"false":"true"}function jy(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[Hy(Ky(e)[0],0,n)]}return"bool"===n?[qy(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Ky(r),a=Ky(a)),["["+r.map(((e,t)=>Hy(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Hy(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Ky(e):Array.from(e)).map(((e,t)=>Hy(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...jy(e.slice(r,a),l,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...jy(e.slice(r,a),l,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...jy(e.slice(r,a),l,n,c,s,t===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function Ky(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Xy{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ld(e),null!=n){const e=n.length;ad(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||vd(t,this.size),this.strides=Od(e)}set(e,...t){0===t.length&&(t=[0]),ad(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Yy().makeTensor(this.values,this.shape,this.dtype)}}let Yy=null,Zy=null,Jy=null;function Qy(e){Yy=e}class eb{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ld(e),this.strides=Od(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Zy.buffer(this.shape,this.dtype,e)}bufferSync(){return Zy.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Ld(this.shape,e,"complex64"===this.dtype)}arraySync(){return Ld(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Yy().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>zy(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Yy().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Yy().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>zy(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Yy().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Yy().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Zy.print(this,e)}clone(){return this.throwIfDisposed(),Zy.clone(this)}toString(e=!1){return Gy(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Zy.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Yy().makeVariable(this,e,t,n)}}function tb(){return Jd("Tensor",(()=>eb))}Object.defineProperty(eb,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),tb();class nb extends eb{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!pd(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Yy().disposeTensor(this),this.dataId=e.dataId,Yy().incRef(this,null)}dispose(){Yy().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(nb,Symbol.hasInstance,{value:e=>e instanceof eb&&null!=e.assign&&e.assign instanceof Function});var rb,sb,ab,ob,ib,ub={};t(ub,"makeTypesMatch",(()=>hb)),t(ub,"assertTypesMatch",(()=>db)),t(ub,"isTensorInList",(()=>fb)),t(ub,"getTensorsInContainer",(()=>mb)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(rb||(rb={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(sb||(sb={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(ab||(ab={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ob||(ob={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ib||(ib={}));const lb={float32:ob,int32:sb,bool:ab,complex64:ib};function cb(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return lb[e][t]}function pb(e){return cb(e,"int32")}function hb(e,t){if(e.dtype===t.dtype)return[e,t];const n=cb(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function db(e,t){ad(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function fb(e,t){return t.some((t=>t.id===e.id))}function mb(e){const t=[];return gb(e,t,new Set),t}function gb(e,t,n){if(null==e)return;if(e instanceof eb)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),gb(r,t,n))}}function yb(e){return null!=e.kernelName}class bb{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class xb{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new bb}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(uy(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new By(this.backendInstance),!0}setupRegisteredKernels(){fy(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){fy(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof Kh||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,uy(`Initialization of backend ${e} failed`),uy(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return uy(`Initialization of backend ${e} failed`),uy(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return xb.nextTensorId++}nextVariableId(){return xb.nextVariableId++}clone(e){const t=kb.runKernel(dm,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return kb.runKernel(vf,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=hy(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=yb(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(yb(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=hy(t,this.backendName);ad(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,p=yb(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(u,l,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=dy(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(ad(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&Cd(e[0])&&(s=e.map((e=>Ly(e))));const a=r.write(s,t,n),o=new eb(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=$d(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new eb(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new nb(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Ed(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof nb||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Ed(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=dy(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Bd(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=mb(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(ad(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));ad(s instanceof eb,(()=>"The result y returned by f() must be a tensor."));const a=Vy(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=zd(ld(e),"float32");return kb.makeTensor(t,e,"float32")}(s.shape):n,Uy(e,a,(e=>this.tidy(e)),vb);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return ad(Dd(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;ad(t.every((e=>e instanceof eb)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),ad(n.value instanceof eb,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),ad(Dd(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];ad(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),ad(a.every((e=>e instanceof eb)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Oy(),n=await this.backend.time(e);return n.wallMs=Oy()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new bb;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function wb(){const e=Zd();if(null==e._tfengine){const t=new qd(e);e._tfengine=new xb(t)}var t;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */return t=e._tfengine.ENV,Yd=t,Qy((()=>e._tfengine)),e._tfengine}xb.nextTensorId=0,xb.nextVariableId=0;const kb=wb();function vb(e,t){const n={a:e,b:t};return kb.runKernel(nf,n)}var Nb={};let Sb;function Ib(e){Sb=e}function Tb(e){if(void 0!==Sb)return Sb;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Eb(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(Nb,"mockIsMobile",(()=>Ib)),t(Nb,"isMobile",(()=>Tb)),t(Nb,"isBrowser",(()=>Eb));const $b=Kd();function Cb(e,t){let n=e;if(Td(e))return"string"===t?[]:[e.length];if("object"==typeof e&&"texture"in e){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Td(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Kd().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ab(e,r,[]),r}function Ab(e,t,n){if(n=n||[],!Array.isArray(e)&&!Td(e))return void ad(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));ad(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),ad(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)Ab(e[t],r,n.concat(t))}function _b(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function Rb(e,t,n,r="numeric"){if(e instanceof eb)return _b(r,e.dtype,t,n),e;let s=Rd(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),_b(r,s,t,n),null==e||!Td(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Cb(e,s);Td(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?Fy(e,s):ud(e,[],!0);return kb.makeTensor(o,a,s)}function Db(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>Rb(e,`${t}[${s}]`,n,r)))}$b.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),$b.registerFlag("IS_BROWSER",(()=>Eb())),$b.registerFlag("IS_NODE",(()=>void 0!==he&&void 0!==he.versions&&void 0!==he.versions.node)),$b.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),$b.registerFlag("PROD",(()=>!1)),$b.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>$b.getBool("DEBUG"))),$b.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),$b.registerFlag("IS_TEST",(()=>!1)),$b.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),$b.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),$b.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),$b.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),$b.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Fb="__op";function Ob(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Fb;const s=(...e)=>{kb.startScope(n);try{const t=r(...e);return Gd(t)&&console.error("Cannot return a Promise inside of tidy."),kb.endScope(t),t}catch(e){throw kb.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Mb=Ob({complex_:function(e,t){const n=Rb(e,"real","complex"),r=Rb(t,"imag","complex");od(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return kb.runKernel(If,s)}});function Lb(e,t,n,r){if(null==r&&(r=Rd(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if("object"==typeof e&&"texture"in e){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from texture only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return e.channels=e.channels||"RGBA",kb.backend.createTensorFromTexture(e,t||n,r)}if(!Td(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Wd(t);const e=ld(t),r=ld(n);ad(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==ld(t.slice(e));ad(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Td(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Fy(e,r):ud(e,[],!0),kb.makeTensor(e,t,r)}function zb(e,t,n){return Lb(e,t,Cb(e,n),n)}const Bb={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Pb=An;async function Wb(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:Ub(await Promise.all(r)),specs:n}}function Vb(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=ld(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=Bb[n.dtype],c=e.slice(s,s+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=tx()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=ld(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=Bb[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=zb(e,i,"float32"),o=zb(r,i,"float32");n[t]=Mb(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=zb(l,i,o))}return n}function Ub(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Gb=void 0!==Pb&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Hb(e){return Gb?Pb.byteLength(e):new Blob([e]).size}function qb(e){if(Gb)return Pb.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function jb(e){if(Gb){const t=Pb.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function Kb(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Xb(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Yb(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Zb(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function Jb(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Zb(e,n,r)}function Qb(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Hb(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Hb(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function ex(e){const t=[];for(const n of e)t.push(...n.weights);return t}function tx(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class nx{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==nx.instance&&(nx.instance=new nx),nx.instance}static registerSaveRouter(e){nx.getInstance().saveRouters.push(e)}static registerLoadRouter(e){nx.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return nx.getHandlers(e,"save")}static getLoadHandlers(e,t){return nx.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?nx.getInstance().loadRouters:nx.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const rx=e=>nx.registerSaveRouter(e),sx=e=>nx.registerLoadRouter(e),ax=e=>nx.getSaveHandlers(e),ox=(e,t)=>nx.getLoadHandlers(e,t),ix="tensorflowjs",ux="models_store",lx="model_info_store";function cx(){if(!Kd().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function px(e){const t=e.result;t.createObjectStore(ux,{keyPath:"modelPath"}),t.createObjectStore(lx,{keyPath:"modelPath"})}class hx{constructor(e){if(this.indexedDB=cx(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(ix,1);r.onupgradeneeded=()=>px(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(ux,"readonly"),r=t.objectStore(ux).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Qb(t),a=s.transaction(lx,"readwrite");let o=a.objectStore(lx);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction(ux,"readwrite");const i=u.objectStore(ux).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore(lx);const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}hx.URL_SCHEME="indexeddb://";const dx=e=>{return Kd().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(hx.URL_SCHEME)?(t=e.slice(hx.URL_SCHEME.length),new hx(t)):null;var t};nx.registerSaveRouter(dx),nx.registerLoadRouter(dx);class fx{constructor(){this.indexedDB=cx()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ix,1);n.onupgradeneeded=()=>px(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(lx,"readonly"),a=s.objectStore(lx).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(hx.URL_SCHEME)?t.slice(hx.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(ix,1);r.onupgradeneeded=()=>px(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(lx,"readwrite"),o=a.objectStore(lx),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction(ux,"readwrite");const r=u.objectStore(ux).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const mx="/",gx="tensorflowjs_models",yx="info",bx="model_topology",xx="weight_specs",wx="weight_data",kx="model_metadata";function vx(e){return{info:[gx,e,yx].join(mx),topology:[gx,e,bx].join(mx),weightSpecs:[gx,e,xx].join(mx),weightData:[gx,e,wx].join(mx),modelMetadata:[gx,e,kx].join(mx)}}function Nx(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Sx(e){const t=e.split(mx);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(mx)}class Ix{constructor(e){if(!Kd().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=vx(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Qb(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,qb(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw Nx(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=jb(a),t}}Ix.URL_SCHEME="localstorage://";const Tx=e=>{return Kd().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ix.URL_SCHEME)?(t=e.slice(Ix.URL_SCHEME.length),new Ix(t)):null;var t};nx.registerSaveRouter(Tx),nx.registerLoadRouter(Tx);class Ex{constructor(){ad(Kd().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),ad("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=gx+mx,n=mx+yx;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[Sx(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=vx(e=(t=e).startsWith(Ix.URL_SCHEME)?t.slice(Ix.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return Nx(n),r}}const $x="://";class Cx{constructor(){this.managers={}}static getInstance(){return null==Cx.instance&&(Cx.instance=new Cx),Cx.instance}static registerManager(e,t){ad(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith($x)&&(e=e.slice(0,e.indexOf($x))),ad(e.length>0,(()=>"scheme must not be an empty string."));const n=Cx.getInstance();ad(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Cx.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Cx.getInstance().managers)}}function Ax(e){if(-1===e.indexOf($x))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Cx.getSchemes().join(",")}`);return{scheme:e.split($x)[0],path:e.split($x)[1]}}async function _x(e,t,n=!1){ad(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=nx.getLoadHandlers(e);ad(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),ad(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=nx.getSaveHandlers(t);ad(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),ad(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=Ax(e).scheme,u=Ax(e).path,l=i===Ax(e).scheme,c=await s.load();n&&l&&await Cx.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await Cx.getManager(i).removeModel(u),p.modelArtifactsInfo}async function Rx(){const e=Cx.getSchemes(),t={};for(const n of e){const e=await Cx.getManager(n).listModels();for(const r in e){t[n+$x+r]=e[r]}}return t}async function Dx(e){const t=Ax(e);return Cx.getManager(t.scheme).removeModel(t.path)}async function Fx(e,t){return _x(e,t,!1)}async function Ox(e,t){return _x(e,t,!0)}class Mx{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&Kd().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(Kd().get("IS_BROWSER")){Kd().setPlatform("browser",new Mx);try{Cx.registerManager(Ix.URL_SCHEME,new Ex)}catch(e){}try{Cx.registerManager(hx.URL_SCHEME,new fx)}catch(e){}}const Lx=()=>a("foUwZ");let zx;function Bx(e,t="float32",n){return t=t||"float32",Wd(e),new Xy(e,t,n)}Kd().get("IS_NODE")&&!Kd().get("IS_BROWSER")&&Kd().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Kd().global.fetch?Kd().global.fetch(e,t):(null==zx&&(zx=Lx()),zx(e,t))}now(){const e=he.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Px=Ob({cast_:function(e,t){const n=Rb(e,"x","cast");if(!Sd(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return kb.runKernel(vf,r,s)}});const Wx=Ob({clone_:function(e){const t={x:Rb(e,"x","clone","string_or_numeric")};return kb.runKernel(dm,t)}});function Vx(e,t=!1){console.log(e.toString(t))}wb();!function(e){Zy=e}({buffer:Bx,cast:Px,clone:Wx,print:Vx});var Ux={};t(Ux,"copyModel",(()=>Fx)),t(Ux,"listModels",(()=>Rx)),t(Ux,"moveModel",(()=>Ox)),t(Ux,"removeModel",(()=>Dx)),t(Ux,"browserFiles",(()=>jx)),t(Ux,"browserHTTPRequest",(()=>nw)),t(Ux,"concatenateArrayBuffers",(()=>Kb)),t(Ux,"decodeWeights",(()=>Vb)),t(Ux,"encodeWeights",(()=>Wb)),t(Ux,"fromMemory",(()=>ow)),t(Ux,"fromMemorySync",(()=>iw)),t(Ux,"getLoadHandlers",(()=>ox)),t(Ux,"getModelArtifactsForJSON",(()=>Jb)),t(Ux,"getModelArtifactsForJSONSync",(()=>Zb)),t(Ux,"getModelArtifactsInfoForJSON",(()=>Qb)),t(Ux,"getSaveHandlers",(()=>ax)),t(Ux,"getWeightSpecs",(()=>ex)),t(Ux,"http",(()=>tw)),t(Ux,"isHTTPScheme",(()=>Qx)),t(Ux,"loadWeights",(()=>Yx)),t(Ux,"registerLoadRouter",(()=>sx)),t(Ux,"registerSaveRouter",(()=>rx)),t(Ux,"weightsLoaderFactory",(()=>Zx)),t(Ux,"withSaveHandler",(()=>uw)),t(Ux,"withSaveHandlerSync",(()=>lw));function Gx(e){return new Promise((e=>setTimeout(e))).then(e)}class Hx{constructor(e){if(!Kd().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Hx.URL_SCHEME)&&(e=e.slice(Hx.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Yb(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Gx((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Gx((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Qb(e)}}}}Hx.URL_SCHEME="downloads://";class qx{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Jb(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,Kb(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Xb(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Xb(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function jx(e){return new qx(e)}function Kx(e,t,n,r){!function(e){ad(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){ad(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),ad(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),ad(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function Xx(e,t){null==t&&(t={});const n=null==t.fetchFunc?Kd().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Kx(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Kx(s,t.onProgress,.5,1)}async function Yx(e,t="",n,r){return Zx((e=>Xx(e,{requestInit:r})))(e,t,n)}function Zx(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=Bb[u]*ld(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=Vb(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}nx.registerSaveRouter((e=>Kd().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Hx.URL_SCHEME)?function(e="model"){return new Hx(e)}(e.slice(Hx.URL_SCHEME.length)):null));class Jx{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ad("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Kd().platform.fetch,ad(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&ad(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Yb(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Qb(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Jb(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=ex(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,Kb(await Xx(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Qx(e){return null!=e.match(Jx.URL_SCHEME_REGEX)}Jx.URL_SCHEME_REGEX=/^https?:\/\//;const ew=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Qx(e))):Qx(e),n)return tw(e,t)}return null};function tw(e,t){return new Jx(e,t)}function nw(e,t){return tw(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */nx.registerSaveRouter(ew),nx.registerLoadRouter(ew);class rw{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class sw{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class aw{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function ow(e,t,n,r){const s=arguments;return new aw(iw(...s))}function iw(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new rw(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new rw({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new rw({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function uw(e){return new sw(e)}function lw(e){return new sw(e)}var cw={};function pw(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function hw(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function dw(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(cw,"getBroadcastDims",(()=>pw)),t(cw,"getReductionAxes",(()=>hw)),t(cw,"assertAndGetBroadcastShape",(()=>dw));var fw={};function mw(e,t,n){if(id(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Cb(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Lb(e,t,r,n)}let gw;function yw(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=hy(ny,kb.backendName)){const n={pixels:e},r={numChannels:t};return kb.runKernel(ny,n,r)}const[u,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,u,l).data;else if(r||n)c=e.data;else if(a||s||i){if(null==gw)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");gw=new OffscreenCanvas(1,1).getContext("2d")}else gw=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});gw.canvas.width=u,gw.canvas.height=l,gw.drawImage(e,0,0,u,l),c=gw.getImageData(0,0,u,l).data}if(4===t)p=new Int32Array(c);else{const e=u*l;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return mw(p,[l,u,t],"int32")}function bw(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function xw(e,t=3){let n=null;if(Kd().getBool("WRAP_TO_IMAGEBITMAP")&&bw(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return yw(n,t)}async function ww(e,t){let n=Rb(e,"img","toPixels");if(!(e instanceof eb)){const e=n;n=Px(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=o[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*i,t[1]=s*i,t[2]=s*i):t[r]=s*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}t(fw,"fromPixelsAsync",(()=>xw)),t(fw,"toPixels",(()=>ww)),t(fw,"fromPixels",(()=>kw));const kw=Ob({fromPixels_:yw});var vw={};t(vw,"assertParamsValid",(()=>Nw)),t(vw,"maskToAxes",(()=>Sw)),t(vw,"computeOutShape",(()=>Iw)),t(vw,"stridesWithElidedDims",(()=>Tw)),t(vw,"getNormalizedAxes",(()=>Cw)),t(vw,"startIndicesWithElidedDims",(()=>Aw)),t(vw,"stopIndicesWithElidedDims",(()=>_w)),t(vw,"startForAxis",(()=>Dw)),t(vw,"stopForAxis",(()=>Fw)),t(vw,"stridesForAxis",(()=>Rw)),t(vw,"isSliceContinous",(()=>Ow)),t(vw,"computeFlatOffset",(()=>Mw)),t(vw,"parseSliceParams",(()=>Lw)),t(vw,"sliceInfo",(()=>zw));function Nw(e,t,n){const r=e.shape.length;ad(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),ad(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)ad(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function Sw(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Iw(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function Tw(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function Ew(e,t,n){return n<=e?n:n-(t-1)}function $w(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Cw(e,t,n,r,s,a,o,i,u){const l=e.length;let c=new Array(l),p=new Array(l),h=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=Aw(o,u,l,r,e),p=_w(i,u,l,s,e),h=Tw(a,u,l,e)}else for(let t=0;t<l;t++)c[t]=Dw(o,r,a,e,t,u),p[t]=Fw(i,s,a,e,t,u),h[t]=Rw(a,t,u);return{begin:c,end:p,strides:h}}function Aw(e,t,n,r,s){const a=[...s],o=$w(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=Ew(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function _w(e,t,n,r,s){const a=[...s],o=$w(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=Ew(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=Qh(0,a[e],s[e])}return a}function Rw(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function Dw(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=Qh(0,o,u-1),o}function Fw(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=i>0?Qh(0,o,u):Qh(-1,o,u-1),o}function Ow(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function Mw(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Lw(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{ad(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(ad(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function zw(e,t,n,r,s,a,o,i,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[h.beginMask&1<<t,h.endMask&1<<t],a=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=Bw(h.begin[t],0,h.strides[t],r,s,a),h.end[t]=Bw(h.end[t],1,h.strides[t],r,s,a);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,u=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],u=!0):n?(i=1,u=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,u=!0),u){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==h.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function Bw(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var Pw={};t(Pw,"Serializable",(()=>Ww)),t(Pw,"SerializationMap",(()=>Vw)),t(Pw,"registerClass",(()=>Uw));class Ww{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Vw{constructor(){this.classNameMap={}}static getMap(){return null==Vw.instance&&(Vw.instance=new Vw),Vw.instance}static register(e){Vw.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Uw(e){ad(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),ad("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),ad(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Vw.register(e)}
/** @license See the LICENSE file. */var Gw={};t(Gw,"fromUint8ToStringArray",(()=>Jv)),t(Gw,"fromStringArrayToUint8",(()=>Qv)),t(Gw,"slice_util",(()=>vw)),t(Gw,"upcastType",(()=>cb)),t(Gw,"segment_util",(()=>Hw));var Hw={};t(Hw,"segOpComputeOptimalWindowSize",(()=>Xw)),t(Hw,"computeOutShape",(()=>Yw)),t(Hw,"collectGatherOpShapeInfo",(()=>Zw));var qw={};t(qw,"PARALLELIZE_THRESHOLD",(()=>jw)),t(qw,"computeOptimalWindowSize",(()=>Kw));const jw=30;function Kw(e){return e<=jw?e:Fd(e,Math.floor(Math.sqrt(e)))}function Xw(e,t){let n,r=!1;for(e<=jw?(n=e,r=!0):n=Fd(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Fd(e,n+1);return n}function Yw(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function Zw(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}var Jw={};function Qw(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function ek(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function tk(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function nk(e,t){return ek(e,t.map((e=>1)),t)}function rk(e,t,n){ad(Qw(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function sk(e,t){if(Qw(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function ak(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function ok(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(Jw,"axesAreInnerMostDims",(()=>Qw)),t(Jw,"combineLocations",(()=>ek)),t(Jw,"computeOutAndReduceShapes",(()=>tk)),t(Jw,"expandShapeToKeepDim",(()=>nk)),t(Jw,"assertAxesAreInnerMostDims",(()=>rk)),t(Jw,"getAxesPermutation",(()=>sk)),t(Jw,"getUndoAxesPermutation",(()=>ak)),t(Jw,"getInnerMostAxes",(()=>ok));var ik={};function uk(e,t){const n=e[0].length;e.forEach(((e,t)=>{ad(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),ad(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)ad(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function lk(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t(ik,"assertParamsConsistent",(()=>uk)),t(ik,"computeOutShape",(()=>lk));var ck={};function pk(e,t,n,r,s="NHWC",a){return fk(e,[...t,e[3]],n,a,r,null,null,Nk(s))}function hk(e,t,n,r,s,a,o="channelsLast"){const[i,u]=yk(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return fk(e,l,n,r,s,a,!1,o)}function dk(e,t,n,r,s,a,o="NDHWC"){const[i,u,l]=bk(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,u,l,e[1],e[1]]}return mk(e,c,n,r,s,!1,p,a)}function fk(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[h,d,,f]=t,[m,g]=yk(n),[y,b]=yk(r),x=xk(h,y),w=xk(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=gk(e,t,n));const a=e[0],o=e[1],i=wk((a-t+2*r)/n+1,s),u=wk((o-t+2*r)/n+1,s);return[i,u]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);l={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=wk((t-a+h+d)/r+1,i),p=wk((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[u,S,v,N]:"channelsLast"===i&&(I=[u,v,N,S]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function mk(e,t,n,r,s,a=!1,o="channelsLast",i){let[u,l,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=bk(n),[w,k,v]=bk(r),N=xk(d,w),S=xk(f,k),I=xk(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,s,a,o,i,u,l,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=gk(e,t,r));const o=e[0],i=e[1],u=e[2],l=wk((o-t+2*s)/r+1,a),c=wk((i-t+2*s)/r+1,a),p=wk((u-t+2*s)/r+1,a);return[l,c,p,n]}([t,n,r,1],i,1,s,e,c);h=a[0],d=a[1],f=a[2]}else if("same"===e){h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+u-n,m=(f-1)*o+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,l,c,p,y,b,x,N,S,I,i),A=a?g*h:g;let _;return"channelsFirst"===o?_=[u,A,E,$,C]:"channelsLast"===o&&(_=[u,E,$,C,A]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:_,filterShape:t}}function gk(e,t,n,r=1){const s=xk(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function yk(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function bk(e){return"number"==typeof e?[e,e,e]:e}function xk(e,t){return t<=1?e:e+(e-1)*(t-1)}function wk(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function kk(e){const[t,n,r]=yk(e);return 1===t&&1===n&&1===r}function vk(e,t){return kk(e)||kk(t)}function Nk(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Sk(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)ad(hd(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{ad(hd(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(ck,"computeDilation2DInfo",(()=>pk)),t(ck,"convertConv2DDataFormat",(()=>Nk)),t(ck,"computeConv2DInfo",(()=>fk)),t(ck,"computePool2DInfo",(()=>hk)),t(ck,"computePool3DInfo",(()=>dk)),t(ck,"computeConv3DInfo",(()=>mk)),t(ck,"computeDefaultPad",(()=>gk)),t(ck,"tupleValuesAreOne",(()=>kk)),t(ck,"eitherStridesOrDilationsAreOne",(()=>vk)),t(ck,"checkPadOnDimRoundingMode",(()=>Sk));var Ik={};t(Ik,"getFusedDyActivation",(()=>Mk)),t(Ik,"getFusedBiasGradient",(()=>Lk)),t(Ik,"applyActivation",(()=>zk)),t(Ik,"shouldFuse",(()=>Bk));const Tk=Ob({elu_:function(e){const t={x:Rb(e,"x","elu","float32")};return kb.runKernel(Yf,t)}});const Ek=Ob({leakyRelu_:function(e,t=.2){const n={x:Rb(e,"x","leakyRelu")},r={alpha:t};return kb.runKernel(xm,n,r)}});const $k=Ob({mul_:function(e,t){let n=Rb(e,"a","mul"),r=Rb(t,"b","mul");[n,r]=hb(n,r);const s={a:n,b:r};return kb.runKernel(Um,s)}});const Ck=Ob({prelu_:function(e,t){const n={x:Rb(e,"x","prelu"),alpha:Rb(t,"alpha","prelu")};return kb.runKernel(eg,n)}});const Ak=Ob({relu_:function(e){const t={x:Rb(e,"x","relu")};return kb.runKernel(ug,t)}});const _k=Ob({relu6_:function(e){const t={x:Rb(e,"x","relu6")};return kb.runKernel(fg,t)}});const Rk=Ob({reshape_:function(e,t){const n={x:Rb(e,"x","reshape","string_or_numeric")},r={shape:t};return kb.runKernel(lg,n,r)}});const Dk=Ob({sigmoid_:function(e){const t={x:Rb(e,"x","sigmoid","float32")};return kb.runKernel(Tg,t)}});const Fk=Ob({step_:function(e,t=0){const n={x:Rb(e,"x","step")},r={alpha:t};return kb.runKernel(ty,n,r)}});const Ok=Ob({sum_:function(e,t=null,n=!1){let r=Rb(e,"x","sum");"bool"===r.dtype&&(r=Px(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return kb.runKernel(Cg,s,a)}});function Mk(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return $k(e,Fk(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Lk(e,t){let n=t;const r=hw(e.shape,t.shape);return r.length>0&&(n=Ok(n,r)),Rk(n,e.shape)}function zk(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Ak(e);if("elu"===t)return Tk(e);if("relu6"===t)return _k(e);if("prelu"===t)return Ck(e,n);if("leakyrelu"===t)return Ek(e,r);if("sigmoid"===t)return Dk(e);throw new Error(`Unknown fused activation ${t}.`)}const Bk=(e,t)=>!(e>0)||"linear"===t;var Pk,Wk,Vk={};function Uk(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],o=r[r.length-n.length+s],i=r[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${i}`)}else r[o]=a}return r}function Gk(e){const t={FIRST_DIM_SIZE:Pk.FIRST_DIM_SIZE,VALUE_ROWIDS:Pk.VALUE_ROWIDS,ROW_LENGTHS:Pk.ROW_LENGTHS,ROW_SPLITS:Pk.ROW_SPLITS,ROW_LIMITS:Pk.ROW_LIMITS,ROW_STARTS:Pk.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function Hk(e){return 0===e.length?0:e[0]===Pk.FIRST_DIM_SIZE?e.length-1:e.length}function qk(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}t(Vk,"RowPartitionType",(()=>Pk)),t(Vk,"combineRaggedTensorToTensorShapes",(()=>Uk)),t(Vk,"getRowPartitionTypesHelper",(()=>Gk)),t(Vk,"getRaggedRank",(()=>Hk)),t(Vk,"validateDefaultValueShape",(()=>qk)),(Wk=Pk||(Pk={}))[Wk.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",Wk[Wk.VALUE_ROWIDS=1]="VALUE_ROWIDS",Wk[Wk.ROW_LENGTHS=2]="ROW_LENGTHS",Wk[Wk.ROW_SPLITS=3]="ROW_SPLITS",Wk[Wk.ROW_LIMITS=4]="ROW_LIMITS",Wk[Wk.ROW_STARTS=5]="ROW_STARTS";var jk={};function Kk(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(jk,"getImageCenter",(()=>Kk));var Xk={};function Yk(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function Zk(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Jk(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function Qk(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function ev(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}t(Xk,"getReshaped",(()=>Yk)),t(Xk,"getPermuted",(()=>Zk)),t(Xk,"getReshapedPermuted",(()=>Jk)),t(Xk,"getSliceBeginCoords",(()=>Qk)),t(Xk,"getSliceSize",(()=>ev));var tv={};function nv(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===ld(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,u=s.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=i[e],u.push(i[e]);const c=[...Od(e.shape).map((e=>e/l)),1].slice(0,a);return[u,o,l,c]}t(tv,"prepareAndValidate",(()=>nv));var rv={};function sv(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function av(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}sv(n,t,e)}function ov(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:ld(t.shape)/i,sliceSize:o,strides:[...Od(n.slice(0,s)),1],outputSize:ld(n)}}t(rv,"validateUpdateShape",(()=>sv)),t(rv,"validateInput",(()=>av)),t(rv,"calculateShapes",(()=>ov));var iv={};t(iv,"SELU_SCALEALPHA",(()=>uv)),t(iv,"SELU_SCALE",(()=>lv));const uv=1.7580993408473768,lv=1.0507009873554805;var cv={};t(cv,"ERF_P",(()=>pv)),t(cv,"ERF_A1",(()=>hv)),t(cv,"ERF_A2",(()=>dv)),t(cv,"ERF_A3",(()=>fv)),t(cv,"ERF_A4",(()=>mv)),t(cv,"ERF_A5",(()=>gv));const pv=.3275911,hv=.254829592,dv=-.284496736,fv=1.421413741,mv=-1.453152027,gv=1.061405429;var yv={};function bv(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function xv(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function wv(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function kv(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function vv(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Nv(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Sv(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Iv(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(yv,"mergeRealAndImagArrays",(()=>bv)),t(yv,"splitRealAndImagArrays",(()=>xv)),t(yv,"complexWithEvenIndex",(()=>wv)),t(yv,"complexWithOddIndex",(()=>kv)),t(yv,"getComplexWithIndex",(()=>vv)),t(yv,"assignToTypedArray",(()=>Nv)),t(yv,"exponents",(()=>Sv)),t(yv,"exponent",(()=>Iv));var Tv={};t(Tv,"decodeEinsumEquation",(()=>Cv)),t(Tv,"getEinsumPermutation",(()=>Av)),t(Tv,"checkEinsumDimSizes",(()=>_v)),t(Tv,"getEinsumComputePath",(()=>Rv)),t(Tv,"isIdentityPermutation",(()=>Dv));const Ev="->",$v=/->/g;function Cv(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace($v,"").length)/Ev.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split(Ev);ad(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=r.split(","),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const u=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(i.indexOf(a[e][t]))}const l=i.length,c=[];for(let e=s.length;e<l;++e)c.push(e);return{allDims:i,summedDims:c,idDims:u}}function Av(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function _v(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:ad(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function Rv(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=Fv(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function Dv(e){return e.every(((e,t)=>e===t))}function Fv(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var Ov={};function Mv(e,t,n=0){let r=[];if("number"==typeof t)ad(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{ad(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}ad(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}t(Ov,"prepareSplitSize",(()=>Mv));var Lv={};function zv(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Bv(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Pv(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(Lv,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>zv)),t(Lv,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>Bv)),t(Lv,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>Pv));var Wv={};function Vv(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Uv(e,t){return`size ${e} must be non-negative, not ${t}`}function Gv(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Hv(e,t){return`Input to reshape is a SparseTensor with ${ld(e)}\n  dense values, but the requested shape requires a multiple of ${ld(t)}. inputShape=${e} outputShape= ${t}`}function qv(e,t){return`Input to reshape is a tensor with ${ld(e)} dense values, but the requested shape has ${ld(t)}. inputShape=${e} outputShape=${t}`}t(Wv,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>Vv)),t(Wv,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>Uv)),t(Wv,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>Gv)),t(Wv,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>Hv)),t(Wv,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>qv));var jv={};function Kv(){return"segment ids must be >= 0"}function Xv(){return"segment ids are not increasing"}function Yv(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Zv(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Jv(e){try{return e.map((e=>zy(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Qv(e){return e.map((e=>Ly(e)))}t(jv,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>Kv)),t(jv,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>Xv)),t(jv,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>Yv)),t(jv,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>Zv)),n(Gw,Jw),n(Gw,cw),n(Gw,ik),n(Gw,ck),n(Gw,Ik),n(Gw,{}),n(Gw,Vk),n(Gw,qw),n(Gw,jk),n(Gw,Xk),n(Gw,tv),n(Gw,rv),n(Gw,iv),n(Gw,cv),n(Gw,iy),n(Gw,yv),n(Gw,Tv),n(Gw,Ov),n(Gw,Lv),n(Gw,Wv),n(Gw,jv);var eN={};function tN(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||nN)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function nN(e,t){return e>t?1:e<t?-1:0}function rN(e,t,n,r,s){return oN(e,t,n,r,s,0)}function sN(e,t,n,r,s,a){return oN(e,t,n,r,s,0,!1,a,!0)}function aN(e,t,n,r,s,a){return oN(e,t,n,r,s,a,!0)}function oN(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(lN);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=iN(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*uN(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&tN(l,t,lN))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),u&&(m.validOutputs=d),m}function iN(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),f=(p-l)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(u,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function uN(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function lN(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function cN(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Bx(e,"int32"),s=Bx([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}function pN(){return kb}function hN(){return kb.memory()}function dN(e,t){return kb.tidy(e,t)}function fN(e){mb(e).forEach((e=>e.dispose()))}function mN(e){return kb.keep(e)}function gN(e,t,n=1){return kb.registerBackend(e,t,n)}function yN(e,t){ad(Dd(e),(()=>"The f passed in variableGrads(f) must be a function")),ad(null==t||Array.isArray(t)&&t.every((e=>e instanceof nb)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in kb.registeredVariables)t.push(kb.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;ad((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:o}=kb.gradients(e,t,null,!0);ad(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),ad(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:a,grads:i}}function bN(e){return kb.customGrad(e)}t(eN,"nonMaxSuppressionV3Impl",(()=>rN)),t(eN,"nonMaxSuppressionV4Impl",(()=>sN)),t(eN,"nonMaxSuppressionV5Impl",(()=>aN)),t(eN,"whereImpl",(()=>cN)),function(e){Jy=e}((function(e){Kd().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}));var xN={};t(xN,"spectral",(()=>r$)),t(xN,"signal",(()=>s$)),t(xN,"image",(()=>a$)),t(xN,"linalg",(()=>o$)),t(xN,"losses",(()=>i$)),t(xN,"sparse",(()=>u$)),t(xN,"string",(()=>l$)),t(xN,"abs",(()=>DS)),t(xN,"acos",(()=>vI)),t(xN,"acosh",(()=>NI)),t(xN,"add",(()=>FN)),t(xN,"addN",(()=>SI)),t(xN,"all",(()=>II)),t(xN,"any",(()=>TI)),t(xN,"argMax",(()=>EI)),t(xN,"argMin",(()=>$I)),t(xN,"asin",(()=>CI)),t(xN,"asinh",(()=>AI)),t(xN,"atan",(()=>_I)),t(xN,"atan2",(()=>RI)),t(xN,"atanh",(()=>DI)),t(xN,"avgPool",(()=>FI)),t(xN,"avgPool3d",(()=>OI)),t(xN,"basicLSTMCell",(()=>LI)),t(xN,"batchToSpaceND",(()=>zI)),t(xN,"batchNorm",(()=>PI)),t(xN,"batchNorm2d",(()=>WI)),t(xN,"batchNorm3d",(()=>VI)),t(xN,"batchNorm4d",(()=>UI)),t(xN,"bincount",(()=>mS)),t(xN,"broadcastArgs",(()=>GI)),t(xN,"broadcastTo",(()=>vS)),t(xN,"buffer",(()=>Bx)),t(xN,"cast",(()=>Px)),t(xN,"ceil",(()=>HI)),t(xN,"clipByValue",(()=>qI)),t(xN,"clone",(()=>Wx)),t(xN,"complex",(()=>Mb)),t(xN,"concat",(()=>wN)),t(xN,"concat1d",(()=>jI)),t(xN,"concat2d",(()=>KI)),t(xN,"concat3d",(()=>XI)),t(xN,"concat4d",(()=>YI)),t(xN,"conv1d",(()=>ZI)),t(xN,"conv2d",(()=>ON)),t(xN,"conv2dTranspose",(()=>JI)),t(xN,"conv3d",(()=>QI)),t(xN,"conv3dTranspose",(()=>tT)),t(xN,"cos",(()=>nT)),t(xN,"cosh",(()=>rT)),t(xN,"cumprod",(()=>sT)),t(xN,"cumsum",(()=>aT)),t(xN,"denseBincount",(()=>oT)),t(xN,"depthToSpace",(()=>iT)),t(xN,"depthwiseConv2d",(()=>BN)),t(xN,"diag",(()=>uT)),t(xN,"dilation2d",(()=>lT)),t(xN,"div",(()=>xS)),t(xN,"divNoNan",(()=>pT)),t(xN,"dot",(()=>hT)),t(xN,"einsum",(()=>dT)),t(xN,"elu",(()=>Tk)),t(xN,"equal",(()=>cT)),t(xN,"erf",(()=>fT)),t(xN,"euclideanNorm",(()=>mT)),t(xN,"exp",(()=>cI)),t(xN,"expandDims",(()=>US)),t(xN,"expm1",(()=>gT)),t(xN,"eye",(()=>GS)),t(xN,"fill",(()=>ZN)),t(xN,"floor",(()=>yT)),t(xN,"floorDiv",(()=>bS)),t(xN,"gather",(()=>bT)),t(xN,"greater",(()=>yS)),t(xN,"greaterEqual",(()=>ES)),t(xN,"imag",(()=>kN)),t(xN,"isFinite",(()=>xT)),t(xN,"isInf",(()=>wT)),t(xN,"isNaN",(()=>kT)),t(xN,"leakyRelu",(()=>Ek)),t(xN,"less",(()=>vT)),t(xN,"lessEqual",(()=>gS)),t(xN,"linspace",(()=>NT)),t(xN,"localResponseNormalization",(()=>ST)),t(xN,"log",(()=>oI)),t(xN,"log1p",(()=>pI)),t(xN,"logSigmoid",(()=>TT)),t(xN,"logSoftmax",(()=>ET)),t(xN,"logSumExp",(()=>dI)),t(xN,"logicalAnd",(()=>$S)),t(xN,"logicalNot",(()=>$T)),t(xN,"logicalOr",(()=>CT)),t(xN,"logicalXor",(()=>AT)),t(xN,"lowerBound",(()=>FT)),t(xN,"matMul",(()=>UN)),t(xN,"max",(()=>FS)),t(xN,"maxPool",(()=>OT)),t(xN,"maxPool3d",(()=>MT)),t(xN,"maxPoolWithArgmax",(()=>LT)),t(xN,"maximum",(()=>zT)),t(xN,"mean",(()=>ZS)),t(xN,"meshgrid",(()=>BT)),t(xN,"min",(()=>OS)),t(xN,"minimum",(()=>sI)),t(xN,"mirrorPad",(()=>PT)),t(xN,"mod",(()=>WT)),t(xN,"moments",(()=>VT)),t(xN,"mul",(()=>$k)),t(xN,"multiRNNCell",(()=>UT)),t(xN,"multinomial",(()=>GT)),t(xN,"neg",(()=>HS)),t(xN,"notEqual",(()=>JS)),t(xN,"oneHot",(()=>HT)),t(xN,"ones",(()=>QS)),t(xN,"onesLike",(()=>qT)),t(xN,"outerProduct",(()=>jT)),t(xN,"pad",(()=>KT)),t(xN,"pad1d",(()=>XT)),t(xN,"pad2d",(()=>YT)),t(xN,"pad3d",(()=>ZT)),t(xN,"pad4d",(()=>JT)),t(xN,"pool",(()=>eE)),t(xN,"pow",(()=>MS)),t(xN,"prelu",(()=>Ck)),t(xN,"print",(()=>Vx)),t(xN,"prod",(()=>tE)),t(xN,"raggedGather",(()=>nE)),t(xN,"raggedRange",(()=>rE)),t(xN,"raggedTensorToTensor",(()=>sE)),t(xN,"rand",(()=>aE)),t(xN,"randomGamma",(()=>lE)),t(xN,"randomNormal",(()=>cE)),t(xN,"randomStandardNormal",(()=>pE)),t(xN,"randomUniform",(()=>hE)),t(xN,"range",(()=>SS)),t(xN,"real",(()=>vN)),t(xN,"reciprocal",(()=>dE)),t(xN,"relu",(()=>Ak)),t(xN,"relu6",(()=>_k)),t(xN,"reshape",(()=>Rk)),t(xN,"reverse",(()=>AN)),t(xN,"reverse1d",(()=>fE)),t(xN,"reverse2d",(()=>mE)),t(xN,"reverse3d",(()=>gE)),t(xN,"reverse4d",(()=>yE)),t(xN,"round",(()=>kS)),t(xN,"rsqrt",(()=>bE)),t(xN,"scalar",(()=>_N)),t(xN,"selu",(()=>xE)),t(xN,"separableConv2d",(()=>wE)),t(xN,"setdiff1dAsync",(()=>kE)),t(xN,"sigmoid",(()=>Dk)),t(xN,"sign",(()=>vE)),t(xN,"sin",(()=>NE)),t(xN,"sinh",(()=>SE)),t(xN,"slice",(()=>NN)),t(xN,"slice1d",(()=>IE)),t(xN,"slice2d",(()=>TE)),t(xN,"slice3d",(()=>EE)),t(xN,"slice4d",(()=>$E)),t(xN,"softmax",(()=>CE)),t(xN,"softplus",(()=>IT)),t(xN,"spaceToBatchND",(()=>QT)),t(xN,"fft",(()=>EN)),t(xN,"ifft",(()=>CN)),t(xN,"irfft",(()=>RN)),t(xN,"rfft",(()=>$N)),t(xN,"split",(()=>SN)),t(xN,"sqrt",(()=>LS)),t(xN,"square",(()=>zS)),t(xN,"squaredDifference",(()=>uI)),t(xN,"squeeze",(()=>WS)),t(xN,"stack",(()=>CS)),t(xN,"step",(()=>Fk)),t(xN,"stridedSlice",(()=>AE)),t(xN,"sub",(()=>wS)),t(xN,"sum",(()=>Ok)),t(xN,"tan",(()=>_E)),t(xN,"tanh",(()=>MI)),t(xN,"tensor",(()=>zb)),t(xN,"tensor1d",(()=>qN)),t(xN,"tensor2d",(()=>JN)),t(xN,"tensor3d",(()=>mw)),t(xN,"tensor4d",(()=>RE)),t(xN,"tensor5d",(()=>DE)),t(xN,"tensor6d",(()=>FE)),t(xN,"tile",(()=>rS)),t(xN,"topk",(()=>OE)),t(xN,"truncatedNormal",(()=>ME)),t(xN,"unique",(()=>LE)),t(xN,"unsortedSegmentSum",(()=>zE)),t(xN,"unstack",(()=>AS)),t(xN,"upperBound",(()=>BE)),t(xN,"variable",(()=>PE)),t(xN,"where",(()=>NS)),t(xN,"whereAsync",(()=>WE)),t(xN,"zeros",(()=>IN)),t(xN,"zerosLike",(()=>TN)),t(xN,"op",(()=>Ob)),t(xN,"OP_SCOPE_SUFFIX",(()=>Fb)),t(xN,"fused",(()=>DN));const wN=Ob({concat_:function(e,t=0){ad(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Db(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Wx(n[0]);const r=n,s={axis:t};return kb.runKernel(Ef,r,s)}});const kN=Ob({imag_:function(e){const t={input:Rb(e,"input","imag")};return kb.runKernel(mm,t)}});const vN=Ob({real_:function(e){const t={input:Rb(e,"input","real")};return kb.runKernel(og,t)}});const NN=Ob({slice_:function(e,t,n){const r=Rb(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return kb.runKernel(vg,s,a)}});const SN=Ob({split_:function(e,t,n=0){const r={x:Rb(e,"x","split")},s={numOrSizeSplits:t,axis:n};return kb.runKernel(_g,r,s)}});function IN(e,t="float32"){if("complex64"===t){const t=IN(e,"float32"),n=IN(e,"float32");return Mb(t,n)}const n=Bd(ld(e),t);return kb.makeTensor(n,e,t)}const TN=Ob({zerosLike_:function(e){const t={x:Rb(e,"x","zerosLike")};return kb.runKernel(ey,t)}});const EN=Ob({fft_:function(e){ad("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return kb.runKernel(rm,t)}});const $N=Ob({rfft_:function(e,t){ad("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=NN(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=wN([e,IN(r)],e.shape.length-1),n=t}else s=e;const a=TN(s),o=Rk(Mb(s,a),[r,n]),i=EN(o),u=Math.floor(n/2)+1,l=vN(i),c=kN(i),p=SN(l,[u,n-u],l.shape.length-1),h=SN(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,Rk(Mb(p[0],h[0]),d)}});const CN=Ob({ifft_:function(e){ad("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return kb.runKernel(fm,t)}});const AN=Ob({reverse_:function(e,t){const n={x:Rb(e,"x","reverse")},r={dims:t};return kb.runKernel(mg,n,r)}});function _N(e,t){if((Td(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Td(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Lb(e,[],[],t)}const RN=Ob({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Rk(e,[n,t]);r=CN(s)}else{const s=[n,2*(t-1)],a=Rk(vN(e),[n,t]),o=Rk(kN(e),[n,t]),i=AN(NN(a,[0,1],[n,t-2]),1),u=$k(AN(NN(o,[0,1],[n,t-2]),1),_N(-1)),l=wN([a,i],1),c=wN([o,u],1),p=Rk(Mb(l,c),[s[0],s[1]]);r=CN(p)}if(r=vN(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Rk(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var DN={};t(DN,"conv2d",(()=>zN)),t(DN,"depthwiseConv2d",(()=>VN)),t(DN,"matMul",(()=>GN));const FN=Ob({add_:function(e,t){let n=Rb(e,"a","add"),r=Rb(t,"b","add");[n,r]=hb(n,r);const s={a:n,b:r};return kb.runKernel(nf,s)}});const ON=Ob({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Rb(e,"x","conv2d","float32"),u=Rb(t,"filter","conv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Rk(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ad(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),ad(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),Sk("conv2d",r,o);const p="NHWC"===s?l.shape[3]:l.shape[1];ad(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),ad(vk(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=kb.runKernel($f,h,d);return c?Rk(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const MN=Ob({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=Rk(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Rk(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ad(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),ad(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),ad(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];ad(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),ad(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Sk("conv2dDerFilter",s,o);const p={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return kb.runKernel(Cf,p,h)}});const LN=Ob({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){ad(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=Rk(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),ad(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),ad(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),ad(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];ad(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),ad(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Sk("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=kb.runKernel(Af,h,d);return l?Rk(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const zN=Ob({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===Bk(kb.state.gradientDepth,u)){ad("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=ON(e,t,n,r,s,a,o);return null!=i&&(p=FN(p,i)),zk(p,u,l,c)}const p=Rb(e,"x","conv2d","float32"),h=Rb(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Rk(p,[1,p.shape[0],p.shape[1],p.shape[2]])),ad(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),ad(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),Sk("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];ad(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),ad(vk(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=fk(d.shape,h.shape,n,a,r,o);let y,b;if(null!=i&&(y=Rb(i,"bias","fused conv2d"),[y]=hb(y,p),"NHWC"===s?dw(g.outShape,y.shape):(ad(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),ad(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(ad(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)ad(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{dw(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=Rb(l,"prelu weights","fused conv2d")}const x=(e,t)=>{ad("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,l,c]=t,p=Mk(e,l,u);ad(kk(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[LN(i.shape,p,o,n,r),MN(i,p,o.shape,n,r)];if(null!=c){const e=Lk(c,p);h.push(e)}return h},w={x:d,filter:h,bias:y,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=bN(((e,t,n)=>{let r=kb.runKernel(ay,w,k);return n([t,e,r]),f&&(r=Rk(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=bN(((e,t,n,r)=>{let s=kb.runKernel(ay,w,k);return r([t,e,s,n]),f&&(s=Rk(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,y)}}});const BN=Ob({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Rb(e,"x","depthwiseConv2d","float32"),u=Rb(t,"filter","depthwiseConv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Rk(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ad(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),ad(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const p="NHWC"===s?l.shape[3]:l.shape[1];ad(p===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Sk("depthwiseConv2d",r,o);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=kb.runKernel(Wf,h,d);return c?Rk(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const PN=Ob({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=Rk(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Rk(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return kb.runKernel(Vf,l,c)}});const WN=Ob({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=Rk(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=kb.runKernel(Uf,l,c);return u?Rk(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const VN=Ob({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===Bk(kb.state.gradientDepth,u)){let p=BN(e,t,n,r,s,a,o);return null!=i&&(p=FN(p,i)),zk(p,u,l,c)}const p=Rb(e,"x","depthwiseConv2d","float32"),h=Rb(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Rk(p,[1,p.shape[0],p.shape[1],p.shape[2]])),ad(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),ad(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),ad(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),ad(vk(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Sk("fused depthwiseConv2d",r,o);const m=fk(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=Rb(i,"bias","fused conv2d"),[g]=hb(g,p),dw(m.outShape,g.shape)),null!=l&&(y=Rb(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{ad(kk(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,l,c]=t,p=Mk(e,l,u),h=WN(i.shape,p,s,n,r,a,o),d=PN(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,Lk(g,p)]}return[h,d]},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=bN(((e,t,n)=>{let r=kb.runKernel(oy,x,w);return n([t,e,r]),f&&(r=Rk(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=bN(((e,t,n,r)=>{let s=kb.runKernel(oy,x,w);return r([t,e,s,n]),f&&(s=Rk(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,g)}}});const UN=Ob({matMul_:function(e,t,n=!1,r=!1){let s=Rb(e,"a","matMul"),a=Rb(t,"b","matMul");[s,a]=hb(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return kb.runKernel(bf,o,i)}});const GN=Ob({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Bk(kb.state.gradientDepth,a)){let u=UN(e,t,n,r);return null!=s&&(u=FN(u,s)),zk(u,a,o,i)}let u=Rb(e,"a","fused matMul"),l=Rb(t,"b","fused matMul");[u,l]=hb(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],p=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=ld(f),y=ld(m);ad(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=dw(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,d]),x=Rk(u,n?[g,c,h]:[g,h,c]),w=Rk(l,r?[y,d,p]:[y,p,d]);let k,v;null!=s&&(k=Rb(s,"bias","fused matMul"),[k]=hb(k,u),dw(b,k.shape)),null!=o&&(v=Rb(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,u,l]=t,c=Mk(Rk(e,u.shape),u,a);let p,h;if(n||r?!n&&r?(p=UN(c,i,!1,!1),h=UN(c,o,!0,!1)):n&&!r?(p=UN(i,c,!1,!0),h=UN(o,c,!1,!1)):(p=UN(i,c,!0,!0),h=UN(c,o,!0,!0)):(p=UN(c,i,!1,!0),h=UN(o,c,!0,!1)),null!=s){return[p,h,Lk(l,c)]}return[p,h]},S={a:x,b:w,bias:k,preluActivationWeights:v},I={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=bN(((e,t,n)=>{const r=kb.runKernel(sy,S,I);return n([e,t,r]),{value:Rk(r,b),gradFunc:N}}));return e(x,w)}{const e=bN(((e,t,n,r)=>{const s=kb.runKernel(sy,S,I);return r([e,t,s,n]),{value:Rk(s,b),gradFunc:N}}));return e(x,w,k)}}});var HN={};function qN(e,t){id(e);const n=Cb(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Lb(e,null,n,t)}function jN(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function KN(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return qN(s,"float32")}t(HN,"enclosingPowerOfTwo",(()=>jN)),t(HN,"cosineWindow",(()=>KN));const XN=Ob({hammingWindow_:function(e){return KN(e,.54,.46)}});const YN=Ob({hannWindow_:function(e){return KN(e,.5,.5)}});function ZN(e,t,n){const r={shape:e,value:t,dtype:n};return kb.runKernel(sm,{},r)}function JN(e,t,n){if(id(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Cb(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Lb(e,t,r,n)}const QN=Ob({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(NN(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=wN([NN(e,a,t-r),ZN([r],s)]);o.push(i),a+=n}return 0===o.length?JN([],[0,t]):Rk(wN(o),[o.length,t])}});const eS=Ob({stft_:function(e,t,n,r,s=YN){null==r&&(r=jN(t));const a=QN(e,t,n),o=$k(a,s(t));return $N(o,r)}});const tS=Ob({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=Rb(e,"image","cropAndResize"),i=Rb(t,"boxes","cropAndResize","float32"),u=Rb(n,"boxInd","cropAndResize","int32"),l=i.shape[0];ad(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),ad(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),ad(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),ad(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),ad(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),ad("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return kb.runKernel(zf,c,p)}});const nS=Ob({flipLeftRight_:function(e){const t=Rb(e,"image","flipLeftRight","float32");ad(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return kb.runKernel(am,n,{})}});const rS=Ob({tile_:function(e,t){const n=Rb(e,"x","tile","string_or_numeric");ad(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return kb.runKernel(jg,r,s)}});const sS=Ob({grayscaleToRGB_:function(e){const t=Rb(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];ad(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),ad(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,rS(t,s)}});const aS=Ob({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Rb(e,"image","rotateWithOffset","float32");ad(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return kb.runKernel(ry,a,o)}});function oS(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),ad(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),ad(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),ad(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),ad(1===t.rank,(()=>"scores must be a 1D tensor")),ad(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),ad(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const iS=Ob({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Rb(e,"boxes","nonMaxSuppression","float32"),o=Rb(t,"scores","nonMaxSuppression","float32"),i=oS(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return kb.runKernel(qm,{boxes:a,scores:o},u)}});const uS=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Rb(e,"boxes","nonMaxSuppressionAsync"),o=Rb(t,"scores","nonMaxSuppressionAsync"),i=oS(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=rN(l,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),qN(p,"int32")};const lS=Ob({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Rb(e,"boxes","nonMaxSuppression"),i=Rb(t,"scores","nonMaxSuppression"),u=oS(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=kb.runKernel(Km,l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const cS=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Rb(e,"boxes","nonMaxSuppressionAsync"),i=Rb(t,"scores","nonMaxSuppressionAsync"),u=oS(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:h,selectedScores:d}=aN(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:qN(h,"int32"),selectedScores:qN(d)}};const pS=Ob({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Rb(e,"boxes","nonMaxSuppression"),i=Rb(t,"scores","nonMaxSuppression"),u=oS(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=kb.runKernel(jm,l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const hS=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Rb(e,"boxes","nonMaxSuppressionAsync"),i=Rb(t,"scores","nonMaxSuppressionAsync"),u=oS(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=sN(h,d,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:qN(f,"int32"),validOutputs:_N(m,"int32")}};const dS=Ob({resizeBilinear_:function(e,t,n=!1,r=!1){const s=Rb(e,"images","resizeBilinear");ad(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),ad(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),ad(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Rk(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=kb.runKernel(hg,i,u);return o?Rk(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const fS=Ob({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=Rb(e,"images","resizeNearestNeighbor");ad(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),ad(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),ad("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),ad(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Rk(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=kb.runKernel(cg,i,u);return o?Rk(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const mS=Ob({bincount_:function(e,t,n){const r=Rb(e,"x","bincount"),s=Rb(t,"weights","bincount");ad("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),ad(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ad(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return kb.runKernel(wf,a,o)}});const gS=Ob({lessEqual_:function(e,t){let n=Rb(e,"a","lessEqual","string_or_numeric"),r=Rb(t,"b","lessEqual","string_or_numeric");[n,r]=hb(n,r),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(km,s)}});const yS=Ob({greater_:function(e,t){let n=Rb(e,"a","greater","string_or_numeric"),r=Rb(t,"b","greater","string_or_numeric");[n,r]=hb(n,r),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(pm,s)}});const bS=Ob({floorDiv_:function(e,t){let n=Rb(e,"a","floorDiv"),r=Rb(t,"b","floorDiv");[n,r]=hb(n,r);const s={a:n,b:r};return kb.runKernel(im,s)}});const xS=Ob({div_:function(e,t){let n=Rb(e,"a","div"),r=Rb(t,"b","div");if([n,r]=hb(n,r),"int32"===n.dtype&&"int32"===r.dtype)return bS(n,r);const s={a:n,b:r};return kb.runKernel(Kf,s,{})}});const wS=Ob({sub_:function(e,t){let n=Rb(e,"a","sub"),r=Rb(t,"b","sub");[n,r]=hb(n,r);const s={a:n,b:r};return kb.runKernel(Gg,s)}});const kS=Ob({round_:function(e){const t={x:Rb(e,"x","round")};return kb.runKernel(gg,t)}});const vS=Ob({broadcastTo_:function(e,t){let n=Rb(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Rk(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Wx(n);const o={x:n},i={reps:a};return kb.runKernel(jg,o,i)}});const NS=Ob({where_:function(e,t,n){const r=Rb(t,"a","where"),s=Rb(n,"b","where"),a=Rb(e,"condition","where","bool"),o=dw(dw(a.shape,r.shape),s.shape),i={condition:vS(a,o),t:vS(r,o),e:vS(s,o)};return kb.runKernel(wg,i)}});function SS(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return kb.runKernel(ag,{},s)}const IS=Ob({threshold_:function(e,t="binary",n=!1,r=.5){const s=Rb(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,c=$k(qN([r]),255);if(ad(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),ad(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),ad("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),ad("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=SN(s,[1,1,1],-1);const e=$k(o,.2989),t=$k(i,.587),n=$k(u,.114);l=FN(FN(e,t),n)}else l=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,u=qN([-1]),l=qN([0]),c=qN([0]);for(let p=0;p<e.size-1;p++){n=NN(e,0,p+1),r=NN(e,p+1),o=xS(Ok(n),t),i=xS(Ok(r),t);const h=Ok($k(n,SS(0,n.size)));s=xS(h,Ok(n));const d=ZN(r.shape,n.size),f=FN(SS(0,r.size),d),m=$k(r,f);a=xS(Ok(m),Ok(r));const g=wS(s,a),y=wS(s,a),b=$k(o,i);c=$k($k(b,g),y);const x=yS(c,l);l=NS(x,c,l),u=NS(x,qN([p]),u)}return u}(mS(Px(kS(l),"int32"),zb([]),256),a)}const p=n?gS(l,c):yS(l,c);return Px($k(p,255),"int32")}});const TS=Ob({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=Rb(e,"image","transform","float32"),i=Rb(t,"transforms","transform","float32");ad(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),ad(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),ad(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return kb.runKernel(Xg,u,l)}});const ES=Ob({greaterEqual_:function(e,t){let n=Rb(e,"a","greaterEqual","string_or_numeric"),r=Rb(t,"b","greaterEqual","string_or_numeric");[n,r]=hb(n,r),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(hm,s)}});const $S=Ob({logicalAnd_:function(e,t){const n=Rb(e,"a","logicalAnd","bool"),r=Rb(t,"b","logicalAnd","bool");dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(Im,s)}});const CS=Ob({stack_:function(e,t=0){const n=Db(e,"tensors","stack","string_or_numeric");ad(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&ad(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return kb.runKernel(Zm,r,s)}});const AS=Ob({unstack_:function(e,t=0){const n=Rb(e,"x","unstack","string_or_numeric");ad(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return kb.runKernel(Jg,r,s)}});const _S=Ob({bandPart_:function(e,t,n){ad(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),ad(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Rb(e,"a","bandPart");ad(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Rk(SS(0,a,1,"int32"),[-1,1]),u=SS(0,o,1,"int32"),l=wS(i,u),c=$S(gS(l,_N(+t,"int32")),ES(l,_N(-n,"int32"))),p=IN([a,o],r.dtype);return Rk(CS(AS(Rk(r,[-1,a,o])).map((e=>NS(c,e,p)))),s)}});var RS={};t(RS,"norm",(()=>PS));const DS=Ob({abs_:function(e){const t=Rb(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return kb.runKernel(Tf,e)}{const e={x:t};return kb.runKernel(Qd,e)}}});const FS=Ob({max_:function(e,t=null,n=!1){const r={x:Rb(e,"x","max")},s={reductionIndices:t,keepDims:n};return kb.runKernel(Am,r,s)}});const OS=Ob({min_:function(e,t=null,n=!1){const r={x:Rb(e,"x","min")},s={axis:t,keepDims:n};return kb.runKernel(zm,r,s)}});const MS=Ob({pow_:function(e,t){let n=Rb(e,"base","pow"),r=Rb(t,"exp","pow");[n,r]=hb(n,r);const s={a:n,b:r};return kb.runKernel(Qm,s)}});const LS=Ob({sqrt_:function(e){const t={x:Rb(e,"x","sqrt","float32")};return kb.runKernel($g,t)}});const zS=Ob({square_:function(e){const t=Rb(e,"x","square");return kb.runKernel("Square",{x:t},{})}});function BS(e,t,n=null){if(0===e.rank)return DS(e);if(1!==e.rank&&null===n)return BS(Rk(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Ok(DS(e),n);if(t===1/0)return FS(DS(e),n);if(t===-1/0)return OS(DS(e),n);if("euclidean"===t||2===t)return LS(Ok(MS(DS(e),_N(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return FS(Ok(DS(e),n[0]),n[1]-1);if(t===1/0)return FS(Ok(DS(e),n[1]),n[0]);if(t===-1/0)return OS(Ok(DS(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return LS(Ok(zS(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const PS=Ob({norm_:function(e,t="euclidean",n=null,r=!1){const s=BS(e=Rb(e,"x","norm"),t,n);let a=s.shape;if(r){const t=xd(n,e.shape);a=nk(s.shape,t)}return Rk(s,a)}});const WS=Ob({squeeze_:function(e,t){const n=Rb(e,"x","squeeze","string_or_numeric");return Rk(n,wd(n.shape,t).newShape)}});const VS=Ob({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ad(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)ad(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=SN(e,e.shape[0],0).map((e=>WS(e,[0])));ad(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(kb.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=$k(Ok($k(n[r],e)),n[r]);e=wS(e,t)}return xS(e,PS(e,"euclidean"))})));return t?CS(n,0):n}});const US=Ob({expandDims_:function(e,t=0){const n=Rb(e,"x","expandDims","string_or_numeric");ad(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return kb.runKernel(tm,r,s)}});const GS=Ob({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Bx([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=Rk(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return rS(US(o,0),[n[0],1,1]);if(2===n.length)return rS(US(US(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return rS(US(US(US(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const HS=Ob({neg_:function(e){const t={x:Rb(e,"x","neg")};return kb.runKernel(Gm,t)}});var qS={};t(qS,"transpose",(()=>jS));const jS=Ob({transpose_:function(e,t,n){const r=Rb(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),ad(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{ad(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?dN((()=>{let e=vN(r),t=kN(r);return e=kb.runKernel(Yg,{x:e},a),t=kb.runKernel(Yg,{x:t},a),n&&(t=HS(t)),Mb(e,t)})):kb.runKernel(Yg,s,a)}});function KS(e,t=!1){return kb.tidy((()=>{ad(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=GS(n),a=Wx(e);const o=JN([[1]],[1,1]);let i=Wx(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=kb.tidy((()=>{const t=NN(a,[e,e],[n-e,1]),u=PS(t),l=NN(a,[e,e],[1,1]),c=NS(yS(l,0),JN([[-1]]),JN([[1]])),p=wS(l,$k(c,u)),h=xS(t,p);i=1===h.shape[0]?Wx(o):wN([o,NN(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=HS(xS(UN(c,p),u)),f=NN(a,[e,0],[n-e,r]),m=$k(d,i),g=jS(i);if(0===e)a=wS(f,UN(m,UN(g,f)));else{const t=wS(f,UN(m,UN(g,f)));a=wN([NN(a,[0,0],[e,r]),t],0)}const y=jS(m),b=NN(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=wS(b,UN(UN(b,i),y));else{const t=wS(b,UN(UN(b,i),y));s=wN([NN(s,[0,0],[n,e]),t],1)}return[i,a,s]})),fN([t,u,l])}return!t&&n>r&&(s=NN(s,[0,0],[n,r]),a=NN(a,[0,0],[r,r])),[s,a]}))}const XS=Ob({qr_:function(e,t=!1){if(ad(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return KS(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=AS(Rk(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=KS(e,t);s.push(n),a.push(r)}));return[Rk(CS(s,0),e.shape),Rk(CS(a,0),e.shape)]}}});var YS;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(YS||(YS={}));const ZS=Ob({mean_:function(e,t=null,n=!1){const r={x:Rb(e,"x","mean")},s={axis:t,keepDims:n};return kb.runKernel(Lm,r,s)}});const JS=Ob({notEqual_:function(e,t){let n=Rb(e,"a","notEqual","string_or_numeric"),r=Rb(t,"b","notEqual","string_or_numeric");[n,r]=hb(n,r),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(Hm,s)}});function QS(e,t="float32"){if("complex64"===t){const t=QS(e,"float32"),n=IN(e,"float32");return Mb(t,n)}const n=zd(ld(e),t);return kb.makeTensor(n,e,t)}const eI=Ob({computeWeightedLoss_:function(e,t,n=YS.SUM_BY_NONZERO_WEIGHTS){const r=Rb(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Rb(t,"weights","computeWeightedLoss"));const a=null==s?r:$k(r,s);if(n===YS.NONE)return a;if(n===YS.SUM)return Ok(a);if(n===YS.MEAN){if(null==s)return ZS(a);{const e=r.size/s.size,t=xS(Ok(a),Ok(s));return e>1?xS(t,_N(e)):t}}if(n===YS.SUM_BY_NONZERO_WEIGHTS){if(null==s)return xS(Ok(a),_N(r.size));{const e=$k(s,QS(r.shape)),t=Px(Ok(JS(e,_N(0))),"float32");return xS(Ok(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const tI=Ob({absoluteDifference_:function(e,t,n,r=YS.SUM_BY_NONZERO_WEIGHTS){const s=Rb(e,"labels","absoluteDifference"),a=Rb(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Rb(n,"weights","absoluteDifference")),od(s.shape,a.shape,"Error in absoluteDifference: ");const i=DS(wS(s,a));return eI(i,o,r)}});const nI=Ob({cosineDistance_:function(e,t,n,r,s=YS.SUM_BY_NONZERO_WEIGHTS){const a=Rb(e,"labels","cosineDistance"),o=Rb(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Rb(r,"weights","cosineDistance")),od(a.shape,o.shape,"Error in cosineDistance: ");const u=_N(1),l=wS(u,Ok($k(a,o),n,!0));return eI(l,i,s)}});const rI=Ob({hingeLoss_:function(e,t,n,r=YS.SUM_BY_NONZERO_WEIGHTS){let s=Rb(e,"labels","hingeLoss");const a=Rb(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Rb(n,"weights","hingeLoss")),od(s.shape,a.shape,"Error in hingeLoss: ");const i=_N(1);s=wS($k(_N(2),s),i);const u=Ak(wS(i,$k(s,a)));return eI(u,o,r)}});const sI=Ob({minimum_:function(e,t){let n=Rb(e,"a","minimum"),r=Rb(t,"b","minimum");[n,r]=hb(n,r),"bool"===n.dtype&&(n=Px(n,"int32"),r=Px(r,"int32")),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(Bm,s)}});const aI=Ob({huberLoss_:function(e,t,n,r=1,s=YS.SUM_BY_NONZERO_WEIGHTS){const a=Rb(e,"labels","huberLoss"),o=Rb(t,"predictions","huberLoss");let i=null;null!=n&&(i=Rb(n,"weights","huberLoss")),od(a.shape,o.shape,"Error in huberLoss: ");const u=_N(r),l=DS(wS(o,a)),c=sI(l,u),p=wS(l,c),h=FN($k(_N(.5),zS(c)),$k(u,p));return eI(h,i,s)}});const oI=Ob({log_:function(e){const t={x:Rb(e,"x","log","float32")};return kb.runKernel(Nm,t)}});const iI=Ob({logLoss_:function(e,t,n,r=1e-7,s=YS.SUM_BY_NONZERO_WEIGHTS){const a=Rb(e,"labels","logLoss"),o=Rb(t,"predictions","logLoss");let i=null;null!=n&&(i=Rb(n,"weights","logLoss")),od(a.shape,o.shape,"Error in logLoss: ");const u=_N(1),l=_N(r),c=HS($k(a,oI(FN(o,l)))),p=$k(wS(u,a),oI(FN(wS(u,o),l))),h=wS(c,p);return eI(h,i,s)}});const uI=Ob({squaredDifference_:function(e,t){let n=Rb(e,"a","squaredDifference"),r=Rb(t,"b","squaredDifference");[n,r]=hb(n,r),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(zg,s,{})}});const lI=Ob({meanSquaredError_:function(e,t,n,r=YS.SUM_BY_NONZERO_WEIGHTS){const s=Rb(e,"labels","meanSquaredError"),a=Rb(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Rb(n,"weights","meanSquaredError")),od(s.shape,a.shape,"Error in meanSquaredError: ");const i=uI(s,a);return eI(i,o,r)}});const cI=Ob({exp_:function(e){const t={x:Rb(e,"x","exp")};return kb.runKernel(em,t)}});const pI=Ob({log1p_:function(e){const t={x:Rb(e,"x","log1p")};return kb.runKernel(Sm,t)}});const hI=Ob({sigmoidCrossEntropy_:function(e,t,n,r=0,s=YS.SUM_BY_NONZERO_WEIGHTS){let a=Rb(e,"multiClassLabels","sigmoidCrossEntropy");const o=Rb(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Rb(n,"weights","sigmoidCrossEntropy")),od(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=_N(r),t=_N(1),n=_N(.5);a=FN($k(a,wS(t,e)),$k(n,e))}const u=function(e,t){const n=Rb(e,"labels","sigmoidCrossEntropyWithLogits"),r=Rb(t,"logits","sigmoidCrossEntropyWithLogits");od(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Ak(r),a=$k(r,n),o=pI(cI(HS(DS(r))));return FN(wS(s,a),o)}(a,o);return eI(u,i,s)}});const dI=Ob({logSumExp_:function(e,t=null,n=!1){const r=Rb(e,"x","logSumExp"),s=xd(t,r.shape),a=FS(r,s,!0),o=wS(r,a),i=cI(o),u=Ok(i,s),l=oI(u),c=FN(Rk(a,l.shape),l);if(n){const e=nk(c.shape,s);return Rk(c,e)}return c}});const fI=Ob({softmaxCrossEntropy_:function(e,t,n,r=0,s=YS.SUM_BY_NONZERO_WEIGHTS){let a=Rb(e,"onehotLabels","softmaxCrossEntropy");const o=Rb(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Rb(n,"weights","softmaxCrossEntropy")),od(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=_N(r),t=_N(1),n=_N(a.shape[1]);a=FN($k(a,wS(t,e)),xS(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=bN(((e,t,r)=>{const s=dI(t,[n],!0),a=wS(Px(t,"float32"),s);r([e,a]);const o=HS($k(a,e));return{value:Ok(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=nk(e.shape,[n]);return[$k(Rk(e,a),wS(Px(r,"float32"),cI(s))),$k(Rk(e,a),wS(cI(s),Px(r,"float32")))]}}}));return r(e,t)}(a,o);return eI(u,i,s)}});const mI=Ob({sparseFillEmptyRows_:function(e,t,n,r){const s=Rb(e,"indices","sparseFillEmptyRows","int32"),a=Rb(t,"values","sparseFillEmptyRows"),o=Rb(n,"denseShape","sparseFillEmptyRows","int32"),i=Rb(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=kb.runKernel(Dg,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const gI=Ob({sparseReshape_:function(e,t,n){const r=Rb(e,"inputIndices","sparseReshape","int32"),s=Rb(t,"inputShape","sparseReshape","int32"),a=Rb(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=kb.runKernel(Fg,o);return{outputIndices:i[0],outputShape:i[1]}}});const yI=Ob({sparseSegmentMean_:function(e,t,n){const r=Rb(e,"data","sparseSegmentMean"),s=Rb(t,"indices","sparseSegmentMean","int32"),a=Rb(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return kb.runKernel(Og,o)}});const bI=Ob({sparseSegmentSum_:function(e,t,n){const r=Rb(e,"data","sparseSegmentSum"),s=Rb(t,"indices","sparseSegmentSum","int32"),a=Rb(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return kb.runKernel(Mg,o)}});const xI=Ob({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=Rb(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=Rb(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},h=kb.runKernel(Wg,p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const wI=Ob({stringSplit_:function(e,t,n=!0){const r=Rb(e,"input","stringSplit","string"),s=Rb(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=kb.runKernel(Vg,o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const kI=Ob({stringToHashBucketFast_:function(e,t){const n=Rb(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return kb.runKernel(Ug,s,r)}});const vI=Ob({acos_:function(e){const t={x:Rb(e,"x","acos")};return kb.runKernel(ef,t)}});const NI=Ob({acosh_:function(e){const t={x:Rb(e,"x","acosh")};return kb.runKernel(tf,t)}});const SI=Ob({addN_:function(e){ad(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),ad(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Rb(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!pd(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return kb.runKernel(rf,r)}});const II=Ob({all_:function(e,t=null,n=!1){const r={x:Rb(e,"x","all","bool")},s={axis:t,keepDims:n};return kb.runKernel(sf,r,s)}});const TI=Ob({any_:function(e,t=null,n=!1){const r={x:Rb(e,"x","any","bool")},s={axis:t,keepDims:n};return kb.runKernel(af,r,s)}});const EI=Ob({argMax_:function(e,t=0){const n={x:Rb(e,"x","argMax")},r={axis:t};return kb.runKernel(of,n,r)}});const $I=Ob({argMin_:function(e,t=0){const n={x:Rb(e,"x","argMin")},r={axis:t};return kb.runKernel(uf,n,r)}});const CI=Ob({asin_:function(e){const t={x:Rb(e,"x","asin")};return kb.runKernel(lf,t)}});const AI=Ob({asinh_:function(e){const t={x:Rb(e,"x","asinh")};return kb.runKernel(cf,t)}});const _I=Ob({atan_:function(e){const t={x:Rb(e,"x","atan")};return kb.runKernel(pf,t)}});const RI=Ob({atan2_:function(e,t){let n=Rb(e,"a","atan2"),r=Rb(t,"b","atan2");[n,r]=hb(n,r);const s={a:n,b:r};return kb.runKernel(df,s)}});const DI=Ob({atanh_:function(e){const t={x:Rb(e,"x","atanh")};return kb.runKernel(hf,t)}});const FI=Ob({avgPool_:function(e,t,n,r,s){const a=Rb(e,"x","avgPool","float32");ad(vk(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=Rk(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ad(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Sk("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=kb.runKernel(ff,u,l);return c=Px(c,a.dtype),i?Rk(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const OI=Ob({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=Rb(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=Rk(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ad(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),ad("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Sk("avgPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=kb.runKernel(gf,l,c);return p=Px(p,i.dtype),u?Rk(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const MI=Ob({tanh_:function(e){const t={x:Rb(e,"x","tanh","float32")};return kb.runKernel(qg,t)}});const LI=Ob({basicLSTMCell_:function(e,t,n,r,s,a){const o=Rb(e,"forgetBias","basicLSTMCell"),i=Rb(t,"lstmKernel","basicLSTMCell"),u=Rb(n,"lstmBias","basicLSTMCell"),l=Rb(r,"data","basicLSTMCell"),c=Rb(s,"c","basicLSTMCell"),p=Rb(a,"h","basicLSTMCell"),h=wN([l,p],1),d=UN(h,i),f=FN(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=NN(f,[0,0],y),x=NN(f,[0,g],y),w=NN(f,[0,2*g],y),k=NN(f,[0,3*g],y),v=FN($k(Dk(b),MI(x)),$k(c,Dk(FN(o,w))));return[v,$k(MI(v),Dk(k))]}});const zI=Ob({batchToSpaceND_:function(e,t,n){const r=Rb(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));ad(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),ad(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),ad(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return kb.runKernel(xf,a,o)}});function BI(e){let t;return t=0===e.rank||1===e.rank?Rk(e,[1,1,1,e.size]):2===e.rank?Rk(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Rk(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const PI=Ob({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=Rb(e,"x","batchNorm"),i=Rb(t,"mean","batchNorm"),u=Rb(n,"variance","batchNorm");let l,c;null!=s&&(l=Rb(s,"scale","batchNorm")),null!=r&&(c=Rb(r,"offset","batchNorm")),ad(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ad(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ad(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:BI(o),scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},d=kb.runKernel(um,p,h);return Rk(d,o.shape)}});const WI=Ob({batchNorm2d_:function(e,t,n,r,s,a){const o=Rb(e,"x","batchNorm"),i=Rb(t,"mean","batchNorm"),u=Rb(n,"variance","batchNorm");let l,c;return null!=s&&(l=Rb(s,"scale","batchNorm")),null!=r&&(c=Rb(r,"offset","batchNorm")),ad(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),ad(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),ad(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&ad(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&ad(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),PI(o,i,u,c,l,a)}});const VI=Ob({batchNorm3d_:function(e,t,n,r,s,a){const o=Rb(e,"x","batchNorm"),i=Rb(t,"mean","batchNorm"),u=Rb(n,"variance","batchNorm");let l,c;return null!=s&&(l=Rb(s,"scale","batchNorm")),null!=r&&(c=Rb(r,"offset","batchNorm")),ad(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),ad(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),ad(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&ad(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&ad(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),PI(o,i,u,c,l,a)}});const UI=Ob({batchNorm4d_:function(e,t,n,r,s,a){const o=Rb(e,"x","batchNorm"),i=Rb(t,"mean","batchNorm"),u=Rb(n,"variance","batchNorm");let l,c;return null!=s&&(l=Rb(s,"scale","batchNorm")),null!=r&&(c=Rb(r,"offset","batchNorm")),ad(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),ad(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),ad(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&ad(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&ad(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),PI(o,i,u,c,l,a)}});const GI=Ob({broadcastArgs_:function(e,t){const n=Rb(e,"s0","broadcastArgs","int32"),r=Rb(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return kb.runKernel(kf,s)}});const HI=Ob({ceil_:function(e){const t={x:Rb(e,"x","ceil","float32")};return kb.runKernel(Nf,t)}});const qI=Ob({clipByValue_:function(e,t,n){const r=Rb(e,"x","clipByValue");if(ad(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return ZN(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return kb.runKernel(Sf,s,a)}});const jI=Ob({concat1d_:function(e){return wN(e,0)}});const KI=Ob({concat2d_:function(e,t){return wN(e,t)}});const XI=Ob({concat3d_:function(e,t){return wN(e,t)}});const YI=Ob({concat4d_:function(e,t){return wN(e,t)}});const ZI=Ob({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=Rb(e,"x","conv1d"),u=Rb(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=Rk(i,[1,i.shape[0],i.shape[1]])),ad(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),ad(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),Sk("conv1d",r,o),ad(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),ad(vk(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),ad("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=Rk(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=Rk(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=ON(h,p,[1,n],r,"NHWC",[1,a],o);return Rk(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const JI=Ob({conv2dTranspose_:function(e,t,n,r,s,a){const o=Rb(e,"x","conv2dTranspose"),i=Rb(t,"filter","conv2dTranspose");return LN(n,o,i,r,s,"NHWC",a)}});const QI=Ob({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=Rb(e,"x","conv3d"),i=Rb(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=Rk(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ad(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),ad(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),ad(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),ad(vk(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ad("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=kb.runKernel(_f,c,p);return l?Rk(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const eT=Ob({conv3DBackpropInput_:function(e,t,n,r,s){ad(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Rk(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];ad(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),ad(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),ad(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),ad(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),ad(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=kb.runKernel(Df,c,p);return i?Rk(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const tT=Ob({conv3dTranspose_:function(e,t,n,r,s){const a=Rb(e,"x","conv3dTranspose"),o=Rb(t,"filter","conv3dTranspose");return eT(n,a,o,r,s)}});const nT=Ob({cos_:function(e){const t={x:Rb(e,"x","cos","float32")};return kb.runKernel(Ff,t)}});const rT=Ob({cosh_:function(e){const t={x:Rb(e,"x","cosh","float32")};return kb.runKernel(Of,t)}});const sT=Ob({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:Rb(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return kb.runKernel(Mf,s,a)}});const aT=Ob({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:Rb(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return kb.runKernel(Lf,s,a)}});const oT=Ob({denseBincount_:function(e,t,n,r=!1){const s=Rb(e,"x","denseBincount"),a=Rb(t,"weights","denseBincount");ad("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),ad(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),ad(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ad(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return kb.runKernel(Bf,o,i)}});const iT=Ob({depthToSpace_:function(e,t,n="NHWC"){const r=Rb(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];ad(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),ad(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),ad(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),ad(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return kb.runKernel(Pf,i,u)}});const uT=Ob({diag_:function(e){const t={x:Rb(e,"x","diag")};return kb.runKernel(Gf,t)}});const lT=Ob({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=Rb(e,"x","dilation2d"),i=Rb(t,"filter","dilation2d");ad(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),ad(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),ad("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=Rk(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},h=kb.runKernel(Hf,c,p);return l?Rk(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const cT=Ob({equal_:function(e,t){let n=Rb(e,"a","equal","string_or_numeric"),r=Rb(t,"b","equal","string_or_numeric");[n,r]=hb(n,r),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(Qf,s)}});const pT=Ob({divNoNan_:function(e,t){let n=Rb(e,"a","div"),r=Rb(t,"b","div");[n,r]=hb(n,r);const s=xS(n,r),a=TN(s),o=cT(r,a);return NS(o,a,s)}});const hT=Ob({dot_:function(e,t){const n=Rb(e,"t1","dot"),r=Rb(t,"t2","dot");ad(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(ad(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Rk(n,[1,-1]),t=Rk(r,[-1,1]),s=UN(e,t);return Rk(s,[])}if(1===n.rank&&2===r.rank){const e=Rk(n,[1,-1]),t=Rk(r,[r.shape[0],r.shape[1]]),s=UN(e,t);return Rk(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Rk(r,[-1,1]),t=UN(n,e);return Rk(t,[t.size])}{const e=Rk(r,[r.shape[0],r.shape[1]]);return UN(n,e)}}});const dT=Ob({einsum_:function(e,...t){const n=t.map(((e,t)=>Rb(e,`tensors${t}`,"einsum"))),r={equation:e};return kb.runKernel(Xf,n,r)}});const fT=Ob({erf_:function(e){let t=Rb(e,"x","erf");ad("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Px(t,"float32"));const n={x:t};return kb.runKernel(Jf,n)}});const mT=Ob({euclideanNorm_:function(e,t=null,n=!1){return PS(e,"euclidean",t,n)}});const gT=Ob({expm1_:function(e){const t={x:Rb(e,"x","expm1")};return kb.runKernel(nm,t)}});const yT=Ob({floor_:function(e){const t={x:Rb(e,"x","floor","float32")};return kb.runKernel(om,t)}});const bT=Ob({gather_:function(e,t,n=0,r=0){const s={x:Rb(e,"x","gather"),indices:Rb(t,"indices","gather","int32")},a={axis:n,batchDims:r};return kb.runKernel(lm,s,a)}});const xT=Ob({isFinite_:function(e){const t={x:Rb(e,"x","isFinite")};return kb.runKernel(gm,t)}});const wT=Ob({isInf_:function(e){const t={x:Rb(e,"x","isInf")};return kb.runKernel(ym,t)}});const kT=Ob({isNaN_:function(e){const t={x:Rb(e,"x","isNaN")};return kb.runKernel(bm,t)}});const vT=Ob({less_:function(e,t){let n=Rb(e,"a","less","string_or_numeric"),r=Rb(t,"b","less","string_or_numeric");[n,r]=hb(n,r),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(wm,s)}});function NT(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return kb.runKernel(vm,{},r)}const ST=Ob({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Rb(e,"x","localResponseNormalization");ad(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),ad(hd(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=Rk(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=kb.runKernel($m,u,l);return i?Rk(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const IT=Ob({softplus_:function(e){const t={x:Rb(e,"x","softplus")};return kb.runKernel(Eg,t)}});const TT=Ob({logSigmoid_:function(e){const t=Rb(e,"x","logSigmoid"),n=bN((e=>({value:HS(IT(HS(e))),gradFunc:t=>$k(t,Dk(HS(e)))})));return n(t)}});const ET=Ob({logSoftmax_:function(e,t=-1){const n=Rb(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=bN(((e,n)=>{const r=FS(e,t,!0),s=wS(e,r),a=wS(Px(s,"float32"),oI(Ok(cI(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=cI(r);return wS(e,$k(Ok(e,t,!0),s))}}}));return r(n)}});const $T=Ob({logicalNot_:function(e){const t={x:Rb(e,"x","logicalNot","bool")};return kb.runKernel(Tm,t)}});const CT=Ob({logicalOr_:function(e,t){const n=Rb(e,"a","logicalOr","bool"),r=Rb(t,"b","logicalOr","bool");dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(Em,s)}});const AT=Ob({logicalXor_:function(e,t){const n=Rb(e,"a","logicalXor","bool"),r=Rb(t,"b","logicalXor","bool");return dw(n.shape,r.shape),$S(CT(e,t),$T($S(e,t)))}});var _T={};t(_T,"searchSorted",(()=>DT));const RT=2147483648;const DT=Ob({searchSorted_:function(e,t,n="left"){const r=Rb(e,"sortedSequence","searchSorted"),s=Rb(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=Rk(r,[-1,a]),u=Rk(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(ld(u.shape)>=RT)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=RT)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},c={side:n};return kb.runKernel(xg,l,c)}});function FT(e,t){return DT(e,t,"left")}const OT=Ob({maxPool_:function(e,t,n,r,s){const a=Rb(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Rk(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ad(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),ad(vk(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Sk("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=kb.runKernel(Rm,u,l);return i?Rk(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const MT=Ob({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=Rb(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=Rk(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ad(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),ad("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Sk("maxPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=kb.runKernel(Fm,l,c);return u?Rk(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const LT=Ob({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:Rb(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=kb.runKernel(Mm,a,o);return{result:i[0],indexes:i[1]}}});const zT=Ob({maximum_:function(e,t){let n=Rb(e,"a","maximum"),r=Rb(t,"b","maximum");[n,r]=hb(n,r),"bool"===n.dtype&&(n=Px(n,"int32"),r=Px(r,"int32")),dw(n.shape,r.shape);const s={a:n,b:r};return kb.runKernel(_m,s)}});function BT(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=Rb(e,"x","meshgrid",e instanceof eb?e.dtype:"float32");if(void 0===t)return[r];let s=Rb(t,"y","meshgrid",t instanceof eb?t.dtype:"float32");const a=ld(r.shape),o=ld(s.shape);return"xy"===n?(r=Rk(r,[1,-1]),s=Rk(s,[-1,1]),[UN(QS([o,1],r.dtype),r),UN(s,QS([1,a],s.dtype))]):(r=Rk(r,[-1,1]),s=Rk(s,[1,-1]),[UN(r,QS([1,o],r.dtype)),UN(QS([a,1],s.dtype),s)])}const PT=Ob({mirrorPad_:function(e,t,n){ad("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Rb(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ad(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)ad(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ad(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return kb.runKernel(Pm,o,a)}});const WT=Ob({mod_:function(e,t){let n=Rb(e,"a","mod"),r=Rb(t,"b","mod");[n,r]=hb(n,r);const s={a:n,b:r};return kb.runKernel(Wm,s)}});const VT=Ob({moments_:function(e,t=null,n=!1){const r=xd(t,(e=Rb(e,"x","moments")).shape),s=ZS(e,r,n);let a=s.shape;n||(a=nk(s.shape,r));const o=zS(wS(Px(e,"float32"),Rk(s,a)));return{mean:s,variance:ZS(o,r,n)}}});const UT=Ob({multiRNNCell_:function(e,t,n,r){const s=Rb(t,"data","multiRNNCell"),a=Db(n,"c","multiRNNCell"),o=Db(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const GT=Ob({multinomial_:function(e,t,n,r=!1){const s=Rb(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Rk(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=kb.runKernel(Vm,i,u);return 1===o?Rk(l,[l.size]):l}});const HT=Ob({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Rb(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return kb.runKernel(Ym,a,o)}});const qT=Ob({onesLike_:function(e){const t={x:Rb(e,"x","onesLike")};return kb.runKernel(Xm,t)}});const jT=Ob({outerProduct_:function(e,t){const n=Rb(e,"v1","outerProduct"),r=Rb(t,"v2","outerProduct");ad(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=Rk(n,[-1,1]),a=Rk(r,[1,-1]);return UN(s,a)}});const KT=Ob({pad_:function(e,t,n=0){const r=Rb(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return kb.runKernel(Jm,a,s)}});const XT=Ob({pad1d_:function(e,t,n=0){return ad(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),KT(e,[t],n)}});const YT=Ob({pad2d_:function(e,t,n=0){return ad(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),KT(e,t,n)}});const ZT=Ob({pad3d_:function(e,t,n=0){return ad(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),KT(e,t,n)}});const JT=Ob({pad4d_:function(e,t,n=0){return ad(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),KT(e,t,n)}});const QT=Ob({spaceToBatchND_:function(e,t,n){const r=Rb(e,"x","spaceToBatchND");ad(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),ad(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),ad(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return kb.runKernel(Ag,s,a)}});const eE=Ob({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Rb(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=Rk(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ad(vk(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=hk(u.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?u:QT(u,p,f),b=("avg"===n?()=>FI(y,t,a,g,o):()=>OT(y,t,a,g,o))(),x=d?b:zI(b,p,m);return l?Rk(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const tE=Ob({prod_:function(e,t=null,n=!1){let r=Rb(e,"x","prod");"bool"===r.dtype&&(r=Px(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return kb.runKernel(tg,s,a)}});const nE=Ob({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>Rb(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:Rb(t,"paramsDenseValues","raggedGather"),indices:Rb(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=kb.runKernel(ng,s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const rE=Ob({raggedRange_:function(e,t,n){const r=Rb(e,"starts","raggedRange"),s={starts:r,limits:Rb(t,"limits","raggedRange",r.dtype),deltas:Rb(n,"deltas","raggedRange",r.dtype)},a=kb.runKernel(rg,s);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const sE=Ob({raggedTensorToTensor_:function(e,t,n,r,s){const a=Rb(e,"shape","raggedTensorToTensor","int32"),o=Rb(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:Rb(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>Rb(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return kb.runKernel(sg,i,u)}});const aE=Ob({rand_:function(e,t,n){const r=ld(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return kb.makeTensor(s,e,n)}});class oE{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Rl.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class iE{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Rl.alea(s.toString()),this.randn=new oE(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class uE{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Rl.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const lE=Ob({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new iE(t,n,r,s),o=Bx(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const cE=Ob({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new oE(t,n,r,!1,s),o=Bx(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const pE=Ob({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return cE(e,0,1,t,n)}});const hE=Ob({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Bx(e,r),o=new uE(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const dE=Ob({reciprocal_:function(e){const t={x:Rb(e,"x","reciprocal")};return kb.runKernel(ig,t)}});const fE=Ob({reverse1d_:function(e){const t=Rb(e,"x","reverse");return ad(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),AN(t,0)}});const mE=Ob({reverse2d_:function(e,t){const n=Rb(e,"x","reverse");return ad(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),AN(n,t)}});const gE=Ob({reverse3d_:function(e,t){const n=Rb(e,"x","reverse");return ad(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),AN(n,t)}});const yE=Ob({reverse4d_:function(e,t){const n=Rb(e,"x","reverse");return ad(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),AN(n,t)}});const bE=Ob({rsqrt_:function(e){const t={x:Rb(e,"x","rsqrt","float32")};return kb.runKernel(yg,t)}});const xE=Ob({selu_:function(e){const t={x:Rb(e,"x","selu")};return kb.runKernel(kg,t)}});const wE=Ob({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=Rb(e,"x","separableConv2d"),u=Rb(t,"depthwiseFilter","separableConv2d"),l=Rb(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Rk(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ad(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),ad(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),ad(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),ad(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),ad(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const h=u.shape[2],d=u.shape[3];ad(l.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${l.shape[2]}.`));const f=BN(c,u,r,s,o,a),m=ON(f,l,1,"valid",o);return p?Rk(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const kE=async function(e,t){const n=Rb(e,"x","setdiff1d"),r=Rb(t,"y","setdiff1d");ad(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),ad(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),ad(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new Xy([i],n.dtype),l=new Xy([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const vE=Ob({sign_:function(e){const t={x:Rb(e,"x","sign")};return kb.runKernel(Ig,t)}});const NE=Ob({sin_:function(e){const t={x:Rb(e,"x","sin","float32")};return kb.runKernel(Ng,t)}});const SE=Ob({sinh_:function(e){const t={x:Rb(e,"x","sinh")};return kb.runKernel(Sg,t)}});const IE=Ob({slice1d_:function(e,t,n){const r=Rb(e,"x","slice1d");return ad(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),NN(r,[t],[n])}});const TE=Ob({slice2d_:function(e,t,n){const r=Rb(e,"x","slice2d");return ad(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),NN(r,t,n)}});const EE=Ob({slice3d_:function(e,t,n){const r=Rb(e,"x","slice3d");return ad(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),NN(r,t,n)}});const $E=Ob({slice4d_:function(e,t,n){const r=Rb(e,"x","slice4d");return ad(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),NN(r,t,n)}});const CE=Ob({softmax_:function(e,t=-1){const n=Rb(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return kb.runKernel(Rg,r,s)}});const AE=Ob({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const l={x:Rb(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return kb.runKernel(Pg,l,c)}});const _E=Ob({tan_:function(e){const t={x:Rb(e,"x","tan","float32")};return kb.runKernel(Hg,t)}});function RE(e,t,n){if(id(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Cb(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Lb(e,t,r,n)}function DE(e,t,n){if(id(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Cb(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Lb(e,t,r,n)}function FE(e,t,n){if(id(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Cb(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Lb(e,t=t||r,r,n)}const OE=Ob({topk_:function(e,t=1,n=!0){const r=Rb(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=kb.runKernel(Kg,a,o);return{values:i,indices:u}}});const ME=Ob({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new oE(t,n,r,!0,s),o=Bx(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const LE=Ob({unique_:function(e,t=0){const n=Rb(e,"x","unique","string_or_numeric");ad(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=kb.runKernel(Zg,r,s);return{values:a,indices:o}}});const zE=Ob({unsortedSegmentSum_:function(e,t,n){const r=Rb(e,"x","unsortedSegmentSum"),s=Rb(t,"segmentIds","unsortedSegmentSum","int32");ad(hd(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return kb.runKernel(Qg,a,o)}});function BE(e,t){return DT(e,t,"right")}function PE(e,t=!0,n,r){return kb.makeVariable(e,t,n,r)}const WE=async function(e){const t=Rb(e,"condition","whereAsync","bool"),n=await t.data(),r=cN(t.shape,n);return e!==t&&t.dispose(),r};var VE={};t(VE,"booleanMaskAsync",(()=>UE));const UE=async function(e,t,n){const r=Rb(e,"tensor","boolMask"),s=Rb(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;ad(o>0,(()=>"mask cannot be scalar")),od(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=Rk(r,l),p=Rk(s,[-1]),h=await WE(p),d=WS(h,[1]),f=bT(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var GE={};t(GE,"movingAverage",(()=>HE));const HE=Ob({movingAverage_:function(e,t,n,r,s=!0){const a=Rb(e,"v","movingAverage"),o=Rb(t,"x","movingAverage"),i=Rb(n,"decay","movingAverage");db(a,o),ad(pd(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const u=_N(1),l=wS(u,i);let c=$k(wS(o,a),l);if(s){ad(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=Rb(r,"step","movingAverage");c=xS(c,wS(u,MS(i,e)))}return FN(a,c)}});var qE={};t(qE,"scatterND",(()=>jE));const jE=Ob({scatterND_:function(e,t,n){const r=Rb(e,"indices","scatterND","int32"),s=Rb(t,"updates","scatterND");av(s,r,n);const a={indices:r,updates:s},o={shape:n};return kb.runKernel(bg,a,o)}});var KE={};t(KE,"sparseToDense",(()=>XE));const XE=Ob({sparseToDense_:function(e,t,n,r=0){const s=Rb(e,"sparseIndices","sparseToDense","int32"),a=Rb(t,"sparseValues","sparseToDense","string_or_numeric"),o=Rb(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return kb.runKernel(Lg,i,u)}});var YE={};t(YE,"gatherND",(()=>ZE));const ZE=Ob({gatherND_:function(e,t){const n=Rb(t,"indices","gatherND","int32"),r={params:Rb(e,"x","gatherND","string_or_numeric"),indices:n};return kb.runKernel(cm,r)}});var JE={};function QE(e,t){if(null==t)return e.shape.slice();if(pd(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(JE,"dropout",(()=>e$));const e$=Ob({dropout_:function(e,t,n,r){const s=Rb(e,"x","dropout");if(ad("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),ad(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof eb?s.clone():s;const a=QE(s,n),o=1-t,i=xS(yT(FN(hE(a,0,1,"float32",r),o)),o);return $k(s,i)}});var t$={};t(t$,"inTopKAsync",(()=>n$));const n$=async function(e,t,n=1){const r=Rb(e,"predictions","inTopK"),s=Rb(t,"targets","inTopK");ad(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),ad(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),od(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];ad(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=kd("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),zb(c,s.shape,"bool")},r$={fft:EN,ifft:CN,rfft:$N,irfft:RN},s$={hammingWindow:XN,hannWindow:YN,frame:QN,stft:eS},a$={flipLeftRight:nS,grayscaleToRGB:sS,resizeNearestNeighbor:fS,resizeBilinear:dS,rotateWithOffset:aS,cropAndResize:tS,nonMaxSuppression:iS,nonMaxSuppressionAsync:uS,nonMaxSuppressionWithScore:lS,nonMaxSuppressionWithScoreAsync:cS,nonMaxSuppressionPadded:pS,nonMaxSuppressionPaddedAsync:hS,threshold:IS,transform:TS},o$={bandPart:_S,gramSchmidt:VS,qr:XS},i$={absoluteDifference:tI,computeWeightedLoss:eI,cosineDistance:nI,hingeLoss:rI,huberLoss:aI,logLoss:iI,meanSquaredError:lI,sigmoidCrossEntropy:hI,softmaxCrossEntropy:fI},u$={sparseFillEmptyRows:mI,sparseReshape:gI,sparseSegmentMean:yI,sparseSegmentSum:bI},l$={stringNGrams:xI,stringSplit:wI,stringToHashBucketFast:kI};n(xN,VE),n(xN,qS),n(xN,RS),n(xN,GE),n(xN,qE),n(xN,_T),n(xN,KE),n(xN,YE),n(xN,JE),n(xN,HN),n(xN,t$);class c$ extends Ww{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return fN(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return yN(e,t)}dispose(){null!=this.iterations_&&fN(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:_N(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(c$,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class p$ extends c${constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=kb.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=kb.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:dN((()=>TN(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:dN((()=>TN(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;dN((()=>{const e=FN($k(a,this.rho),$k(zS(s),1-this.rho)),t=$k(xS(LS(FN(o,this.epsilon)),LS(FN(a,this.epsilon))),s),n=FN($k(o,this.rho),$k(zS(t),1-this.rho));a.assign(e),o.assign(n);const i=FN($k(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(fN(this.accumulatedGrads.map((e=>e.variable))),fN(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}p$.className="Adadelta",Uw(p$);class h$ extends c${constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=kb.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:dN((()=>ZN(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;dN((()=>{const e=FN(a,zS(s));a.assign(e);const t=FN($k(xS(s,LS(FN(e,kb.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&fN(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}h$.className="Adagrad",Uw(h$);class d$ extends c${constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],dN((()=>{this.accBeta1=_N(t).variable(),this.accBeta2=_N(n).variable()})),null==r&&(this.epsilon=kb.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);dN((()=>{const n=wS(1,this.accBeta1),r=wS(1,this.accBeta2);t.forEach(((t,s)=>{const a=kb.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:dN((()=>TN(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:dN((()=>TN(a).variable(false)))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=FN($k(i,this.beta1),$k(o,1-this.beta1)),c=FN($k(u,this.beta2),$k(zS(o),1-this.beta2)),p=xS(l,n),h=xS(c,r);i.assign(l),u.assign(c);const d=FN($k(xS(p,FN(LS(h),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign($k(this.accBeta1,this.beta1)),this.accBeta2.assign($k(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&fN(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&fN(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),dN((()=>{this.accBeta1.assign(MS(this.beta1,this.iterations_+1)),this.accBeta2.assign(MS(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}d$.className="Adam",Uw(d$);class f$ extends c${constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],dN((()=>{this.iteration=_N(0).variable(),this.accBeta1=_N(t).variable()})),null==r&&(this.epsilon=kb.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);dN((()=>{const n=wS(1,this.accBeta1),r=xS(-this.learningRate,FN($k(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=kb.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:TN(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:TN(a).variable(false)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=FN($k(i,this.beta1),$k(o,1-this.beta1)),c=$k(u,this.beta2),p=DS(o),h=zT(c,p);i.assign(l),u.assign(h);const d=FN($k(xS(r,n),xS(l,FN(h,this.epsilon))),a);a.assign(d)})),this.iteration.assign(FN(this.iteration,1)),this.accBeta1.assign($k(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&fN(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&fN(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}f$.className="Adamax",Uw(f$);class m$ extends c${constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=kb.registeredVariables[t];dN((()=>{const e=FN($k(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=mN(_N(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}m$.className="SGD",Uw(m$);class g$ extends m${constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=_N(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=kb.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:dN((()=>TN(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&dN((()=>{let e;const t=FN($k(this.m,s),a);e=this.useNesterov?FN($k(this.c,FN(a,$k(t,this.m))),r):FN($k(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&fN(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}g$.className="Momentum",Uw(g$);class y$ extends c${constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=kb.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=kb.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:dN((()=>TN(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:dN((()=>TN(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:dN((()=>TN(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;dN((()=>{const e=FN($k(o,this.decay),$k(zS(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=FN($k(t,this.decay),$k(a,1-this.decay)),u=xS($k(a,this.learningRate),LS(wS(e,FN(zS(s),this.epsilon)))),l=FN($k(i,this.momentum),u);o.assign(e),t.assign(s),i.assign(l);const c=wS(r,l);r.assign(c)}else{const e=FN($k(o,this.decay),$k(zS(a),1-this.decay)),t=FN($k(i,this.momentum),xS($k(a,this.learningRate),LS(FN(e,this.epsilon))));o.assign(e),i.assign(t);const n=wS(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&fN(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&fN(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&fN(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}y$.className="RMSProp",Uw(y$);class b${static sgd(e){return new m$(e)}static momentum(e,t,n=!1){return new g$(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new y$(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new d$(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new p$(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new f$(e,t,n,r,s)}static adagrad(e,t=.1){return new h$(e,t)}}const x$={sgd:b$.sgd,momentum:b$.momentum,adadelta:b$.adadelta,adagrad:b$.adagrad,rmsprop:b$.rmsprop,adamax:b$.adamax,adam:b$.adam},w$="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function k$(){return new Promise((e=>w$((()=>e()))))}const v$={kernelName:Qd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(e,Fk(Px(n,"float32"),-1))}}},N$={kernelName:ef,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=zS(Px(n,"float32")),r=LS(wS(_N(1),t));return HS(xS(e,r))}}}},S$={kernelName:tf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=LS(wS(zS(Px(n,"float32")),1));return xS(e,t)}}}},I$={kernelName:nf,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=dw(n.shape,r.shape);return{a:()=>{let t=e;const r=hw(n.shape,s);return r.length>0&&(t=Ok(t,r)),Rk(t,n.shape)},b:()=>{let t=e;const n=hw(r.shape,s);return n.length>0&&(t=Ok(t,n)),Rk(t,r.shape)}}}},T$={kernelName:rf,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},E$={kernelName:of,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>TN(n)}}},$$={kernelName:uf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>TN(n)}}},C$={kernelName:lf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,LS(wS(_N(1),zS(Px(n,"float32")))))}}},A$={kernelName:cf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=LS(FN(_N(1),zS(Px(n,"float32"))));return xS(e,t)}}}},_$={kernelName:df,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=dw(n.shape,r.shape);return{a:()=>{const t=FN(zS(n),zS(r));let a=$k(e,xS(r,t));const o=hw(n.shape,s);return o.length>0&&(a=Ok(a,o)),Rk(a,n.shape)},b:()=>{const t=FN(zS(n),zS(r));let a=HS($k(e,xS(n,t)));const o=hw(r.shape,s);return o.length>0&&(a=Ok(a,o)),Rk(a,r.shape)}}}},R$={kernelName:pf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,FN(zS(Px(n,"float32")),1))}}},D$={kernelName:hf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,wS(_N(1),zS(Px(n,"float32"))))}}};const F$=Ob({avgPool3dGrad_:function(e,t,n,r,s,a){const o=Rb(e,"dy","avgPool3dGrad"),i=Rb(t,"input","avgPool3dGrad");let u=o,l=i,c=!1;4===i.rank&&(c=!0,u=Rk(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),l=Rk(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ad(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),ad(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),Sk("avgPool3dGrad",s,a);const p={dy:u,input:l},h={filterSize:n,strides:r,pad:s,dimRoundingMode:a},d=kb.runKernel(yf,p,h);return c?Rk(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),O$={kernelName:gf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>F$(e,r,s,a,o,i)}}};const M$=Ob({avgPoolGrad_:function(e,t,n,r,s){const a=Rb(e,"dy","avgPoolGrad"),o=Rb(t,"input","avgPoolGrad");ad(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,u=a,l=!1;3===o.rank&&(l=!0,i=Rk(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=Rk(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ad(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),ad(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:u,input:i},p={filterSize:n,strides:r,pad:s},h=kb.runKernel(mf,c,p);return l?Rk(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),L$={kernelName:ff,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>M$(e,r,s,a,o)}}},z$={kernelName:bf,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>UN(e,s,!1,!1),b:()=>UN(e,r,!0,!1)}:a&&!o?{a:()=>UN(s,e,!1,!0),b:()=>UN(r,e,!1,!1)}:{a:()=>UN(s,e,!0,!0),b:()=>UN(e,r,!0,!0)}:{a:()=>UN(e,s,!1,!0),b:()=>UN(r,e,!0,!1)}}},B$={kernelName:xf,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>QT(e,r,s)}}},P$={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>Ok(e,i,!0)}}},W$={kernelName:vf,gradFunc:e=>({x:()=>e.clone()})},V$={kernelName:Nf,gradFunc:e=>({x:()=>TN(e)})},U$={kernelName:Sf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>NS($S(ES(r,s),gS(r,a)),e,TN(e))}}},G$={kernelName:Tf,inputsToSave:["x"],gradFunc:v$.gradFunc},H$={kernelName:Ef,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=xd(s,t[0].shape)[0],o=r.map((e=>e[a]));return SN(e,o,a).map((e=>()=>e))}},q$={kernelName:$f,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:u}=n;return ad(kk(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>LN(r.shape,e,s,o,i,u),filter:()=>MN(r,e,s.shape,o,i,u)}}},j$={kernelName:Af,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:u}=n;return{dy:()=>ON(e,s,a,o,i,1,u),filter:()=>MN(e,r,s.shape,a,o,i,u)}}};const K$=Ob({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Rk(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=Rk(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),ad(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),ad(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),ad(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),ad(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),ad(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},u={strides:r,pad:s,filterShape:n};return kb.runKernel(Rf,i,u)}}),X$={kernelName:_f,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;ad(kk(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>eT(o.shape,e,i,s,a),filter:()=>K$(o,e,i.shape,s,a)}}},Y$={kernelName:Ff,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(HS(NE(Px(n,"float32"))),e)}}},Z$={kernelName:Of,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(SE(Px(n,"float32")),e)}}},J$={kernelName:Lf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=sk([s],r.rank);let n=aT(e,s,a,!o);return null!=t&&(n=jS(n,t)),n}}}},Q$={kernelName:Wf,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;ad(kk(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[u,l]=t;return ad(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),ad(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),ad(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),ad(vk(s,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`)),Sk("depthwiseConv2d",a,o),{x:()=>WN(u.shape,e,l,s,a,i,o),filter:()=>PN(u,e,l.shape,s,a,i,o)}}},eC={kernelName:Hf,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>kb.runKernel(qf,a,n),filter:()=>kb.runKernel(jf,o,n)}}},tC={kernelName:Yf,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>kb.runKernel(Zf,r)}}},nC={kernelName:Jf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=$k(cI(HS(zS(n))),2/Math.sqrt(Math.PI));return{x:()=>$k(e,r)}}},rC={kernelName:em,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(e,n)}}},sC={kernelName:tm,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Rk(e,n.shape)}}},aC={kernelName:nm,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(e,cI(n))}}},oC={kernelName:om,gradFunc:e=>({x:()=>TN(e)})},iC={kernelName:im,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=dw(n.shape,r.shape);return{a:()=>{const t=xS(e,Px(r,"float32")),a=hw(n.shape,s);return a.length>0?Rk(Ok(t,a),n.shape):t},b:()=>{let t=$k(e,Px(n,"float32"));const a=hw(r.shape,s);a.length>0&&(t=Rk(Ok(t,a),r.shape));const o=zS(r);return HS(xS(t,Px(o,"float32")))}}}},uC={kernelName:um,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,u=null==i?_N(1):i,l=hw(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=wS(s,a),h=$k(e,u),d=bE(FN(o,_N(r))),f=$k($k($k(d,d),d),_N(-.5));return{x:()=>1===a.rank?Rk($k($k(e,rS(Rk(d,[1,1,1,a.shape[0]]),c)),u),s.shape):Rk($k($k(e,d),u),s.shape),mean:()=>{let e=$k($k(d,_N(-1)),h);return 1===a.rank&&(e=Ok(e,l)),Rk(e,a.shape)},variance:()=>{let e=$k($k(f,p),h);return 1===a.rank&&(e=Ok(e,l)),Rk(e,a.shape)},scale:()=>{const t=$k(p,d);let n=$k(e,t);return 1===a.rank&&(n=Ok(n,l)),Rk(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Ok(t,l)),Rk(t,a.shape)}}}},lC={kernelName:lm,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,o=xd(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,i=t.slice(0,o),u=i.length,l=t.slice(a,t.length).slice(1),c=l.length,p=cC(0,u),h=cC(u+1,u+1+c),d=pC([i,[n],l]),f=Rk(e,d),m=Rk(s,[n]),g=pC([[u],p,h]),y=jS(f,g);let b=zE(y,m,r.shape[o]);const x=ak(g);return b=jS(b,x),b},indices:()=>s}}};function cC(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function pC(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const hC={kernelName:hm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>TN(n),b:()=>TN(r)}}},dC={kernelName:dm,gradFunc:e=>({x:()=>Px(e,"float32")})},fC={kernelName:gm,gradFunc:e=>({x:()=>TN(e)})},mC={kernelName:ym,gradFunc:e=>({x:()=>TN(e)})},gC={kernelName:bm,gradFunc:e=>({x:()=>TN(e)})},yC={kernelName:xm,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=yS(r,0);return{x:()=>NS(a,e,$k(e,s))}}},bC={kernelName:Sm,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,FN(n,1))}}},xC={kernelName:Nm,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,Px(n,"float32"))}}},wC={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=cI(r);return wS(e,$k(Ok(e,s,!0),t))}}}};const kC=Ob({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:o};return kb.runKernel(Cm,i,u)}}),vC={kernelName:$m,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:u}=n;return{x:()=>kC(r,s,e,a,o,i,u)}}};function NC(e,t,n,r){return t.rank<n.rank&&(t=Rk(t,nk(t.shape,r))),e.rank<n.rank&&(e=Rk(e,nk(e.shape,r))),{x:()=>$k(e,Px(cT(n,t),e.dtype))}}const SC={kernelName:Am,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],o=NC(e,t[1],a,xd(s,a.shape));return{x:()=>o.x()}}},IC={kernelName:_m,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>$k(e,Px(ES(n,r),"float32")),b:()=>$k(e,Px(vT(n,r),"float32"))}}};const TC=Ob({maxPool3dGrad_:function(e,t,n,r,s,a,o){const i=Rb(e,"dy","maxPool3dGrad"),u=Rb(t,"input","maxPool3dGrad"),l=Rb(n,"output","maxPool3dGrad");let c=i,p=u,h=l,d=!1;4===u.rank&&(d=!0,c=Rk(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),p=Rk(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),h=Rk(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),ad(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),ad(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),ad(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),Sk("maxPool3dGrad",a,o);const f={dy:c,input:p,output:h},m={filterSize:r,strides:s,pad:a,dimRoundingMode:o},g=kb.runKernel(Om,f,m);return d?Rk(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),EC={kernelName:Fm,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=n;return{x:()=>TC(e,r,s,a,o,i,u)}}};const $C=Ob({maxPoolGrad_:function(e,t,n,r,s,a,o){const i=Rb(e,"dy","maxPoolGrad"),u=Rb(t,"input","maxPoolGrad"),l=Rb(n,"output","maxPoolGrad");ad(u.rank===i.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${i.rank})`)),ad(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),ad(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),Sk("maxPoolGrad",a,o);const c={dy:i,input:u,output:l},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return kb.runKernel(Dm,c,p)}}),CC={kernelName:Jm,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>NN(e,a,r.shape)}}};function AC(e,t,n){const r=e.shape.length,s=r-n.length,a=Gw.getAxesPermutation(n,r);let o=e;null!=a&&(o=jS(e,a));const i=o.shape.slice(),u=i.splice(r-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(u);let l=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=Rk(t,r),a=sT(e,n,!0,!1),o=sT(e,n,!0,!0),i=$k(a,o);return $k(s,i)}(o.reshape(i),t,s);if(l=l.reshape(o.shape),null!=a){const e=Gw.getUndoAxesPermutation(a);l=jS(l,e)}return l}const _C={kernelName:Ag,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>zI(e,r,s)}}},RC={kernelName:_g,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>wN(e,r)}}};const DC=[v$,N$,S$,I$,T$,E$,$$,C$,A$,_$,R$,D$,O$,L$,z$,B$,P$,W$,V$,U$,G$,H$,j$,q$,X$,Y$,Z$,J$,Q$,eC,{kernelName:Kf,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=dw(n.shape,r.shape);return{a:()=>{const t=xS(e,Px(r,"float32")),a=hw(n.shape,s);return a.length>0?Rk(Ok(t,a),n.shape):t},b:()=>{let t=$k(e,Px(n,"float32"));const a=hw(r.shape,s);a.length>0&&(t=Rk(Ok(t,a),r.shape));const o=zS(r);return HS(xS(t,Px(o,"float32")))}}}},tC,nC,rC,sC,aC,iC,oC,uC,lC,hC,dC,fC,mC,gC,yC,bC,xC,wC,vC,SC,SC,IC,EC,{kernelName:Rm,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>$C(e,r,s,a,o,i)}}},{kernelName:Lm,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=xd(s,r.shape),o=ld(tk(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=Rk(e,t);return xS($k(n,QS(r.shape,"float32")),o)}}}},{kernelName:zm,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=NC(e,o,a,xd(s,a.shape));return{x:()=>i.x()}}},{kernelName:Bm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>$k(e,Px(gS(n,r),"float32")),b:()=>$k(e,Px(yS(n,r),"float32"))}}},{kernelName:Pm,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>NN(e,a,r.shape)}}},{kernelName:Wm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=dw(n.shape,r.shape);return{a:()=>{const t=hw(n.shape,s);return t.length>0?Rk(Ok(e,t),n.shape):e},b:()=>{const t=$k(e,HS(yT(xS(n,r)))),a=hw(r.shape,s);return a.length>0?Rk(Ok(t,a),r.shape):t}}}},{kernelName:Um,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=dw(n.shape,r.shape);return{a:()=>{const t=$k(e,Px(r,"float32")),a=hw(n.shape,s);return a.length>0?Rk(Ok(t,a),n.shape):t},b:()=>{const t=$k(e,Px(n,"float32")),a=hw(r.shape,s);return a.length>0?Rk(Ok(t,a),r.shape):t}}}},{kernelName:Gm,gradFunc:e=>({x:()=>HS(e)})},{kernelName:Ym,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>IN(n.shape,"float32")}}},{kernelName:Xm,gradFunc:e=>({x:()=>TN(e)})},{kernelName:Zm,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return AS(e,r).map((e=>()=>e))}},CC,CC,{kernelName:Qm,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=dw(a.shape,o.shape);return{a:()=>{const t=Px(o,"float32");let n=$k(e,$k(t,MS(a,wS(t,_N(1)))));const r=hw(a.shape,i);return r.length>0&&(n=Ok(n,r)),Rk(n,a.shape)},b:()=>{const t=yS(a,0),n=NS(t,oI(a),TN(a));let r=$k(e,$k(s,n));const u=hw(o.shape,i);return u.length>0&&(r=Ok(r,u)),Rk(r,o.shape)}}}},{kernelName:eg,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=yS(n,0);return{x:()=>NS(s,e,$k(e,r)),alpha:()=>{let t=NS(s,TN(e),$k(e,n));const a=hw(r.shape,e.shape);return a.length>0&&(t=Ok(t,a)),Rk(t,r.shape)}}}},{kernelName:tg,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map(((e,t)=>t)):"number"==typeof s?[s]:s,{x:()=>AC(r,e,a)}}},{kernelName:ig,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,HS(zS(n)))}}},{kernelName:fg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=$k(gS(n,6),Fk(n));return{x:()=>$k(e,Px(r,"float32"))}}},{kernelName:ug,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(e,Px(Fk(n),"float32"))}}},{kernelName:lg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Rk(e,n.shape)}}},{kernelName:hg,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>kb.runKernel(dg,s,n)}}},{kernelName:cg,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>kb.runKernel(pg,s,n)}}},{kernelName:mg,gradFunc:(e,t,n)=>{const{dims:r}=n,s=xd(r,e.shape);return{x:()=>AN(e,s)}}},{kernelName:gg,gradFunc:e=>({x:()=>TN(e)})},{kernelName:yg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>HS(xS(e,$k(MS(n,1.5),2)))}}},{kernelName:wg,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Px(TN(n),"float32"),t:()=>$k(e,Px(n,e.dtype)),e:()=>$k(e,Px($T(n),e.dtype))}}},{kernelName:kg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=yS(n,_N(0)),r=_N(uv),s=_N(lv),a=$k(e,s),o=$k($k(e,r),cI(Px(n,"float32")));return NS(t,a,o)}}}},{kernelName:Tg,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(e,$k(n,wS(_N(1),n)))}}},{kernelName:Ig,gradFunc:e=>({x:()=>TN(e)})},{kernelName:Ng,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(nT(Px(n,"float32")),e)}}},{kernelName:Sg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(rT(Px(n,"float32")),e)}}},{kernelName:vg,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,u]=Lw(r,s,a),l=[];for(let t=0;t<e.rank;t++)l.push([i[t],o[t]-i[t]-u[t]]);return{x:()=>KT(e,l)}}},{kernelName:Rg,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=$k(e,r);return{logits:()=>wS(a,$k(Ok(a,[s],true),r))}}},{kernelName:Eg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(e,Dk(n))}}},_C,_C,RC,RC,{kernelName:$g,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,$k(LS(Px(n,"float32")),2))}}},{kernelName:zg,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_N(2);return{a:()=>$k(e,$k(s,wS(n,r))),b:()=>$k(e,$k(s,wS(r,n)))}}},{kernelName:Bg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(e,$k(Px(n,"float32"),2))}}},{kernelName:ty,gradFunc:e=>({x:()=>TN(e)})},{kernelName:Gg,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=dw(n.shape,r.shape);return{a:()=>{let t=e;const r=hw(n.shape,s);return r.length>0&&(t=Ok(t,r)),Rk(t,n.shape)},b:()=>{let t=e;const n=hw(r.shape,s);return n.length>0&&(t=Ok(t,n)),Rk(HS(t),r.shape)}}}},{kernelName:Cg,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;xd(a,r.shape).forEach((e=>{s[e]=1}));const o=Rk(e,s),i=$k(o,QS(r.shape,"float32"));return{x:()=>i}}},{kernelName:Hg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xS(e,zS(nT(n)))}}},{kernelName:qg,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$k(wS(_N(1),zS(n)),e)}}},{kernelName:jg,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=TN(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=FN(t,NN(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=FN(t,NN(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=FN(t,NN(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=FN(t,NN(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:Yg,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=ak(s);return{x:()=>jS(e,a)}}},{kernelName:Jg,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>CS(e,s)}}},{kernelName:Qg,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=zT(t,TN(t)),r=bT(e,n);let s=ES(t,_N(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=US(s,e+1);s=$S(s,QS(r.shape,"bool"));const o=TN(r);return NS(s,r,o)}(e,n)}}},{kernelName:ey,gradFunc:e=>({x:()=>TN(e)})}];for(const e of DC)gy(e);function FC(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(zC(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const o=FC(e[a],t,n,r);s[a]=o}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function OC(e,t=LC){return MC(e,t)}function MC(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(zC(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=MC(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function LC(e){return null===e?null:zC(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function zC(e){let t=!1;if(Kd().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof eb)&&!(e instanceof Promise)&&!t)}function BC(e){return FC(e,PC)}function PC(e){return e instanceof eb?{value:e.clone(),recurse:!1}:zC(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}tb().prototype.abs=function(){return this.throwIfDisposed(),DS(this)},tb().prototype.acos=function(){return this.throwIfDisposed(),vI(this)},tb().prototype.acosh=function(){return this.throwIfDisposed(),NI(this)},tb().prototype.add=function(e){return this.throwIfDisposed(),FN(this,e)},tb().prototype.all=function(e,t){return this.throwIfDisposed(),II(this,e,t)},tb().prototype.any=function(e,t){return this.throwIfDisposed(),TI(this,e,t)},tb().prototype.argMax=function(e){return this.throwIfDisposed(),EI(this,e)},tb().prototype.argMin=function(e){return this.throwIfDisposed(),$I(this,e)},tb().prototype.asScalar=function(){return this.throwIfDisposed(),ad(1===this.size,(()=>"The array must have only 1 element.")),Rk(this,[])},tb().prototype.asType=function(e){return this.throwIfDisposed(),Px(this,e)},tb().prototype.as1D=function(){return this.throwIfDisposed(),Rk(this,[this.size])},tb().prototype.as2D=function(e,t){return this.throwIfDisposed(),Rk(this,[e,t])},tb().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Rk(this,[e,t,n])},tb().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Rk(this,[e,t,n,r])},tb().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Rk(this,[e,t,n,r,s])},tb().prototype.asin=function(){return this.throwIfDisposed(),CI(this)},tb().prototype.asinh=function(){return this.throwIfDisposed(),AI(this)},tb().prototype.atan=function(){return this.throwIfDisposed(),_I(this)},tb().prototype.atan2=function(e){return this.throwIfDisposed(),RI(this,e)},tb().prototype.atanh=function(){return this.throwIfDisposed(),DI(this)},tb().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),FI(this,e,t,n,r)},tb().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),zI(this,e,t)},tb().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),PI(this,e,t,n,r,s)},tb().prototype.broadcastTo=function(e){return this.throwIfDisposed(),vS(this,e)},tb().prototype.cast=function(e){return this.throwIfDisposed(),Px(this,e)},tb().prototype.ceil=function(){return this.throwIfDisposed(),HI(this)},tb().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),qI(this,e,t)},tb().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof eb&&(e=[e]),wN([this,...e],t)},tb().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ZI(this,e,t,n,r,s,a)},tb().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),JI(this,e,t,n,r,s)},tb().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ON(this,e,t,n,r,s,a)},tb().prototype.cos=function(){return this.throwIfDisposed(),nT(this)},tb().prototype.cosh=function(){return this.throwIfDisposed(),rT(this)},tb().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),sT(this,e,t,n)},tb().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),aT(this,e,t,n)},tb().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),iT(this,e,t)},tb().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),BN(this,e,t,n,r,s,a)},tb().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),lT(this,e,t,n,r,s)},tb().prototype.divNoNan=function(e){return this.throwIfDisposed(),pT(this,e)},tb().prototype.div=function(e){return this.throwIfDisposed(),xS(this,e)},tb().prototype.dot=function(e){return this.throwIfDisposed(),hT(this,e)},tb().prototype.elu=function(){return this.throwIfDisposed(),Tk(this)},tb().prototype.equal=function(e){return this.throwIfDisposed(),cT(this,e)},tb().prototype.erf=function(){return this.throwIfDisposed(),fT(this)},tb().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),mT(this,e,t)},tb().prototype.exp=function(){return this.throwIfDisposed(),cI(this)},tb().prototype.expandDims=function(e){return this.throwIfDisposed(),US(this,e)},tb().prototype.expm1=function(){return this.throwIfDisposed(),gT(this)},tb().prototype.fft=function(){return this.throwIfDisposed(),EN(this)},tb().prototype.flatten=function(){return this.throwIfDisposed(),Rk(this,[this.size])},tb().prototype.floor=function(){return this.throwIfDisposed(),yT(this)},tb().prototype.floorDiv=function(e){return this.throwIfDisposed(),bS(this,e)},tb().prototype.gather=function(e,t){return this.throwIfDisposed(),bT(this,e,t)},tb().prototype.greaterEqual=function(e){return this.throwIfDisposed(),ES(this,e)},tb().prototype.greater=function(e){return this.throwIfDisposed(),yS(this,e)},tb().prototype.ifft=function(){return this.throwIfDisposed(),CN(this)},tb().prototype.irfft=function(){return this.throwIfDisposed(),RN(this)},tb().prototype.isFinite=function(){return this.throwIfDisposed(),xT(this)},tb().prototype.isInf=function(){return this.throwIfDisposed(),wT(this)},tb().prototype.isNaN=function(){return this.throwIfDisposed(),kT(this)},tb().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Ek(this,e)},tb().prototype.lessEqual=function(e){return this.throwIfDisposed(),gS(this,e)},tb().prototype.less=function(e){return this.throwIfDisposed(),vT(this,e)},tb().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),ST(this,e,t,n,r)},tb().prototype.logSigmoid=function(){return this.throwIfDisposed(),TT(this)},tb().prototype.logSoftmax=function(e){return this.throwIfDisposed(),ET(this,e)},tb().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),dI(this,e,t)},tb().prototype.log=function(){return this.throwIfDisposed(),oI(this)},tb().prototype.log1p=function(){return this.throwIfDisposed(),pI(this)},tb().prototype.logicalAnd=function(e){return this.throwIfDisposed(),$S(this,e)},tb().prototype.logicalNot=function(){return this.throwIfDisposed(),$T(this)},tb().prototype.logicalOr=function(e){return this.throwIfDisposed(),CT(this,e)},tb().prototype.logicalXor=function(e){return this.throwIfDisposed(),AT(this,e)},tb().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),UN(this,e,t,n)},tb().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),OT(this,e,t,n,r)},tb().prototype.max=function(e,t){return this.throwIfDisposed(),FS(this,e,t)},tb().prototype.maximum=function(e){return this.throwIfDisposed(),zT(this,e)},tb().prototype.mean=function(e,t){return this.throwIfDisposed(),ZS(this,e,t)},tb().prototype.min=function(e,t){return this.throwIfDisposed(),OS(this,e,t)},tb().prototype.minimum=function(e){return this.throwIfDisposed(),sI(this,e)},tb().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),PT(this,e,t)},tb().prototype.mod=function(e){return this.throwIfDisposed(),WT(this,e)},tb().prototype.mul=function(e){return this.throwIfDisposed(),$k(this,e)},tb().prototype.neg=function(){return this.throwIfDisposed(),HS(this)},tb().prototype.norm=function(e,t,n){return this.throwIfDisposed(),PS(this,e,t,n)},tb().prototype.notEqual=function(e){return this.throwIfDisposed(),JS(this,e)},tb().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),HT(this,e,t,n)},tb().prototype.onesLike=function(){return this.throwIfDisposed(),qT(this)},tb().prototype.pad=function(e,t){return this.throwIfDisposed(),KT(this,e,t)},tb().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),eE(this,e,t,n,r,s,a)},tb().prototype.pow=function(e){return this.throwIfDisposed(),MS(this,e)},tb().prototype.prelu=function(e){return this.throwIfDisposed(),Ck(this,e)},tb().prototype.prod=function(e,t){return this.throwIfDisposed(),tE(this,e,t)},tb().prototype.reciprocal=function(){return this.throwIfDisposed(),dE(this)},tb().prototype.relu=function(){return this.throwIfDisposed(),Ak(this)},tb().prototype.relu6=function(){return this.throwIfDisposed(),_k(this)},tb().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Rk(this,e.shape)},tb().prototype.reshape=function(e){return this.throwIfDisposed(),Rk(this,e)},tb().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),dS(this,e,t,n)},tb().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),fS(this,e,t,n)},tb().prototype.reverse=function(e){return this.throwIfDisposed(),AN(this,e)},tb().prototype.rfft=function(){return this.throwIfDisposed(),$N(this)},tb().prototype.round=function(){return this.throwIfDisposed(),kS(this)},tb().prototype.rsqrt=function(){return this.throwIfDisposed(),bE(this)},tb().prototype.selu=function(){return this.throwIfDisposed(),xE(this)},tb().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),wE(this,e,t,n,r,s,a)},tb().prototype.sigmoid=function(){return this.throwIfDisposed(),Dk(this)},tb().prototype.sign=function(){return this.throwIfDisposed(),vE(this)},tb().prototype.sin=function(){return this.throwIfDisposed(),NE(this)},tb().prototype.sinh=function(){return this.throwIfDisposed(),SE(this)},tb().prototype.slice=function(e,t){return this.throwIfDisposed(),NN(this,e,t)},tb().prototype.softmax=function(e){return this.throwIfDisposed(),CE(this,e)},tb().prototype.softplus=function(){return this.throwIfDisposed(),IT(this)},tb().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),QT(this,e,t)},tb().prototype.split=function(e,t){return this.throwIfDisposed(),SN(this,e,t)},tb().prototype.sqrt=function(){return this.throwIfDisposed(),LS(this)},tb().prototype.square=function(){return this.throwIfDisposed(),zS(this)},tb().prototype.squaredDifference=function(e){return this.throwIfDisposed(),uI(this,e)},tb().prototype.squeeze=function(e){return this.throwIfDisposed(),WS(this,e)},tb().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof eb?[this,e]:[this,...e];return CS(n,t)},tb().prototype.step=function(e){return this.throwIfDisposed(),Fk(this,e)},tb().prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),AE(this,e,t,n,r,s,a,o,i)},tb().prototype.sub=function(e){return this.throwIfDisposed(),wS(this,e)},tb().prototype.sum=function(e,t){return this.throwIfDisposed(),Ok(this,e,t)},tb().prototype.tan=function(){return this.throwIfDisposed(),_E(this)},tb().prototype.tanh=function(){return this.throwIfDisposed(),MI(this)},tb().prototype.tile=function(e){return this.throwIfDisposed(),rS(this,e)},tb().prototype.toBool=function(){return this.throwIfDisposed(),Px(this,"bool")},tb().prototype.toFloat=function(){return this.throwIfDisposed(),Px(this,"float32")},tb().prototype.toInt=function(){return this.throwIfDisposed(),Px(this,"int32")},tb().prototype.topk=function(e,t){return this.throwIfDisposed(),OE(this,e,t)},tb().prototype.transpose=function(e){return this.throwIfDisposed(),jS(this,e)},tb().prototype.unique=function(e){return this.throwIfDisposed(),LE(this,e)},tb().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),zE(this,e,t)},tb().prototype.unstack=function(e){return this.throwIfDisposed(),AS(this,e)},tb().prototype.where=function(e,t){return this.throwIfDisposed(),NS(e,this,t)},tb().prototype.zerosLike=function(){return this.throwIfDisposed(),TN(this)};class WC{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class VC extends WC{constructor(){super(VC.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function UC(e){return new jC(e)}function GC(e){return new KC(e)}function HC(e,t){return new aA(e,t)}VC.INITIAL_CAPACITY=32;class qC{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new tA(this,e)}filter(e){return new QC(this,e)}map(e){return new eA(this,e)}mapAsync(e){return new nA(this,e)}serialMapAsync(e){return new nA(this,e).serial()}flatmap(e){return new sA(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new JC(this,e,t)}columnMajorBatch(e,t=!0,n=LC){return this.rowMajorBatch(e,t).map((e=>OC(e,n)))}concatenate(e,t){return new aA(UC([this,e]),t)}take(e){return e<0||null==e?this:new ZC(this,e)}skip(e){return e<0||null==e?this:new YC(this,e)}prefetch(e){return new uA(this,e)}shuffle(e,t){return new lA(this,e,t)}serial(){return new XC(this)}}class jC extends qC{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:BC(e),done:!1}}}class KC extends qC{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class XC extends qC{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class YC extends qC{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;fN(e.value)}return this.upstream.next()}}class ZC extends qC{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class JC extends qC{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class QC extends qC{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;fN(e.value)}}}class eA extends qC{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ub.getTensorsInContainer(e.value),n=this.transform(e.value),r=ub.getTensorsInContainer(n);for(const e of t)ub.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class tA extends qC{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class nA extends qC{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ub.getTensorsInContainer(e.value),n=await this.transform(e.value),r=ub.getTensorsInContainer(n);for(const e of t)ub.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class rA extends qC{constructor(){super(),this.outputQueue=new VC,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class sA extends rA{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=ub.getTensorsInContainer(e.value),n=this.transform(e.value),r=ub.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)ub.isTensorInList(e,r)||e.dispose();return!0}}class aA extends qC{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var oA,iA;(iA=oA||(oA={}))[iA.FAIL=0]="FAIL",iA[iA.SHORTEST=1]="SHORTEST",iA[iA.LONGEST=2]="LONGEST";class uA extends qC{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new WC(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class lA extends uA{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Rl.alea(n||by.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class cA{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return by.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),pA((async()=>(await n.iterator()).columnMajorBatch(e,t,hA)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,pA((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,pA((async()=>(await t.iterator()).filter((t=>dN((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return pA((async()=>(await t.iterator()).map((t=>dN((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return pA((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return pA((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,pA((async()=>HC(GC((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,pA((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=Rl.alea(t||by.now().toString());return pA((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,pA((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function pA(e,t=null){return new class extends cA{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function hA(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof eb||by.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof eb?CS(e):zb(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}cA.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function dA(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&by.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function fA(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(dA(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,u=i.data.get(o.dataId).values,l=by.sizeFromShape(o.shape),c=n||o.dtype,p=by.getArrayFromDType(c,l);for(let e=0;e<l;++e)p[e]=t(u[e],s);return i.makeTensorInfo(o.shape,c,p)}}function mA(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(dA(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,u=i.data.get(o.dataId).values,l=n||o.dtype,c=t(u,l,s);return i.makeTensorInfo(o.shape,l,c)}}const gA=fA(Yf,(e=>e>=0?e:Math.exp(e)-1)),yA={kernelName:Yf,backendName:"cpu",kernelFunc:gA};function bA(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const xA={kernelName:dm,backendName:"cpu",kernelFunc:bA};function wA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;dA([s],"leakyRelu");const o=by.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,u=by.getTypedArrayFromDType("float32",o);for(let e=0;e<i.length;e++)u[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(s.shape,"float32",u)}const kA={kernelName:xm,backendName:"cpu",kernelFunc:wA};function vA(e){return(t,n,r,s,a)=>{const o=Gw.assertAndGetBroadcastShape(t,n),i=o.length,u=by.computeStrides(o),l=by.sizeFromShape(o),c=by.getTypedArrayFromDType(a,l),p=t.length,h=n.length,d=by.computeStrides(t),f=by.computeStrides(n),m=Gw.getBroadcastDims(t,o),g=Gw.getBroadcastDims(n,o);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<c.length;++t){const n=by.indexToLoc(t,i,u),a=n.slice(-p);m.forEach((e=>a[e]=0));const o=by.locToIndex(a,p,d),l=n.slice(-h);g.forEach((e=>l[e]=0));const y=by.locToIndex(l,h,f);c[t]=e(r[o],s[y])}return[c,o]}}const NA=vA(((e,t)=>e<0?t*e:e));function SA(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;dA([r,s],"prelu");const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,[i,u]=NA(r.shape,s.shape,a,o,"float32");return n.makeTensorInfo(u,"float32",i)}const IA={kernelName:eg,backendName:"cpu",kernelFunc:SA},TA=fA(ug,(e=>Math.max(0,e))),EA={kernelName:ug,backendName:"cpu",kernelFunc:TA},$A=fA(fg,(e=>Math.min(Math.max(0,e),6))),CA={kernelName:fg,backendName:"cpu",kernelFunc:$A};function AA(e){return(t,n,r)=>{const s=by.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const _A=AA((e=>1/(1+Math.exp(-e)))),RA=fA(Tg,(e=>1/(1+Math.exp(-e)))),DA={kernelName:Tg,backendName:"cpu",kernelFunc:RA};function FA(e,t,n,r,s){if("linear"===n)return bA({inputs:{x:t},backend:e});if("relu"===n)return TA({inputs:{x:t},backend:e});if("elu"===n)return gA({inputs:{x:t},backend:e});if("relu6"===n)return $A({inputs:{x:t},backend:e});if("prelu"===n)return SA({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return wA({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return RA({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function OA(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",o)},i}const MA={kernelName:If,backendName:"cpu",kernelFunc:OA};function LA(e,t,n="float32"){if("complex64"===n){return OA({inputs:{real:LA(e,t,"float32"),imag:LA(e,t,"float32")},backend:e})}const r=by.makeZerosTypedArray(by.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function zA(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const BA={kernelName:og,backendName:"cpu",kernelFunc:zA};function PA(e,t,n,r){if("int32"===r){return[t,"int32",Int32Array.from(e)]}if("bool"===r){const r=by.toTypedArray([0],n),[s,a]=vA(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function WA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return bA({inputs:{x:s},backend:n});const e=LA(n,s.shape,s.dtype),t=WA({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=OA({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=zA({inputs:{input:s},backend:n}),t=WA({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!by.hasEncodingLoss(s.dtype,a)){const e=bA({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const o=n.data.get(s.dataId).values,[i,u,l]=PA(o,s.shape,s.dtype,a);return n.makeTensorInfo(i,u,l)}const VA={kernelName:vf,backendName:"cpu",kernelFunc:WA};function UA(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:o}=n,i=s;dA([a,o],e);const u=i.data.get(a.dataId).values,l=i.data.get(o.dataId).values,c="string"===a.dtype?Gw.fromUint8ToStringArray(u):u,p="string"===a.dtype?Gw.fromUint8ToStringArray(l):l,h=r||a.dtype,[d,f]=t(a.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:s})=>{const{a:a,b:o}=e,i=s;if("complex64"===a.dtype||"complex64"===o.dtype){const e=WA({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,u=i.data.get(r.dataId).values,l=i.data.get(s.dataId).values,c=WA({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,b]=n(a.shape,o.shape,u,l,f,m),x=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),k=OA({inputs:{real:x,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(w),k}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,o.shape,e,n,s);return i.makeTensorInfo(l,s,u)}}}function GA(e){return(t,n,r,s,a,o)=>{const i=Gw.assertAndGetBroadcastShape(t,n),u=by.sizeFromShape(i),l=i.length,c=by.computeStrides(i),p=by.getTypedArrayFromDType("float32",u),h=by.getTypedArrayFromDType("float32",u),d=Gw.getBroadcastDims(t,i),f=Gw.getBroadcastDims(n,i),m=Gw.mergeRealAndImagArrays(r,s),g=Gw.mergeRealAndImagArrays(a,o),y=t.length,b=by.computeStrides(t),x=n.length,w=by.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=s.real,h[t]=s.imag}else for(let t=0;t<p.length;t++){const n=by.indexToLoc(t,l,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=by.locToIndex(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const o=by.locToIndex(a,x,w),i=e(m[2*s],m[2*s+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const HA=vA(((e,t)=>e+t)),qA=GA(((e,t,n,r)=>({real:e+n,imag:t+r}))),jA=UA(nf,HA,qA),KA={kernelName:nf,backendName:"cpu",kernelFunc:jA};function XA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=by.sizeFromShape(s.shape),i=by.inferFromImplicitShape(a,o),u=by.sizeFromShape(i);by.assert(o===u,(()=>`The new shape (${i}) has ${u} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:s.dataId,shape:i,dtype:s.dtype}}const YA={kernelName:lg,backendName:"cpu",kernelFunc:XA};function ZA(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;dA([s,a],"matMul");const u=s.shape.length,l=a.shape.length,c=o?s.shape[u-2]:s.shape[u-1],p=i?a.shape[l-1]:a.shape[l-2],h=o?s.shape[u-1]:s.shape[u-2],d=i?a.shape[l-2]:a.shape[l-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=by.sizeFromShape(f),y=by.sizeFromShape(m),b=cw.assertAndGetBroadcastShape(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([h,d]);by.assert(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const x=i?[y,d,p]:[y,p,d],w=XA({inputs:{x:s},backend:n,attrs:{shape:o?[g,c,h]:[g,h,c]}}),k=XA({inputs:{x:a},backend:n,attrs:{shape:x}}),v=o?w.shape[1]:w.shape[2],N=o?w.shape[2]:w.shape[1],S=i?k.shape[1]:k.shape[2],I=Math.max(g,y),T=n.data.get(w.dataId).values,E=n.data.get(k.dataId).values,$=by.computeStrides(w.shape),C=by.computeStrides(k.shape),[A,_,R]=o?[$[0],1,$[1]]:[$[0],$[1],1],[D,F,O]=i?[1,C[1],C[0]]:[C[1],1,C[0]],M=N*S,L=Bx([I,N,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<I;e++)for(let t=0;t<N;t+=B)for(let n=0;n<S;n+=B)for(let r=0;r<v;r+=B){const s=Math.min(t+B,N),a=Math.min(n+B,S),o=Math.min(r+B,v);for(let i=t;i<s;i++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<o;s++){const r=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=T[r+i*_+s*R]*E[s*D+t*F+a]}z[e*M+(i*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const JA={kernelName:bf,backendName:"cpu",kernelFunc:ZA};const QA={kernelName:sy,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;let h,d,f;const m=[];h=ZA({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),o&&(d=jA({inputs:{a:h,b:o},backend:n}),m.push(h),h=d),c&&(f=FA(n,h,c,i,p),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}};function e_(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const t_={kernelName:Qd,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;dA(t,"abs");let r=new Float32Array(by.sizeFromShape(t.shape));return r=e_(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},n_=fA(ef,(e=>Math.acos(e))),r_={kernelName:ef,backendName:"cpu",kernelFunc:n_},s_=fA(tf,(e=>Math.acosh(e))),a_={kernelName:tf,backendName:"cpu",kernelFunc:s_};const o_={kernelName:rf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;dA(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=Bx(r[0].shape,r[0].dtype),o=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function i_(e,t,n,r,s){const a=t.length,o=by.sizeFromShape(t),i=by.computeStrides(t),u=by.computeStrides(s),l=by.getTypedArrayFromDType(n,by.sizeFromShape(s));for(let t=0;t<o;++t){const n=by.indexToLoc(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[by.locToIndex(s,a,u)]=e[t]}return l}function u_(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;dA(s,"transpose");const o=s.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=s.shape[a[e]];const u=i_(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(u,i,s.dtype),shape:i,dtype:s.dtype}}const l_={kernelName:Yg,backendName:"cpu",kernelFunc:u_};const c_={kernelName:sf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;dA(s,"all");const i=by.parseAxisParam(a,s.shape);let u=i;const l=Gw.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=u_({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Gw.getInnerMostAxes(u.length,s.shape.length)),Gw.assertAxesAreInnerMostDims("all",u,c.shape.length);const[p,h]=Gw.computeOutAndReduceShapes(c.shape,u),d=by.sizeFromShape(h),f=by.makeZerosTypedArray(by.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=XA({inputs:{x:g},backend:n,attrs:{shape:Gw.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const p_={kernelName:af,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;dA(s,"any");const i=by.parseAxisParam(a,s.shape);let u=i;const l=Gw.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=u_({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Gw.getInnerMostAxes(u.length,s.shape.length)),Gw.assertAxesAreInnerMostDims("any",u,c.shape.length);const[p,h]=Gw.computeOutAndReduceShapes(c.shape,u),d=by.sizeFromShape(h),f=by.makeZerosTypedArray(by.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=XA({inputs:{x:g},backend:n,attrs:{shape:Gw.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const h_={kernelName:of,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;dA(s,"argMax");let o=by.parseAxisParam(a,s.shape);const i=Gw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=u_({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Gw.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],Gw.assertAxesAreInnerMostDims("argMax",o,u.shape.length);const[c,p]=Gw.computeOutAndReduceShapes(u.shape,o),h=by.sizeFromShape(c),d=by.makeZerosTypedArray(h,"int32"),f=by.sizeFromShape(p),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s>n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const d_={kernelName:uf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;dA(s,"argMin");let o=by.parseAxisParam(a,s.shape);const i=Gw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=u_({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Gw.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],Gw.assertAxesAreInnerMostDims("argMin",o,u.shape.length);const[c,p]=Gw.computeOutAndReduceShapes(u.shape,o),h=by.sizeFromShape(c),d=by.makeZerosTypedArray(h,"int32"),f=by.sizeFromShape(p),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s<n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},f_=fA(lf,(e=>Math.asin(e))),m_={kernelName:lf,backendName:"cpu",kernelFunc:f_},g_=fA(cf,(e=>Math.asinh(e))),y_={kernelName:cf,backendName:"cpu",kernelFunc:g_},b_=fA(pf,(e=>Math.atan(e))),x_={kernelName:pf,backendName:"cpu",kernelFunc:b_},w_=vA(((e,t)=>Math.atan2(e,t))),k_=UA(df,w_),v_={kernelName:df,backendName:"cpu",kernelFunc:k_},N_=fA(hf,(e=>Math.atanh(e))),S_={kernelName:hf,backendName:"cpu",kernelFunc:N_};function I_(e,t,n,r,s,a){const o=s.strideHeight,i=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,p=s.effectiveFilterWidth,h=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Bx(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*o-h,k=Math.max(0,w),v=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const o=n*i-d,c=Math.max(0,o),h=Math.min(s.inWidth,p+o);let y=f,b=0,w=0;for(let n=k;n<v;n+=u){const s=m+n*r[1];for(let n=c;n<h;n+=l){const o=e[s+n*r[2]+t];"max"===a&&o>y?y=o:"avg"===a&&(b+=o,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function T_(e,t,n,r,s=!1,a=!1){const o=Bx(r.outShape,"int32"),i=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Bx(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,p+g);for(let i=0;i<r.outWidth;++i){const p=i*u-f;let d=p;for(;d<0;)d+=c;const x=Math.min(r.inWidth,h+p);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=l){const o=n-g;for(let i=d;i<x;i+=c){const u=i-p,l=m.get(e,n,i,t);l>w&&(w=l,k=s?a?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*h+u)}}o.set(k,e,n,i,t)}}return o}function E_(e,t,n,r,s,a){const o=s.strideDepth,i=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,p=s.dilationWidth,h=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Bx(s.outShape,n),w=x.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],v=s.outShape[2]*s.outShape[3]*s.outShape[4],N=s.outShape[3]*s.outShape[4],S=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*k,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let k=0;k<s.outDepth;++k){const I=k*o-m;let T=I;for(;T<0;)T+=l;const E=Math.min(s.inDepth,h+I),$=n+k*v;for(let n=0;n<s.outHeight;++n){const o=n*i-g;let h=o;for(;h<0;)h+=c;const m=Math.min(s.inHeight,d+o),k=$+n*N;for(let n=0;n<s.outWidth;++n){const o=n*u-y;let i=o;for(;i<0;)i+=p;const d=Math.min(s.inWidth,f+o),g=k+n*S;let v=b,N=0,I=0;for(let n=T;n<E;n+=l){const s=x+n*r[1];for(let n=h;n<m;n+=c){const o=s+n*r[2];for(let n=i;n<d;n+=p){const s=e[o+n*r[3]+t];if("max"===a&&s>v?v=s:"avg"===a&&(N+=s,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/I:v}}}}return x}function $_(e,t){const n=Bx(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*s-d;let h=l;for(;h<0;)h+=i;const k=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let v=d;for(;v<0;)v+=u;const N=Math.min(t.inWidth,p+d);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=x;t<w;t+=o){const n=t-b;for(let r=h;r<k;r+=i){const s=r-l;for(let a=v;a<N;a+=u){const o=a-d,i=e.get(m,t,r,a,g);i>=S&&(S=i,I=n*c*p+s*c+o)}}}n.set(I,m,y,r,s,g)}}}return n}const C_={kernelName:ff,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;dA(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;by.assert(Gw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Gw.computePool2DInfo(s.shape,a,o,1,i,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&by.arraysEqual(l.inShape,l.outShape))c=bA({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=by.computeStrides(s.shape),r=I_(e,s.shape,s.dtype,t,l,"avg");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const A_={kernelName:gf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;dA(s,"avgPool3d");const c=Gw.computePool3DInfo(s.shape,a,o,1,i,u,l),p=E_(n.data.get(s.dataId).values,s.shape,s.dtype,by.computeStrides(s.shape),c,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}};const __={kernelName:yf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;dA([s,a],"avgPool3DGrad");const c=Gw.computePool3DInfo(a.shape,o,i,1,u,l),p=c.strideDepth,h=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,S=v-1-c.padInfo.left,I=k-1-c.padInfo.top,T=Bx(a.shape,"float32"),E=1/(f*m*g),$=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-N,o=r-I,i=s-S;let u=0;for(let n=0;n<w;n+=y){const r=(a+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=b){const s=(o+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<v;n+=x){const a=(i+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;u+=$.get(e,r,s,a,t)}}}T.set(u*E,e,n,r,s,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const R_={kernelName:mf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;dA([s,a],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=r,c=Gw.computePool2DInfo(o.shape,i,u,1,l),p=c.strideHeight,h=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Bx(o.shape,"float32"),v=1/(d*f),N=n.data.get(s.dataId).values,S=Bx(s.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(s+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/h;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;o+=S.get(e,r,s,t)}}k.set(o*v,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const D_={kernelName:um,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:o,mean:i,variance:u}=t;by.assert(i.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),by.assert(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),by.assert(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),dA([s,i,u,a,o],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const c=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,h=n.data.get(u.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=h.length,x=p.length;let w=0,k=0,v=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-p[k++])*d[v++]/Math.sqrt(h[N++]+l),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function F_(e,t,n,r,s){const a=vw.isSliceContinous(r,t,n),o=by.sizeFromShape(n),i=by.computeStrides(r);if(a){const n=vw.computeFlatOffset(t,i);return"string"===s?e.slice(n,n+o):e.subarray(n,n+o)}const u=Bx(r,s,"string"===s?Gw.fromUint8ToStringArray(e):e),l=Bx(n,s);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===s?Gw.fromStringArrayToUint8(l.values):l.values}function O_(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r;dA(s,"slice");const[i,u]=vw.parseSliceParams(s,a,o);vw.assertParamsValid(s,i,u);const l=F_(n.data.get(s.dataId).values,i,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const M_={kernelName:vg,backendName:"cpu",kernelFunc:O_};const L_={kernelName:xf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;dA([s],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),u=Gw.getReshaped(s.shape,a,i),l=Gw.getPermuted(u.length,a.length),c=Gw.getReshapedPermuted(s.shape,a,i),p=Gw.getSliceBeginCoords(o,a.length),h=Gw.getSliceSize(c,o,a.length),d=XA({inputs:{x:s},backend:n,attrs:{shape:u}}),f=u_({inputs:{x:d},backend:n,attrs:{perm:l}}),m=XA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=O_({inputs:{x:m},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function z_(e,t,n,r,s){const a=by.sizeFromShape(r),o=by.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=a>0?t[n]:1)}return o}function B_(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],o=Bx([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<a;s++){const a=e.get(i,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,s),i,a):o.set(o.get(i,a)+1,i,a))}return o}const P_={kernelName:wf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=z_(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}};const W_={kernelName:kf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=Gw.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},V_=AA((e=>Math.ceil(e))),U_=mA(Nf,V_),G_={kernelName:Nf,backendName:"cpu",kernelFunc:U_},H_=fA(Sf,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),q_={kernelName:Sf,backendName:"cpu",kernelFunc:H_},j_={kernelName:Tf,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(by.sizeFromShape(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,i=n.data.get(a.dataId).values,u=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=u[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function K_(e,t,n,r){const s=by.getArrayFromDType(n,by.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=by.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?Gw.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=a[o++]}r+=e.shape[1]}))}return s}function X_(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Y_={kernelName:mm,backendName:"cpu",kernelFunc:X_};function Z_(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=by.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));Gw.assertParamsConsistent(o,a);let i=Gw.computeOutShape(t.map((e=>e.shape)),a);if(0===by.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>by.sizeFromShape(e.shape)>0));if(1===u.length)return bA({inputs:{x:u[0]},backend:n});if("complex64"===u[0].dtype){const e=u.map((e=>zA({inputs:{input:e},backend:n}))),t=u.map((e=>X_({inputs:{input:e},backend:n}))),r=Z_({inputs:e,backend:n,attrs:{axis:a}}),s=Z_({inputs:t,backend:n,attrs:{axis:a}}),o=OA({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}const l=u.map((e=>{const t=by.sizeFromShape(e.shape.slice(a));return XA({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Gw.computeOutShape(l.map((e=>e.shape)),1);const p=1===l[0].shape[0],h=K_(c,i,t[0].dtype,p),d=Gw.computeOutShape(u.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const J_={kernelName:Ef,backendName:"cpu",kernelFunc:Z_};function Q_(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=r;dA([s,a],"conv2d");const p=Gw.convertConv2DDataFormat(u),h=Gw.computeConv2DInfo(s.shape,a.shape,o,l,i,c,!1,p),d=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,b=h.padInfo.top,x="channelsLast"===h.dataFormat,w=new Xy(h.outShape,s.dtype),k=by.computeStrides(s.shape),v=by.computeStrides(a.shape),N=k[0],S=x?k[1]:k[2],I=x?k[2]:1,T=x?1:k[1],E=w.strides[0],$=x?w.strides[1]:w.strides[2],C=x?w.strides[2]:1,A=x?1:w.strides[1],_=n.data.get(s.dataId).values,R=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<h.batchSize;++e){const t=e*N,n=e*E;for(let e=0;e<h.outHeight;++e){const r=n+e*$,s=e*h.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=h.inHeight)continue;const a=e*v[0],o=t+n*S;for(let e=0;e<h.outWidth;++e){const t=r+e*C,n=e*h.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=h.inWidth)continue;const s=o+r*I;let i=a+e*v[1];for(let e=0;e<h.inChannels;++e){const n=_[s+e*T];for(let e=0;e<h.outChannels;++e)D[t+e*A]+=n*R[i+e];i+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const eR={kernelName:$f,backendName:"cpu",kernelFunc:Q_};const tR={kernelName:Cf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;dA([s,a],"conv2dBackpropFilter");const p=Gw.convertConv2DDataFormat(u),h=Gw.computeConv2DInfo(s.shape,c,o,1,i,l,!1,p),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,b=new Xy(h.filterShape,"float32"),x=h.padInfo.left,w=h.padInfo.top,k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=new Xy(s.shape,s.dtype,k),S=new Xy(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(h.outHeight,(h.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(h.outWidth,(h.inWidth+x-r)/f);for(let o=0;o<h.inChannels;++o)for(let i=0;i<h.outChannels;++i){let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;u+=y?N.get(l,t,n,o)*S.get(l,c,e,i):N.get(l,o,t,n)*S.get(l,i,c,e)}}b.set(u,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const nR={kernelName:Af,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r;dA([s,a],"conv2dBackpropInput");const p=by.computeStrides(a.shape),h=by.computeStrides(s.shape);let d=Gw.convertConv2DDataFormat(l);const f=Gw.computeConv2DInfo(o,a.shape,i,1,u,c,!1,d),m=new Xy(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=p,{batchSize:v,filterHeight:N,filterWidth:S,inChannels:I,inHeight:T,inWidth:E,outChannels:$,outHeight:C,outWidth:A,strideHeight:_,strideWidth:R}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,F=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=h[0],W=O?h[1]:h[2],V=O?h[2]:1,U=O?1:h[1];for(let e=0;e<v;++e)for(let t=0;t<I;++t)for(let n=0;n<T;++n){const r=n-D,s=Math.max(0,Math.ceil(r/_)),a=Math.min(C,(N+r)/_);for(let o=0;o<E;++o){const i=o-F,u=Math.max(0,Math.ceil(i/R)),l=Math.min(A,(S+i)/R);let c=0;for(let n=s;n<a;++n){const s=n*_-r;for(let r=u;r<l;++r){const a=P*e+W*n+V*r,o=x*(N-1-s)+w*(S-1-(r*R-i))+k*t;for(let e=0;e<$;++e){c+=y[a+U*e]*b[o+e]}}}g[M*e+L*n+z*o+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const rR={kernelName:_f,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r;dA([s,a],"conv3d");const l=Gw.computeConv3DInfo(s.shape,a.shape,o,u,i),{filterDepth:c,filterHeight:p,filterWidth:h,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new Xy(l.outShape,s.dtype),k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=w.values,S=by.computeStrides(s.shape),I=by.computeStrides(a.shape);for(let e=0;e<l.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const r=n+e*w.strides[1],s=e*l.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=l.inDepth)continue;const a=e*I[0],o=t+n*S[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-x;for(let e=0;e<p;++e){const r=n+e*f;if(r<0||r>=l.inHeight)continue;const s=a+e*I[1],i=o+r*S[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-b;for(let e=0;e<h;++e){const t=r+e*m;if(t<0||t>=l.inWidth)continue;const a=s+e*I[2],o=i+t*l.inChannels;let u=a;for(let e=0;e<l.inChannels;++e){const t=k[o+e];for(let e=0;e<l.outChannels;++e)N[n+e]+=t*v[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const sR={kernelName:Rf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:u}=r;dA([s,a],"conv3dBackpropFilterV2");const l=by.computeStrides(s.shape),c=by.computeStrides(a.shape),p=Gw.computeConv3DInfo(s.shape,u,o,1,i),h=p.strideDepth,d=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new Xy(p.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,S=n.data.get(a.dataId).values,[I,T,E,$]=c,C=n.data.get(s.dataId).values,[A,_,R,D]=l,F=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((F-e)/h)),n=Math.min(p.outDepth,(p.inDepth+F-e)/h),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),o=Math.min(p.outHeight,(p.inHeight+M-s)/d),i=s*k+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((O-r)/f)),l=Math.min(p.outWidth,(p.inWidth+O-r)/f),c=r*v+i;for(let i=0;i<p.inChannels;++i){const m=i*N+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let m=0;m<p.batchSize;++m){const p=m*A,y=m*I;for(let m=t;m<n;++m){const t=(e+m*h-F)*_+p,n=m*T+y;for(let e=a;e<o;++e){const a=(s+e*d-M)*R+t,o=e*E+n;for(let e=u;e<l;++e){const t=e*$+o;g+=C[(r+e*f-O)*D+a+i]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const aR={kernelName:Df,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:u}=r;dA([s],"conv3dBackpropInputV2");const l=by.computeStrides(s.shape),c=by.computeStrides(a.shape),p=Gw.computeConv3DInfo(u,a.shape,i,1,o),h=new Xy(p.inShape,"float32"),d=h.values,[f,m,g,y]=h.strides,b=n.data.get(s.dataId).values,[x,w,k,v]=l,N=n.data.get(a.dataId).values,[S,I,T,E]=c,{batchSize:$,filterDepth:C,filterHeight:A,filterWidth:_,inChannels:R,inDepth:D,inHeight:F,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:V}=p,U=C-1-p.padInfo.front,G=A-1-p.padInfo.top,H=_-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<R;++t)for(let n=0;n<D;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(C+r)/P);for(let o=0;o<F;++o){const i=o-G,u=Math.max(0,Math.ceil(i/W)),l=Math.min(z,(A+i)/W);for(let c=0;c<O;++c){const p=c-H,h=Math.max(0,Math.ceil(p/V)),$=Math.min(B,(_+p)/V);let R=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=u;r<l;++r){const a=r*W-i;for(let o=h;o<$;++o){const i=x*e+w*n+k*r+v*o,u=S*(C-1-s)+I*(A-1-a)+T*(_-1-(o*V-p))+E*t;for(let e=0;e<M;++e){R+=b[i+e]*N[u+e]}}}}d[f*e+m*n+g*o+y*c+t]=R}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},oR=fA(Ff,(e=>Math.cos(e))),iR={kernelName:Ff,backendName:"cpu",kernelFunc:oR},uR=fA(Of,(e=>Math.cosh(e))),lR={kernelName:Of,backendName:"cpu",kernelFunc:uR};const cR={kernelName:zf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,[c,p,h,d]=s.shape,f=a.shape[0],[m,g]=i,y=Bx([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,k=by.computeStrides(s.shape),v=by.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(s-n)*(p-1)/(m-1):0,f=g>1?(a-r)*(h-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+s)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=l}else if("bilinear"===u){const n=Math.floor(c),s=Math.ceil(c),i=c-n;for(let u=0;u<g;u++){const c=g>1?r*(h-1)+u*f:.5*(r+a)*(h-1);if(c<0||c>h-1){for(let n=0;n<d;n++){const r=n+u*v[2]+t*v[1]+e*v[0];y.values[r]=l}continue}const p=Math.floor(c),m=Math.ceil(c),b=c-p;for(let r=0;r<d;r++){let a=r+p*k[2]+n*k[1]+o*k[0];const l=w[a];a=r+m*k[2]+n*k[1]+o*k[0];const c=w[a];a=r+p*k[2]+s*k[1]+o*k[0];const h=w[a];a=r+m*k[2]+s*k[1]+o*k[0];const d=l+(c-l)*b,f=h+(w[a]-h)*b;a=r+u*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*i}}}else for(let n=0;n<g;++n){const s=g>1?r*(h-1)+n*f:.5*(r+a)*(h-1);if(s<0||s>h-1){for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=l}continue}const i=Math.round(s),u=Math.round(c);for(let r=0;r<d;r++){const s=r+i*k[2]+u*k[1]+o*k[0],a=r+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const pR={kernelName:Mf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;dA(s,"cumprod");const u=Gw.getAxesPermutation([a],s.shape.length);let l=s;null!=u&&(l=u_({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Gw.getInnerMostAxes(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const p=cb(l.dtype,"int32"),h=by.makeOnesTypedArray(by.sizeFromShape(l.shape),p),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?1:d[n];else{const r=m(e,t-1);h[n]=o?d[r]*h[r]:d[n]*h[r]}}const g=n.makeTensorInfo(l.shape,p,h);if(null!=u){const e=u_({inputs:{x:g},backend:n,attrs:{perm:Gw.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}};const hR={kernelName:Lf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;dA(s,"cumsum");const u=Gw.getAxesPermutation([a],s.shape.length);let l=s;null!=u&&(l=u_({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Gw.getInnerMostAxes(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const p=cb(l.dtype,"int32"),h=by.makeZerosTypedArray(by.sizeFromShape(l.shape),p),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?0:d[n];else{const r=m(e,t-1);h[n]=o?d[r]+h[r]:d[n]+h[r]}}const g=n.makeTensorInfo(l.shape,p,h);if(null!=u){const e=u_({inputs:{x:g},backend:n,attrs:{perm:Gw.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}};const dR={kernelName:Bf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=z_(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===s.shape.length){const e=B_(n.bufferSync(s),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const fR={kernelName:Pf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r;by.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=s.shape[0],u=s.shape[1],l=s.shape[2],c=s.shape[3],p=u*a,h=l*a,d=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(i*p*h*d);let g=0;for(let e=0;e<i;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<h;++t){const s=Math.floor(t/a),o=(r*a+t%a)*d;for(let t=0;t<d;++t){const r=t+o+c*(s+l*(n+u*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,p,h,d],s.dtype,m)}};function mR(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:l}=r;dA([s,a],"depthwiseConv2DNative");const c=by.computeStrides(s.shape),p=by.computeStrides(a.shape);let h=u;null==h&&(h=[1,1]),by.assert(Gw.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=Gw.computeConv2DInfo(s.shape,a.shape,o,h,i,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new Xy(d.outShape,s.dtype),N=n.data.get(s.dataId).values,S=n.data.get(a.dataId).values,I=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*v.strides[1],s=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*p[0],o=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*p[1],i=o+r*d.inChannels;let u=t,l=s;for(let e=0;e<d.inChannels;++e){const t=N[i+e];for(let e=0;e<k;++e)I[u+e]+=t*S[l+e];u+=k,l+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const gR={kernelName:Wf,backendName:"cpu",kernelFunc:mR};const yR={kernelName:Vf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=r;dA([s,a],"depthwiseConv2dNativeBackpropFilter");const p=Gw.computeConv2DInfo(s.shape,c,o,i,u,l,!0),{strideHeight:h,strideWidth:d,filterHeight:f,filterWidth:m}=p,g=new Xy(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,w=n.data.get(s.dataId).values,k=new Xy(s.shape,s.dtype,w),v=n.data.get(a.dataId).values,N=new Xy(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(p.outHeight,(p.inHeight+b-e)/h);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(p.outWidth,(p.inWidth+y-r)/d);for(let o=0;o<p.outChannels;++o){const i=Math.trunc(o/x),u=o%x;let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*h-b;for(let e=s;e<a;++e){const n=r+e*d-y;l+=k.get(u,t,n,i)*N.get(u,c,e,o)}}g.set(l,e,r,i,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const bR={kernelName:Uf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=r;dA([s,a],"depthwiseConv2DNativeBackpropInput");const p=by.computeStrides(s.shape),h=by.computeStrides(a.shape),d=Gw.computeConv2DInfo(c,a.shape,o,i,u,l,!0),f=new Xy(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,k,v]=p,N=n.data.get(a.dataId).values,[S,I,T]=h,{batchSize:E,filterHeight:$,filterWidth:C,inChannels:A,inHeight:_,inWidth:R,outChannels:D,outHeight:F,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=C-1-d.padInfo.left,P=D/A;for(let e=0;e<E;++e)for(let t=0;t<A;++t)for(let n=0;n<_;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(F,($+r)/M);for(let o=0;o<R;++o){const i=o-B,u=Math.max(0,Math.ceil(i/L)),l=Math.min(O,(C+i)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=u;r<l;++r){const a=w*e+k*n+v*r,o=S*($-1-s)+I*(C-1-(r*L-i))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*N[o+e]}}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const xR={kernelName:Gf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=by.sizeFromShape(r.shape),a=n.data.get(r.dataId).values,o=Bx([s,s],r.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*s+e]=a[e];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},wR={kernelName:Hf,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:o,dilations:i}=n,u=t,l=u.data.get(r.dataId).values,c=r.shape.length,p=u.data.get(s.dataId).values,h=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=Gw.computeDilation2DInfo(r.shape,s.shape,a,o,"NHWC",i),E=by.sizeFromShape(T),$=T.length,C=by.getArrayFromDType(r.dtype,E);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const o=a*k-x.left;for(let i=0;i<g;++i){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=o+n*I;if(d>=0&&d<m){const o=by.locToIndex([e,a,d,i],c,by.computeStrides(r.shape)),f=by.locToIndex([t,n,i],h,by.computeStrides(s.shape)),m=l[o]+p[f];m>u&&(u=m)}}}C[by.locToIndex([e,t,a,i],$,by.computeStrides(T))]=u}}}return{dataId:u.write(by.toTypedArray(C,r.dtype),T,r.dtype),shape:T,dtype:r.dtype}}},kR={kernelName:jf,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=by.toNestedArray(r.shape,l.data.get(r.dataId).values),p=by.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=Gw.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",u);by.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=by.toNestedArray(I,l.data.get(a.dataId).values),E=by.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const l=s+n*S;if(l>=0&&l<f){const s=c[e][r][l][a]+p[t][n][a];s>o&&(o=s,i=t,u=n)}}}E[i][u][a]+=T[e][t][r][a]}}}return{dataId:l.write(by.toTypedArray(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},vR={kernelName:qf,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=by.toNestedArray(r.shape,l.data.get(r.dataId).values),p=by.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=Gw.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",u);by.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=by.toNestedArray(I,l.data.get(a.dataId).values),E=by.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=s<0?0:s;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const l=s+n*S;if(l>=0&&l<f){const s=c[e][r][l][a]+p[t][n][a];s>o&&(o=s,i=r,u=l)}}}E[e][i][u][a]+=T[e][t][r][a]}}}return{dataId:l.write(by.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},NR=vA(((e,t)=>e*t)),SR=GA(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),IR=UA(Um,NR,SR),TR={kernelName:Um,backendName:"cpu",kernelFunc:IR};function ER(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;let i;dA(s,"sum"),i="bool"===s.dtype?WA({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):bA({inputs:{x:s},backend:n});const u=i.shape.length,l=by.parseAxisParam(a,i.shape),c=Gw.getAxesPermutation(l,u);let p=l,h=i;null!=c&&(h=u_({inputs:{x:i},backend:n,attrs:{perm:c}}),p=Gw.getInnerMostAxes(p.length,u)),Gw.assertAxesAreInnerMostDims("sum",p,h.shape.length);const[d,f]=Gw.computeOutAndReduceShapes(h.shape,p);let m=LA(n,d,Gw.upcastType(h.dtype,"int32"));const g=by.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(h.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=XA({inputs:{x:m},backend:n,attrs:{shape:Gw.expandShapeToKeepDim(m.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),m}const $R={kernelName:Cg,backendName:"cpu",kernelFunc:ER};const CR={kernelName:Xf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:u}=Gw.decodeEinsumEquation(s,a.length);Gw.checkEinsumDimSizes(o.length,u,a);const{path:l,steps:c}=Gw.getEinsumComputePath(i,u),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Gw.getEinsumPermutation(d,u[t]);let s;Gw.isIdentityPermutation(e)?s=a[t]:(s=u_({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);by.arraysEqual(s.shape,o)||(s=XA({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=IR({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(l[e]>=0&&(h=ER({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}};const AR={kernelName:Zf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;dA([r,s],"eluGrad");const a=new Float32Array(by.sizeFromShape(s.shape)),o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},_R=vA(((e,t)=>e===t?1:0)),RR=UA(Qf,_R,null,"bool"),DR={kernelName:Qf,backendName:"cpu",kernelFunc:RR},FR=Gw.ERF_P,OR=Gw.ERF_A1,MR=Gw.ERF_A2,LR=Gw.ERF_A3,zR=Gw.ERF_A4,BR=Gw.ERF_A5,PR=fA(Jf,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+FR*n);return t*(1-((((BR*r+zR)*r+LR)*r+MR)*r+OR)*r*Math.exp(-n*n))})),WR={kernelName:Jf,backendName:"cpu",kernelFunc:PR},VR=AA((e=>Math.exp(e))),UR=mA(em,VR,"float32"),GR={kernelName:em,backendName:"cpu",kernelFunc:UR};function HR(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,o=s.shape.length,i=s.shape.slice();let u=a;return a<0&&(by.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+a+1),i.splice(u,0,1),XA({inputs:{x:s},backend:n,attrs:{shape:i}})}const qR={kernelName:tm,backendName:"cpu",kernelFunc:HR},jR=AA((e=>Math.expm1(e))),KR=mA(nm,jR),XR={kernelName:nm,backendName:"cpu",kernelFunc:KR},YR=vA(((e,t)=>e/t)),ZR=UA(Kf,YR),JR={kernelName:Kf,backendName:"cpu",kernelFunc:ZR},QR=vA(((e,t)=>e-t)),eD=GA(((e,t,n,r)=>({real:e-n,imag:t-r}))),tD=UA(Gg,QR,eD),nD={kernelName:Gg,backendName:"cpu",kernelFunc:tD};function rD(e,t,n){const r=e.shape,s=r[0],a=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,l=[s,a],c=by.sizeFromShape(l),p=by.getTypedArrayFromDType("float32",c),h=by.getTypedArrayFromDType("float32",c);for(let e=0;e<s;e++){const r=O_({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=O_({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=OA({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=sD(o,t,n),d=Gw.mergeRealAndImagArrays(l,c);for(let t=0;t<a;t++){const n=Gw.getComplexWithIndex(d,t);p[e*a+t]=n.real,h[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o)}const d=n.makeTensorInfo(l,"float32",p),f=n.makeTensorInfo(l,"float32",h),m=OA({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function sD(e,t,n){const r=by.sizeFromShape(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((i=r)&i-1)){const s=aD(a,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",s.real),t=n.makeTensorInfo(i,"float32",s.imag),a=n.makeTensorInfo([],"float32",by.createScalarValue(r,"float32")),o=bA({inputs:{x:a},backend:n}),u=JR.kernelFunc({inputs:{a:e,b:a},backend:n}),l=JR.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(u.dataId).values,p=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:p}}return s}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,o=0;for(let r=0;r<t;r++){const i=Gw.exponent(s*r,t,n),u=Gw.getComplexWithIndex(e,r);a+=u.real*i.real-u.imag*i.imag,o+=u.real*i.imag+u.imag*i.real}n&&(a/=t,o/=t),Gw.assignToTypedArray(r,a,o,s)}return r}(Gw.mergeRealAndImagArrays(a,o),r,t);return Gw.splitRealAndImagArrays(e)}var i}function aD(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=Gw.mergeRealAndImagArrays(e,t),o=n/2,i=Gw.complexWithEvenIndex(a),u=i.real,l=i.imag,c=[u.length],p=s.makeTensorInfo(c,"float32",u),h=s.makeTensorInfo(c,"float32",l),d=OA({inputs:{real:p,imag:h},backend:s}),f=Gw.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=OA({inputs:{real:b,imag:x},backend:s}),k=aD(u,l,o,r,s),v=k.real,N=k.imag,S=[v.length],I=s.makeTensorInfo(S,"float32",v),T=s.makeTensorInfo(S,"float32",N),E=OA({inputs:{real:I,imag:T},backend:s}),$=aD(m,g,o,r,s),C=$.real,A=$.imag,_=[C.length],R=s.makeTensorInfo(_,"float32",C),D=s.makeTensorInfo(_,"float32",A),F=OA({inputs:{real:R,imag:D},backend:s}),O=Gw.exponents(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=OA({inputs:{real:L,imag:z},backend:s}),P=IR({inputs:{a:B,b:F},backend:s}),W=jA({inputs:{a:E,b:P},backend:s}),V=tD({inputs:{a:E,b:P},backend:s}),U=zA({inputs:{input:W},backend:s}),G=zA({inputs:{input:V},backend:s}),H=X_({inputs:{input:W},backend:s}),q=X_({inputs:{input:V},backend:s}),j=Z_({inputs:[U,G],backend:s,attrs:{axis:0}}),K=Z_({inputs:[H,q],backend:s,attrs:{axis:0}}),X=s.data.get(j.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const oD={kernelName:rm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=by.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=XA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=rD(o,!1,n),u=XA({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}};function iD(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,o=a||by.inferDtype(s),i=by.getArrayFromDType(o,by.sizeFromShape(r));return function(e,t,n){e.fill(t)}(i,s),t.makeTensorInfo(r,o,i)}const uD={kernelName:sm,backendName:"cpu",kernelFunc:iD};const lD={kernelName:am,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=by.getTypedArrayFromDType(r.dtype,by.sizeFromShape(r.shape)),[o,i,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*u*i*l;for(let e=0;e<i;e++){const n=e*(u*l);for(let e=0;e<u;e++){const r=e*l;for(let s=0;s<l;s++){const o=Math.round(u-e-1),i=t+n+r+s;let p=c[i];if(o>=0&&o<u){p=c[t+n+o*l+s]}a[i]=p}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},cD=AA((e=>Math.floor(e))),pD=mA(om,cD),hD={kernelName:om,backendName:"cpu",kernelFunc:pD},dD=vA(((e,t)=>Math.floor(e/t))),fD=UA(im,dD,null,"int32"),mD={kernelName:im,backendName:"cpu",kernelFunc:fD};const gD={kernelName:ay,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=Q_({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=XA({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=jA({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=jA({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===i.shape.length&&1!==i.shape[0]){const e=XA({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=FA(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=FA(n,m,d,i,f);n.disposeIntermediateTensorInfo(e)}return m}};const yD={kernelName:oy,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=mR({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=jA({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=FA(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function bD(e,t,n,r,s,a,o,i,u){const l=Bx([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*o[t],r.push(a)}if(c<0||c>=u/a)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<a;e++)l.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return l}const xD={kernelName:cm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=by.sizeFromShape(r.shape),o=s.shape,i=o[o.length-1],[u,l,c,p]=Gw.prepareAndValidate(r,s);if(0===l)return n.makeTensorInfo(u,r.dtype,[]);const h=bD(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,l,i,c,p,r.shape,a);return n.makeTensorInfo(u,r.dtype,h.values)}};function wD(e,t,n){const r=Bx(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],o=s[2],i=t.locToIndex([a,o]);s[2]=t.values[i];const u=e.locToIndex(s);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}const kD={kernelName:lm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r;dA([s,a],"gatherV2");const u=by.parseAxisParam(o,s.shape)[0],l=n.data.get(a.dataId).values,c=s.shape[u];for(let e=0;e<l.length;++e){const t=l[e];by.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let p=i;null==i&&(p=0);const h=by.sizeFromShape(a.shape),d=Gw.segment_util.collectGatherOpShapeInfo(s,a,u,p),f=XA({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=XA({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=wD(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},vD=vA(((e,t)=>e>t?1:0)),ND=UA(pm,vD,null,"bool"),SD={kernelName:pm,backendName:"cpu",kernelFunc:ND},ID=vA(((e,t)=>e>=t?1:0)),TD=UA(hm,ID,null,"bool"),ED={kernelName:hm,backendName:"cpu",kernelFunc:TD};const $D={kernelName:fm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=by.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=XA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=rD(o,!0,n),u=XA({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}},CD=fA(gm,(e=>Number.isFinite(e)?1:0),"bool"),AD={kernelName:gm,backendName:"cpu",kernelFunc:CD},_D=fA(ym,(e=>Math.abs(e)===1/0?1:0),"bool"),RD={kernelName:ym,backendName:"cpu",kernelFunc:_D},DD=fA(bm,(e=>Number.isNaN(e)?1:0),"bool"),FD={kernelName:bm,backendName:"cpu",kernelFunc:DD},OD=vA(((e,t)=>e<t?1:0)),MD=UA(wm,OD,null,"bool"),LD={kernelName:wm,backendName:"cpu",kernelFunc:MD},zD=vA(((e,t)=>e<=t?1:0)),BD=UA(km,zD,null,"bool"),PD={kernelName:km,backendName:"cpu",kernelFunc:BD};function WD(e,t,n){const r=(t-e)/(n-1),s=by.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const VD={kernelName:vm,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=WD(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},UD=AA((e=>Math.log(e))),GD=mA(Nm,UD),HD={kernelName:Nm,backendName:"cpu",kernelFunc:GD},qD=fA(Sm,(e=>Math.log1p(e))),jD={kernelName:Sm,backendName:"cpu",kernelFunc:qD},KD=vA(((e,t)=>e&&t)),XD=UA(Im,KD,null,"bool"),YD={kernelName:Im,backendName:"cpu",kernelFunc:XD},ZD=fA(Tm,(e=>e?0:1),"bool"),JD={kernelName:Tm,backendName:"cpu",kernelFunc:ZD},QD=vA(((e,t)=>e||t)),eF=UA(Em,QD,null,"bool"),tF={kernelName:Em,backendName:"cpu",kernelFunc:eF};const nF={kernelName:$m,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:u}=r;dA(s,"LRN");const l=s.shape[3],c=l-1,p=n.data.get(s.dataId).values,h=by.sizeFromShape(s.shape),d=new Float32Array(h);function f(e){const t=e%l;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let e=0;e<h;e++){const t=f(e),n=p[e]*Math.pow(o+i*t,-u);d[e]=n}return n.makeTensorInfo(s.shape,s.dtype,d)}};const rF={kernelName:Cm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r;dA(o,"LRNGrad");const p=by.sizeFromShape(o.shape),h=o.shape[3],d=n.data.get(o.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(p),y=p;for(let e=0;e<y;e++){const t=e%h,n=e-t+Math.max(0,t-i),r=e-t+Math.min(h,t+i+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=l*s+u;for(let t=n;t<r;t++){let n=-2*l*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(o.shape,s.dtype,g)}};function sF(e,t,n,r){const s=by.getTypedArrayFromDType(r,by.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}function aF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=n;let u=s.shape;const l=u.length,c=by.parseAxisParam(a,u);let p=c;const h=Gw.getAxesPermutation(p,l);let d=i.data.get(s.dataId).values;if(null!=h){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[h[t]];d=i_(d,u,s.dtype,h,e),p=Gw.getInnerMostAxes(p.length,l),u=e}dA(s,"max"),Gw.assertAxesAreInnerMostDims("max",p,l);const[f,m]=Gw.computeOutAndReduceShapes(u,p),g=sF(d,by.sizeFromShape(m),f,s.dtype),y=i.write(g,f,s.dtype);let b=f;if(o){b=Gw.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:s.dtype}}const oF={kernelName:Am,backendName:"cpu",kernelFunc:aF},iF=vA(((e,t)=>Math.max(e,t))),uF=UA(_m,iF),lF={kernelName:_m,backendName:"cpu",kernelFunc:uF};const cF={kernelName:Rm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;dA(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;by.assert(Gw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Gw.computePool2DInfo(s.shape,a,o,1,i,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&by.arraysEqual(l.inShape,l.outShape))c=bA({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=by.computeStrides(s.shape),r=I_(e,s.shape,s.dtype,t,l,"max");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const pF={kernelName:Fm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;dA(s,"maxPool3d");const c=Gw.computePool3DInfo(s.shape,a,o,1,i,u,l),p=E_(n.data.get(s.dataId).values,s.shape,s.dtype,by.computeStrides(s.shape),c,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}};const hF={kernelName:Om,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;dA([s,a],"maxPool3DGrad");const c=Gw.computePool3DInfo(a.shape,o,i,1,u,l),p=$_(n.bufferSync(a),c),h=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,S=Bx(a.shape,"float32"),I=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-k,o=r-N,i=s-v;let u=0;for(let n=0;n<b;n+=m){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(o+s)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<w;o+=y){const l=(i+o)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const h=b*x*w-1-p.get(e,r,a,l,t)===n*x*w+s*w+o?1:0;if(0===h)continue;u+=I.get(e,r,a,l,t)*h}}}S.set(u,e,n,r,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const dF={kernelName:Dm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;dA([a,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,h=Gw.computePool2DInfo(i.shape,u,l,1,c,p),d=n.data.get(i.dataId).values,f=Bx(h.outShape,i.dtype,T_(d,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=w-1-h.padInfo.left,v=x-1-h.padInfo.top,N=Bx(i.shape,"float32"),S=n.data.get(s.dataId).values,I=Bx(s.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=n-v,a=r-k;let o=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const i=(a+s)/g;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;const u=x*w-1-f.get(e,r,i,t)===n*w+s?1:0;if(0===u)continue;o+=I.get(e,r,i,t)*u}}N.set(o,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};function fF(e,t,n,r,s){const a=I_(e,0,n,by.computeStrides(t),s,"max"),o=T_(e,t,n,s,!0,r);return[a.values,o.values]}const mF={kernelName:Mm,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,u=n;dA(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=Gw.computePool2DInfo(r.shape,s,a,[1,1],o),[p,h]=fF(l,r.shape,r.dtype,i,c),d=u.write(p,c.outShape,r.dtype),f=u.write(h,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const gF={kernelName:Lm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=by.parseAxisParam(a,s.shape),u=Gw.computeOutAndReduceShapes(s.shape,i)[1],l=by.sizeFromShape(u),c=[],p=n.makeTensorInfo([],"float32",new Float32Array([l]));c.push(p);const h=WA({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});c.push(h);const d=ZR({inputs:{a:h,b:p},backend:n});c.push(d);const f=ER({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:o}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const yF={kernelName:zm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;dA(s,"min");const i=by.parseAxisParam(a,s.shape);let u=i;const l=Gw.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=u_({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Gw.getInnerMostAxes(u.length,s.shape.length)),Gw.assertAxesAreInnerMostDims("min",u,c.shape.length);const[p,h]=Gw.computeOutAndReduceShapes(c.shape,u),d=by.sizeFromShape(h),f=by.makeZerosTypedArray(by.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=XA({inputs:{x:g},backend:n,attrs:{shape:Gw.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},bF=vA(((e,t)=>Math.min(e,t))),xF=UA(Bm,bF),wF={kernelName:Bm,backendName:"cpu",kernelFunc:xF};const kF={kernelName:Pm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:o}=r;dA(s,"mirrorPad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===o?0:1,p=n.data.get(s.dataId).values,h=s.shape.length,d=by.computeStrides(s.shape),f=by.sizeFromShape(i),m=i.length,g=by.computeStrides(i),y=by.getTypedArrayFromDType(s.dtype,f);for(let e=0;e<f;e++){let t=by.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=by.locToIndex(t,h,d);y[e]=p[n]}return{dataId:n.write(y,i,s.dtype),shape:i,dtype:s.dtype}}},vF=vA(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),NF=UA(Wm,vF),SF={kernelName:Wm,backendName:"cpu",kernelFunc:NF};function IF(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=s.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const u=by.parseAxisParam([i],s.shape),l=aF({inputs:{x:s},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=Gw.expandShapeToKeepDim(l.shape,u),p=XA({inputs:{x:l},backend:n,attrs:{shape:c}}),h=tD({inputs:{a:s,b:p},backend:n}),d=UR({inputs:{x:h},backend:n}),f=ER({inputs:{x:d},backend:n,attrs:{axis:u,keepDims:!1}}),m=XA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=ZR({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const TF={kernelName:Rg,backendName:"cpu",kernelFunc:IF};const EF={kernelName:Vm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r;dA(s,"multinomial");const u=i?s:IF({inputs:{logits:s},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],p=n.data.get(u.dataId).values,h=[l,a],d=by.makeZerosTypedArray(by.sizeFromShape(h),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const r=Rl.alea(o.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();d[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[s+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(h,"int32",d)}};function $F(e,t,n){const r=by.createScalarValue(-1,n);return NR([],t,r,e,n)}const CF={kernelName:Gm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;dA(r,"neg");const s=n.data.get(r.dataId).values,[a,o]=$F(s,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,a)}},AF=eN.nonMaxSuppressionV3Impl;const _F={kernelName:qm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r;dA(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:p}=AF(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},RF=eN.nonMaxSuppressionV4Impl;const DF={kernelName:jm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=r;dA(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,{selectedIndices:h,validOutputs:d}=RF(c,p,o,i,u,l);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},FF=eN.nonMaxSuppressionV5Impl;const OF={kernelName:Km,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=r;dA(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,h=o,d=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=FF(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},MF=vA(((e,t)=>e!==t?1:0)),LF=UA(Hm,MF,null,"bool"),zF={kernelName:Hm,backendName:"cpu",kernelFunc:LF};const BF={kernelName:Ym,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:u}=r;dA(s,"oneHot");const l=by.sizeFromShape(s.shape),c=new Float32Array(l*o);c.fill(u);const p=n.data.get(s.dataId).values;for(let e=0;e<l;++e)p[e]>=0&&p[e]<o&&(c[e*o+p[e]]=i);return n.makeTensorInfo([...s.shape,o],a,c)}};function PF(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=zA({inputs:{input:r},backend:n}),t=PF({inputs:{x:e},backend:n}),s=X_({inputs:{input:r},backend:n}),a=PF({inputs:{x:s},backend:n}),o=OA({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return iD({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const WF={kernelName:ey,backendName:"cpu",kernelFunc:PF};const VF={kernelName:Xm,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=zA({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=X_({inputs:{input:s},backend:r}),o=PF({inputs:{x:a},backend:r}),i=OA({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return iD({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function UF(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return HR({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{by.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),by.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],u=Z_({inputs:t.map((e=>{const t=HR({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const GF={kernelName:Zm,backendName:"cpu",kernelFunc:UF};const HF={kernelName:Jm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;dA(s,"pad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=n.data.get(s.dataId).values,c=by.sizeFromShape(s.shape),p=s.shape.length,h=by.computeStrides(s.shape),d=by.sizeFromShape(i),f=i.length,m=by.computeStrides(i),g=by.getTypedArrayFromDType(s.dtype,d);0!==o&&g.fill(o);for(let e=0;e<c;e++){const t=by.indexToLoc(e,p,h).map(((e,t)=>e+u[t]));g[by.locToIndex(t,f,m)]=l[e]}return{dataId:n.write(g,i,s.dtype),shape:i,dtype:s.dtype}}},qF=vA(((e,t)=>Math.pow(e,t))),jF=UA(Qm,qF),KF={kernelName:Qm,backendName:"cpu",kernelFunc:jF};function XF(e,t,n,r){const[s,a]=Gw.computeOutAndReduceShapes(e,r),o=cb(t,"int32"),i=by.makeZerosTypedArray(by.sizeFromShape(s),o),u=by.sizeFromShape(a);for(let e=0;e<i.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:s,outDtype:o}}const YF={kernelName:tg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;dA(s,"prod");const i=s.shape.length,u=by.parseAxisParam(a,s.shape),l=Gw.getAxesPermutation(u,i);let c=u,p=s;const h=[];null!=l&&(p=u_({inputs:{x:s},backend:n,attrs:{perm:l}}),h.push(p),c=Gw.getInnerMostAxes(c.length,i));const d=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=XF(p.shape,p.dtype,d,c);let y=m;return o&&(y=Gw.expandShapeToKeepDim(m,u)),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function ZF(e,t,n,r){const s=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=i[s],t=e[e.length-1]-r[o];for(let e=o;e<u;++e)i[s].push(r[e+1]+t)}o=r[o],u=r[u]}u!==o&&(s.push([o,u]),a+=u-o)}return{outSplits:i,valueSlices:s,numValues:a}}function JF(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function QF(e,t,n,r,s){const a=t.slice();a[0]=s;const o=by.getArrayFromDType(n,by.sizeFromShape(a)),i=e.length;return function(e,t,n,r,s,a){const o=JF(t,2)[1],i=JF(a,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[u*i+t]=e[n*o+t];++u}}(e,t,r,0===i?0:i/t[0],o,a),[o,a]}function eO(e,t,n,r,s,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,r)=>{if(e<0||e>=n){const s=by.indexToLoc(r,t.length,by.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const u=r[0],{outSplits:l,valueSlices:c,numValues:p}=ZF(a,o,e,u),h=function(e){const t=[];for(let n=0;n<e.length;++n){const r=e[n].length,s=by.getArrayFromDType("int32",r);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(l),d=QF(n,r,s,c,p);return[h,d[0],d[1]]}const tO={kernelName:ng,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,u=s.map((e=>n.data.get(e.dataId).values)),l=s.map((e=>e.shape)),c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,[h,d,f]=eO(u,l,c,a.shape,a.dtype,p,o.shape),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},nO=2147483647;function rO(e,t,n,r,s,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,u=0===s.length,l=0===o.length,c=[];i||c.push(t[0]),u||c.push(s[0]),l||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===c.length?1:c[0],h=by.getArrayFromDType("int32",p+1);h[0]=0;for(let t=0;t<p;++t){const n=i?e[0]:e[t],s=u?r[0]:r[t],o=l?a[0]:a[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&s<n||o<0&&s>n)c=0;else if(c=Math.ceil(Math.abs((s-n)/o)),c>nO)throw new Error("Requires ((limit - start) / delta) <= 2147483647");h[t+1]=h[t]+c}const d=h[p],f=by.getArrayFromDType(n,d);let m=0;for(let t=0;t<p;++t){const n=h[t+1]-h[t];let r=i?e[0]:e[t];const s=l?a[0]:a[t];for(let e=0;e<n;++e)f[m++]=r,r+=s}return[h,f]}const sO={kernelName:rg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=rO(o,r.shape,r.dtype,i,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};var aO=Gw.RowPartitionType;class oO{constructor(e,t,n,r,s,a,o,i,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Gw.getRowPartitionTypesHelper(l),this.raggedRank=Gw.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===aO.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===aO.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case aO.VALUE_ROWIDS:return oO.getMaxWidthValueRowID(t);case aO.ROW_SPLITS:return oO.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${aO[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return uO(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;Gw.validateDefaultValueShape(n,t);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=Gw.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let e=0;e<r;++e,a+=t)s.push(a);for(let t=r;t<e;++t)s.push(-1);return by.assert(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let o=0;o<s-1;++o){const s=e[o+1]-e[o];let i=Math.min(r,s),u=t[o];-1===u&&(i=0);for(let e=0;e<i;++e)a.push(u),u+=n;for(let e=0;e<s-i;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let u=t[i];a.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===i)u>=0&&(++o,o<r?u+=n:u=-1);else{if(o=0,i=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case aO.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case aO.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${aO[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case aO.FIRST_DIM_SIZE:return e[0];case aO.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case aO.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${aO[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=uO(t,!1),s=by.getArrayFromDType(this.valuesDType,by.sizeFromShape(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){a=this.calculateOutputIndex(e-1,a,n[e],t[e])}this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let o=r.slice();o=o.slice(e+1);const i=by.sizeFromShape(o),u=t.length;let l=this.defaultValue;if(l.length!==i&&1!==l.length){const e=this.defaultValueShape;dN((()=>{const t=Rk(l,e),n=vS(t,o);l=n.dataSync()}))}let c=0,p=0,h=0;for(let e=0;e<=u;++e){let r=e<u?t[e]:-1;if(r!==h){if(p<h){const e=s.subarray(c*i);iO(a.subarray(p*i),e,(h-p)*i)}if(e>=u){const e=n.length;r=Math.floor(e/i)}if(r>h)if(1===this.defaultValue.length)a.subarray(h*i,r*i).fill(this.defaultValue[0]),h=r;else for(;r>h;){iO(a.slice(h*i),l,i),++h}r<0?(c=e+1,p=h):(c=e,p=h,h=p+1)}else++h}}}function iO(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function uO(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function lO(e,t,n,r,s,a,o,i,u,l){return new oO(e,t,n,r,s,a,o,i,u,l).compute()}const cO={kernelName:sg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,h=i.map((e=>n.data.get(e.dataId).values)),d=i.map((e=>e.shape)),[f,m]=lO(l,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,u);return n.makeTensorInfo(f,a.dtype,m)}};function pO(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return by.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/n)),a=by.makeZerosTypedArray(s,r);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const hO={kernelName:ag,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:o}=n,i=pO(r,s,o,a);return t.makeTensorInfo([i.length],a,i)}},dO=fA(ig,(e=>1/e)),fO={kernelName:ig,backendName:"cpu",kernelFunc:dO};const mO={kernelName:hg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;dA(s,"resizeBilinear");const u=by.computeStrides(s.shape),[l,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(by.sizeFromShape([p,l,c,f])),y=[a&&l>1?h-1:h,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<l;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(h-1,Math.ceil(n)),i=e*u[0]+r*u[1],l=e*u[0]+a*u[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),c=i+n*u[2],p=l+n*u[2],h=i+a*u[2],y=l+a*u[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[p+e],a=t+(m[h+e]-t)*r,o=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=o}}}return n.makeTensorInfo([p,l,c,f],"float32",g)}};const gO={kernelName:dg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;dA([a,s],"resizeBilinearGrad");const i=by.computeStrides(s.shape),[u,l,c,p]=s.shape,[,h,d]=a.shape,f=new Float32Array(u*l*c*p),m=[o&&h>1?l-1:l,o&&d>1?c-1:c],g=[o&&h>1?h-1:h,o&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<h;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),l-1),a=t+r*i[1],o=t+s*i[1],u=n-r,h=1-u;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,l=1-s,d=a+n*i[2],m=a+r*i[2],g=o+n*i[2],y=o+r*i[2],k=h*l,v=h*s,N=u*l,S=u*s;for(let e=0;e<p;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*S}}}}return n.makeTensorInfo([u,c,l,p],"float32",f)}};const yO={kernelName:cg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;dA(s,"resizeNearestNeighbor");const u=by.computeStrides(s.shape),[l,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(p*l*c*f),y=[a&&l>1?h-1:h,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<p;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=o?x*(e+.5):x*e;let r=Math.min(h-1,a?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=t+r*u[1];for(let e=0;e<c;e++){const t=o?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*u[2];for(let e=0;e<f;e++){const t=m[r+e];g[k++]=t}}}}return n.makeTensorInfo([p,l,c,f],s.dtype,g)}};const bO={kernelName:pg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;dA([a,s],"resizeNearestNeighborGrad");const i=by.computeStrides(s.shape),u=by.computeStrides(a.shape),[l,c,p,h]=s.shape,[,d,f]=a.shape,m=new Float32Array(l*c*p*h),g=n.data.get(a.dataId).values,y=[o&&d>1?c-1:c,o&&f>1?p-1:p],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,S=2*Math.ceil(v)+2;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],r=Math.floor(e*k),s=Math.floor(r-N/2);for(let r=0;r<p;r++){const a=n+r*i[2],l=Math.floor(r*v),y=Math.floor(l-S/2);for(let n=0;n<h;n++){let i=0;for(let a=0;a<N;a++){const l=a+s;if(l<0||l>=d)continue;const h=t+l*u[1],m=l*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const s=h+t*u[2],a=t*w;r===Math.min(p-1,o?Math.round(a):Math.floor(a))&&(i+=g[s+n])}}m[a+n]=i}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const xO={kernelName:mg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;dA(s,"reverse");const o=s.shape.length,i=by.parseAxisParam(a,s.shape);if(0===o)return bA({inputs:{x:s},backend:n});const u=new Xy(s.shape,s.dtype),l=n.bufferSync(s);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=s.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},wO={kernelName:ry,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,u=by.getTypedArrayFromDType(r.dtype,by.sizeFromShape(r.shape)),[l,c,p,h]=r.shape,[d,f]=Gw.getImageCenter(o,c,p),m=Math.sin(s),g=Math.cos(s),y=i.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let r=0;r<p;r++){const s=r*h;for(let o=0;o<h;o++){const i=[l,e,r,o],b=i[2],x=i[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;if("number"!=typeof a&&(v=3===o?255:a[o]),w>=0&&w<p&&k>=0&&k<c){v=y[t+k*(p*h)+w*h+o]}u[t+n+s+o]=v}}}}return{dataId:i.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},kO=fA(gg,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),vO={kernelName:gg,backendName:"cpu",kernelFunc:kO},NO=AA((e=>1/Math.sqrt(e))),SO=mA(yg,NO),IO={kernelName:yg,backendName:"cpu",kernelFunc:SO};function TO(e,t,n,r,s,a,o,i,u,l){const c=[r/s,s],p=e.values,h=t.values;if(0===r)return Bx(n,t.dtype);const d=Bx(c,t.dtype);"string"==typeof u||"number"==typeof u?d.values.fill(u):"boolean"==typeof u&&d.values.fill(+u);for(let e=0;e<a;e++){const a=[];let u=0;for(let t=0;t<o;t++){const n=p[e*o+t];a.push(n),u+=n*i[t]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=h[e*s+n]:d.values[u*s+n]=0===t.rank?h[0]:h[e*s+n]}return d}const EO={kernelName:bg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:p}=Gw.calculateShapes(a,s,o),h=TO(n.bufferSync(s),n.bufferSync(a),o,p,l,u,i,c,0,!0);return n.makeTensorInfo(o,h.dtype,h.values)}};function $O(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function CO(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}function AO(e,t,n,r,s,a){const o=by.getArrayFromDType("int32",n*s);for(let i=0;i<n;++i){const n=e.slice(i*r,(i+1)*r),u=i*s;for(let e=0;e<s;++e)o[u+e]="left"===a?$O(n,t[e+u]):CO(n,t[e+u])}return o}const _O={kernelName:xg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=AO(n.data.get(s.dataId).values,n.data.get(a.dataId).values,s.shape[0],s.shape[1],a.shape[1],o);return n.makeTensorInfo(a.shape,"int32",i)}};const RO={kernelName:wg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;dA([r,s,a],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=cb(s.dtype,a.dtype),p=by.makeZerosTypedArray(by.sizeFromShape(s.shape),c);let h=0;const d=0===o||o>1||1===s.shape.length?1:by.sizeFromShape(s.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<d;t++)1===i[e]?p[h++]=u[e]:p[h++]=l[e];return n.makeTensorInfo(s.shape,c,p)}},DO=Gw.SELU_SCALEALPHA,FO=Gw.SELU_SCALE,OO=fA(kg,(e=>e>=0?FO*e:DO*(Math.exp(e)-1))),MO={kernelName:kg,backendName:"cpu",kernelFunc:OO},LO=fA(Ig,(e=>e<0?-1:e>0?1:0)),zO={kernelName:Ig,backendName:"cpu",kernelFunc:LO},BO=fA(Ng,(e=>Math.sin(e))),PO={kernelName:Ng,backendName:"cpu",kernelFunc:BO},WO=fA(Sg,(e=>Math.sinh(e))),VO={kernelName:Sg,backendName:"cpu",kernelFunc:WO},UO=Math.log(1.1920928955078125e-7)+2,GO=fA(Eg,(e=>{const t=e>-UO,n=e<UO,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})),HO={kernelName:Eg,backendName:"cpu",kernelFunc:GO};const qO={kernelName:Ag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;dA([s],"spaceToBatchND");const i=by.sizeFromShape(a),u=[[0,0]];u.push(...o);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=HF.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=Gw.getReshaped(l.shape,a,i,!1),p=Gw.getPermuted(c.length,a.length,!1),h=Gw.getReshapedPermuted(l.shape,a,i,!1),d=XA({inputs:{x:l},backend:n,attrs:{shape:c}}),f=u_({inputs:{x:d},backend:n,attrs:{perm:p}}),m=XA({inputs:{x:f},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function jO(e,t,n,r,s,a,o){const i=t[0],u=a[0],l=new Array(u),c=new Array(i),p=t[1];if(0===u){if(0!==i)throw new Error(Gw.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));return[by.getArrayFromDType(n,0),[0,p],by.getArrayFromDType(s,0),l,c]}let h=!0,d=0;const f=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(Gw.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=u)throw new Error(Gw.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,u));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,l,c]}{const t=f[u-1],a=by.getArrayFromDType(n,t*p),h=by.getArrayFromDType(s,t),d=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p],s=d[n],o=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<p;++n)a[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<u;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;h[t]=o}}return[a,[t,p],h,l,c]}}const KO={kernelName:Dg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[p,h,d,f,m]=jO(i,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function XO(e,t,n,r,s){const a=by.sizeFromShape(r),o=t[0],i=s.length,u=[];let l=1,c=-1;for(let e=0;e<i;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(Gw.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,u.push(1)}else{if(t<0)throw new Error(Gw.getSparseReshapeNegativeOutputDimErrorMessage(e,t));l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error(Gw.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/l);if(l*e!==a)throw new Error(Gw.getSparseReshapeInputOutputMultipleErrorMessage(r,u));u[c]=e}if(by.sizeFromShape(u)!==a)throw new Error(Gw.getSparseReshapeInputOutputMismatchErrorMessage(r,u));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*u[e+1]}const f=by.getArrayFromDType(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],u]}const YO={kernelName:Fg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(s.dataId).values),i=n.data.get(r.dataId).values,u=Array.from(n.data.get(a.dataId).values),[l,c,p]=XO(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};function ZO(e,t,n,r,s,a=!1,o=0){const i=r.length,u=[t[0],e.length/t[0]],l=u[1],c=i>0?s[i-1]+1:0;if(c<0)throw new Error(Gw.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=c;const h=p.reduce(((e,t)=>e*t),1),d=by.getArrayFromDType(n,h);if(0===i)return c>0&&d.fill(o),[d,p];if(c<=0)throw new Error(Gw.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=s[f];for(;;){let t=0;if(m<i){if(t=s[m],y===t){++m;continue}if(y>=t)throw new Error(Gw.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(Gw.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(o,g*l,y*l);for(let t=f;t<m;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(Gw.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],u[0]));for(let t=0;t<l;t++)d[y*l+t]+=e[n*l+t]}if(a)for(let e=0;e<l;e++)d[y*l+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>i)break}return g<c&&d.fill(o,g*l,c*l),[d,p]}const JO={kernelName:Og,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=ZO(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const QO={kernelName:Mg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=ZO(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}};const eM={kernelName:Lg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:h}=Gw.calculateShapes(a,s,i),d=!1,f=n.bufferSync(s);let m;switch(a.dtype){case"bool":m=TO(f,n.bufferSync(a),i,h,c,l,u,p,Boolean(n.data.get(o.dataId).values[0]),d);break;case"float32":m=TO(f,n.bufferSync(a),i,h,c,l,u,p,n.data.get(o.dataId).values[0],d);break;case"int32":m=TO(f,n.bufferSync(a),i,h,c,l,u,p,n.data.get(o.dataId).values[0],d);break;case"string":m=TO(f,n.bufferSync(a),i,h,c,l,u,p,by.decodeString(n.data.get(o.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}};const tM={kernelName:_g,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=by.parseAxisParam(o,s.shape)[0],u=Gw.prepareSplitSize(s,a,i),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map((e=>{const t=[...c];t[i]=e;const r=O_({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[i]+=e,r}))}},nM=AA((e=>Math.sqrt(e))),rM=fA($g,(e=>Math.sqrt(e))),sM={kernelName:$g,backendName:"cpu",kernelFunc:rM},aM={kernelName:Bg,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;dA(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},oM=vA(((e,t)=>{const n=e-t;return n*n})),iM=UA(zg,oM),uM={kernelName:zg,backendName:"cpu",kernelFunc:iM},lM=fA(ty,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),cM={kernelName:ty,backendName:"cpu",kernelFunc:lM};function pM(e,t,n,r){const s=Bx(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+r[e];s.set(t.get(...o),...a)}return s}const hM={kernelName:Pg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r;dA(s,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=vw.sliceInfo(s.shape,a,o,i,u,l,c,p,h);let k;if(m)k=XA({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){by.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=vw.computeOutShape(b,x,w),t=O_({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=XA({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=pM(d,n.bufferSync(s),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class dM{constructor(e,t,n,r,s,a){this.separator=by.encodeString(e),this.nGramWidths=t,this.leftPad=by.encodeString(n),this.rightPad=by.encodeString(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let o=0;o<s;++o){const i=this.getPadWidth(a),u=Math.max(0,i-o),l=Math.max(0,i-(s-(o+1))),c=a-(u+l),p=t+(u>0?0:o-i);let h=0;h+=u*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=l*this.rightPad.length;h+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=by.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],u=this.getNumNGrams(i,a);this.createNGrams(e,r,o,s,u,a),s+=u})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,u=1;this.createNGrams(e,r,o,s,u,i)}}return[o,a]}}function fM(e,t,n,r,s,a,o,i){return new dM(n,r,s,a,o,i).compute(e,t)}const mM={kernelName:Wg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,h=n.data.get(c.dataId).values,d=n.data.get(p.dataId).values,[f,m]=fM(h,d,s,a,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};function gM(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function yM(e,t,n){const r=e.length,s=[];let a=0,o=0;const i=new Array(r);for(let u=0;u<r;++u){const r=s.length;gM(e[u],t,n,s);const l=s.length-r;i[u]=l,a+=l,o=Math.max(o,l)}const u=by.getArrayFromDType("int32",2*a),l=new Array(a),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)u[2*p]=e,u[2*p+1]=t,l[p]=s[p],++p;return[u,l,c]}const bM={kernelName:Vg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,u=n.data.get(o.dataId).values[0],[l,c,p]=yM(i,u,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",l),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};function xM(e,t){const n=by.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=by.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const wM={kernelName:Ug,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=xM(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",o)}},kM=fA(Hg,(e=>Math.tan(e))),vM={kernelName:Hg,backendName:"cpu",kernelFunc:kM},NM=fA(qg,(e=>Math.tanh(e)));function SM(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=Bx(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const IM=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function TM(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(a-s/2);TM(e,t,Math.max(n,Math.floor(t-a*i/s+u)),Math.min(r,Math.floor(t+(s-a)*i/s+u)))}const s=e[t];let a=n,o=r;for(by.swap(e,n,t),IM(e[r],s)>0&&by.swap(e,n,r);a<o;){for(by.swap(e,a,o),a++,o--;IM(e[a],s)<0;)a+=1;for(;IM(e[o],s)>0;)o-=1}0===IM(e[n],s)?by.swap(e,n,o):(o+=1,by.swap(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function EM(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],u=by.getTypedArrayFromDType(n,o*r),l=by.getTypedArrayFromDType("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(TM(o,r),o=o.slice(0,r)),s&&o.sort(IM);const c=t*r,p=u.subarray(c,c+r),h=l.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[Bx(c,n,u),Bx(c,"int32",l)]}function $M(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return by.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return by.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return by.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function CM(e,t,n,r,s,a,o,i,u,l,c){return 0<=i&&i<t&&0<=u&&u<n?e[o*r+i*s+u*a+l]:c}function AM(e,t,n,r,s,a,o,i,u,l,c){return CM(e,t,n,r,s,a,o,Math.round(i),Math.round(u),l,c)}function _M(e,t,n,r,s,a,o,i,u,l,c){const p=Math.floor(i),h=Math.floor(u),d=p+1,f=h+1;return(d-i)*((f-u)*CM(e,t,n,r,s,a,o,p,h,l,c)+(u-h)*CM(e,t,n,r,s,a,o,p,f,l,c))+(i-p)*((f-u)*CM(e,t,n,r,s,a,o,d,h,l,c)+(u-h)*CM(e,t,n,r,s,a,o,d,f,l,c))}function RM(e,t,n,r){const s=by.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const o={},i=new Int32Array(n[s]),u=new Xy(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(u.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,l.push(t)}}const p=a.slice();p[1]=Object.keys(o).length;const h=new Xy(p,r);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)h.set(u.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const DM=[QA,t_,r_,a_,KA,o_,c_,p_,h_,d_,m_,y_,x_,v_,S_,C_,A_,__,R_,JA,D_,L_,P_,W_,VA,G_,q_,MA,j_,J_,eR,tR,nR,rR,sR,aR,iR,lR,cR,pR,hR,dR,fR,gR,yR,bR,xR,wR,kR,vR,CR,yA,AR,DR,WR,GR,qR,XR,oD,uD,lD,hD,mD,gD,yD,xD,kD,SD,ED,xA,$D,Y_,AD,RD,FD,kA,LD,PD,VD,HD,jD,YD,JD,tF,nF,rF,oF,lF,cF,pF,hF,dF,mF,gF,yF,wF,kF,SF,EF,TR,CF,_F,DF,OF,zF,BF,VF,GF,HF,KF,IA,YF,tO,sO,cO,hO,BA,JR,fO,EA,CA,YA,mO,gO,yO,bO,xO,wO,vO,IO,EO,_O,RO,MO,DA,zO,PO,VO,M_,TF,HO,qO,KO,YO,JO,QO,eM,tM,sM,aM,uM,cM,hM,mM,bM,wM,nD,$R,vM,{kernelName:qg,backendName:"cpu",kernelFunc:NM},{kernelName:jg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;dA(s,"tile");const o=SM(n.bufferSync(s),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:Kg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r;dA(s,"topk");const i=n.data.get(s.dataId).values,[u,l]=EM(i,s.shape,s.dtype,a,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},{kernelName:Xg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=n,[c,p,h,d]=s.shape,[f,m]=null!=l?l:[p,h],g=[c,f,m,d],y=by.computeStrides(s.shape),b=y[0],x=y[1],w=y[2],k=by.computeStrides(g),v=k[0],N=k[1],S=k[2],I=by.getTypedArrayFromDType(s.dtype,by.sizeFromShape(g));I.fill(u);const T=r.data.get(s.dataId).values,E=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?E:E.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<d;++s){let a;const l=t[6]*r+t[7]*n+1;if(0===l)continue;const c=(t[0]*r+t[1]*n+t[2])/l,d=(t[3]*r+t[4]*n+t[5])/l,f=$M(c,h,i),m=$M(d,p,i);switch(o){case"nearest":a=AM(T,p,h,b,x,w,e,m,f,s,u);break;case"bilinear":a=_M(T,p,h,b,x,w,e,m,f,s,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}I[e*v+n*N+r*S+s]=a}return r.makeTensorInfo(g,s.dtype,I)}return{dataId:r.write(I,g,s.dtype),shape:s.shape,dtype:s.dtype}}},l_,{kernelName:Zg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;dA(a,"unique");const o=r.data.get(a.dataId).values,{outputValues:i,outputShape:u,indices:l}=RM(o,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:Jg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s.shape.length,i=s.shape[a],u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==a&&(u[l++]=s.shape[e]);const c=new Array(o).fill(0),p=s.shape.slice();p[a]=1;const h=new Array(i);for(let e=0;e<h.length;e++){c[a]=e;const t=O_({inputs:{x:s},backend:n,attrs:{begin:c,size:p}});h[e]=XA({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return h}},{kernelName:Qg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r;dA(s,"unsortedSegmentSum");const i=[],u=[],l=s.shape.length-a.shape.length;let c=a;for(let e=0;e<l;++e){const t=HR({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<o;++e){const t=by.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=RR({inputs:{a:r,b:c},backend:n}),o=WA({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),l=IR({inputs:{a:o,b:s},backend:n}),p=ER({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});i.push(p),u.push(r),u.push(a),u.push(o),u.push(l),u.push(p)}const p=UF({inputs:i,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},WF];for(const e of DM)my(e);const FM=eN.whereImpl;class OM extends Kh{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new jh(this,pN())}nextDataId(){return OM.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,Kd().get("IS_NODE")&&Gw.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&by.isString(n[0])){const s=n.map((e=>by.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return Gw.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>by.decodeString(e)));return Bx(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Bx(e.shape,e.dtype,t)}makeOutput(e,t,n){return pN().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=by.now();e();return{kernelMs:by.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){dA([e],"where");const t=this.readSync(e.dataId);return FM(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}OM.nextDataId=0;function MM(){let e,t,n,r,s,a,o,i,u,l;return 2===Kd().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",o="out vec4 outputColor;",i=Kd().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:u,defineRound:l}}function LM(e,t,n="index"){const r=by.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function zM(e,t,n="index"){const r=by.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / outShapeStrides[${s}]`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function BM(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${r[s]}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}function PM(e){const t=by.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}gN("cpu",(()=>new OM),1);const WM="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:VM}=Gw;function UM(e,t,n){const r=[];if(e.forEach((e=>{const t=by.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=eL(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?HM(e,r):GM(e,r);const a=e.shapeInfo.logicalShape,o=t.logicalShape;a.length<=o.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=VM(e.shapeInfo.logicalShape,t.logicalShape),u=QM(o),l=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+l]} = 0;`)).join("\n");let h="";h=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+l]}`)).join(", ");let d="return outputValue;";const f=1===by.sizeFromShape(e.shapeInfo.logicalShape),m=1===by.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&by.arraysEqual(o,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=QM(u),c=VM(e.shapeInfo.logicalShape,t.logicalShape),p=u-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\n");let f="";f=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${r}(${f});\n    }\n  `}(e,t));return s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=MM(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let l,c,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${qM}\n    ${jM}\n    ${KM}\n  `}(i);t.isPacked?(l=function(e,t,n){switch(e.length){case 0:return YM();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(by.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let o=a,i="",u="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(l=function(e,t,n){switch(e.length){case 0:return YM();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(by.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${zM(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=LM(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${zM(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=LM(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=LM(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=LM(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=XM);return[p,u,c,s,l,a,n.userCode].join("\n")}function GM(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=ZM(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${u}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${JM(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],o=s[1];if(1===o&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=ZM(n);if(1===o)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&by.arraysEqual(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=by.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col"];return`\n      ${GM(tL(e,u),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${nL(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${JM(e)}\n      }\n    `;const l=a[0],c=a[1],p=ZM(r);if(1===c)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===l)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;return t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:u}=by.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col","depth"];return`\n        ${GM(tL(e,l),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${nL(n,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${JM(e)}\n      }\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===o&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=ZM(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:u,keptDims:l}=by.squeezeShape(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${GM(tL(e,u),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${nL(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${JM(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=ZM(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:u,keptDims:l}=by.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${GM(tL(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${nL(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${s})) +\n          depth3;\n        ${JM(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=ZM(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=by.squeezeShape(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${GM(tL(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${nL(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${JM(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=ZM(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function HM(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=MM();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=MM();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],u=MM();if(null!=a&&by.arraysEqual(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${HM(tL(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${nL(a,r)});\n        }\n      `}const i=MM();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const u=o[0],l=o[1],c=Math.ceil(n[2]/2),p=c*Math.ceil(n[1]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${p}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=MM();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=u[0],c=u[1],p=Math.ceil(a[o-1]/2);let h=p*Math.ceil(a[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=a[o-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const qM="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jM="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",KM="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",XM="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function YM(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function ZM(e){return`offset${e}`}function JM(e){const t=e.name,n=by.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function QM(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function eL(e,t,n){const{newShape:r,keptDims:s}=by.squeezeShape(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):r,u=!e&&a>1&&!by.arraysEqual(t,n)&&r.length<a||o;return{useSqueezeShape:u,uniformShape:u?i:t,keptDims:s}}function tL(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function nL(e,t){return t.map((t=>e[t])).join(", ")}const rL={},sL={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function aL(e,t){rL[e]=t}function oL(e,t){if(!(e in rL)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete rL[e]}),!1),Kd().getBool("SOFTWARE_WEBGL_ENABLED")&&(sL.failIfMajorPerformanceCaveat=!1);return 1===e?n.getContext("webgl",sL)||n.getContext("experimental-webgl",sL):n.getContext("webgl2",sL)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;rL[e]=n}const n=rL[e];return null==n||n.isContextLost()?(delete rL[e],oL(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),rL[e])}var iL,uL,lL,cL,pL,hL;function dL(e,t){return[t,e]}function fL(e){const t=by.sizeFromShape(e),n=Math.ceil(t/4);return by.sizeToSquarishShape(n)}function mL(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function gL(e,t){const n=e;let r,s,a,o,i,u,l,c,p,h;return 2===Kd().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,l=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,u=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,l=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,u=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function yL(e,t){const n=t();return Kd().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}(uL=iL||(iL={}))[uL.DENSE=0]="DENSE",uL[uL.SHARED_BATCH=1]="SHARED_BATCH",(cL=lL||(lL={}))[cL.RENDER=0]="RENDER",cL[cL.UPLOAD=1]="UPLOAD",cL[cL.PIXELS=2]="PIXELS",cL[cL.DOWNLOAD=3]="DOWNLOAD",(hL=pL||(pL={}))[hL.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",hL[hL.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",hL[hL.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",hL[hL.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",hL[hL.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function bL(e){return!!(Kd().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function xL(e,t){return CL(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function wL(e,t){const n=CL(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(yL(e,(()=>e.shaderSource(n,t))),yL(e,(()=>e.compileShader(n))),Kd().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw vL(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const kL=/ERROR: [0-9]+:([0-9]+):/g;function vL(e,t){const n=kL.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,o=s.map(((e,t)=>by.rightPad((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const u=o.slice(0,r-1),l=o.slice(r-1,r),c=o.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${by.rightPad(l[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function NL(e,t){if(yL(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function SL(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(yL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),yL(e,(()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o))),yL(e,(()=>e.enableVertexAttribArray(i))),!0)}function IL(e,t,n,r){yL(e,(()=>function(e,t,n){AL(e,n),yL(e,(()=>e.activeTexture(e.TEXTURE0+n))),yL(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),yL(e,(()=>e.uniform1i(n,r)))}function TL(e,t,n){yL(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),yL(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function EL(e,t){yL(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),yL(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function $L(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function CL(e,t,n){const r=yL(e,(()=>t()));if(null==r)throw new Error(n);return r}function AL(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function _L(e,t=2){return by.sizeFromShape(e.slice(0,e.length-t))}function RL(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function DL(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[_L(e),...RL(e)]),t}function FL(e){return e%2==0}function OL(e,t){if(e=e.slice(-2),t=t.slice(-2),by.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(FL(n)&&FL(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&FL(e[0])&&FL(t[0])}let ML,LL;function zL(e){if(null==ML){const t=oL(e);ML=t.getParameter(t.MAX_TEXTURE_SIZE)}return ML}function BL(e){if(null==LL){const t=oL(e);LL=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,LL)}function PL(e){if(0===e)return 0;let t;const n=oL(e);return t=WL(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:WL(n,"EXT_disjoint_timer_query")?1:0,t}function WL(e,t){return null!=e.getExtension(t)}function VL(e){try{if(null!=oL(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function UL(e){if(0===e)return!1;const t=oL(e);if(1===e){if(!WL(t,"OES_texture_float"))return!1}else if(!WL(t,"EXT_color_buffer_float"))return!1;return HL(t)}function GL(e){if(0===e)return!1;const t=oL(e);if(1!==e){if(WL(t,"EXT_color_buffer_float"))return HL(t);const e="EXT_color_buffer_half_float";if(WL(t,e)){const n=t.getExtension(e);return function(e,t){const n=gL(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!WL(t,"OES_texture_float"))return!1;if(!WL(t,"WEBGL_color_buffer_float"))return!1;return HL(t)}function HL(e){const t=gL(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function qL(e){if(2!==e)return!1;return null!=oL(e).fenceSync}function jL(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&by.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function KL(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=UM(s,o,t),u=wL(e.gl,i),l=e.createProgram(u);return Kd().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o},XL(e,t,l))}function XL(e,t,n){const r={},s={},a={},o=[];let i,u,l,c=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===Kd().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const h=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];r[i]=e.getUniformLocation(n,i,h),r[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,h),t.enableShapeUniforms&&(s[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,h),a[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,h))}return t.enableShapeUniforms&&(i=e.getUniformLocation(n,"outShape",h),l=e.getUniformLocation(n,"outShapeStrides",h),u=e.getUniformLocation(n,"outTexShape",h)),t.customUniforms&&t.customUniforms.forEach(((t,r)=>{o[r]=e.getUniformLocation(n,t.name,h)})),{uniformLocations:r,customUniformLocations:o,infLoc:c,nanLoc:p,inShapesLocations:s,inTexShapesLocations:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}}function YL(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!by.arraysEqual(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!by.arraysEqual(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function ZL(e){return Kd().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class JL{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Gw.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=ZL(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function QL(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function ez(e,t){return 1===t?[e]:QL(e,t)}function tz(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}class nz{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Gw.assertAndGetBroadcastShape(t,n);const s=this.outputShape.length;this.enableShapeUniforms=ZL(s);let a="";if(r)if(0===s||1===by.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${QM(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=ez("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function rz(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const sz={kernelName:dm,backendName:"webgl",kernelFunc:rz};function az(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(a.dataId),i=rz({inputs:{x:r},backend:n}),u=rz({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:u},a}const oz={kernelName:If,backendName:"webgl",kernelFunc:az},iz="return (a < 0.) ? b * a : a;",uz="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const lz={kernelName:xm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,o=n.makeTensorInfo([],"float32",by.createScalarValue(a,"float32")),i=Kd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nz(uz,s.shape,o.shape):new JL(iz,s.shape,o.shape),u=n.runWebGLProgram(i,[s,o],"float32");return n.disposeIntermediateTensorInfo(o),u}},cz="return (a < 0.) ? b * a : a;",pz="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const hz={kernelName:eg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=Kd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nz(pz,r.shape,s.shape):new JL(cz,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}};class dz{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const fz="return abs(x);";const mz="return x;";class gz{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function yz({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:o}=s,i=a,u=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,u);return i.makeTensorInfo(o.shape,u,t)}let l;return l=Kd().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new gz(o.shape,t):new dz(o.shape,e),i.runWebGLProgram(l,[o],u)}}function bz({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:o,backend:i})=>{const{a:u,b:l}=o,c=i;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},o=new JL(e,u.shape,l.shape);return c.runWebGLProgram(o,[s,a],cb(n.dtype,r.dtype))})),a=az({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const p=a||cb(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?Gw.fromUint8ToStringArray(e):e,r="string"===u.dtype?Gw.fromUint8ToStringArray(t):t,[a,o]=s(u.shape,l.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=a,i}let h;return h=Kd().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new nz(t,u.shape,l.shape,n):new JL(e,u.shape,l.shape),c.runWebGLProgram(h,[u,l],p)}}function xz(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?pz:cz;if("leakyrelu"===e)return t?uz:iz;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class wz{constructor(e,t,n,r=!1,s=!1,a=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=ZL(this.outputShape.length);const l=r?e[1]:e[2],c=Math.ceil(l/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const kz="return areal * breal - aimag * bimag;",vz="return areal * bimag + aimag * breal;";class Nz{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Gw.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var Sz={};t(Sz,"simpleAbsImpl",(()=>e_)),t(Sz,"addImpl",(()=>HA)),t(Sz,"bincountImpl",(()=>z_)),t(Sz,"bincountReduceImpl",(()=>B_)),t(Sz,"castImpl",(()=>PA)),t(Sz,"ceilImpl",(()=>V_)),t(Sz,"concatImpl",(()=>K_)),t(Sz,"equalImpl",(()=>_R)),t(Sz,"expImpl",(()=>VR)),t(Sz,"expm1Impl",(()=>jR)),t(Sz,"floorImpl",(()=>cD)),t(Sz,"gatherNdImpl",(()=>bD)),t(Sz,"gatherV2Impl",(()=>wD)),t(Sz,"greaterImpl",(()=>vD)),t(Sz,"greaterEqualImpl",(()=>ID)),t(Sz,"lessImpl",(()=>OD)),t(Sz,"lessEqualImpl",(()=>zD)),t(Sz,"linSpaceImpl",(()=>WD)),t(Sz,"logImpl",(()=>UD)),t(Sz,"maxImpl",(()=>sF)),t(Sz,"maximumImpl",(()=>iF)),t(Sz,"minimumImpl",(()=>bF)),t(Sz,"multiplyImpl",(()=>NR)),t(Sz,"negImpl",(()=>$F)),t(Sz,"notEqualImpl",(()=>MF)),t(Sz,"prodImpl",(()=>XF)),t(Sz,"raggedGatherImpl",(()=>eO)),t(Sz,"raggedRangeImpl",(()=>rO)),t(Sz,"raggedTensorToTensorImpl",(()=>lO)),t(Sz,"rangeImpl",(()=>pO)),t(Sz,"rsqrtImpl",(()=>NO)),t(Sz,"scatterImpl",(()=>TO)),t(Sz,"sigmoidImpl",(()=>_A)),t(Sz,"sliceImpl",(()=>F_)),t(Sz,"sparseFillEmptyRowsImpl",(()=>jO)),t(Sz,"sparseReshapeImpl",(()=>XO)),t(Sz,"sparseSegmentReductionImpl",(()=>ZO)),t(Sz,"sqrtImpl",(()=>nM)),t(Sz,"squaredDifferenceImpl",(()=>oM)),t(Sz,"stridedSliceImpl",(()=>pM)),t(Sz,"stringNGramsImpl",(()=>fM)),t(Sz,"stringSplitImpl",(()=>yM)),t(Sz,"stringToHashBucketFastImpl",(()=>xM)),t(Sz,"subImpl",(()=>QR)),t(Sz,"tileImpl",(()=>SM)),t(Sz,"topKImpl",(()=>EM)),t(Sz,"transposeImpl",(()=>i_)),t(Sz,"uniqueImpl",(()=>RM));const{addImpl:Iz,bincountImpl:Tz,bincountReduceImpl:Ez,castImpl:$z,ceilImpl:Cz,concatImpl:Az,equalImpl:_z,expImpl:Rz,expm1Impl:Dz,floorImpl:Fz,gatherNdImpl:Oz,gatherV2Impl:Mz,greaterImpl:Lz,greaterEqualImpl:zz,lessImpl:Bz,lessEqualImpl:Pz,linSpaceImpl:Wz,logImpl:Vz,maxImpl:Uz,maximumImpl:Gz,minimumImpl:Hz,multiplyImpl:qz,negImpl:jz,notEqualImpl:Kz,prodImpl:Xz,raggedGatherImpl:Yz,raggedRangeImpl:Zz,raggedTensorToTensorImpl:Jz,rangeImpl:Qz,rsqrtImpl:eB,scatterImpl:tB,sigmoidImpl:nB,simpleAbsImpl:rB,sliceImpl:sB,sparseFillEmptyRowsImpl:aB,sparseReshapeImpl:oB,sparseSegmentReductionImpl:iB,sqrtImpl:uB,stridedSliceImpl:lB,stringNGramsImpl:cB,stringSplitImpl:pB,stringToHashBucketFastImpl:hB,subImpl:dB,tileImpl:fB,topKImpl:mB,transposeImpl:gB,uniqueImpl:yB}=Sz,bB="return a * b;";function xB(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=Gw.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new Nz(kz,r.shape,s.shape),o=new Nz(vz,r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=az({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[o,i]=qz(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(i,a);return n.texData.get(u.dataId).values=o,u}let o;return o=Kd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nz(bB,r.shape,s.shape):new JL(bB,r.shape,s.shape),n.runWebGLProgram(o,[r,s],a)}const wB={kernelName:Um,backendName:"webgl",kernelFunc:xB};class kB{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?BM(["r","c","d"],"inputShape"):LM(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":PM(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function vB(e,t,n){const r=[_L(e.shape),...RL(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[_L(t),...RL(t)],o=new kB(a,r),i=[r],u=n.runWebGLProgram(o,[s],e.dtype,i,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function NB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=n,i=by.sizeFromShape(s.shape),u=by.inferFromImplicitShape(a,i),l=by.sizeFromShape(u);by.assert(i===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(s.dataId);return!c.isPacked||OL(s.shape,u)||null!==c.texture&&OL(c.shape,u)?(o.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):vB(s,u,o)}const SB={kernelName:lg,backendName:"webgl",kernelFunc:NB};class IB{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const o=4*Math.floor(n/4),i=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${by.isInt(e)?e.toPrecision(2):e}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class TB{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${u});\n      }\n    `}}function EB(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Gw.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:u,outSize:l}=s[o];let c,p;c="mean"===n?0===o?new IB({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new IB({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new TB({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),p=a,a=r.runWebGLProgram(c,[a],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return a}class $B{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=QM(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class CB{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=QM(this.rank),s=QL("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function AB(e,t,n){const r=Kd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CB(e.shape,t):new $B(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function _B(e,t,n,r){const s=t,a=e.shape.length,o=by.parseAxisParam(s,e.shape);let i=o;const u=Gw.getAxesPermutation(i,a),l=null!=u;let c=e;l&&(c=AB(e,u,r),i=Gw.getInnerMostAxes(i.length,a)),Gw.assertAxesAreInnerMostDims("sum",i,a);const[p,h]=Gw.computeOutAndReduceShapes(c.shape,i);let d=p;n&&(d=Gw.expandShapeToKeepDim(p,o));const f=by.sizeFromShape(h),m=NB({inputs:{x:c},attrs:{shape:[by.sizeFromShape(e.shape)/f,f]},backend:r}),g=EB(m,pb(e.dtype),"sum",r),y=NB({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),l&&r.disposeIntermediateTensorInfo(c),y}function RB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;return _B(s,a,o,n)}const DB={kernelName:Cg,backendName:"webgl",kernelFunc:RB};function FB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,o=n,i=s.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=s.shape[a[e]];let l;if(o.shouldExecuteOnCPU([s])){const e=o.texData.get(s.dataId).values,t=gB(e,s.shape,s.dtype,a,u);l=o.makeTensorInfo(u,s.dtype);o.texData.get(l.dataId).values=t}else l=AB(s,a,o);return l}const OB={kernelName:Yg,backendName:"webgl",kernelFunc:FB};function MB({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,p=n?e.shape[l-2]:e.shape[l-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[l-1]:e.shape[l-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=by.sizeFromShape(m),b=by.sizeFromShape(g),x=cw.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);by.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],k=r?[b,f,h]:[b,h,f],v=NB({inputs:{x:e},backend:s,attrs:{shape:w}}),N=NB({inputs:{x:t},backend:s,attrs:{shape:k}}),S=[v,N],I=Math.max(y,b),T=n?v.shape[1]:v.shape[2],E=null!=a,$=null!=o,C="leakyrelu"===u,A=null!=u?xz(u,!0):null;let _;if((1===d||1===f)&&T>1e3&&!1===(E||$||C||null!=A)){let e=v,t=N;n&&(e=FB({inputs:{x:v},backend:s,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=FB({inputs:{x:N},backend:s,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let o=e;1!==f&&(o=NB({inputs:{x:e},backend:s,attrs:{shape:[I,T,1]}}),S.push(o));const i=1===f?2:1;let u=t;a&&(u=NB({inputs:{x:t},backend:s,attrs:{shape:[I,1,T]}}),S.push(u));const l=xB({inputs:{a:o,b:u},backend:s});_=RB({inputs:{x:l},backend:s,attrs:{axis:i,keepDims:!0}}),S.push(l)}else{const u=cb(e.dtype,t.dtype),l=new wz(w,k,[I,d,f],n,r,E,A,$,C),c=[v,N];if(null!=a&&c.push(a),$&&c.push(o),C){const e=s.makeTensorInfo([],"float32",by.createScalarValue(i,"float32"));c.push(e),S.push(e)}_=s.runWebGLProgram(l,c,u)}const R=NB({inputs:{x:_},backend:s,attrs:{shape:x}});S.push(_);for(const e of S)s.disposeIntermediateTensorInfo(e);return R}const LB={kernelName:sy,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;return MB({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}},zB="return abs(x);";const BB={kernelName:Qd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=rB(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=Kd().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new gz(r.shape,zB):new dz(r.shape,zB),n.runWebGLProgram(s,[r],r.dtype)}},PB=yz({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),WB={kernelName:ef,backendName:"webgl",kernelFunc:PB},VB=yz({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),UB={kernelName:tf,backendName:"webgl",kernelFunc:VB},GB="return a + b;",HB=bz({opSnippet:GB,packedOpSnippet:GB,supportsComplex:!0,cpuKernelImpl:Iz}),qB={kernelName:nf,backendName:"webgl",kernelFunc:HB};class jB{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class KB{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const XB={kernelName:rf,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return rz({inputs:{x:s[0]},backend:r});if(s.length>Kd().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>cb(e,t))),o=s.map((e=>e.shape)),i=Kd().getBool("WEBGL_PACK")?new KB(s[0].shape,o):new jB(s[0].shape,o);return r.runWebGLProgram(i,s,a)}};const YB={kernelName:sf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=by.parseAxisParam(a,s.shape);let l=u;const c=Gw.getAxesPermutation(l,i);let p=s;null!=c&&(p=FB({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Gw.getInnerMostAxes(l.length,i)),Gw.assertAxesAreInnerMostDims("all",l,i);const[h,d]=Gw.computeOutAndReduceShapes(p.shape,l),f=NB({inputs:{x:p},backend:n,attrs:{shape:[-1,by.sizeFromShape(d)]}}),m=EB(f,f.dtype,"all",n);let g;if(o){g=NB({inputs:{x:m},backend:n,attrs:{shape:Gw.expandShapeToKeepDim(h,u)}})}else g=NB({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};const ZB={kernelName:af,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=by.parseAxisParam(a,s.shape);let l=u;const c=Gw.getAxesPermutation(l,i);let p=s;null!=c&&(p=FB({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Gw.getInnerMostAxes(l.length,i)),Gw.assertAxesAreInnerMostDims("any",l,i);const[h,d]=Gw.computeOutAndReduceShapes(p.shape,l),f=NB({inputs:{x:p},backend:n,attrs:{shape:[-1,by.sizeFromShape(d)]}}),m=EB(f,f.dtype,"any",n);let g;if(o){g=NB({inputs:{x:m},backend:n,attrs:{shape:Gw.expandShapeToKeepDim(h,u)}})}else g=NB({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};class JB{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class QB{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,by.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,u=QM(i),l=ez("coords",i);let c,p;if(1===a){p=i+1;const e=QM(p);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[i-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[i-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[i-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[i-2]};`}else p=i,c=`\n        ${u} sourceLocR = coords;\n        ++${l[i-1]};\n        ${u} sourceLocG = coords;\n        ++${l[i-2]};\n        ${u} sourceLocA = coords;\n        --${l[i-1]};\n        ${u} sourceLocB = coords;\n        --${l[i-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),d="."+h[p-1],f=h.map((e=>"int "+e)),m=ez("sourceLocR",p-1).concat("inIdx.r"),g=ez("sourceLocG",p-1).concat("inIdx.g"),y=ez("sourceLocB",p-1).concat("inIdx.b"),b=ez("sourceLocA",p-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${l[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function eP(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const o=Gw.computeOptimalWindowSize(a),i={windowSize:o,inSize:a,batchSize:s,outSize:Math.ceil(a/o)},u=new JB(i,n,null==r),l=[t];null!=r&&l.push(r);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const p=eP(e,t,n,c);return e.disposeIntermediateTensorInfo(c),p}function tP(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=s[s.length-1],o=Gw.computeOptimalWindowSize(a),i=new QB(s,o,n,null==r),u=null==r?[t]:[t,r],l=e.runWebGLProgram(i,u,"int32");if(l.shape.length===t.shape.length){const r=tP(e,t,n,l);return e.disposeIntermediateTensorInfo(l),r}return l}function nP(e,t,n,r){const s=[n];if(Gw.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!Kd().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,u]=Gw.computeOutAndReduceShapes(o.shape,s),l=by.sizeFromShape(u),c=NB({inputs:{x:o},backend:e,attrs:{shape:[-1,l]}});n.push(c);const p=eP(e,c,r);n.push(p);const h=NB({inputs:{x:p},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return tP(e,t,r)}const rP={kernelName:of,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=by.parseAxisParam(a,s.shape);const i=Gw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=FB({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Gw.getInnerMostAxes(o.length,u.shape.length)),Gw.assertAxesAreInnerMostDims("argMax",[o[0]],u.shape.length);const c=nP(n,u,o[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const sP={kernelName:uf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=by.parseAxisParam(a,s.shape);const i=Gw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=FB({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Gw.getInnerMostAxes(o.length,u.shape.length)),Gw.assertAxesAreInnerMostDims("argMin",[o[0]],u.shape.length);const c=nP(n,u,o[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},aP=yz({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),oP={kernelName:lf,backendName:"webgl",kernelFunc:aP},iP=yz({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),uP={kernelName:cf,backendName:"webgl",kernelFunc:iP},lP=yz({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),cP={kernelName:pf,backendName:"webgl",kernelFunc:lP},pP=bz({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),hP={kernelName:df,backendName:"webgl",kernelFunc:pP},dP=yz({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),fP={kernelName:hf,backendName:"webgl",kernelFunc:dP};class mP{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class gP{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const yP={kernelName:ff,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;jL(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;by.assert(Gw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Gw.computePool2DInfo(s.shape,a,o,1,i,u);if(1===l.filterWidth&&1===l.filterHeight&&by.arraysEqual(l.inShape,l.outShape))return rz({inputs:{x:s},backend:n});const c=new mP(l,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}};const bP={kernelName:gf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r,c=Gw.computePool3DInfo(s.shape,a,o,[1,1,1],i,u,l),p=new gP(c,"avg",!1);return n.runWebGLProgram(p,[s],"float32")}};class xP{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wP{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const kP={kernelName:yf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=r,p=Gw.computePool3DInfo(o.shape,i,u,[1,1,1],l,c),h=new wP(p);return n.runWebGLProgram(h,[s],o.dtype)}};const vP={kernelName:mf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;jL([s,a],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=r,c=Gw.computePool2DInfo(o.shape,i,u,1,l),p=new xP(c);return n.runWebGLProgram(p,[s],o.dtype)}};const NP={kernelName:bf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;return MB({a:s,b:a,transposeA:o,transposeB:i,backend:n})}};class SP{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Gw.assertAndGetBroadcastShape(e,t),Gw.assertAndGetBroadcastShape(e,n);let o="0.0";null!=r&&(Gw.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(Gw.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class IP{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Gw.assertAndGetBroadcastShape(e,t),Gw.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=r&&(Gw.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(Gw.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const TP={kernelName:um,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:o,scale:i}=e;by.assert(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),by.assert(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),by.assert(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const l=[r,s,a];let c=null;null!=o&&(c=o.shape,l.push(o));let p=null;null!=i&&(p=i.shape,l.push(i));const h=Kd().getBool("WEBGL_PACK_NORMALIZATION")?new IP(r.shape,s.shape,a.shape,c,p,u):new SP(r.shape,s.shape,a.shape,c,p,u);return t.runWebGLProgram(h,l,l[0].dtype)}};class EP{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=QM(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return $P.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${$P[t]} = start[${t}] + coords.${$P[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const $P=["x","y","z","w","u","v"];class CP{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=QM(this.rank),n=ez("coords",this.rank),r=ez("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function AP(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r,[i,u]=vw.parseSliceParams(s,a,o);if(vw.assertParamsValid(s,i,u),0===by.sizeFromShape(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=sB(e.values,i,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,t)}const{isPacked:l}=n.texData.get(s.dataId),c=vw.isSliceContinous(s.shape,i,u);if(l||!c){const e=Kd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CP(u):new EP(u),t=[i];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),o=r.texData.get(a.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=vw.computeFlatOffset(t,by.computeStrides(e.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||e.dataId};const u=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,u+1),a}(s,i,u,n)}const _P={kernelName:vg,backendName:"webgl",kernelFunc:AP},RP={kernelName:xf,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;by.assert(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),u=Gw.getReshaped(s.shape,a,i),l=Gw.getPermuted(u.length,a.length),c=Gw.getReshapedPermuted(s.shape,a,i),p=Gw.getSliceBeginCoords(o,a.length),h=Gw.getSliceSize(c,o,a.length),d=[],f=NB({inputs:{x:s},backend:n,attrs:{shape:u}}),m=FB({inputs:{x:f},backend:n,attrs:{perm:l}}),g=NB({inputs:{x:m},backend:n,attrs:{shape:c}}),y=AP({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const DP={kernelName:wf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=n.readSync(s.dataId),u=n.readSync(a.dataId),l=Tz(i,u,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,l)}};const FP={kernelName:kf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),o=n.readSync(s.dataId),i=Gw.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},OP=bz({opSnippet:"return float(a != b);",cpuKernelImpl:Kz,dtype:"bool"}),MP={kernelName:Hm,backendName:"webgl",kernelFunc:OP};function LP(e){const{inputs:t,backend:n}=e,{input:r}=t;return rz({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const zP={kernelName:og,backendName:"webgl",kernelFunc:LP};function BP(e,t){const n=new dz(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const PP={kernelName:vf,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===a.dtype)return rz({inputs:{x:a},backend:r});const t=IN(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=az({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=LP({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!by.hasEncodingLoss(a.dtype,o)){const e=rz({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(r.shouldExecuteOnCPU([a])){const e=r.texData.get(a.dataId).values,[t,n,s]=$z(e,a.shape,a.dtype,o);return r.makeTensorInfo(t,n,s)}if("int32"===o)return BP(a,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",by.getTypedArrayFromDType("bool",1)),t=OP({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},WP="return ceil(x);",VP=yz({opSnippet:WP,packedOpSnippet:WP,cpuKernelImpl:Cz}),UP={kernelName:Nf,backendName:"webgl",kernelFunc:VP};class GP{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class HP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const qP={kernelName:Sf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:o}=r;let i;i=Kd().getBool("WEBGL_PACK_CLIP")?new HP(s.shape):new GP(s.shape);const u=[[a],[o]];return n.runWebGLProgram(i,[s],s.dtype,u)}};class jP{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function KP(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const XP={kernelName:Tf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new jP(r.shape),o=[KP(r,s.complexTensorInfos.real),KP(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class YP{constructor(e){this.outputShape=[],this.outputShape=Gw.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class ZP{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Gw.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=QM(r),a=ez("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=o[t],l=o.slice(-2),c=o.join();let p=`if (${u} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${JP(o,u,t)}),\n            vec2(${JP(l,u,t)}));\n        }`}const h=i.length,d=i[i.length-1];p+=`\n        return getChannel(\n          getT${h}(${JP(o,u,d)}),\n          vec2(${JP(l,u,d)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function JP(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function QP(e){const{inputs:t,backend:n}=e,{input:r}=t;return rz({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const eW={kernelName:mm,backendName:"webgl",kernelFunc:QP};function tW(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>LP({inputs:{input:e},backend:n}))),s=e.map((e=>QP({inputs:{input:e},backend:n}))),a=tW(r,t,n),o=tW(s,t,n),i=az({inputs:{real:a,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=by.sizeFromShape(e.shape.slice(t));return NB({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=Gw.computeOutShape(s.map((e=>e.shape)),1),i=1===s[0].shape[0],u=Az(a,o,r,i),l=Gw.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,r,u);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=Kd().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>a){const r=[];for(let s=0;s<e.length;s+=a){const o=e.slice(s,s+a);r.push(tW(o,t,n))}const s=tW(r,t,n);for(const e of r)n.disposeIntermediateTensorInfo(e);return s}if(Kd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new ZP(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const{tensors2D:o,outShape:i}=function(e,t,n){const r=Gw.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>NB({inputs:{x:e},attrs:{shape:[-1,by.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),u=new YP(o.map((e=>e.shape))),l=n.runWebGLProgram(u,o,r);o.forEach((e=>n.disposeIntermediateTensorInfo(e)));const c=NB({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),c}function nW(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=by.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));Gw.assertParamsConsistent(o,a);const i=Gw.computeOutShape(t.map((e=>e.shape)),a);if(0===by.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>by.sizeFromShape(e.shape)>0));return 1===u.length?rz({inputs:{x:u[0]},backend:n}):tW(u,a,n)}const rW={kernelName:Ef,backendName:"webgl",kernelFunc:nW};class sW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class aW{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ZL(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,u=e.filterHeight,l=e.filterWidth,c=l;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<l;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<l;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(p+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<l&&(a%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,p+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<l)){const e=a%2==0?by.nearestLargerEven(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,p+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):p+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<l&&(a%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<l&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<l&&(p+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<l&&(p+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<l&&(p+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let h="",d="";n&&(h=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:s?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${h}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class iW{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length);const{dataFormat:n}=t,r=MM(),s="channelsLast"===n,a=s?1:2,o=s?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function uW(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function lW({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const u=e.shape,l=r.texData.get(e.dataId),c=n.inChannels,p=u[0]*u[1]*u[2],h=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=uW(a.shape,d);null!=e&&(a=NB({inputs:{x:a},backend:r,attrs:{shape:e}}),m.push(a))}if(null!=s){const e=uW(s.shape,d);null!=e&&(s=NB({inputs:{x:s},backend:r,attrs:{shape:e}}),m.push(s))}if(!((1===p||1===h)&&c>1e3)&&l.isPacked&&d&&null!=l.texture&&u[2]%2!=0&&by.arraysEqual(l.shape.slice(-3),u.slice(-3))){const c=u[0]*u[1]*(u[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,by.assert(OL(l.shape,p.shape),(()=>`packed reshape ${l.shape} to ${p.shape} isn't free`));const d=NB({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=MB({a:p,b:d,backend:r,transposeA:false,transposeB:false,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),y=r.texData.get(g.dataId);by.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=h,y.shape=n.outShape,f=rz({inputs:{x:g},backend:r}),f.shape=n.outShape,m.push(g)}else{const u=n.outHeight*n.outWidth,l=NB({inputs:{x:e},backend:r,attrs:{shape:d?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),c=NB({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=MB({a:d?l:c,b:d?c:l,transposeA:!d,transposeB:false,backend:r,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o});f=NB({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),m.push(l),m.push(c),m.push(p)}for(const e of m)r.disposeIntermediateTensorInfo(e);return f}function cW({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=u*l*c,g=h*p,y=[n.batchSize,m,g],b=[];if(null!=a){const e=uW(a.shape,f);null!=e&&(a=NB({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}if(null!=s){const e=uW(s.shape,f);null!=e&&(s=NB({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}const x=NB({inputs:{x:t},backend:r,attrs:{shape:[1,m,by.sizeFromShape(t.shape)/m]}});b.push(x);const w=new iW(y,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],v=r.runWebGLProgram(w,[e],"float32",k),N=NB({inputs:{x:v},backend:r,attrs:{shape:y}});b.push(v),b.push(N);const S=null!=s,I=null!=a,T="leakyrelu"===i,E=i?xz(i,!0):null,$=new wz(f?N.shape:x.shape,f?x.shape:N.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,E,I,T),C=f?[N,x]:[x,N];if(s&&C.push(s),I&&C.push(a),T){const e=r.makeTensorInfo([],"float32",by.createScalarValue(o,"float32"));C.push(e),b.push(e)}const A=r.runWebGLProgram($,C,"float32"),_=NB({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});b.push(A);for(const e of b)r.disposeIntermediateTensorInfo(e);return _}const pW={kernelName:$f,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=r,p=Gw.convertConv2DDataFormat(u),h=Gw.computeConv2DInfo(s.shape,a.shape,o,l,i,c,!1,p);let d;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===p&&Kd().getBool("WEBGL_EXP_CONV")){const e=new oW(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];d=n.runWebGLProgram(e,[s,a],"float32",t)}else if(Kd().getBool("WEBGL_CONV_IM2COL"))d=cW({x:s,filter:a,convInfo:h,backend:n});else{const e=new sW(h);d=n.runWebGLProgram(e,[s,a],"float32")}else d=lW({x:s,filter:a,convInfo:h,backend:n});const f=NB({inputs:{x:d},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class hW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class mW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const gW={kernelName:Cf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,p=Gw.convertConv2DDataFormat(u),h=Gw.computeConv2DInfo(s.shape,c,o,1,i,l,!1,p),d=new hW(h);return n.runWebGLProgram(d,[s,a],"float32")}};const yW={kernelName:Af,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,p=Gw.convertConv2DDataFormat(l),h=Gw.computeConv2DInfo(o,a.shape,i,1,u,c,!1,p),d=new dW(h);return n.runWebGLProgram(d,[s,a],"float32")}};const bW={kernelName:_f,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r,l=Gw.computeConv3DInfo(s.shape,a.shape,o,u,i),c=new aW(l);return n.runWebGLProgram(c,[s,a],"float32")}};const xW={kernelName:Rf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:u}=r,l=Gw.computeConv3DInfo(s.shape,u,o,1,i),c=new fW(l);return n.runWebGLProgram(c,[s,a],"float32")}};const wW={kernelName:Df,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:u}=r,l=Gw.computeConv3DInfo(u,a.shape,i,1,o),c=new mW(l);return n.runWebGLProgram(c,[s,a],"float32")}},kW=yz({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),vW={kernelName:Ff,backendName:"webgl",kernelFunc:kW},NW=yz({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),SW={kernelName:Of,backendName:"webgl",kernelFunc:NW};class IW{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,u]=e,[l]=t,[c,p]=n;this.outputShape=[l,c,p,u];const h="bilinear"===r?1:0,[d,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const TW={kernelName:zf,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,c=new IW(s.shape,a.shape,i,u,l);return n.runWebGLProgram(c,[s,a,o],"float32")}};var EW,$W;($W=EW||(EW={})).Prod="*",$W.Sum="+";class CW{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=this.op===EW.Prod?"1.0":"0.0",o=n?a:`getX(${AW(s,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=r?"end != "+(i-1):"end != 0",l=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${i}`:"end >= pow2",l=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${QM(s)} coords = getOutputCoords();\n        int end = ${_W(s,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${_W(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${AW(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function AW(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function _W(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function RW(e,t,n,r,s,a){const o=t.shape.length,i=Gw.getAxesPermutation([r],o);let u=t;null!=i&&(u=FB({inputs:{x:t},backend:n,attrs:{perm:i}}));const l=Gw.getInnerMostAxes(1,o)[0];if(l!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=u.shape[l];let p=rz({inputs:{x:u},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const r=new CW(e,u.shape,!1,a),s=[[t]],o=p;p=n.runWebGLProgram(r,[p],p.dtype,s),n.disposeIntermediateTensorInfo(o)}if(s){const t=new CW(e,u.shape,s,a),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=i){const e=FB({inputs:{x:p},backend:n,attrs:{perm:Gw.getUndoAxesPermutation(i)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(u),e}return p}const DW={kernelName:Mf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return RW(EW.Prod,s,n,a,o,i)}};const FW={kernelName:Lf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return RW(EW.Sum,s,n,a,o,i)}};const OW={kernelName:Bf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=Tz(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=Ez(e,t,o,i);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class MW{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const LW={kernelName:Pf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r,i=s.shape[0],u=("NHWC"===o?s.shape[1]:s.shape[2])*a,l=("NHWC"===o?s.shape[2]:s.shape[3])*a,c=("NHWC"===o?s.shape[3]:s.shape[1])/(a*a),p=new MW("NHWC"===o?[i,u,l,c]:[i,c,u,l],a,o);return n.runWebGLProgram(p,[s],s.dtype)}};class zW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ZL(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let u="",l="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class BW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ZL(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,p=c;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${l}; r++) {\n      `;for(let e=0;e<c;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*u};\n          `,1===i){if(t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===u&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?by.nearestLargerEven(u):u;u%2==0&&o%2==1||u%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,h+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let d="",f="";n&&(d=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const PW={kernelName:Wf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:l}=r;let c=u;null==c&&(c=[1,1]),by.assert(Gw.eitherStridesOrDilationsAreOne(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const p=Gw.computeConv2DInfo(s.shape,a.shape,o,c,i,l,!0);let h;h=Kd().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new BW(p):new zW(p);const d=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[s,a],"float32",d)}};class WW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class VW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const UW={kernelName:Vf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=r,p=Gw.computeConv2DInfo(s.shape,c,o,i,u,l,!0),h=new WW(p);return n.runWebGLProgram(h,[s,a],"float32")}};const GW={kernelName:Uf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=r,p=Gw.computeConv2DInfo(c,a.shape,o,i,u,l,!0),h=new VW(p);return n.runWebGLProgram(h,[s,a],"float32")}};class HW{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const qW={kernelName:Gf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=by.sizeFromShape(r.shape),o=NB({inputs:{x:r},backend:n,attrs:{shape:[a]}}),i=new HW(a),u=n.runWebGLProgram(i,[o],o.dtype),l=NB({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}};class jW{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const KW={kernelName:Hf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r,l=Gw.computeDilation2DInfo(s.shape,a.shape,o,i,"NHWC",u);let c;const p=new jW(l);c=n.runWebGLProgram(p,[s,a],"float32");const h=NB({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),h}};const XW={kernelName:Xf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:u}=Gw.decodeEinsumEquation(s,a.length);Gw.checkEinsumDimSizes(o.length,u,a);const{path:l,steps:c}=Gw.getEinsumComputePath(i,u),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Gw.getEinsumPermutation(d,u[t]);let s;Gw.isIdentityPermutation(e)?s=a[t]:(s=FB({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);by.arraysEqual(s.shape,o)||(s=NB({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=xB({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(l[e]>=0&&(h=RB({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},YW=yz({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),ZW={kernelName:Yf,backendName:"webgl",kernelFunc:YW},JW={kernelName:Zf,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=Kd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nz("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new JL("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},QW=bz({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:_z}),eV={kernelName:Qf,backendName:"webgl",kernelFunc:QW},tV=yz({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Gw.ERF_P};\n  float a1 = ${Gw.ERF_A1};\n  float a2 = ${Gw.ERF_A2};\n  float a3 = ${Gw.ERF_A3};\n  float a4 = ${Gw.ERF_A4};\n  float a5 = ${Gw.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),nV={kernelName:Jf,backendName:"webgl",kernelFunc:tV},rV=yz({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Rz,dtype:"float32"}),sV={kernelName:em,backendName:"webgl",kernelFunc:rV};function aV(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let u=s;return s<0&&(by.assert(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+s+1),i.splice(u,0,1),NB({inputs:{x:a},backend:r,attrs:{shape:i}})}const oV={kernelName:tm,backendName:"webgl",kernelFunc:aV},iV="return exp(x) - 1.0;",uV=yz({opSnippet:iV,packedOpSnippet:iV,cpuKernelImpl:Dz}),lV={kernelName:nm,backendName:"webgl",kernelFunc:uV};class cV{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function pV(e,t,n){const r=n.texData.get(e.dataId),s=by.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],o=NB({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),i=o.shape,u=new cV("real",i,t),l=new cV("imag",i,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(u,c,"float32"),h=n.runWebGLProgram(l,c,"float32"),d=az({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const f=NB({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(d),f}const hV={kernelName:rm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return pV(r,!1,n)}};class dV{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function fV(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||by.inferDtype(s),"string"===a){const e=by.getArrayFromDType(a,by.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new dV(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const mV={kernelName:sm,backendName:"webgl",kernelFunc:fV};class gV{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const yV={kernelName:am,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new gV(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},bV="return floor(x);",xV=yz({opSnippet:bV,packedOpSnippet:bV,cpuKernelImpl:Fz}),wV={kernelName:om,backendName:"webgl",kernelFunc:xV},kV=bz({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),vV={kernelName:im,backendName:"webgl",kernelFunc:kV};class NV{constructor(e){this.variableNames=["A"];const t=MM(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class SV{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=MM(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const IV={kernelName:ny,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],p=[l,u,a];if(i||o){const e=Kd().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=TV&&e===EV||(EV=e,TV=document.createElement("canvas").getContext("2d",{willReadFrequently:EV})),TV.canvas.width=u,TV.canvas.height=l,TV.drawImage(s,0,0,u,l),s=TV.canvas}const h=n.makeTensorInfo(c,"int32");n.texData.get(h.dataId).usage=lL.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),s);const d=Kd().getBool("WEBGL_PACK")?new SV(p):new NV(p),f=n.runWebGLProgram(d,[h],"int32");return n.disposeData(h.dataId),f}};let TV,EV=Kd().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const $V={kernelName:ay,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=Gw.convertConv2DDataFormat(c),g=Gw.computeConv2DInfo(s.shape,a.shape,u,p,l,h,!1,m);let y;const b=[],x=null!=o,w=null!=i,k="leakyrelu"===d,v=()=>{const e=[s,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=NB({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,c)),w&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",by.createScalarValue(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&Kd().getBool("WEBGL_EXP_CONV")){const e=d?xz(d,!0):null,t=new oW(g,x,e,w,k),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=v();y=n.runWebGLProgram(t,s,"float32",r)}else if(Kd().getBool("WEBGL_CONV_IM2COL"))y=cW({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=d?xz(d,!1):null,t=new sW(g,x,e,w,k),r=v();y=n.runWebGLProgram(t,r,"float32")}else y=lW({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const N=NB({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};const CV={kernelName:oy,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:p,activation:h,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),by.assert(Gw.eitherStridesOrDilationsAreOne(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const g=Gw.computeConv2DInfo(s.shape,a.shape,u,m,l,p,!0),y=Kd().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=h?xz(h,y):null,x=[s,a],w=null!=o,k=null!=i,v="leakyrelu"===h;if(w&&x.push(o),k&&x.push(i),v){const e=n.makeTensorInfo([],"float32",by.createScalarValue(d,"float32"));x.push(e),f.push(e)}let N;N=y?new BW(g,w,b,k,v):new zW(g,w,b,k,v);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],I=n.runWebGLProgram(N,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class AV{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=QM(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const _V={kernelName:cm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,o=a[a.length-1],i=by.sizeFromShape(r.shape),[u,l,c,p]=Gw.prepareAndValidate(r,s),h=NB({inputs:{x:s},backend:n,attrs:{shape:[l,o]}}),d=NB({inputs:{x:r},backend:n,attrs:{shape:[by.sizeFromShape(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=Oz(e,t,r.dtype,l,o,c,p,r.shape,i);return n.makeTensorInfo(u,r.dtype,a.values)}const f=new AV(o,p,[l,c],r.shape),m=n.runWebGLProgram(f,[d,h],d.dtype),g=NB({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class RV{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=QM(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function DV(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r,u=by.parseAxisParam(o,s.shape)[0];if(Kd().get("DEBUG")){const e=n.readSync(a.dataId),t=s.shape[u];for(let n=0;n<e.length;++n){const r=e[n];by.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const l=Gw.segment_util.collectGatherOpShapeInfo(s,a,u,i),c=by.sizeFromShape(a.shape),p=[],h=NB({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=NB({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,c/l.batchSize]}});p.push(h),p.push(d);const f=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),r=Mz(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,r.dtype,r.values)}const m=new RV(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);p.push(g);const y=NB({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const FV={kernelName:lm,backendName:"webgl",kernelFunc:DV},OV=bz({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Lz,dtype:"bool"}),MV={kernelName:pm,backendName:"webgl",kernelFunc:OV},LV=bz({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:zz}),zV={kernelName:hm,backendName:"webgl",kernelFunc:LV};const BV={kernelName:fm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return pV(r,!0,n)}},PV=yz({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),WV={kernelName:gm,backendName:"webgl",kernelFunc:PV},VV=yz({opSnippet:"return float(isinf(x));",dtype:"bool"}),UV={kernelName:ym,backendName:"webgl",kernelFunc:VV},GV=yz({opSnippet:"return float(isnan(x));",dtype:"bool"}),HV={kernelName:bm,backendName:"webgl",kernelFunc:GV},qV=bz({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Bz,dtype:"bool"}),jV={kernelName:wm,backendName:"webgl",kernelFunc:qV},KV=bz({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:Pz,dtype:"bool"}),XV={kernelName:km,backendName:"webgl",kernelFunc:KV};const YV={kernelName:vm,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=Wz(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},ZV=yz({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:Vz}),JV={kernelName:Nm,backendName:"webgl",kernelFunc:ZV},QV=yz({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),eU={kernelName:Sm,backendName:"webgl",kernelFunc:QV},tU=bz({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),nU={kernelName:Im,backendName:"webgl",kernelFunc:tU},rU=yz({opSnippet:"return float(!(x >= 1.0));"}),sU={kernelName:Tm,backendName:"webgl",kernelFunc:rU},aU=bz({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),oU={kernelName:Em,backendName:"webgl",kernelFunc:aU};class iU{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class uU{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const lU={kernelName:$m,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:u}=r,l=Kd().getBool("WEBGL_PACK_NORMALIZATION")?new uU(s.shape,a,o,i,u):new iU(s.shape,a,o,i,u);return n.runWebGLProgram(l,[s],s.dtype)}};class cU{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const pU={kernelName:Cm,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r,p=new cU(s.shape,i,u,l,c);return n.runWebGLProgram(p,[s,a,o],s.dtype)}};function hU(e,t,n,r){const s=by.sizeFromShape(t),a=NB({inputs:{x:e},attrs:{shape:[by.sizeFromShape(e.shape)/s,s]},backend:r}),o=EB(a,e.dtype,"max",r),i=NB({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}function dU(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=s.shape.length,u=by.parseAxisParam(a,s.shape);let l=u;const c=Gw.getAxesPermutation(l,i),p=null!=c,h=n.shouldExecuteOnCPU([s]);let d=s;if(p){if(h){const e=n.texData.get(d.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=gB(e,s.shape,s.dtype,c,t);d=n.makeTensorInfo(t,s.dtype);n.texData.get(d.dataId).values=r}else d=AB(s,c,n);l=Gw.getInnerMostAxes(l.length,i)}Gw.assertAxesAreInnerMostDims("max",l,i);const[f,m]=Gw.computeOutAndReduceShapes(d.shape,l);let g,y=f;if(o&&(y=Gw.expandShapeToKeepDim(f,u)),h){const e=n.texData.get(d.dataId).values,t=Uz(e,by.sizeFromShape(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype);n.texData.get(g.dataId).values=t}else g=hU(d,m,y,n);return p&&n.disposeIntermediateTensorInfo(d),g}const fU={kernelName:Am,backendName:"webgl",kernelFunc:dU},mU=bz({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Gz}),gU={kernelName:_m,backendName:"webgl",kernelFunc:mU};const yU={kernelName:Rm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;jL(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;by.assert(Gw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Gw.computePool2DInfo(s.shape,a,o,1,i,u);if(1===l.filterWidth&&1===l.filterHeight&&by.arraysEqual(l.inShape,l.outShape))return rz({inputs:{x:s},backend:n});const c=new mP(l,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}};const bU={kernelName:Fm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dataFormat:u,dimRoundingMode:l}=r,c=Gw.computePool3DInfo(s.shape,a,o,[1,1,1],i,l,u),p=new gP(c,"max",!1);return n.runWebGLProgram(p,[s],s.dtype)}};class xU{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=s-1-e.padInfo.top,i=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wU{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=u-1-e.padInfo.top,h=l-1-e.padInfo.left,d=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const kU={kernelName:Om,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=r,p=Gw.computePool3DInfo(o.shape,i,u,[1,1,1],l,c),h=new gP(p,"max",!0),d=n.runWebGLProgram(h,[o],o.dtype),f=new wU(p),m=n.runWebGLProgram(f,[s,d],o.dtype);return n.disposeIntermediateTensorInfo(d),m}};const vU={kernelName:Dm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;jL([a,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,h=Gw.computePool2DInfo(i.shape,u,l,1,c,p),d=new mP(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new xU(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};function NU(e,t,n,r){let s=new mP(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");s=new mP(n,"max",!0,!0,t);return[a,r.runWebGLProgram(s,[e],"float32")]}const SU={kernelName:Mm,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,u=n;by.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const l=[1,1];by.assert(Gw.eitherStridesOrDilationsAreOne(a,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`));const c=Gw.computePool2DInfo(r.shape,s,a,l,o),[p,h]=NU(r,i,c,u);return[p,h]}};function IU(e,t,n,r){const s=by.sizeFromShape(t),a=NB({inputs:{x:e},attrs:{shape:[by.sizeFromShape(e.shape)/s,s]},backend:r}),o=EB(a,"float32","mean",r),i=NB({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}const TU={kernelName:Lm,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,o=n,i=r.shape.length,u=by.parseAxisParam(a,r.shape);let l=u;const c=Gw.getAxesPermutation(l,i),p=null!=c,h=o.shouldExecuteOnCPU([r]),d=[];let f=r;if(p){if(h){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=gB(e,r.shape,r.dtype,c,t);f=o.makeTensorInfo(t,r.dtype);o.texData.get(f.dataId).values=n}else f=AB(r,c,o);d.push(f),l=Gw.getInnerMostAxes(l.length,i)}Gw.assertAxesAreInnerMostDims("sum",l,i);const[m,g]=Gw.computeOutAndReduceShapes(f.shape,l);let y=m;s&&(y=Gw.expandShapeToKeepDim(m,u));const b=IU(f,g,y,o);for(const e of d)o.disposeIntermediateTensorInfo(e);return b}};const EU={kernelName:zm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=by.parseAxisParam(a,s.shape);let l=u;const c=Gw.getAxesPermutation(l,i);let p=s;null!=c&&(p=FB({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Gw.getInnerMostAxes(l.length,s.shape.length)),Gw.assertAxesAreInnerMostDims("min",l,i);const[h,d]=Gw.computeOutAndReduceShapes(p.shape,l),f=NB({inputs:{x:p},backend:n,attrs:{shape:[-1,by.sizeFromShape(d)]}}),m=EB(f,f.dtype,"min",n);let g;if(o){g=NB({inputs:{x:m},backend:n,attrs:{shape:Gw.expandShapeToKeepDim(h,u)}})}else g=NB({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},$U=bz({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Hz}),CU={kernelName:Bm,backendName:"webgl",kernelFunc:$U};class AU{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=QM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class _U{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=QM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=ez("rc",r),u=ez("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const RU={kernelName:Pm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,o=Kd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _U(r.shape,s,a):new AU(r.shape,s,a);return t.runWebGLProgram(o,[r],r.dtype)}},DU=bz({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),FU={kernelName:Wm,backendName:"webgl",kernelFunc:DU};class OU{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const MU=bz({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),LU={kernelName:Kf,backendName:"webgl",kernelFunc:MU},zU="return a - b;",BU=bz({opSnippet:zU,packedOpSnippet:zU,supportsComplex:!0,cpuKernelImpl:dB}),PU={kernelName:Gg,backendName:"webgl",kernelFunc:BU};function WU(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=by.parseAxisParam([a],s.shape),i=dU({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=Gw.expandShapeToKeepDim(i.shape,o),l=NB({inputs:{x:i},backend:n,attrs:{shape:u}}),c=BU({inputs:{a:s,b:l},backend:n}),p=rV({inputs:{x:c},backend:n}),h=RB({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),d=NB({inputs:{x:h},backend:n,attrs:{shape:u}}),f=MU({inputs:{a:p,b:d},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),f}const VU={kernelName:Rg,backendName:"webgl",kernelFunc:WU};const UU={kernelName:Vm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r,u=i?s:WU({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=u.shape[0],c=u.shape[1],p=new OU(l,c,a),h=[[o]],d=n.runWebGLProgram(p,[u],"int32",h);return i||n.disposeIntermediateTensorInfo(u),d}};const GU={kernelName:Gm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=jz(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=Kd().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new gz(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new dz(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(s,[r],r.dtype)}},HU=eN.nonMaxSuppressionV3Impl;const qU={kernelName:qm,backendName:"webgl",kernelFunc:function(e){Gw.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:p}=HU(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},jU=eN.nonMaxSuppressionV4Impl;const KU={kernelName:jm,backendName:"webgl",kernelFunc:function(e){Gw.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),{selectedIndices:h,validOutputs:d}=jU(c,p,o,i,u,l);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},XU=eN.nonMaxSuppressionV5Impl;const YU={kernelName:Km,backendName:"webgl",kernelFunc:function(e){Gw.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),h=o,d=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=XU(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class ZU{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const JU={kernelName:Ym,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:u}=r,l=by.sizeFromShape(s.shape),c=new ZU(l,o,i,u),p=NB({inputs:{x:s},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(c,[p],a);n.disposeIntermediateTensorInfo(p);const d=NB({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,o]}});return n.disposeIntermediateTensorInfo(h),d}};function QU(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=LP({inputs:{input:r},backend:n}),t=QU({inputs:{x:e},backend:n}),s=QP({inputs:{input:r},backend:n}),a=QU({inputs:{x:s},backend:n}),o=az({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return fV({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const eG={kernelName:ey,backendName:"webgl",kernelFunc:QU};const tG={kernelName:Xm,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=LP({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=QP({inputs:{input:s},backend:r}),o=QU({inputs:{x:a},backend:r}),i=az({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return fV({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const nG={kernelName:Zm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return aV({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{by.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),by.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],u=nW({inputs:t.map((e=>{const t=aV({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class rG{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=QM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class sG{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=QM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=ez("rc",r),u=ez("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p=[`${s} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const aG=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;if(0===by.sizeFromShape(s.shape)){return fV({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+s.shape[t]+e[1])),value:o,dtype:s.dtype}})}const i=Kd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sG(s.shape,a,o):new rG(s.shape,a,o),u=[[o]];return n.runWebGLProgram(i,[s],s.dtype,u)},oG={kernelName:Jm,backendName:"webgl",kernelFunc:aG},iG=bz({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),uG={kernelName:Qm,backendName:"webgl",kernelFunc:iG};const lG={kernelName:tg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=[],l=by.parseAxisParam(a,s.shape);let c=l;const p=Gw.getAxesPermutation(c,i);let h,d=s;if(null!=p&&(d=FB({inputs:{x:s},backend:n,attrs:{perm:p}}),c=Gw.getInnerMostAxes(c.length,i),u.push(d)),Gw.assertAxesAreInnerMostDims("prod",c,i),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:s}=Xz(d.shape,d.dtype,e,c);h=n.makeTensorInfo(r,s,t)}else{const[e,t]=Gw.computeOutAndReduceShapes(d.shape,c),r=by.sizeFromShape(t),a=NB({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),o=EB(a,pb(s.dtype),"prod",n);h=NB({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(a),u.push(o)}if(o){u.push(h);const e=Gw.expandShapeToKeepDim(h.shape,l);h=NB({inputs:{x:h},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}};const cG={kernelName:ng,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,u=s.map((e=>n.readSync(e.dataId))),l=s.map((e=>e.shape)),c=n.readSync(a.dataId),p=n.readSync(o.dataId),[h,d,f]=Yz(u,l,c,a.shape,a.dtype,p,o.shape,i),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};const pG={kernelName:rg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=Zz(o,r.shape,r.dtype,i,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};const hG={kernelName:sg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),p=n.readSync(o.dataId),h=i.map((e=>n.readSync(e.dataId))),d=i.map((e=>e.shape)),[f,m]=Jz(l,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,u);return n.makeTensorInfo(f,a.dtype,m)}},dG=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:o}=n,i=Qz(r,s,a,o);return t.makeTensorInfo([i.length],o,i)},fG={kernelName:ag,backendName:"webgl",kernelFunc:dG},mG=yz({opSnippet:"return 1.0 / x;"}),gG={kernelName:ig,backendName:"webgl",kernelFunc:mG},yG=yz({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),bG={kernelName:ug,backendName:"webgl",kernelFunc:yG},xG=yz({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),wG={kernelName:fg,backendName:"webgl",kernelFunc:xG};class kG{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class vG{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const NG={kernelName:hg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[u,l]=i,c=Kd().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new vG(s.shape,u,l,a,o):new kG(s.shape,u,l,a,o);return n.runWebGLProgram(c,[s],"float32")}};class SG{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const IG={kernelName:dg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new SG(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class TG{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class EG{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const $G={kernelName:cg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[u,l]=i,c=Kd().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new EG(s.shape,u,l,a,o):new TG(s.shape,u,l,a,o);return n.runWebGLProgram(c,[s],s.dtype)}};class CG{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const AG={kernelName:pg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new CG(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class _G{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=QM(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class RG{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=ez("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=QM(n);function i(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const DG={kernelName:mg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,o=s.shape.length,i=by.parseAxisParam(a,s.shape);if(0===o)return rz({inputs:{x:s},backend:n});const u=Kd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new RG(s.shape,i):new _G(s.shape,i);return n.runWebGLProgram(u,[s],s.dtype)}};class FG{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const OG={kernelName:ry,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,u=new FG(r.shape,a),[l,c]=Gw.getImageCenter(o,r.shape[1],r.shape[2]),p=[[l,c,Math.sin(s),Math.cos(s)]];return i.runWebGLProgram(u,[r],r.dtype,p)}},MG=yz({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),LG={kernelName:gg,backendName:"webgl",kernelFunc:MG},zG=yz({opSnippet:"return inversesqrt(x);",cpuKernelImpl:eB}),BG={kernelName:yg,backendName:"webgl",kernelFunc:zG};class PG{constructor(e,t,n,r,s,a,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const i=QM(s.length),u=QM(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const WG={kernelName:bg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:p}=Gw.calculateShapes(a,s,o),h=[p/l,l];if(0===p)return n.makeTensorInfo(o,s.dtype);const d=NB({inputs:{x:s},backend:n,attrs:{shape:[u,i]}}),f=NB({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new PG(u,i,d.shape.length,f.shape.length,c,h),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=NB({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class VG{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===Kd().getNumber("WEBGL_VERSION")?"while (left < right) {":s,o="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const UG={kernelName:xg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=new VG(s.shape[0],s.shape[1],a.shape[1],o),u=[[s.shape[1]]];return n.runWebGLProgram(i,[s,a],"int32",u)}};class GG{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=o.join()}const a=QM(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const HG={kernelName:wg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,o=new GG(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[r,s,a],cb(s.dtype,a.dtype))}},qG=yz({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Gw.SELU_SCALEALPHA};\n  float scale = ${Gw.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),jG={kernelName:kg,backendName:"webgl",kernelFunc:qG},KG=yz({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:nB}),XG={kernelName:Tg,backendName:"webgl",kernelFunc:KG},YG=yz({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),ZG={kernelName:Ig,backendName:"webgl",kernelFunc:YG},JG=yz({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),QG={kernelName:Ng,backendName:"webgl",kernelFunc:JG},eH=yz({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),tH={kernelName:Sg,backendName:"webgl",kernelFunc:eH},nH=yz({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),rH={kernelName:Eg,backendName:"webgl",kernelFunc:nH},sH={kernelName:Ag,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;by.assert(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...o);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=[],c=aG({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),p=Gw.getReshaped(c.shape,a,i,!1),h=Gw.getPermuted(p.length,a.length,!1),d=Gw.getReshapedPermuted(c.shape,a,i,!1),f=NB({inputs:{x:c},backend:n,attrs:{shape:p}}),m=FB({inputs:{x:f},backend:n,attrs:{perm:h}}),g=NB({inputs:{x:m},backend:n,attrs:{shape:d}});return l.push(c),l.push(f),l.push(m),l.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const aH={kernelName:Dg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),u=n.readSync(s.dataId),l=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[p,h,d,f,m]=aB(i,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const oH={kernelName:Fg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(s.dataId)),i=n.readSync(r.dataId),u=Array.from(n.readSync(a.dataId)),[l,c,p]=oB(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};const iH={kernelName:Og,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=iB(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const uH={kernelName:Mg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=iB(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}};const lH={kernelName:Lg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:h}=Gw.calculateShapes(a,s,i);if("string"===a.dtype){const e=n.bufferSync(s),t=n.bufferSync(a),r=by.decodeString(n.readSync(o.dataId)[0]),d=tB(e,t,i,h,c,l,u,p,r,false);return n.makeTensorInfo(i,d.dtype,d.values)}const d=new PG(l,u,s.shape.length,a.shape.length,p,[h,1],false),f=n.runWebGLProgram(d,[a,s,o],a.dtype),m=NB({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}};const cH={kernelName:_g,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=by.parseAxisParam(o,s.shape)[0],u=Gw.prepareSplitSize(s,a,i),l=s.shape.length,c=new Array(l).fill(0),p=s.shape.slice();return u.map((e=>{const t=[...p];t[i]=e;const r=AP({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},pH="return sqrt(x);",hH=yz({opSnippet:pH,packedOpSnippet:pH,cpuKernelImpl:uB}),dH={kernelName:$g,backendName:"webgl",kernelFunc:hH},fH={kernelName:Bg,backendName:"webgl",kernelFunc:yz({opSnippet:"return x * x;"})},mH="return (a - b) * (a - b);",gH=bz({opSnippet:mH,packedOpSnippet:mH}),yH={kernelName:zg,backendName:"webgl",kernelFunc:gH};const bH={kernelName:ty,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new dz(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class xH{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=QM(n.length),a=QM(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const wH={kernelName:Pg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=vw.sliceInfo(s.shape,a,o,i,u,l,c,p,h);let k;if(m)k=NB({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){by.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=vw.computeOutShape(b,x,w),t=AP({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=NB({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=Bx(s.shape,s.dtype,e),r=lB(d,t,w,b);k=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new xH(b,w,d);k=n.runWebGLProgram(e,[s],s.dtype)}}const v=NB({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}};const kH={kernelName:Wg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,h=n.readSync(c.dataId),d=n.readSync(p.dataId),[f,m]=cB(h,d,s,a,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};const vH={kernelName:Vg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),u=n.readSync(o.dataId)[0],[l,c,p]=pB(i,u,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",l),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};const NH={kernelName:Ug,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=hB(o,s);return n.makeTensorInfo(a.shape,"int32",i)}},SH=yz({opSnippet:"return tan(x);"}),IH={kernelName:Hg,backendName:"webgl",kernelFunc:SH},TH=yz({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),EH={kernelName:qg,backendName:"webgl",kernelFunc:TH};class $H{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=QM(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function CH(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>by.decodeString(e))):e,r=Bx(s.shape,s.dtype,t),o=fB(r,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new $H(s.shape,a);return n.runWebGLProgram(o,[s],s.dtype)}const AH={kernelName:jg,backendName:"webgl",kernelFunc:CH};class _H{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class RH{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function DH(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function FH(e){let t=1;for(;t<e;)t*=2;return t}const OH={kernelName:Kg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r,i=Kd().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=Kd().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=s.shape,c=l[l.length-1];if(n.shouldExecuteOnCPU([s])||c<i||a>u){const e=n.readSync(s.dataId),[t,r]=mB(e,l,s.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return l[l.length-1]=0,[n.makeTensorInfo(l,s.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===c)return[s,fV({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const p=n.texData.get(s.dataId),h=null!==p&&p.isPacked,d=h?n.unpackTensor(s):s,f=by.sizeFromShape(l)/c,m=NB({inputs:{x:d},attrs:{shape:[f,c]},backend:n});h&&DH(n,d);const g=FH(a),y=FH(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const s=x(),a=new _H(r),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,s,"int32",o),DH(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new RH([f,e/2]),s=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(r,t,"int32",s),DH(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let k=b;b=AP({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),DH(n,k);let v=DV({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});DH(n,m);const N=l.slice(0,-1);N.push(a),k=b,b=NB({inputs:{x:b},attrs:{shape:N},backend:n}),DH(n,k);const S=v;return v=NB({inputs:{x:v},attrs:{shape:N},backend:n}),DH(n,S),[v,b]}};class MH{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const LH={kernelName:Xg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=r,[c,p,h,d]=s.shape,[f,m]=null!=l?l:[p,h],g=new MH(p,h,o,i,u,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}};const zH={kernelName:Zg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;jL(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(a.dataId),{outputValues:i,outputShape:u,indices:l}=yB(o,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}};const BH={kernelName:Jg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s,i=o.shape.length,u=s.shape[a],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(l[c++]=o.shape[e]);const p=[],h=new Array(i).fill(0),d=o.shape.slice();d[a]=1;const f=new Array(u);for(let e=0;e<f.length;e++){h[a]=e;const t=AP({inputs:{x:o},backend:n,attrs:{begin:h,size:d}}),r=NB({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class PH{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,o=a*Math.ceil(s/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const WH=[LB,BB,WB,UB,qB,XB,YB,ZB,rP,sP,oP,uP,cP,hP,fP,yP,bP,kP,vP,NP,TP,RP,DP,FP,PP,UP,qP,oz,XP,rW,pW,gW,yW,bW,xW,wW,vW,SW,TW,DW,FW,OW,LW,PW,UW,GW,qW,KW,XW,ZW,JW,eV,nV,sV,oV,lV,hV,mV,yV,wV,vV,IV,$V,CV,_V,FV,MV,zV,sz,BV,eW,WV,UV,HV,lz,jV,XV,YV,JV,eU,nU,sU,oU,lU,pU,fU,gU,yU,bU,kU,vU,SU,TU,EU,CU,RU,FU,UU,wB,GU,qU,KU,YU,MP,JU,tG,nG,oG,uG,hz,lG,cG,pG,hG,fG,zP,LU,gG,bG,wG,SB,NG,IG,$G,AG,DG,OG,LG,BG,WG,UG,HG,jG,XG,ZG,QG,tH,_P,VU,rH,sH,aH,oH,iH,uH,lH,cH,dH,fH,yH,bH,wH,kH,vH,NH,PU,DB,IH,EH,AH,OH,LH,OB,zH,BH,{kernelName:Qg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r,i=s.shape.length,u=[];let l=0;const c=Gw.getAxesPermutation([l],i);let p=s;null!=c&&(p=FB({inputs:{x:s},backend:n,attrs:{perm:c}}),u.push(p),l=Gw.getInnerMostAxes(1,i)[0]);const h=Gw.segment_util.computeOutShape(p.shape,l,o),d=by.sizeFromShape([p.shape[l]]),f=NB({inputs:{x:p},backend:n,attrs:{shape:[-1,d]}});u.push(f);const m=pb(s.dtype),g=(e,t,r,s,a)=>{const o=e.shape[0],i=e.shape[1],l=Gw.segment_util.segOpComputeOptimalWindowSize(i,a),c=new PH({windowSize:l,inSize:i,batchSize:o,numSegments:a},t),p=n.compileAndRun(c,[e,r],s);if(u.push(p),p.shape[1]===a)return p;const h=dG({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=CH({inputs:{x:h},backend:n,attrs:{reps:[i/l]}});u.push(h),u.push(d);return g(p,t,d,s,a)},y=NB({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:h}});let b=y;if(null!=c){u.push(y);const e=Gw.getUndoAxesPermutation(c);b=FB({inputs:{x:b},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},eG];for(const e of WH)my(e);const VH=Kd();VH.registerFlag("HAS_WEBGL",(()=>VH.getNumber("WEBGL_VERSION")>0)),VH.registerFlag("WEBGL_VERSION",(()=>VL(2)?2:VL(1)?1:0)),VH.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),VH.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===VH.get("WEBGL_VERSION"))),VH.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),VH.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),VH.registerFlag("WEBGL_PACK",(()=>VH.getBool("HAS_WEBGL"))),VH.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_PACK_CLIP",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_PACK_REDUCE",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_LAZILY_UNPACK",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_CONV_IM2COL",(()=>VH.getBool("WEBGL_PACK"))),VH.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>zL(VH.getNumber("WEBGL_VERSION")))),VH.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>BL(VH.getNumber("WEBGL_VERSION")))),VH.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=VH.getNumber("WEBGL_VERSION");return 0===e?0:PL(e)})),VH.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>VH.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Nb.isMobile())),VH.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>UL(VH.getNumber("WEBGL_VERSION")))),VH.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!VH.getBool("WEBGL_FORCE_F16_TEXTURES")&&VH.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),VH.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>GL(VH.getNumber("WEBGL_VERSION")))),VH.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>qL(VH.getNumber("WEBGL_VERSION")))),VH.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>VH.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),VH.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),VH.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Nb.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),VH.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),VH.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),VH.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),VH.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),VH.registerFlag("WEBGL_EXP_CONV",(()=>!1)),VH.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>VH.getBool("IS_TEST"))),VH.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),VH.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),VH.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));class UH{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=iL.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=MM();this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?zM(["r","c","d"],e):LM(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class GH{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=iL.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=MM();this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?zM(["r","c","d"],e):LM(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class HH{constructor(e){this.variableNames=["A"],this.outTexUsage=lL.DOWNLOAD;const t=MM();this.outputShape=e,this.userCode=`\n      ${WM}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class qH{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=lL.DOWNLOAD;const t=MM();this.outputShape=e,this.userCode=`\n      ${WM}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const jH={R:0,G:1,B:2,A:3};class KH{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=MM();this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${jH[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":PM(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class XH{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=MM();this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":PM(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function YH(e){const t=MM();return function(e,t){const n=CL(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(yL(e,(()=>e.shaderSource(n,t))),yL(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function ZH(e){return function(e,t){const n=CL(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return yL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),yL(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function JH(e){return function(e,t){const n=CL(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return yL(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),yL(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function QH(e,t,n,r,s,a){!function(e,t){const n=Kd().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return CL(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return yL(e,(()=>e.bindTexture(i,o))),yL(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),yL(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),yL(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),yL(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===Kd().getNumber("WEBGL_VERSION")?yL(e,(()=>e.texImage2D(i,0,r,t,n,0,s,a,null))):yL(e,(()=>e.texStorage2D(i,1,r,t,n))),yL(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function eq(e){return e.internalFormatFloat}function tq(e){return e.internalFormatHalfFloat}function nq(e){return e.downloadTextureFormat}function rq(e){return e.internalFormatPackedFloat}function sq(e){return e.internalFormatPackedHalfFloat}function aq(e,t,n,r,s,a,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=mL(e,t);return n*r*4}(a,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class oq{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Kd().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,aL(t,e)):this.gl=oL(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===Kd().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=xL(this.gl,e),WL(this.gl,t))this.textureHalfFloatExtension=xL(this.gl,t);else if(Kd().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),WL(this.gl,r))this.colorBufferHalfFloatExtension=xL(this.gl,r);else if(Kd().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",WL(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!WL(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=ZH(this.gl),this.indexBuffer=JH(this.gl),this.framebuffer=function(e){return CL(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=gL(this.gl,this.textureHalfFloatExtension)}get debug(){return Kd().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;yL(e,(()=>e.finish())),yL(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),yL(e,(()=>e.deleteFramebuffer(this.framebuffer))),yL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),yL(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),yL(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=dL(t,n);return QH(e,s,a,eq(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=dL(t,n);return QH(e,s,a,tq(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=dL(t,n);return QH(e,s,a,nq(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){yL(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===Kd().getNumber("WEBGL_VERSION")?yL(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):yL(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===Kd().getNumber("WEBGL_VERSION")?yL(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):yL(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),yL(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let o,i,u;yL(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,u=a.internalFormatPackedFloat),o.set(s),2===Kd().getNumber("WEBGL_VERSION")?yL(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):yL(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,o))),yL(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=mL(t,n);return QH(e,s,a,sq(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=mL(t,n);return QH(e,s,a,rq(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(EL(this.gl,this.framebuffer),this.outputTexture=null),yL(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=dL(t,n),o=new Uint8Array(t*n*4);return yL(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return aq(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();yL(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return yL(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),yL(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),yL(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Kd().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return yL(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=YH(t));const n=function(e){return CL(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return yL(t,(()=>t.attachShader(n,this.vertexShader))),yL(t,(()=>t.attachShader(n,e))),function(e,t){if(yL(e,(()=>e.linkProgram(t))),!Kd().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&NL(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return yL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),SL(e,t,"clipSpacePos",n,3,20,0)&&SL(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&yL(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&NL(this.gl,this.program),yL(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return CL(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),yL(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),IL(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=mL(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&NL(this.gl,this.program),$L(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),yL(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),yL(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=xL(this.gl,2===Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await by.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in Kd().platform&&(n=Kd().platform.setTimeoutCustom.bind(Kd().platform)),by.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),TL(this.gl,e,this.framebuffer),this.debug&&$L(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(TL(this.gl,this.outputTexture,this.framebuffer),this.debug&&$L(this.gl)):EL(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;TL(r,e,this.framebuffer),this.debug&&$L(r),this.outputTexture=e,yL(r,(()=>r.viewport(0,0,t,n))),yL(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),yL(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class iq{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=ZL(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=ez("rc",this.rank),t=QM(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class uq{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=cq(t,n),s=pq(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=lq(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let o;return r===pL.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===pL.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===pL.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===pL.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===pL.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=cq(n,r),a=pq(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const o=lq(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=Kd().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function lq(e,t,n,r,s){const a=function(e,t){switch(e){case pL.PACKED_2X2_FLOAT32:return rq(t);case pL.PACKED_2X2_FLOAT16:return sq(t);case pL.UNPACKED_FLOAT32:return eq(t);case pL.UNPACKED_FLOAT16:return tq(t);case pL.PACKED_4X1_UNSIGNED_BYTE:return nq(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(s){const[t,n]=mL(e[0],e[1]);o=t*n}else{const[t,n]=dL(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function cq(e,t){if(e===lL.UPLOAD)return pL.PACKED_2X2_FLOAT32;if(e===lL.RENDER||null==e)return function(e){return Kd().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?pL.PACKED_2X2_FLOAT32:pL.UNPACKED_FLOAT32:e?pL.PACKED_2X2_FLOAT16:pL.UNPACKED_FLOAT16}(t);if(e===lL.DOWNLOAD||e===lL.PIXELS)return pL.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function pq(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class hq{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=ZL(this.outputShape.length);const t=e.length,n=ez("rc",t),r=QM(t),s=tz(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const dq=eN.whereImpl,fq={};const mq=Kd().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class gq extends Kh{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Kd().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof oq)t=e;else{const n=oL(Kd().getNumber("WEBGL_VERSION"),e);t=new oq(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=oL(Kd().getNumber("WEBGL_VERSION"));t=new oq(e),this.binaryCache=((n=Kd().getNumber("WEBGL_VERSION"))in fq||(fq[n]={}),fq[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new uq(this.gpgpu),this.numMBBeforeWarning=null==Kd().global.screen?1024:Kd().global.screen.height*Kd().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new jh(this,pN())}nextDataId(){return gq.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,r,s,a){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[r,s]},i.texShape=[r,s];const u=DL(t),l=new KH(u,!1,a),c=this.runWebGLProgram(l,[o],n,[[r,s]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if((Kd().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Kd().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:lL.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,s){if(Kd().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:lL.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new gz(o,mz):new dz(o,mz);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=by.now()),"complex64"===r){const e=this.readSync(s.real.dataId),t=this.readSync(s.imag.dataId);c=Gw.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=by.now()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=s){let t;t=i?new gz(r,mz):new dz(r,mz);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(Kd().getBool("DEBUG")&&!Kd().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Kd().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&Kd().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...fL(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];l=Gw.mergeRealAndImagArrays(t,n)}else if(null==c)l=this.getValuesFromTexture(e);else{const e=by.sizeFromShape(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=c){const e=this.gpgpu.gl;yL(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,l),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&pN().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:o,isPacked:i,texture:u}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new gz(s,mz):new dz(s,mz);const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:o}],o),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==u)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),c=pN().makeTensorFromTensorInfo(l),p=this.texData.get(l.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>by.decodeString(e)));return Bx(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Bx(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!bL(n)){if(Kd().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=by.sizeFromShape(t);if(Kd().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...fL(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=Kd().getBool("WEBGL_PACK")&&!0===r,o=a?DL(t):t,i=a?new qH(o):new HH(o),u=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=by.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=by.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);o.kernelMs=by.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:by.now(),endMs:null}}endTimer(e){return Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=by.now(),e)}async getQueryTime(e){if(Kd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=mq){return Kd().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&by.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Gw.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return dq(e.shape,t)}packedUnaryOp(e,t,n){const r=new gz(e.shape,t),s=this.compileAndRun(r,[e],n);return pN().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=rB(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Kd().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,fz,e.dtype);const t=new dz(e.shape,fz),n=this.compileAndRun(t,[e]);return pN().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&by.isString(n[0])){const s=n.map((e=>by.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return pN().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new hq(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new iq(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[_L(e.shape),...RL(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[_L(t),...RL(t)],a=new kB(s,n),o=[n],i=this.runWebGLProgram(a,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;if(null!=t){const e=by.sizeFromShape(s),n=t[0]*t[1]*4;by.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=DL(s);let i;i=r?new GH(o):new UH(o);const u=[null!=t?t:fL(o)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,u,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===iL.DENSE){const t=null!=a?a:fL(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===by.sizeFromShape(o.shape))return i.values=by.getTypedArrayFromDType(o.dtype,0),o;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&by.sizeFromShape(t.shape)<=Kd().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!OL(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:u}=eL(e.packedInputs,t.shape,a);let l="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=by.computeStrides(i);p=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&by.arraysEqual(t.shape,a),f=1===by.sizeFromShape(t.shape),m=Gw.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&by.arraysEqual(a,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${g}_${o?u:""}_${i.length}_${f}_${m}_${d}_${l}_${c}_${p}_${y}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${Kd().getNumber("WEBGL_VERSION")}`,a}(e,l,c),h=this.getAndSaveBinary(p,(()=>KL(this.gpgpu,e,l,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),Kd().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(YL(t.inShapeInfos,n),YL([t.outShapeInfo],[r]));const a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===Kd().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],o=t.uniformLocations[`offset${s}`],i=t.inShapesLocations[`${s}Shape`],u=t.inTexShapesLocations[`${s}TexShape`];if(i){const{uniformShape:r}=eL(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(i,new Int32Array(r));break;case 2:e.gl.uniform2iv(i,new Int32Array(r));break;case 3:e.gl.uniform3iv(i,new Int32Array(r));break;case 4:e.gl.uniform4iv(i,new Int32Array(r))}}if(u&&e.gl.uniform2i(u,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(by.sizeFromShape(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,r)}));const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=by.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s&&t.program.customUniforms.forEach(((n,r)=>{const a=t.customUniformLocations[r],o=s[r];if("float"===n.type)e.gl.uniform1fv(a,o);else if("vec2"===n.type)e.gl.uniform2fv(a,o);else if("vec3"===n.type)e.gl.uniform3fv(a,o);else if("vec4"===n.type)e.gl.uniform4fv(a,o);else if("int"===n.type)e.gl.uniform1iv(a,o);else if("ivec2"===n.type)e.gl.uniform2iv(a,o);else if("ivec3"===n.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,o)}})),e.executeProgram()}(this.gpgpu,h,l,c,r),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=Kd().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=by.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!Kd().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Kd().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=dN((()=>{if(!Kd().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Kd().getBool("DEBUG");Kd().set("DEBUG",!1);const t=this.abs(_N(1e-8)).dataSync()[0];if(Kd().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=by.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=Kd().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=Kd().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&Kd().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map(((t,n)=>n>=e.length-2?by.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=by.squeezeShape(e);e=t.newShape}let s=by.sizeFromShape(e),a=null;e.length<=1&&s<=n?a=[1,s]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>r&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=_L(e);let n=2,r=2;e.length&&([n,r]=RL(e)),s=t*(n/2)*(r/2),a=by.sizeToSquarishShape(s).map((e=>2*e))}else a=by.sizeToSquarishShape(s);return a}(n,i),t.texShape=c),null!=s){const e=DL(n);let a,o=c[1],p=c[0];const h=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&h||([o,p]=mL(c[0],c[1])),a=i?new XH(e,h):new KH(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?lL.PIXELS:lL.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);const g=[[p,o]],y=!0,b=this.runWebGLProgram(a,[f],r,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,Kd().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=by.now()-l)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*by.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await k$(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw vL(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,inShapesLocations:a,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}=XL(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.inShapesLocations=a,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}createTensorFromTexture(e,t,n){const{texture:r,height:s,width:a,channels:o}=e,i=pN().backend;if(!i.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const u=i.writeTexture(r,t,n,s,a,o);return pN().makeTensorFromDataId(u,t,n,i)}}gq.nextDataId=0;Nb.isBrowser()&&gN("webgl",(()=>new gq),2);class yq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,yq.prototype)}}class bq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,bq.prototype)}}class xq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,xq.prototype)}}class wq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,wq.prototype)}}class kq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,kq.prototype)}}class vq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,vq.prototype)}}class Nq{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function Sq(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Iq(e,t){if(!e)throw new kq(t)}function Tq(e,t){let n=0;for(const r of e)r===t&&n++;return n}function Eq(e){return 1===e.length?e[0]:e}function $q(e){return Array.isArray(e)?e:[e]}function Cq(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Aq(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let _q={};function Rq(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Dq(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Dq(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Dq(t):e[n]=t.value)}}}function Fq(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in _q)a=_q[s];else if(a=t[s],null==a)throw new xq(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new xq(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,u;if(o in n?[i,u]=n[o]:o in _q?[i,u]=_q.className:o in t&&([i,u]=t[o]),null==i)throw new xq(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(_q))e[t]=_q[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},_q);for(const e of Object.keys(n))_q[e]=n[e];Dq(a.config);const r=u(i,a.config,n,s);return _q=Object.assign({},t),r}{const e=Object.assign({},_q);for(const e of Object.keys(n))_q[e]=n[e];const t=new i(a.config);return _q=Object.assign({},e),t}}}function Oq(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Mq(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Lq(e){if(null==e)throw new xq(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function zq(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new xq(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Bq(e,t,n=0,r=1/0){return Iq(n>=0),Iq(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function Pq(e,t){Array.isArray(e)?(by.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Pq(e,`element ${n+1} of ${t}`)))):by.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Wq(e)}.`))}function Wq(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Wq(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Vq(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Uq=0;function Gq(){return Uq++}const Hq={};function qq(e=""){return e in Hq||(Hq[e]=0),Hq[e]+=1,e+Hq[e].toString()}const jq=["channelsFirst","channelsLast"],Kq=["nearest","bilinear"],Xq=["valid","same","causal"],Yq=["max","avg"],Zq=["sum","mul","concat","ave"],Jq=new Map;function Qq(e){zq(jq,"DataFormat",e)}function ej(e){zq(Xq,"PaddingMode",e)}function tj(e){zq(Yq,"PoolMode",e)}const nj=[];function rj(e,t){nj.push(e);try{const e=t();return nj.pop(),e}catch(e){throw nj.pop(),e}}function sj(e){if(!ij(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===nj.length?"":nj.join("/")+"/")+e}function aj(e){if(!ij(e))throw new Error("Not a valid tensor name: '"+e+"'");Jq.has(e)||Jq.set(e,0);const t=Jq.get(e);if(Jq.set(e,Jq.get(e)+1),t>0){const n=`${e}_${t}`;return Jq.set(n,1),n}return e}const oj=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function ij(e){return!!e.match(oj)}function uj(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function lj(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function cj(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function pj(e,t){if(t<e)throw new xq(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}let hj;function dj(){return null==hj&&(hj=kb.backend.epsilon()),hj}function fj(e,t){return Px(e,t)}function mj(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Rk(e,n)}function gj(e,t,n){return dN((()=>{switch(e.rank){case 1:return IE(e,t,n);case 2:return TE(e,[t,0],[n,e.shape[1]]);case 3:return EE(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return $E(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return NN(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return NN(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new xq(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function yj(e,t,n){return dN((()=>{switch(e.rank){case 1:return IE(e,t,n);case 2:return TE(e,[0,t],[e.shape[0],n]);case 3:return EE(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return $E(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new xq(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function bj(e,t,n,r){return dN((()=>{switch(e.rank){case 1:return IE(e,t,n);case 2:switch(r){case 1:return gj(e,t,n);case 2:return yj(e,t,n);default:throw new xq(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return gj(e,t,n);case 2:return EE(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return yj(e,t,n);default:throw new xq(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return gj(e,t,n);case 2:return $E(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return $E(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return yj(e,t,n);default:throw new xq(`The axis is not within the rank of the tensor ${r}`)}default:throw new xq(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function xj(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),wN(e,t)}function wj(e,t){switch(e.rank){case 1:return jI([e,t]);case 2:return KI([e,t],0);case 3:return XI([e,t],0);case 4:return YI([e,t],0);default:throw new xq(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function kj(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new xq(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return rS(e,t)}function vj(e,t=0,n=1,r,s){return cE(e,t,n,r,s)}function Nj(e,t,n,r){if(e.rank<2||t.rank<2)throw new wq(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new wq(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const s=!1,a=!1;return DN.matMul({a:e,b:t,transposeA:s,transposeB:a,bias:r?Tj(e.rank,r,"channelsLast"):null,activation:n})}{const s=e.shape.slice(),a=s.pop();e=Rk(e,[-1,a]);const o=t.shape.slice(),i=o.pop(),u=o.pop(),l=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Rk(jS(t,c),[u,-1]);const p=[...s,...l],h=!1,d=!1;return Rk(DN.matMul({a:e,b:t,transposeA:h,transposeB:d,bias:r?Tj(e.rank,r,"channelsLast"):null,activation:n}),p)}}function Sj(e,t,n){return dN((()=>(t=Array.isArray(t)?qN(t,"int32"):Px(t,"int32"),bT(e,t,n))))}function Ij(e){return $k(e,e)}function Tj(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new xq(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?Rk(t,[1,r[0],1,1,1]):Rk(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?Rk(t,[1,1,1,1,r[0]]):Rk(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?Rk(t,[1,r[0],1,1]):Rk(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?Rk(t,[1,1,1,r[0]]):Rk(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?Rk(t,[1,r[0],1]):Rk(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?Rk(t,[1,1,r[0]]):Rk(t,[1].concat(r))}else if(e<3)return t;throw new xq(`Unsupported input rank by biasAdd: ${t.rank}`)}function Ej(e,t,n){return dN((()=>(null==n&&(n="channelsLast"),Qq(n),FN(e,Tj(e.rank,t,n)))))}function $j(e,t,n,r){return dN((()=>e$(e,t,n,r)))}function Cj(e,t,n=!1){return n?e():t()}const Aj=["fanIn","fanOut","fanAvg"],_j=["normal","uniform","truncatedNormal"];class Rj extends Pw.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Dj extends Rj{apply(e,t){return IN(e,t)}}Dj.className="Zeros",Pw.registerClass(Dj);class Fj extends Rj{apply(e,t){return QS(e,t)}}Fj.className="Ones",Pw.registerClass(Fj);class Oj extends Rj{constructor(e){if(super(),"object"!=typeof e)throw new xq(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new xq(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return dN((()=>$k(_N(this.value),QS(e,t))))}getConfig(){return{value:this.value}}}Oj.className="Constant",Pw.registerClass(Oj);class Mj extends Rj{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return hE(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Mj.className="RandomUniform",Pw.registerClass(Mj);class Lj extends Rj{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new wq(`randomNormal does not support dType ${t}.`);return vj(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Lj.className="RandomNormal",Pw.registerClass(Lj);class zj extends Rj{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new wq(`truncatedNormal does not support dType ${t}.`);return ME(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}zj.className="TruncatedNormal",Pw.registerClass(zj);class Bj extends Rj{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return dN((()=>{if(2!==e.length||e[0]!==e[1])throw new xq("Identity matrix initializer can only be used for 2D square matrices.");return $k(this.gain,GS(e[0]))}))}getConfig(){return{gain:this.gain}}}Bj.className="Identity",Pw.registerClass(Bj);class Pj extends Rj{constructor(e){if(super(),e.scale<0)throw new xq(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,zq(Aj,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){zq(_j,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(Qq(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=uj(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=uj(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=uj(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new wq(`${this.getClassName()} does not support dType ${t}.`);return ME(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return hE(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Pj.className="VarianceScaling",Pw.registerClass(Pj);class Wj extends Pj{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pj.className}}Wj.className="GlorotUniform",Pw.registerClass(Wj);class Vj extends Pj{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pj.className}}Vj.className="GlorotNormal",Pw.registerClass(Vj);class Uj extends Pj{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pj.className}}Uj.className="HeNormal",Pw.registerClass(Uj);class Gj extends Pj{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pj.className}}Gj.className="HeUniform",Pw.registerClass(Gj);class Hj extends Pj{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pj.className}}Hj.className="LeCunNormal",Pw.registerClass(Hj);class qj extends Pj{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pj.className}}qj.className="LeCunNormal",Pw.registerClass(qj);class jj extends Rj{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new wq("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return dN((()=>{if(e.length<2)throw new wq("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=vj(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=o$.gramSchmidt(t);return e[0]>e[1]&&(n=jS(n)),$k(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}jj.className="Orthogonal",Pw.registerClass(jj);const Kj={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Xj(e,t={}){return Fq(e,Pw.SerializationMap.getMap().classNameMap,t,"initializer")}function Yj(e){return Rq(e)}function Zj(e){if("string"==typeof e){const t=e in Kj?Kj[e]:e;if("GlorotNormal"===t)return new Vj;if("GlorotUniform"===t)return new Wj;if("HeNormal"===t)return new Uj;if("HeUniform"===t)return new Gj;if("LeCunNormal"===t)return new Hj;if("LeCunUniform"===t)return new qj;{const e={};return e.className=t,e.config={},Xj(e)}}return e instanceof Rj?e:Xj(e)}function Jj(e){return Array.isArray(e)&&Array.isArray(e[0])}function Qj(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function eK(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new xq(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function tK(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new xq(`Expected exactly 1 Shape; got ${e.length}`)}return e}function nK(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const rK="Variable";class sK{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Gq(),n=null==n?rK:n,this.originalName=sj(n),this.name=aj(this.originalName),this.trainable_=r,this.constraint=s,this.val=PE(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function aK(e){return e.map((e=>e.read()))}function oK(e){e.forEach((e=>{e[0].write(e[1])}))}class iK{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class uK{constructor(e,t,n,r,s,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=o,this.id=Gq(),null!=a&&(this.originalName=sj(a),this.name=aj(this.originalName)),this.rank=t.length}}let lK=0;class cK{constructor(e,t){this.callArgs=t,this.id=lK++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let pK=0;class hK extends Pw.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=pK++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Cq(e)+"_"+qq(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new bq(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new xq(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Eq(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Eq(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new yq(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new yq(`Layer ${this.name} is not connected, no input to return.`);return Eq(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new yq(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new yq(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Eq(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=$q(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=$q(this.inputSpec);if(e.length!==t.length)throw new xq(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new xq(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new xq(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new xq(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new xq(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],o=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(o))throw new xq(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new xq(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=$q(e);let r=!0;for(const e of n)if(!(e instanceof uK)){r=!1;break}let s=!0;for(const e of n)if(e instanceof uK){s=!1;break}if(r===s)throw new xq("Arguments to apply() must be all SymbolicTensors or all Tensors");return rj(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of $q(e))t.push(n.shape);this.build(Eq(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=$q(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=Eq(a),null!=this.activityRegularizer)throw new wq("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=$q(e);const t=[];for(const n of e)t.push(n.shape);return Eq(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new uK(a,n,this,$q(e),t,this.name,r))):new uK(a,r,this,$q(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new wq("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new yq(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new yq(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new bq(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return nK(this.weights)}build(e){this.built=!0}getWeights(e=!1){return aK(e?this.trainableWeights:this.weights)}setWeights(e){dN((()=>{const t=this.weights;if(t.length!==e.length)throw new xq(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=aK(t);for(let s=0;s<r.length;++s){const a=r[s],o=t[s],i=e[s];if(!by.arraysEqual(a.shape,i.shape))throw new xq(`Layer weight shape ${a.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}oK(n)}))}addWeight(e,t,n,r,s,a,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new xq(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=i?i():Zj("zeros"));const u=r.apply(t,n),l=new sK(u,n,e,a,o);return u.dispose(),null!=s&&this.addLoss((()=>s.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=$q(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,o=null){const i=$q(e);t=$q(t),n=$q(n),r=$q(r),s=Qj(s),a=Qj(a);const u=[],l=[],c=[];for(const e of i)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new cK({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function dK(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=dK(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class fK extends hK{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:qq("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new xq("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new xq("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new xq("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new uK(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new cK({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new xq(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function mK(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new xq("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new fK({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}fK.className="InputLayer",Pw.registerClass(fK);class gK{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof gK)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new xq(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Px(t,e.dtype)}catch(n){throw new xq(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof uK){if(null==this.id2Value[e.id])throw new xq(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new xq(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof uK){if(null==this.id2Value[e.id])throw new xq(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new xq(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&fN(this.id2Mask)}}const yK=new Nq,bK=new Nq;function xK(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],i=o.map((e=>e.name)),u=[],l=t.names();for(const e of i)-1!==l.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let p,h=yK.get(c);if(null==h){const e=function(e,t){by.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=kK(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:o}=kK(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in o)null==r[e]&&(r[e]=new Set),o[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:wK(r)}}(o,t);h=e.sorted,p=e.recipientCounts,yK.put(c,h),bK.put(c,p)}p={},s||Object.assign(p,bK.get(c));const d=new gK(t);for(let e=0;e<h.length;++e){if(null!=r){const e=hN().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=h[e],o=a.sourceLayer;if(o instanceof fK)continue;const l=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);l.push(n),c.push(r),null!=r&&(m=!0),s||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=$q(o.apply(l,n));let y=null;o.supportsMasking&&(y=o.computeMask(l,c));const b=vK(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}s||fN(f)}return d.disposeMasks(),a?u:u[0]}function wK(e){const t={};for(const n in e)t[n]=e[n].size;return t}function kK(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],o=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&o.pop();else{o.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function vK(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function NK(e,t){return dN((()=>LS(Ok($k(e,e),t,!0))))}Kd().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=yK&&yK.setMaxEntries(e),null!=bK&&bK.setMaxEntries(e)}));class SK extends Pw.Serializable{getConfig(){return{}}}class IK extends SK{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return dN((()=>{const t=NK(e,this.axis),n=qI(t,0,this.maxValue);return $k(e,xS(n,FN(dj(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}IK.className="MaxNorm",Pw.registerClass(IK);class TK extends SK{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return dN((()=>xS(e,FN(dj(),NK(e,this.axis)))))}getConfig(){return{axis:this.axis}}}TK.className="UnitNorm",Pw.registerClass(TK);class EK extends SK{apply(e){return Ak(e)}}EK.className="NonNeg",Pw.registerClass(EK);class $K extends SK{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return dN((()=>{const t=NK(e,this.axis),n=FN($k(this.rate,qI(t,this.minValue,this.maxValue)),$k(1-this.rate,t));return $k(e,xS(n,FN(dj(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}$K.className="MinMaxNorm",Pw.registerClass($K);const CK={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function AK(e){return Rq(e)}function _K(e,t={}){return Fq(e,Pw.SerializationMap.getMap().classNameMap,t,"constraint")}function RK(e){if(null==e)return null;if("string"==typeof e){return _K({className:e in CK?CK[e]:e,config:{}})}return e instanceof SK?e:_K(e)}async function DK(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];fN(r)}}function FK(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var OK,MK;(MK=OK||(OK={}))[MK.SILENT=0]="SILENT",MK[MK.VERBOSE=1]="VERBOSE";class LK{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class zK{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class BK extends LK{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=dN((()=>FN(this.totals[e],$k(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:dN((()=>{const n=$k(xS(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),mN(t[e])})))}}class PK extends LK{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const o=s[a];e.push(o.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class WK extends LK{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||k$,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");by.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,s=null!=n?n():by.now();return(...a)=>{const o=null!=n?n():by.now();return o-s<t||(s=o,r=e(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await DK(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await DK(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await DK(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await DK(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await DK(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):by.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await DK(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await DK(e),await this.trainEnd(e))}}function VK(e,t){if(null==e&&(e={}),e instanceof LK)return[e];if(Array.isArray(e)&&e[0]instanceof LK)return e;return $q(e).map((e=>new WK(e,t)))}class UK{constructor(){}static registerCallbackConstructor(e,t){by.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),UK.checkForDuplicate(t),null==UK.constructors[e]&&(UK.constructors[e]=[]),UK.constructors[e].push(t)}static checkForDuplicate(e){for(const t in UK.constructors){UK.constructors[+t].forEach((t=>{if(t===e)throw new xq("Duplicate callback constructor.")}))}}static clear(){UK.constructors={}}static createCallbacks(e){const t=[];for(const n in UK.constructors){const r=+n;e>=r&&t.push(...UK.constructors[r])}return t.map((e=>new e))}}function GK(e,t,n,r,s,a,o,i,u){const l=new PK,c=[new BK,...UK.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const p=new zK(c);return p.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:u}),{callbackList:p,history:l}}function HK(e,t={},n=!1){return Fq(e,Pw.SerializationMap.getMap().classNameMap,t,"layer",n)}function qK(e,t){return dN((()=>{"float32"!==e.dtype&&(e=Px(e,"float32"));const n=Ok(Ij(e),t,!0),r=ZN(n.shape,dj()),s=LS(zT(n,r));return xS(e,s)}))}function jK(e,t){return dN((()=>ZS(Ij(wS(t,e)),-1)))}function KK(e,t){return dN((()=>ZS(DS(wS(t,e)),-1)))}function XK(e,t){return dN((()=>{const n=wS(e,t),r=qI(DS(e),dj(),Number.MAX_VALUE),s=DS(xS(n,r));return $k(100,ZS(s,-1))}))}function YK(e,t){return dN((()=>{const n=qI(t,dj(),Number.MAX_VALUE),r=oI(FN(1,n)),s=qI(e,dj(),Number.MAX_VALUE),a=oI(FN(1,s));return ZS(Ij(wS(r,a)),-1)}))}function ZK(e,t,n=!1){return dN((()=>{if(n)t=CE(t);else{const e=Ok(t,t.shape.length-1,!0);t=xS(t,e)}return t=qI(t,dj(),1-dj()),HS(Ok($k(Px(e,"float32"),oI(t)),t.shape.length-1))}))}function JK(e,t,n=!1){return dN((()=>{const r=Px(yT(function(e){const t=[uj(e.shape)];return Rk(e,t)}(e)),"int32"),s=(t=qI(t,dj(),1-dj())).shape;return ZK(Rk(HT(r,s[s.length-1]),s),t,n)}))}function QK(e,t){return dN((()=>{let n;return n=qI(t,dj(),1-dj()),n=oI(xS(n,wS(1,n))),ZS(function(e,t){if(!by.arraysEqual(e.shape,t.shape))throw new xq(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return dN((()=>{const n=Ak(t),r=HS(DS(t));return FN(wS(n,$k(t,e)),pI(cI(r)))}))}(e,n),-1)}))}function eX(e,t){return dN((()=>{const n=qI(e,dj(),1),r=qI(t,dj(),1);return Ok($k(e,oI(xS(n,r))),-1)}))}function tX(e,t){return dN((()=>{const n=qK(e,-1),r=qK(t,-1),s=$k(n,r);return HS(Ok(s,-1))}))}UK.constructors={};const nX={meanSquaredError:jK,meanAbsoluteError:KK,meanAbsolutePercentageError:XK,meanSquaredLogarithmicError:YK,squaredHinge:function(e,t){return dN((()=>{const n=zT(0,wS(1,$k(e,t)));return ZS(Ij(n),-1)}))},hinge:function(e,t){return dN((()=>{const n=zT(0,wS(1,$k(e,t)));return ZS(n,-1)}))},categoricalHinge:function(e,t){return dN((()=>{const n=Ok($k(e,t),-1),r=FS($k(wS(1,e),t),-1);return zT(0,FN(1,wS(r,n)))}))},logcosh:function(e,t){return dN((()=>{const n=Math.log(2),r=wS(t,e),s=wS(FN(r,IT($k(-2,r))),n);return ZS(s,-1)}))},categoricalCrossentropy:ZK,sparseCategoricalCrossentropy:JK,binaryCrossentropy:QK,kullbackLeiblerDivergence:eX,poisson:function(e,t){return dN((()=>{const n=oI(FN(dj(),t));return ZS(wS(t,$k(e,n)),-1)}))},cosineProximity:tX};function rX(e){if("string"==typeof e){if(e in nX)return nX[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new xq(t)}return e}function sX(e,t){return dN((()=>{const n=$k(.5,qT(t)),r=fj(yS(t,n),e.dtype);return ZS(cT(e,r),-1)}))}function aX(e,t){return dN((()=>fj(cT(EI(e,-1),EI(t,-1)),"float32")))}function oX(e,t){return dN((()=>Px(Ok($S(cT(e,1),cT(t,1))),"float32")))}function iX(e,t){return dN((()=>{const n=oX(e,t),r=function(e,t){return dN((()=>Px(Ok($S(cT(e,0),cT(t,1))),"float32")))}(e,t),s=FN(n,r);return Px(NS(yS(s,0),xS(n,s),0),"float32")}))}function uX(e,t){return QK(e,t)}function lX(e,t){return e.rank===t.rank&&(e=WS(e,[e.rank-1])),(t=EI(t,-1)).dtype!==e.dtype&&(t=Px(t,e.dtype)),Px(cT(e,t),"float32")}const cX=ZK,pX=JK,hX={binaryAccuracy:sX,categoricalAccuracy:aX,precision:iX,categoricalCrossentropy:cX,sparseCategoricalCrossentropy:pX,mse:jK,MSE:jK,mae:KK,MAE:KK,mape:XK,MAPE:XK,cosine:tX};function dX(e){if("string"==typeof e&&e in hX)return hX[e];if("string"!=typeof e&&null!=e)return e;throw new xq(`Unknown metric ${e}`)}function fX(e){if(Iq(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(nX))if(nX[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(hX))if(hX[n]===e){t=n;break}return void 0!==t?t:e.name}}const mX=1048576;function gX(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!yX(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>mX&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function yX(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!yX(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!yX(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function bX(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}r("_".repeat(t)),xX(a,n,r),r("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)s?wX(i[e],n,r):kX(i[e],n,o,r),r((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;t=null!=e.collectedTrainableWeights?nK(e.collectedTrainableWeights):nK(e.trainableWeights);return t}(e),l=nK(e.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(t))}function xX(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function wX(e,t,n){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}xX([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function kX(e,t,n,r){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const o=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];o.push(`${n}[${r}][${s}]`)}const i=e.name,u=e.getClassName(),l=0===o.length?"":o[0];xX([`${i} (${u})`,a,s,e.countParams().toString(),l],t,r);for(let e=1;e<o.length;++e)xX(["","","","",o[e]],t,r)}function vX(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function NX(e,t){if(null===e)return null;if("string"==typeof e)return Aq(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];vX(t,s,r)?n.push(r):n.push(NX(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=Aq(n);t[e]=NX(r,e)}}return t}}function SX(e,t){if(null==e)return null;if("string"==typeof e)return Cq(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];vX(t,s,r)?n.push(r):n.push(SX(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],s=Cq(n);t[s]="name"!==n&&"className"!==n||"string"!=typeof r?SX(r,n):r}return t}}
/** @license See the LICENSE file. */class IX extends hK{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=qq(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Mq(this.inputs).length!==this.inputs.length)throw new xq(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Mq(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;Iq(0===n,"input layer has >1 nodes"),Iq(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof fK))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},o=[],i=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new bq(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(IX.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const r=l.inputTensors[e],s=l.inboundLayers[e],a=l.nodeIndices[e],o=l.tensorIndices[e];i(r,t,n,s,a,o)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);o.push(l)},u=[],l=[];for(const e of this.outputs)i(e,u,l);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const o=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,o),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],o=e.nodeIndices[r],i=s.inboundNodes[o],u=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,u),n[i.id]=i}}const p={};for(const e in t){const r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}const h={};for(const e in r){const t=r[e];t in h||(h[t]=[]),h[t].push(s[e])}let d=Object.keys(h).map((e=>parseInt(e,10))).sort(Oq);this.layers=[];for(const e of d){const t=h[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof IX&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,d=Object.keys(p).map((e=>parseInt(e,10))).sort(Oq);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of p[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new bq(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new bq(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new cK({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new xq("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new xq(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new xq(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new xq(`${e.length} of ${r} weights are not set: ${e}`)}oK(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 4.0.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=SX(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return dN((()=>{e=$q(e);const n=new gK;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return xK(this.outputs,n,t)}))}computeMask(e,t){return dN((()=>{let n;return e=$q(e),n=null==t?Sq(null,e.length):$q(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Qj(e);if(t.length!==this.inputLayers.length)throw new xq(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Oq);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${s.name}_${a}_${o}`];r.push(i)}const s=Qj(t.computeOutputShape(Eq(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n[`${t.name}_${a}_${e}`]=s[e]}}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];Iq(t in n),s.push(n[t])}return Eq(s)}runInternalGraph(e,t){null==t&&(t=Sq(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],o=t[r];n[s.id]=[a,o]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Oq);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,o,i,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),i=$q(t.call(e,l)),u=$q(t.computeMask(e,n)),r=[e],o=[n]}else r=a.map((e=>e[0])),o=a.map((e=>e[1])),null==l.mask&&(l.mask=o),i=$q(t.call(r,l)),u=$q(t.computeMask(r,o));if(t.activityRegularizer)throw new wq("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=i[e],a=u[e];n[t.id]=[r,a]}}}}const s=[],a=[],o=[];for(const e of this.outputs){Iq(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];o.push(t.shape),s.push(t),a.push(r)}return[s,a,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof IX?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=IX.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new xq(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new xq("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new xq(`No such layer: ${e}`)}calculateLosses(){return dN((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=IX.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=IX.nodeKey(e,n);let o={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],i=r.tensorIndices[n];let u=t[IX.nodeKey(s,a)];null==u&&(u=0),e.push([s.name,u,i,o])}a.push(e)}}}const o={};o.name=e.name,o.className=r,o.config=s,o.inboundNodes=a,n.push(o)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=IX.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];r.push([n.name,o,i])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=IX.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];s.push([n.name,o,i])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function i(e,t){const n=[];let r;for(const a of t){const i=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(i in s))return void o(e,t);const c=s[i];if(c.inboundNodes.length<=u)return void o(e,t);const p=c.inboundNodes[u];n.push(p.outputTensors[l])}n.length>0&&e.apply(Eq(n),r)}function u(e){const n=e.name,a=HK(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new xq(`Corrupted configuration, expected array for nodeData: ${e}`);o(a,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!Lq(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)i(t,n)}}const p=[],h=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];Iq(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];Iq(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}return new e({inputs:p,outputs:h,name:l})}get stateful(){if(this._stateful)throw new xq("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){dN((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function TX(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function EX(e,t){return TX(e,t,"classWeight")}async function $X(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=dN((()=>{if(1===e.shape.length)return Wx(e);if(2===e.shape.length){if(e.shape[1]>1){return EI(e,1)}if(1===e.shape[1])return Rk(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());fN(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),qN(s,"float32")}return null}function CX(e,t){return $k(e,t)}function AX(e,t){let n,r;const s=t;n=s.xs,r=s.ys,by.assert(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=_X("input",e.inputNames,n),o=_X("output",e.outputNames,r),i=a[0].shape[0];by.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),by.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)by.assert(a[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)by.assert(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:a,ys:o}}function _X(e,t,n){if(n instanceof eb)return[n];if(Array.isArray(n))return by.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new xq(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function RX(e,t,n){const r=null!=n.batchesPerEpoch;if(by.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),by.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),by.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),by.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),by.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,o;if(s)if(DX(n.validationData))by.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new wq("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,o=e.ys}const i=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const c=VK(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:h,history:d}=GK(c,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,s,l);h.setModel(e),e.history=d,await h.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const l={};await h.onEpochBegin(f);let c=0,p=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=AX(e,t.value),a={};a.batch=p,a.size=r[0].shape[0],await h.onBatchBegin(p,a);const o=[];if(null!=n.classWeight){const t=EX(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await $X(s[e],null,t[e]))}const l=r.concat(s).concat(o),d=i(l);fN(l);for(let e=0;e<u.length;++e){const t=u[e],n=d[e];a[t]=n,mN(n)}await h.onBatchEnd(p,a),FK(a),p++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=DX(n.validationData)?$q(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):$q(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await h.onEpochEnd(f,l),f++,e.stopTraining_)break}return await h.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function DX(e){return"function"==typeof e.iterator}async function FX(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new wq("Verbose mode is not implemented yet.");by.assert(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,u=0;for(;!r||u<n.batches;){const t=await o.next();if(a=dN((()=>{if(t.value){const{xs:n,ys:r}=AX(e,t.value),o=n.concat(r),l=dN((()=>s(o)));if(fN(o),0===u)for(let e=0;e<l.length;++e)a.push(_N(0));const c=o[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=a[e];a[e]=dN((()=>FN(a[e],$k(c,t)))),u>0&&fN(n)}fN(l),i+=c,++u}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=xS(a[e],i),fN(t)}return Eq(a)}function OX(e){by.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function MX(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>gj(e,t,n-t))):gj(e,t,n-t)}function LX(e,t){return dN((()=>null==e?null:Array.isArray(e)?e.map((e=>LX(e,t))):Sj(e,"int32"===t.dtype?t:Px(t,"int32"))))}function zX(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}async function BX(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,o,i,u,l,c,p,h;e.isTraining=!0;try{const d=null==r.batchSize?32:r.batchSize;OX(d);const f=!1,m=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,f,d);s=m[0],a=m[1],h=m[2];let g,y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2!==r.validationData.length)throw 3===r.validationData.length?new wq("validationData including sample weights is not supported yet."):new xq(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);u=r.validationData[0],l=r.validationData[1];const t=!0,n=await e.standardizeUserData(u,l,null,null,t,d);c=n[0],p=n[1],g=c.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];c=MX(s,e,t),o=s,s=MX(s,0,e),p=MX(a,e,t),i=a,a=MX(a,0,e),g=c.concat(p)}else null!=r.validationSteps&&(y=!0);const b=s.concat(a).concat(h);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const N=VK(r.callbacks,r.yieldEvery),S=await async function(e,t,n,r,s,a,o,i,u,l,c,p,h,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==h&&(h=0);let m=!1;if(null!=u&&null!=l&&(m=!0),null!=f&&(m=!0,null==d))throw new xq("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=pj(0,g)),null==o&&(o=1);const{callbackList:b,history:x}=GK(i,o,a,h,g,d,s,m,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let o=h;o<a;++o){await b.onEpochBegin(o);const a={};if(null!=d)throw new wq("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new wq("batch shuffling is not implemneted yet");c&&by.shuffle(y);const o=qN(y),i=zX(g,s);for(let c=0;c<i.length;++c){const p={};if(await b.onBatchBegin(c,p),dN((()=>{const h=i[c][0],d=i[c][1],f=gj(o,h,d-h);p.batch=c,p.size=d-h;const g=LX(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];p[t]=n,mN(n)}if(c===i.length-1&&m){const t=e.testLoop(u,l,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];mN(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,p),FK(p),e.stopTraining_)break}o.dispose()}if(await b.onEpochEnd(o,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,r.epochs,r.verbose,N,k,g,r.shuffle,v,r.initialEpoch,null,null);return S}finally{e.isTraining=!1,WX(s,t),WX(a,n),WX(o,t),WX(i,n),WX(c,u),WX(p,l),null!=h&&fN(h)}}function PX(e){const t=[];e instanceof eb&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(mj(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function WX(e,t){if(null==e)return;const n=[];if(t instanceof eb)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof eb)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function VX(e){return Array.isArray(e)}function UX(e){return!function(e){return e instanceof eb}(e)&&!VX(e)}function GX(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(VX(e)&&e.length>0)t=!0;else if(UX(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new xq(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(UX(e)){a=[];for(const n of t){if(null==e[n])throw new xq(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(VX(e)){if(e.length!==t.length)throw new xq(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new xq(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=PX(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new xq(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const a=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&a!==i)throw new xq(`${s} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${s} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function HX(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new xq(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new xq(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new xq(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const i=o.shape[a],u=n[e][a];if(null!=u&&u!==i)throw new xq(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class qX extends IX{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new xq("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");bX(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>x$.adagrad(.01),Adadelta:()=>x$.adadelta(1,.95,dj()),Adam:()=>x$.adam(.001,.9,.999,dj()),Adamax:()=>x$.adamax(.002,.9,.999,dj(),0),RMSProp:()=>x$.rmsprop(.001,.9,0,dj()),SGD:()=>x$.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new xq(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof c$))throw new xq("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new xq(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>rX(e)))}else{const n=rX(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new xq(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(rX(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],rj("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};rj("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,a;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===QK?-1!==["accuracy","acc"].indexOf(o)?r=sX:-1!==["crossentropy","ce"].indexOf(o)&&(r=uX):this.lossFunctions[e]===JK?-1!==["accuracy","acc"].indexOf(o)?r=lX:-1!==["crossentropy","ce"].indexOf(o)&&(r=pX):-1!==["accuracy","acc"].indexOf(o)?r=aX:-1!==["crossentropy","ce"].indexOf(o)&&(r=cX),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),a=r,n=""+s}else{const e=dX(o);a=e,n=""+fX(o)}let t;rj(n,(()=>{t=a})),s(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;OX(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const o=this.testFunction;return Eq(this.testLoop(o,a,r,n.verbose,n.steps))}finally{WX(s[0],e),WX(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),FX(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new xq(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new xq(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new xq("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new gK;if(e instanceof eb&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new xq(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new xq(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const o=xK(s,a);return n?o:o[0]}retrieveSymbolicTensors(e){const t=Sq(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const o=a.indexOf(e[r]);if(-1!==o&&(t[r]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new xq(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return dN((()=>{const r=this.checkNumSamples(e);if(n)throw new wq("Verbose predictLoop() is not implemented yet.");const s=zX(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t){dN((()=>{const n=s[t][0],r=s[t][1],a=MX(e,n,r),o=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)o.push({key:this.inputs[e],value:a[e]});else o.push({key:this.inputs[0],value:a});const i=new gK(o);return xK(this.outputs,i)})).forEach(((e,t)=>a[t].push(e)))}return Eq(a.map((e=>wN(e,0))))}))}predict(e,t={}){const n=PX(e);HX(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return OX(r),this.predictLoop(n,r)}finally{WX(n,e)}}predictOnBatch(e){HX(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new bq("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===JK?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=Mq(e.map((e=>e.shape[0])));r.sort();const s=Mq(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new xq(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new xq(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!by.arraysEqual(r,s))throw new xq(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=GX(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=GX(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[jK,QK,ZK];for(let s=0;s<e.length;++s){const a=e[s],o=t[s],i=n[s];if(null!=o){if(o===ZK&&1===a.shape[a.shape.length-1])throw new xq(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const e=a.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new xq(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new xq(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[o,i]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=EX(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await $X(i[t],null,e[t]))}return[o,i,u]}testLoop(e,t,n,r=0,s){return dN((()=>{const a=this.checkNumSamples(t,n,s,"steps"),o=[];if(r>0)throw new wq("Verbose mode is not implemented yet.");if(null!=s)throw new wq("steps mode in testLoop() is not implemented yet");{const r=zX(a,n),s=qN(pj(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],i=r[n][1],u=gj(s,a,i-a),l=LX(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)o.push(_N(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=FN(o[e],$k(i-a,t))}}for(let e=0;e<o.length;++e)o[e]=xS(o[e],a)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;if(Tq(e,r)>1){s+=`_${Tq(e.slice(0,n),r)}`}t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new gK(e),i=xK(this.outputs,o,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],i[e]);null!=s[e]&&(n=CX(n,s[e]));const a=ZS(n);t.push(a),u=0===e?n:FN(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=ZS(t(r[s],i[s]))}mN(n),a.push(n)}return u=ZS(u),this.calculateLosses().forEach((e=>{u=FN(u,e)})),u}),!0,o)].concat(a)}}makeTestFunction(){this.testFunction=e=>dN((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const o=new gK(a),i=xK(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=ZS(r(s[e],i[e]));n=0===e?a:FN(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=ZS(n(s[r],i[r]));t.push(a)}return t}))}async fit(e,t,n={}){return BX(this,e,t,n)}async fitDataset(e,t){return RX(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),o=[];for(const e of a){const t=await e.data();o.push(t[0])}return fN(a),WX(n[0],e),WX(n[1],t),Eq(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=hN().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-hN().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Cq(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Cq(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=Cq(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Cq(fX(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Cq(fX(e))));{const e={};for(const t in this.metrics)e[t]=Cq(fX(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=HK(NX(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=Aq(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Aq(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Aq(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>Aq(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=Aq(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Ux.getSaveHandlers(e);if(0===t.length)throw new xq(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new xq(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new xq("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Ux.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.0.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await Ux.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=Ux.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;gX(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){gX(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}qX.className="Model",Pw.registerClass(qX);class jX extends qX{}jX.className="Functional",Pw.registerClass(jX);class KX extends qX{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:qq("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new xq(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof KX||e instanceof qX;let n;if(t){if(n=e,1!==n.outputs.length)throw new xq("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new xq("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new xq("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=mK({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new xq(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new xq("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=dK(this.outputs[0])}this.inboundNodes=[],new cK({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Sq(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(tK(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new qX({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new bq("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new bq("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new bq("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new bq("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new xq("Legacy serialization format not supported yet.");s=t}else by.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const o=new e(a);if(!(o instanceof KX))throw new wq(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of s){const t=HK(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new xq("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new xq("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}KX.className="Sequential",Pw.registerClass(KX);class XX extends Pw.Serializable{getConfig(){return{}}}class YX extends XX{apply(e,t=1){return function(e,t=1){if(1!==t)throw new wq(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Tk(e)}(e,t)}}YX.className="elu",Pw.registerClass(YX);class ZX extends XX{apply(e){return xE(e)}}ZX.className="selu",Pw.registerClass(ZX);class JX extends XX{apply(e){return Ak(e)}}JX.className="relu",Pw.registerClass(JX);class QX extends XX{apply(e){return dN((()=>sI(6,Ak(e))))}}QX.className="relu6",Pw.registerClass(QX);class eY extends XX{apply(e){return e}}eY.className="linear",Pw.registerClass(eY);class tY extends XX{apply(e){return Dk(e)}}tY.className="sigmoid",Pw.registerClass(tY);class nY extends XX{apply(e){return function(e){return dN((()=>{const t=FN(.5,$k(.2,e));return qI(t,0,1)}))}(e)}}nY.className="hardSigmoid",Pw.registerClass(nY);class rY extends XX{apply(e){return IT(e)}}rY.className="softplus",Pw.registerClass(rY);class sY extends XX{apply(e){return function(e){return dN((()=>xS(e,FN(DS(e),1))))}(e)}}sY.className="softsign",Pw.registerClass(sY);class aY extends XX{apply(e){return MI(e)}}aY.className="tanh",Pw.registerClass(aY);class oY extends XX{apply(e,t=-1){return CE(e,t)}}oY.className="softmax",Pw.registerClass(oY);class iY extends XX{apply(e,t=-1){return ET(e,t)}}iY.className="logSoftmax",Pw.registerClass(iY);class uY extends XX{apply(e,t=1){return dN((()=>$k(Dk($k(e,t)),e)))}}uY.className="swish",Pw.registerClass(uY);class lY extends XX{apply(e){return dN((()=>$k(e,MI(IT(e)))))}}function cY(e){return e.getClassName()}function pY(e,t={}){return Fq(e,Pw.SerializationMap.getMap().classNameMap,t,"activation")}function hY(e){if(null==e){const e={className:"linear",config:{}};return pY(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},pY(t)}return e instanceof XX?e:pY(e)}function dY(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}lY.className="mish",Pw.registerClass(lY);class fY extends Pw.Serializable{}class mY extends fY{constructor(e){super(),dY(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return dN((()=>{let t=IN([1]);return this.hasL1&&(t=FN(t,Ok($k(this.l1,DS(e))))),this.hasL2&&(t=FN(t,Ok($k(this.l2,Ij(e))))),Rk(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}mY.className="L1L2",Pw.registerClass(mY);const gY={l1l2:"L1L2"};function yY(e){return Rq(e)}function bY(e,t={}){return Fq(e,Pw.SerializationMap.getMap().classNameMap,t,"regularizer")}function xY(e){if(null==e)return null;if("string"==typeof e){return bY({className:e in gY?gY[e]:e,config:{}})}return e instanceof fY?e:bY(e)}class wY extends hK{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=eK(e);let n=Ak(e);return null!=this.maxValue&&(n=qI(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}wY.className="ReLU",Pw.registerClass(wY);class kY extends hK{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=eK(e);return Ek(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}kY.className="LeakyReLU",Pw.registerClass(kY);class vY extends hK{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Zj(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=xY(e.alphaRegularizer),this.alphaConstraint=RK(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new xq(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=tK(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new iK({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=eK(e),Ck(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Yj(this.alphaInitializer),alphaRegularizer:yY(this.alphaRegularizer),alphaConstraint:AK(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}vY.className="PReLU",Pw.registerClass(vY);class NY extends hK{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new wq(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=eK(e);return Tk(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}NY.className="ELU",Pw.registerClass(NY);class SY extends hK{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=eK(e);return $k(n,Px(yS(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}SY.className="ThresholdedReLU",Pw.registerClass(SY);class IY extends hK{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new oY).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=eK(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function TY(e,t,n){if("number"==typeof e)return Sq(e,t);if(e.length!==t)throw new xq(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new xq(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function EY(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function $Y(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+cj([n-t,0]);else{if("same"!==r)throw new xq(`Unsupport padding mode: ${r}.`);e*=t}return e}function CY(e,t){return dN((()=>(Qq(t),"channelsFirst"===t?jS(e,[0,2,3,1]):e)))}function AY(e,t){return dN((()=>(Qq(t),"channelsFirst"===t?jS(e,[0,2,3,4,1]):e)))}function _Y(e,t,n,r=1,s="valid",a,o=1){return dN((()=>{if(null==a&&(a="channelsLast"),Qq(a),3!==e.shape.length)throw new xq(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new xq(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new xq(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=jS(e,[0,2,1])),"causal"===s)throw new wq("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=ZI(e,t,r,"same"===s?"same":"valid","NWC",o);return null!=n&&(i=Ej(i,n)),i}))}function RY(e,t,n,r=[1,1],s="valid",a,o,i=null){return dN((()=>{if(null==a&&(a="channelsLast"),Qq(a),3!==e.rank&&4!==e.rank)throw new xq(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new xq(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=CY(e,a);if("causal"===s)throw new wq("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=DN.conv2d({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===a&&(u=jS(u,[0,3,1,2])),u}))}function DY(e,t,n,r=[1,1,1],s="valid",a,o){return dN((()=>{if(null==a&&(a="channelsLast"),Qq(a),4!==e.rank&&5!==e.rank)throw new xq(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new xq(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=AY(e,a);if("causal"===s)throw new wq("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=QI(i,t,r,"same"===s?"same":"valid","NDHWC",o),null!=n&&(i=Ej(i,n)),"channelsFirst"===a&&(i=jS(i,[0,4,1,2,3])),i}))}IY.className="Softmax",Pw.registerClass(IY);class FY extends hK{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",FY.verifyArgs(t),this.rank=e,Pq(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new wq(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=TY(t.kernelSize,e,"kernelSize"),this.strides=TY(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,ej(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Qq(this.dataFormat),this.activation=hY(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Zj(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=RK(t.biasConstraint),this.biasRegularizer=xY(t.biasRegularizer),this.activityRegularizer=xY(t.activityRegularizer),this.dilationRate=TY(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new xq(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new xq(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new xq(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Iq("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Bq(e.kernelSize,"number",1,3))throw new xq(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:cY(this.activation),useBias:this.useBias,biasInitializer:Yj(this.biasInitializer),biasRegularizer:yY(this.biasRegularizer),activityRegularizer:yY(this.activityRegularizer),biasConstraint:AK(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class OY extends FY{constructor(e,t){super(e,t),this.kernel=null,OY.verifyArgs(t),this.filters=t.filters,Pq(this.filters,"filters"),this.kernelInitializer=Zj(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=RK(t.kernelConstraint),this.kernelRegularizer=xY(t.kernelRegularizer)}build(e){e=tK(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new xq(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return dN((()=>{let t;e=eK(e);const n=null==this.bias?null:this.bias.read(),r=Vq(this.activation.getClassName());if(null!=r&&2===this.rank)t=RY(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=_Y(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=RY(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new wq("convolutions greater than 3D are not implemented yet.");t=DY(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=tK(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=EY(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:Yj(this.kernelInitializer),kernelRegularizer:yY(this.kernelRegularizer),kernelConstraint:AK(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new xq(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class MY extends OY{constructor(e){super(2,e),MY.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Bq(e.kernelSize,"number",1,2))throw new xq(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}MY.className="Conv2D",Pw.registerClass(MY);class LY extends OY{constructor(e){super(3,e),LY.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new xq(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}LY.className="Conv3D",Pw.registerClass(LY);class zY extends MY{constructor(e){if(super(e),this.inputSpec=[new iK({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new xq(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=tK(e)).length)throw new xq("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new xq("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new iK({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return dN((()=>{let t=eK(e);if(4!==t.shape.length)throw new xq(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const o=n[s],i=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],p=this.strides[1],h=[r,$Y(o,c,u,this.padding),$Y(i,p,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=jS(t,[0,2,3,1]));let d=JI(t,this.kernel.read(),h,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=jS(d,[0,3,1,2])),null!=this.bias&&(d=Ej(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=tK(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=$Y(t[r],i,a,this.padding),t[s]=$Y(t[s],u,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}zY.className="Conv2DTranspose",Pw.registerClass(zY);class BY extends LY{constructor(e){if(super(e),this.inputSpec=[new iK({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new xq(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=tK(e)).length)throw new xq("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new xq("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new iK({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return dN((()=>{let t=eK(e);if(5!==t.shape.length)throw new xq(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,o;"channelsFirst"===this.dataFormat?(o=2,s=3,a=4):(o=1,s=2,a=3);const i=n[o],u=n[s],l=n[a],c=this.kernelSize[0],p=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,$Y(i,d,c,this.padding),$Y(u,f,p,this.padding),$Y(l,m,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=jS(t,[0,2,3,4,1]));let y=tT(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=jS(y,[0,4,1,2,3])),null!==this.bias&&(y=Ej(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=tK(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const o=this.kernelSize[0],i=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],p=this.strides[2];return t[n]=this.filters,t[r]=$Y(t[r],l,o,this.padding),t[s]=$Y(t[s],c,i,this.padding),t[a]=$Y(t[a],p,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}BY.className="Conv3DTranspose",Pw.registerClass(BY);class PY extends OY{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new xq("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new xq("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new xq(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Zj(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=xY(t.depthwiseRegularizer),this.depthwiseConstraint=RK(t.depthwiseConstraint),this.pointwiseInitializer=Zj(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=xY(t.pointwiseRegularizer),this.pointwiseConstraint=RK(t.pointwiseConstraint)}build(e){if((e=tK(e)).length<this.rank+2)throw new xq(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new xq(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new iK({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return dN((()=>{let t;if(e=eK(e),1===this.rank)throw new wq("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=jS(e,[0,2,3,1])),t=wE(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Ej(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=jS(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Yj(this.depthwiseInitializer),e.pointwiseInitializer=Yj(this.pointwiseInitializer),e.depthwiseRegularizer=yY(this.depthwiseRegularizer),e.pointwiseRegularizer=yY(this.pointwiseRegularizer),e.depthwiseConstraint=AK(this.depthwiseConstraint),e.pointwiseConstraint=AK(this.pointwiseConstraint),e}}PY.className="SeparableConv";class WY extends PY{constructor(e){super(2,e)}}WY.className="SeparableConv2D",Pw.registerClass(WY);class VY extends OY{constructor(e){super(1,e),VY.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Bq(e.kernelSize,"number",1,1))throw new xq(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}VY.className="Conv1D",Pw.registerClass(VY);class UY extends hK{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return dN((()=>{if(e=eK(e),"channelsLast"===this.dataFormat){const t=bj(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return bj(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=bj(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return bj(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}UY.className="Cropping2D",Pw.registerClass(UY);class GY extends hK{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qq(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,zq(Kq,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return dN((()=>{let t=eK(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=jS(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?a$.resizeNearestNeighbor(t,[e,r]):a$.resizeBilinear(t,[e,r]);return jS(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?a$.resizeNearestNeighbor(t,[e,r]):a$.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}GY.className="UpSampling2D",Pw.registerClass(GY);class HY extends FY{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Zj(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=RK(e.depthwiseConstraint),this.depthwiseRegularizer=xY(e.depthwiseRegularizer)}build(e){if((e=tK(e)).length<4)throw new xq(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new xq(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return dN((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return dN((()=>{null==s&&(s="channelsLast"),Qq(s);let o=CY(e,s);if(4!==e.rank)throw new xq(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new xq(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=BN(o,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(o=jS(o,[0,3,1,2])),o}))}(e=eK(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Ej(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=tK(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=EY(t,this.kernelSize[0],this.padding,this.strides[0]),a=EY(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Yj(this.depthwiseInitializer),e.depthwiseRegularizer=yY(this.depthwiseRegularizer),e.depthwiseConstraint=AK(this.depthwiseRegularizer),e}}HY.className="DepthwiseConv2D",Pw.registerClass(HY);var qY={};function jY(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new xq("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function KY(e,t,n,r=!1,s,a,o=!1,i=!1){return dN((()=>{const u=t.shape.length;if(u<3)throw new xq(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(pj(2,u));if(t=jS(t,l),null!=a)throw new wq("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=Px(Px(s,"bool"),"float32")).rank===u-1&&(s=US(s,-1)),s=jS(s,l)),r&&(t=AN(t,0),null!=s&&(s=AN(s,0)));const c=[];let p,h=n;const d=t.shape[0],f=AS(t);let m,g;null!=s&&(m=AS(s));for(let t=0;t<d;++t){const n=f[t],r=dN((()=>e(n,h)));if(null==s)p=r[0],h=r[1];else{const e=dN((()=>{const e=m[t],n=wS(qT(e),e);return{output:FN($k(r[0],e),$k(h[0],n)),newStates:h.map(((t,s)=>FN($k(r[1][s],e),$k(t,n))))}}));p=e.output,h=e.newStates}i&&c.push(p)}if(i){g=CS(c,1)}return[p,g,h]}))}t(qY,"ConvLSTM2DCell",(()=>iZ),(e=>iZ=e)),t(qY,"ConvLSTM2D",(()=>uZ),(e=>uZ=e));class XY extends hK{constructor(e){let t;if(super(e),null==e.cell)throw new xq("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new rZ({cells:e.cell}):e.cell,null==t.stateSize)throw new xq("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new iK({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return pj(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Jj(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return dN((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new wq("Constants support is not implemented in RNN yet.");Jj(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new iK({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!by.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new xq(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new iK({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){dN((()=>{if(!this.stateful)throw new yq("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new xq("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>IN([n,e]))):this.states_=[IN([n,this.cell.stateSize])];else if(null==e)fN(this.states_),null!=this.keptStates&&(fN(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>IN([n,e]))):this.states_[0]=IN([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new xq(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):fN(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!by.arraysEqual(r.shape,a))throw new xq(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>mN(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=jY(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],o=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new iK({shape:e.shape}));o=o.concat(this.stateSpec)}null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof uK){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return dN((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=eK(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new xq(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},i=KY(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=i[0],l=i[1],c=i[2];this.stateful&&this.resetStates(c,r);const p=this.returnSequences?l:u;return this.returnState?[p].concat(c):p}))}getInitialState(e){return dN((()=>{let t=IN(e.shape);return t=Ok(t,[1,2]),t=mj(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?kj(t,[1,e]):t)):this.cell.stateSize>1?[kj(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===XY.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const r=HK(t.cell,n);return new e(Object.assign(t,{cell:r}))}}XY.className="RNN",Pw.registerClass(XY);class YY extends hK{}class ZY extends YY{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Pq(this.units,"units"),this.activation=hY(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Zj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=xY(e.kernelRegularizer),this.recurrentRegularizer=xY(e.recurrentRegularizer),this.biasRegularizer=xY(e.biasRegularizer),this.kernelConstraint=RK(e.kernelConstraint),this.recurrentConstraint=RK(e.recurrentConstraint),this.biasConstraint=RK(e.biasConstraint),this.dropout=lj([1,cj([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=lj([1,cj([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=tK(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return dN((()=>{if(2!==e.length)throw new xq(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sZ({ones:()=>qT(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sZ({ones:()=>qT(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;s=Nj(null!=a?$k(e,a):e,this.kernel.read()),null!=this.bias&&(s=Ej(s,this.bias.read())),null!=o&&(n=$k(n,o));let i=FN(s,Nj(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:cY(this.activation),useBias:this.useBias,kernelInitializer:Yj(this.kernelInitializer),recurrentInitializer:Yj(this.recurrentInitializer),biasInitializer:Yj(this.biasInitializer),kernelRegularizer:yY(this.kernelRegularizer),recurrentRegularizer:yY(this.recurrentRegularizer),biasRegularizer:yY(this.biasRegularizer),activityRegularizer:yY(this.activityRegularizer),kernelConstraint:AK(this.kernelConstraint),recurrentConstraint:AK(this.recurrentConstraint),biasConstraint:AK(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}ZY.className="SimpleRNNCell",Pw.registerClass(ZY);class JY extends XY{constructor(e){e.cell=new ZY(e),super(e)}call(e,t){return dN((()=>{null!=this.cell.dropoutMask&&(fN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(fN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}JY.className="SimpleRNN",Pw.registerClass(JY);class QY extends YY{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new xq("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Pq(this.units,"units"),this.activation=hY(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=hY(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Zj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=xY(e.kernelRegularizer),this.recurrentRegularizer=xY(e.recurrentRegularizer),this.biasRegularizer=xY(e.biasRegularizer),this.kernelConstraint=RK(e.kernelConstraint),this.recurrentConstraint=RK(e.recurrentConstraint),this.biasConstraint=RK(e.biasConstraint),this.dropout=lj([1,cj([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=lj([1,cj([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=tK(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return dN((()=>{if(2!==e.length)throw new xq(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sZ({ones:()=>qT(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sZ({ones:()=>qT(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let o,i,u;0<this.dropout&&this.dropout<1&&(e=$k(e,s[0]));let l=Nj(e,this.kernel.read());this.useBias&&(l=Ej(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=$k(r,a[0]));const c=this.recurrentKernel.read(),[p,h]=SN(c,[2*this.units,this.units],c.rank-1),d=Nj(r,p),[f,m,g]=SN(l,3,l.rank-1),[y,b]=SN(d,2,d.rank-1);o=this.recurrentActivation.apply(FN(f,y)),i=this.recurrentActivation.apply(FN(m,b));const x=Nj($k(i,r),h);u=this.activation.apply(FN(g,x));const w=FN($k(o,r),$k(FN(1,HS(o)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:cY(this.activation),recurrentActivation:cY(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Yj(this.kernelInitializer),recurrentInitializer:Yj(this.recurrentInitializer),biasInitializer:Yj(this.biasInitializer),kernelRegularizer:yY(this.kernelRegularizer),recurrentRegularizer:yY(this.recurrentRegularizer),biasRegularizer:yY(this.biasRegularizer),activityRegularizer:yY(this.activityRegularizer),kernelConstraint:AK(this.kernelConstraint),recurrentConstraint:AK(this.recurrentConstraint),biasConstraint:AK(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}QY.className="GRUCell",Pw.registerClass(QY);class eZ extends XY{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new QY(e),super(e)}call(e,t){return dN((()=>{null!=this.cell.dropoutMask&&(fN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(fN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}eZ.className="GRU",Pw.registerClass(eZ);class tZ extends YY{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Pq(this.units,"units"),this.activation=hY(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=hY(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Zj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=xY(e.kernelRegularizer),this.recurrentRegularizer=xY(e.recurrentRegularizer),this.biasRegularizer=xY(e.biasRegularizer),this.kernelConstraint=RK(e.kernelConstraint),this.recurrentConstraint=RK(e.recurrentConstraint),this.biasConstraint=RK(e.biasConstraint),this.dropout=lj([1,cj([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=lj([1,cj([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=tK(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends Rj{apply(t,r){const s=e.apply([n]),a=(new Fj).apply([n]),o=e.apply([2*n]);return wj(wj(s,a),o)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return dN((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new xq(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sZ({ones:()=>qT(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sZ({ones:()=>qT(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;let i,u,l,c;0<this.dropout&&this.dropout<1&&(e=$k(e,a[0]));let p=Nj(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=$k(r,o[0])),p=FN(p,Nj(r,this.recurrentKernel.read())),this.useBias&&(p=Ej(p,this.bias.read()));const[h,d,f,m]=SN(p,4,p.rank-1);i=this.recurrentActivation.apply(h),u=this.recurrentActivation.apply(d),l=FN($k(u,s),$k(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=$k(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:cY(this.activation),recurrentActivation:cY(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Yj(this.kernelInitializer),recurrentInitializer:Yj(this.recurrentInitializer),biasInitializer:Yj(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:yY(this.kernelRegularizer),recurrentRegularizer:yY(this.recurrentRegularizer),biasRegularizer:yY(this.biasRegularizer),activityRegularizer:yY(this.activityRegularizer),kernelConstraint:AK(this.kernelConstraint),recurrentConstraint:AK(this.recurrentConstraint),biasConstraint:AK(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}tZ.className="LSTMCell",Pw.registerClass(tZ);class nZ extends XY{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new tZ(e),super(e)}call(e,t){return dN((()=>{null!=this.cell.dropoutMask&&(fN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(fN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}nZ.className="LSTM",Pw.registerClass(nZ);class rZ extends YY{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return dN((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=r[o],a=0===o?[e[0]].concat(n):[a[0]].concat(n),a=i.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Jj(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{rj(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(HK(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return aK(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}oK(t)}}function sZ(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,o=()=>null!=a?a(t(),n):$j(t(),n),i=()=>Cj(o,t,r);if(!s||s<=1)return mN(i().clone());return Array(s).fill(void 0).map(i).map((e=>mN(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */rZ.className="StackedRNNCells",Pw.registerClass(rZ);var aZ=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class oZ extends XY{constructor(e){if(e.unroll)throw new wq("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new wq("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new iK({ndim:5})]}call(e,t){return dN((()=>{if(null!=this.cell.dropoutMask&&(fN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(fN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new xq("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return dN((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=IN([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){dN((()=>{if(!this.stateful)throw new yq("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new xq("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>IN(s))):this.states_=[IN(s)];else if(null==e)fN(this.states_),null!=this.keptStates&&(fN(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>IN(s))):this.states_[0]=IN(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new xq(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):fN(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!by.arraysEqual(n.shape,r))throw new xq(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>mN(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,u=e[i?3:2],l=e[i?4:3],c=EY(u,r[0],s,a[0],o[0]),p=EY(l,r[1],s,a[1],o[1]);return[...e.slice(0,2),...i?[n,c,p]:[c,p,n]]}}oZ.className="ConvRNN2D";class iZ extends tZ{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,Pq(this.filters,"filters"),this.kernelSize=TY(n,2,"kernelSize"),this.kernelSize.forEach((e=>Pq(e,"kernelSize"))),this.strides=TY(r||1,2,"strides"),this.strides.forEach((e=>Pq(e,"strides"))),this.padding=s||"valid",ej(this.padding),this.dataFormat=a||"channelsLast",Qq(this.dataFormat),this.dilationRate=TY(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>Pq(e,"dilationRate")))}build(e){var t;e=tK(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new xq(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Rj{apply(e,t){return xj([n.apply([r]),QS([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return dN((()=>{if(3!==e.length)throw new xq(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sZ({ones:()=>qT(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?$k(t[n],e):e;let u=i(r,o,0),l=i(r,o,1),c=i(r,o,2),p=i(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sZ({ones:()=>qT(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const h=this.recurrentDropoutMask;let d=i(s,h,0),f=i(s,h,1),m=i(s,h,2),g=i(s,h,3);const[y,b,x,w]=SN(this.kernel.read(),4,3),[k,v,N,S]=this.useBias?SN(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,k,this.padding),l=this.inputConv(l,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),p=this.inputConv(p,w,S,this.padding);const[I,T,E,$]=SN(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,I),f=this.recurrentConv(f,T),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const C=this.recurrentActivation.apply(FN(u,d)),A=this.recurrentActivation.apply(FN(l,f)),_=FN($k(A,a),$k(C,this.activation.apply(FN(c,m)))),R=$k(this.recurrentActivation.apply(FN(p,g)),this.activation.apply(_));return[R,R,_]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=aZ(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),r)}inputConv(e,t,n,r){const s=ON(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Ej(s,n,this.dataFormat):s}recurrentConv(e,t){return ON(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}iZ.className="ConvLSTM2DCell",Pw.registerClass(iZ);class uZ extends oZ{constructor(e){const t=new iZ(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}uZ.className="ConvLSTM2D",Pw.registerClass(uZ);class lZ extends hK{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return dN((()=>{this.invokeCallHook(e,t);const n=eK(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Cj((()=>$j(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}lZ.className="Dropout",Pw.registerClass(lZ);class cZ extends lZ{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}cZ.className="SpatialDropout1D",Pw.registerClass(cZ);class pZ extends hK{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Pq(this.units,"units"),this.activation=hY(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Zj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Zj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=RK(e.kernelConstraint),this.biasConstraint=RK(e.biasConstraint),this.kernelRegularizer=xY(e.kernelRegularizer),this.biasRegularizer=xY(e.biasRegularizer),this.activityRegularizer=xY(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=tK(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=tK(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return dN((()=>{this.invokeCallHook(e,t);const n=eK(e),r=Vq(this.activation.getClassName());let s;return null!=r?s=Nj(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Nj(n,this.kernel.read()),null!=this.bias&&(s=Ej(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:cY(this.activation),useBias:this.useBias,kernelInitializer:Yj(this.kernelInitializer),biasInitializer:Yj(this.biasInitializer),kernelRegularizer:yY(this.kernelRegularizer),biasRegularizer:yY(this.biasRegularizer),activityRegularizer:yY(this.activityRegularizer),kernelConstraint:AK(this.kernelConstraint),biasConstraint:AK(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}pZ.className="Dense",Pw.registerClass(pZ);class hZ extends hK{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=tK(e);for(const t of e.slice(1))if(null==t)throw new xq(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],uj(e,1)]}call(e,t){return dN((()=>{this.invokeCallHook(e,t);let n=eK(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=jS(n,e)}return function(e){if(e.rank<=1)throw new xq(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],uj(e.shape,1)];return Rk(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}hZ.className="Flatten",Pw.registerClass(hZ);class dZ extends hK{constructor(e){super(e),this.supportsMasking=!0,this.activation=hY(e.activation)}call(e,t){return dN((()=>{this.invokeCallHook(e,t);const n=eK(e);return this.activation.apply(n)}))}getConfig(){const e={activation:cY(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}dZ.className="Activation",Pw.registerClass(dZ);class fZ extends hK{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return dN((()=>{return e=eK(e),t=e,n=this.n,dN((()=>{if(2!==t.shape.length)throw new xq(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return kj(mj(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}fZ.className="RepeatVector",Pw.registerClass(fZ);class mZ extends hK{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new xq("Can only specifiy one unknown dimension.");a=e}else s*=t}const o=uj(e);if(null!==a){if(0===s||o%s!=0)throw new xq(n);r[a]=o/s}else if(o!==s)throw new xq(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return dN((()=>{this.invokeCallHook(e,t);const n=eK(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return Rk(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}mZ.className="Reshape",Pw.registerClass(mZ);class gZ extends hK{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=pj(1,e.dims.length+1);if(!by.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new iK({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=tK(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return jS(eK(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}gZ.className="Permute",Pw.registerClass(gZ);class yZ extends hK{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=eK(e);return TI(JS(n,this.maskValue),-1)}call(e,t){return dN((()=>{this.invokeCallHook(e,t);const n=eK(e),r=TI(JS(n,this.maskValue),-1,!0);return $k(n,Px(r,n.dtype))}))}}yZ.className="Masking",Pw.registerClass(yZ);class bZ extends hK{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat($q(e.inputLength))}this.inputDim=e.inputDim,Pq(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Pq(this.outputDim,"outputDim"),this.embeddingsInitializer=Zj(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=xY(e.embeddingsRegularizer),this.activityRegularizer=xY(e.activityRegularizer),this.embeddingsConstraint=RK(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return dN((()=>this.maskZero?(e=eK(e),JS(e,TN(e))):null))}computeOutputShape(e){if(e=tK(e),null==this.inputLength)return[...e,this.outputDim];const t=$q(this.inputLength);if(t.length!==e.length-1)throw new xq(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new xq(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return dN((()=>{this.invokeCallHook(e,t);let n=eK(e);"int32"!==n.dtype&&(n=fj(n,"int32"));const r=Sj(this.embeddings.read(),Rk(n,[n.size]));return Rk(r,tK(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Yj(this.embeddingsInitializer),embeddingsRegularizer:yY(this.embeddingsRegularizer),activityRegularizer:yY(this.activityRegularizer),embeddingsConstraint:AK(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}bZ.className="Embedding",Pw.registerClass(bZ);class xZ extends hK{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new wq}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new xq("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[tK(e)]),e.length<2)throw new xq(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Mq(t),t.length>1)throw new xq(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===Mq(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return dN((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=cj(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=mj(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let o=Rk(r,[s].concat(uj(e.slice(1))));o=jS(o,[1,0]),o=Rk(o,a),t.push(o),n=!0}else if(e>1){const s=pj(1,e).concat([0]);t.push(jS(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=Rk(jS(Rk(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(pj(0,s-1));r=jS(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Mq(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return dN((()=>{if(null==t)return null;if(!Array.isArray(t))throw new xq("`mask` should be an Array");if(!Array.isArray(e))throw new xq("`inputs` should be an Array");if(t.length!==e.length)throw new xq(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:US(e,0))))[0];for(let e=1;e<t.length-1;++e)n=$S(n,t[e]);return n}))}}class wZ extends xZ{constructor(e){super(e)}mergeFunction(e){return dN((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=FN(t,e[n]);return t}))}}wZ.className="Add",Pw.registerClass(wZ);class kZ extends xZ{constructor(e){super(e)}mergeFunction(e){return dN((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=$k(t,e[n]);return t}))}}kZ.className="Multiply",Pw.registerClass(kZ);class vZ extends xZ{constructor(e){super(e)}mergeFunction(e){return dN((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=FN(t,e[n]);return $k(1/e.length,t)}))}}vZ.className="Average",Pw.registerClass(vZ);class NZ extends xZ{constructor(e){super(e)}mergeFunction(e){return dN((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=zT(t,e[n]);return t}))}}NZ.className="Maximum",Pw.registerClass(NZ);class SZ extends xZ{constructor(e){super(e)}mergeFunction(e){return dN((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=sI(t,e[n]);return t}))}}SZ.className="Minimum",Pw.registerClass(SZ);class IZ extends xZ{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new xq("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(by.arraysEqual(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new xq("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return dN((()=>xj(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new xq("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new xq("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new xq("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new xq(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return dN((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(Px(qT(e[n]),"bool")):t[n].rank<e[n].rank?r.push(US(t[n],-1)):r.push(t[n]);const s=wN(r,this.axis);return II(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function TZ(e,t){for(;e<0;)e+=t;return e}IZ.className="Concatenate",Pw.registerClass(IZ);class EZ extends xZ{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){by.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new wq("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new xq(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new xq(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>TZ(t,e[n].shape.length))):[TZ(this.axes,n.shape.length),TZ(this.axes,r.shape.length)],this.normalize&&(n=qK(n,t[0]),r=qK(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new wq("batchDot is not implemented for tensors of 4D or higher rank yet");if(by.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),by.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new wq("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return dN((()=>{let n,o;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=Rk(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=Rk(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?Ok($k(e,t),a[0]):Ok($k(jS(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;o=UN(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);o=WS(o,t)}return 1===o.shape.length&&(o=US(o,1)),o}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[TZ(this.axes,e.length),TZ(this.axes,t.length)],n}computeOutputShape(e){by.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new wq("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}EZ.className="Dot",Pw.registerClass(EZ);class $Z extends hK{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return dN((()=>{this.invokeCallHook(e,t);const n=eK(e);return Cj((()=>FN(vj(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}$Z.className="GaussianNoise",Pw.registerClass($Z);class CZ extends hK{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return dN((()=>{this.invokeCallHook(e,t);const n=eK(e);if(this.rate>0&&this.rate<1){return Cj((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return $k(n,vj(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}CZ.className="GaussianDropout",Pw.registerClass(CZ);class AZ extends hK{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||eK(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return dN((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Cj((()=>{const t=eK(e),r=-1.7580993408473766;let s=ES(hE(n),this.rate);s=fj(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-a*r*this.rate,i=FN($k(t,s),$k(FN(s,-1),r));return FN($k(i,a),o)}),(()=>eK(e)),t.training||!1)}return e}))}}function _Z(e,t,n,r,s,a=.001){let o;if(2===e.rank)o=WI(e,t,n,r,s,a);else if(3===e.rank)o=VI(e,t,n,r,s,a);else{if(4!==e.rank)throw new wq(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=UI(e,t,n,r,s,a)}return o}function RZ(e,t,n,r,s=.001){return by.arraysEqual(r.slice().sort(),pj(0,e.rank-1))?function(e,t,n,r,s=.001){return dN((()=>{const a=VT(e,r),o=a.mean,i=a.variance;return[_Z(e,o,i,n,t,s),o,i]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return dN((()=>{const a=VT(e,r),o=a.mean,i=a.variance,u=[];for(const t of pj(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=Rk(o,u),c=Rk(i,u),p=null==t?null:Rk(t,u),h=null==n?null:Rk(n,u);return[_Z(e,l,c,h,p,s),o,i]}))}(e,t,n,r,s)}AZ.className="AlphaDropout",Pw.registerClass(AZ);class DZ extends hK{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Zj(e.betaInitializer||"zeros"),this.gammaInitializer=Zj(e.gammaInitializer||"ones"),this.movingMeanInitializer=Zj(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Zj(e.movingVarianceInitializer||"ones"),this.betaConstraint=RK(e.betaConstraint),this.gammaConstraint=RK(e.gammaConstraint),this.betaRegularizer=xY(e.betaRegularizer),this.gammaRegularizer=xY(e.gammaRegularizer)}build(e){e=tK(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new xq(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new iK({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return dN((()=>{const n=null!=t.training&&t.training,r=eK(e),s=r.shape,a=s.length,o=pj(0,a),i=this.axis>=0?this.axis:this.axis+a;o.splice(i,1);const u=Sq(1,a);u[i]=s[i];const l=o.slice();l.sort();const c=!by.arraysEqual(l,pj(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Rk(this.movingMean.read(),u),t=Rk(this.movingVariance.read(),u),n=this.center?Rk(this.beta.read(),u):null,s=this.scale?Rk(this.gamma.read(),u):null;return _Z(r,e,t,n,s,this.epsilon)}return _Z(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,h,d]=RZ(r,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{dN((()=>{const r=1-n,s=e.read(),a=$k(wS(s,t),r);e.write(wS(s,a))}))};return(()=>{f(this.movingMean,h,this.momentum),f(this.movingVariance,d,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Yj(this.betaInitializer),gammaInitializer:Yj(this.gammaInitializer),movingMeanInitializer:Yj(this.movingMeanInitializer),movingVarianceInitializer:Yj(this.movingVarianceInitializer),betaRegularizer:yY(this.betaRegularizer),gammaRegularizer:yY(this.gammaRegularizer),betaConstraint:AK(this.betaConstraint),gammaConstraint:AK(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}DZ.className="BatchNormalization",Pw.registerClass(DZ);class FZ extends hK{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Zj(e.betaInitializer||"zeros"),this.gammaInitializer=Zj(e.gammaInitializer||"ones"),this.betaRegularizer=xY(e.betaRegularizer),this.gammaRegularizer=xY(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=tK(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Mq(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=eK(e),r=n.shape,s=r.length;return dN((()=>{let{mean:e,variance:t}=VT(n,this.axis,!0);const a=Sq(1,s);for(const e of this.axis)a[e]=r[e];const o=e=>null!=e&&e.shape.length!==s?Rk(e,a):e;let i=this.scale?o(this.gamma.read()):null,u=this.center?o(this.beta.read()):null;const l=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(l.push(r[e]),c.push(1)):(l.push(1),c.push(r[e]));return e=rS(e,l),t=rS(t,l),null!=i&&(i=rS(i,c)),null!=u&&(u=rS(u,c)),_Z(n,e,t,u,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Yj(this.betaInitializer),gammaInitializer:Yj(this.gammaInitializer),betaRegularizer:yY(this.betaRegularizer),gammaRegularizer:yY(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}FZ.className="LayerNormalization",Pw.registerClass(FZ);class OZ extends hK{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new xq(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new xq(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new xq(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new iK({ndim:4})]}computeOutputShape(e){let t,n;return e=tK(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return dN((()=>{return t=eK(e),n=this.padding,r=this.dataFormat,dN((()=>{if(4!==t.rank)throw new xq(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new xq("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new xq(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],KT(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function MZ(e,t,n,r,s,a){return dN((()=>{let o;Qq(s),tj(a),ej(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=CY(e,s);const i="same"===r?"same":"valid";return o="max"===a?OT(e,t,n,i):FI(e,t,n,i),"channelsFirst"===s&&(o=jS(o,[0,3,1,2])),o}))}function LZ(e,t,n,r,s,a){return dN((()=>{let o;Qq(s),tj(a),ej(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=AY(e,s);const i="same"===r?"same":"valid";return o="max"===a?MT(e,t,n,i):OI(e,t,n,i),"channelsFirst"===s&&(o=jS(o,[0,4,1,2,3])),o}))}OZ.className="ZeroPadding2D",Pw.registerClass(OZ);class zZ extends hK{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new xq(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Pq(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new xq(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Pq(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,ej(this.padding),this.inputSpec=[new iK({ndim:3})]}computeOutputShape(e){const t=EY((e=tK(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return dN((()=>{this.invokeCallHook(e,t),e=mj(eK(e),2);const n=this.poolingFunction(eK(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return WS(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class BZ extends zZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qq(s),ej(r),MZ(e,t,n,r,s,"max")}}BZ.className="MaxPooling1D",Pw.registerClass(BZ);class PZ extends zZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qq(s),ej(r),MZ(e,t,n,r,s,"avg")}}PZ.className="AveragePooling1D",Pw.registerClass(PZ);class WZ extends hK{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new xq(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Pq(this.poolSize,"poolSize"),Pq(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qq(this.dataFormat),ej(this.padding),this.inputSpec=[new iK({ndim:4})]}computeOutputShape(e){e=tK(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=EY(t,this.poolSize[0],this.padding,this.strides[0]),n=EY(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return dN((()=>(this.invokeCallHook(e,t),this.poolingFunction(eK(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class VZ extends WZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qq(s),ej(r),MZ(e,t,n,r,s,"max")}}VZ.className="MaxPooling2D",Pw.registerClass(VZ);class UZ extends WZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qq(s),ej(r),MZ(e,t,n,r,s,"avg")}}UZ.className="AveragePooling2D",Pw.registerClass(UZ);class GZ extends hK{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new xq(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Pq(this.poolSize,"poolSize"),Pq(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qq(this.dataFormat),ej(this.padding),this.inputSpec=[new iK({ndim:5})]}computeOutputShape(e){e=tK(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=EY(t,this.poolSize[0],this.padding,this.strides[0]),n=EY(n,this.poolSize[1],this.padding,this.strides[1]),r=EY(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return dN((()=>(this.invokeCallHook(e,t),this.poolingFunction(eK(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class HZ extends GZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qq(s),ej(r),LZ(e,t,n,r,s,"max")}}HZ.className="MaxPooling3D",Pw.registerClass(HZ);class qZ extends GZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qq(s),ej(r),LZ(e,t,n,r,s,"avg")}}qZ.className="AveragePooling3D",Pw.registerClass(qZ);class jZ extends hK{constructor(e){super(e),this.inputSpec=[new iK({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new wq}}class KZ extends jZ{constructor(e){super(e||{})}call(e,t){return dN((()=>{const t=eK(e);return ZS(t,1)}))}}KZ.className="GlobalAveragePooling1D",Pw.registerClass(KZ);class XZ extends jZ{constructor(e){super(e||{})}call(e,t){return dN((()=>{const t=eK(e);return FS(t,1)}))}}XZ.className="GlobalMaxPooling1D",Pw.registerClass(XZ);class YZ extends hK{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qq(this.dataFormat),this.inputSpec=[new iK({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new wq}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class ZZ extends YZ{call(e,t){return dN((()=>{const t=eK(e);return"channelsLast"===this.dataFormat?ZS(t,[1,2]):ZS(t,[2,3])}))}}ZZ.className="GlobalAveragePooling2D",Pw.registerClass(ZZ);class JZ extends YZ{call(e,t){return dN((()=>{const t=eK(e);return"channelsLast"===this.dataFormat?FS(t,[1,2]):FS(t,[2,3])}))}}JZ.className="GlobalMaxPooling2D",Pw.registerClass(JZ);class QZ extends hK{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=HK(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class eJ extends QZ{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=tK(e)).length<3)throw new xq(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=tK(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return dN((()=>KY(((e,n)=>[eK(this.layer.call(e,t)),[]]),e=eK(e),[],!1,null,null,!1,!0)[1]))}}eJ.className="TimeDistributed",Pw.registerClass(eJ);class tJ extends QZ{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=HK(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=HK(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,zq(Zq,"BidirectionalMergeMode",s),e.weights)throw new wq("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):Eq(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=jY(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new xq("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new iK({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),o.push(...r)}if(null!=r)throw new wq("Support for constants in Bidirectional layers is not implemented yet.");const i=a[0]instanceof uK;for(const e of a)if(e instanceof uK!==i)throw new xq("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return dN((()=>{const n=t.initialState;let r,s,a,o;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=AN(s,1)),"concat"===this.mergeMode?o=xj([r,s]):"sum"===this.mergeMode?o=FN(r,s):"ave"===this.mergeMode?o=$k(.5,FN(r,s)):"mul"===this.mergeMode?o=$k(r,s):null==this.mergeMode&&(o=[r,s]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){rj(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),rj(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=HK(t.layer);if(delete t.layer,null!=t.numConstants)throw new wq("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}tJ.className="Bidirectional",Pw.registerClass(tJ);class nJ extends hK{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return dN((()=>("float32"!==(e=eK(e)).dtype&&(e=fj(e,"float32")),FN($k(e,this.scale),this.offset))))}}nJ.className="Rescaling",Pw.registerClass(nJ);const rJ=new Set(["bilinear","nearest"]);class sJ extends hK{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!rJ.has(e.interpolation))throw new xq(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=tK(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return dN((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return a$.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return a$.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...rJ]} are supported`)}))}}sJ.className="Resizing",Pw.registerClass(sJ);class aJ extends hK{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=tK(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return dN((()=>{let n;if("int32"!==(e=eK(e)).dtype&&(e=fj(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new xq(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=eK(t.countWeights)}const r=FS(e),s=OS(e),a=yS(this.numTokens,r).bufferSync().get(0),o=ES(s,0).bufferSync().get(0);if(!a||!o)throw new xq(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,r){let s=eK(e);if("int32"!==s.dtype&&(s=fj(s,"int32")),"int"===t)return s;const a=s.shape;if(0===s.rank&&(s=US(s,-1)),"oneHot"===t&&1!==s.shape[s.shape.length-1]&&(s=US(s,-1)),s.rank>2)throw new xq(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${s.rank}.`);const o=["multiHot","oneHot"].includes(t);let i;if(i=oT(s,void 0!==r&&"count"===t?r:[],n,o),"tfIdf"!==t)return i;if(r)return $k(i,r);throw new xq("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}aJ.className="CategoryEncoding",Pw.registerClass(aJ);var oJ,iJ;Kd().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(oJ||(oJ={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(iJ||(iJ={}));var uJ={};t(uJ,"json",(()=>lJ));const lJ=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var cJ={};t(cJ,"json",(()=>pJ));const pJ=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var hJ={};t(hJ,"json",(()=>dJ));const dJ=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var fJ={};t(fJ,"json",(()=>mJ));const mJ=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var gJ={};t(gJ,"json",(()=>yJ));const yJ=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var bJ={};t(bJ,"json",(()=>xJ));const xJ=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var wJ={};t(wJ,"json",(()=>kJ));const kJ=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var vJ={};t(vJ,"json",(()=>NJ));const NJ=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var SJ={};t(SJ,"json",(()=>IJ));const IJ=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var TJ={};t(TJ,"json",(()=>EJ));const EJ=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var $J={};t($J,"json",(()=>CJ));const CJ=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var AJ={};t(AJ,"json",(()=>_J));const _J=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var RJ={};t(RJ,"json",(()=>DJ));const DJ=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var FJ={};t(FJ,"json",(()=>OJ));const OJ=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var MJ={};t(MJ,"json",(()=>LJ));const LJ=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var zJ={};t(zJ,"json",(()=>BJ));const BJ=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var PJ={};t(PJ,"json",(()=>WJ));const WJ=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var VJ={};t(VJ,"json",(()=>UJ));const UJ=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var GJ={};t(GJ,"json",(()=>HJ));const HJ=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var qJ={};n(qJ,xN);i=class{constructor(e,t=.5){this.list_sentences=e,this.threshold=t,this.analyzing_text=!1,this.groups=[]}setSentences(e){this.list_sentences=e}getSentences(){return this.sentences}setThreshold(e){this.threshold}getThreshold(){return this.threshold}getGroups(){return this.groups}get_embeddings(e){(function(e){return Mh(this,void 0,void 0,(function(){var t;return Lh(this,(function(n){switch(n.label){case 0:return[4,(t=new qh).load(e)];case 1:return n.sent(),[2,t]}}))}))})().then((t=>{t.embed(this.list_sentences).then((t=>{e(t)}))}))}dot(e,t){var n=Object.prototype.hasOwnProperty,r=0;for(var s in e)n.call(e,s)&&n.call(t,s)&&(r+=e[s]*t[s]);return r}similarity(e,t){var n=Math.sqrt(this.dot(e,e)),r=Math.sqrt(this.dot(t,t));return!(!n||!r)&&this.dot(e,t)/(n*r)}cosine_similarity_matrix(e){let t=[];for(let n=0;n<e.length;n++){let r=[];for(let e=0;e<n;e++)r.push(t[e][n]);r.push(1);for(let t=n+1;t<e.length;t++)r.push(this.similarity(e[n],e[t]));t.push(r)}return t}async form_groups(e,t){let n={},r=[];for(let t=0;t<e.length;t++){var s=e[t];for(let a=t;a<s.length;a++)if(t!=a){if(e[t][a]>this.threshold){let e;t in n?e=n[t]:(e=r.length,n[t]=e),a in n||(n[a]=e),r.length<=e&&r.push([]),r[e].push(t),r[e].push(a)}}}let a=[];for(var o in r)a.push(Array.from(new Set(r[o])));return console.log(a),await t.createChromeGroups(r),await t.updateLogData(r.length,this.threshold),a}async get_similarity(e){this.get_embeddings(async function(t){let n=this.cosine_similarity_matrix(t.arraySync()),r=this.form_groups(n,e);this.groups=r,window.close()}.bind(this))}optimizeGroups(){}},document.getElementById("autoGroupBtn").addEventListener("click",(async function(){!function(){let e=document.getElementById("onOpen"),t=document.getElementById("onLoading");e.setAttribute("style","display: none"),t.setAttribute("style","display: block; width: 100%; height: 100%")}();let e=new o;await e.queryTabs();let t=e.getAllTabs(),n=document.getElementById("threshold").value;(isNaN(n)||n>1||n<0)&&(n=.5),console.log(n),new i(t,n).get_similarity(e)}))})();
//# sourceMappingURL=popup.js.map
