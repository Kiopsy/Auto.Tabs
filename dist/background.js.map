{"mappings":"CAIoB,ICApB,MAGEA,cACEC,KAAKC,QAAU,GACfD,KAAKE,WAAa,GAClBF,KAAKG,KAAO,GACZH,KAAKI,QAAU,GACfJ,KAAKK,OAAS,GAEdL,KAAKM,EAAIN,KAAKO,GAAKP,KAAKQ,EAAI,C,CAG9BC,aACE,OAAOT,KAAKI,O,CAGdM,kBAAkB,CAIlBC,iBACEX,KAAKG,KAAKS,MAAK,SAAUC,EAAGC,GAC1B,OAAOD,EAAEE,cAAcC,cAAcF,EAAEC,c,IAGzC,IAAK,IAAIE,EAAI,EAAGA,EAAEjB,KAAKG,KAAKe,OAAQD,IAClCE,OAAOC,KAAKC,KAAKrB,KAAKE,WAAWF,KAAKG,KAAKc,IAAK,CAAEK,MAAO,IAAOL,IAChEjB,KAAKE,WAAWF,KAAKG,KAAKc,IAAMA,C,CAKpCN,kBAEE,IACIS,QAAaD,OAAOC,KAAKG,MADV,CAAEC,eAAe,EAAMC,SAAS,IAEnDC,QAAQC,IAAIP,GACZ,IAAIQ,EAAe,GAEnBR,EAAKS,SAAQC,IACR9B,KAAKC,QAAQ6B,EAAIC,OAClBH,EAAaI,KAAKF,EAAIG,KAEtBjC,KAAKI,QAAQ4B,KAAKF,EAAIC,OACtB/B,KAAKG,KAAK6B,KAAKF,EAAII,KACnBlC,KAAKK,OAAO2B,KAAKF,EAAIG,IACrBjC,KAAKE,WAAW4B,EAAII,KAAOJ,EAAIG,GAC/BjC,KAAKC,QAAQ6B,EAAIC,OAASD,EAAIG,G,IASpCtB,iBAAiBN,GACfA,EAAOwB,SAAQI,IACbd,OAAOC,KAAKe,OAAOF,EAAG,G,CAK1BtB,yBAAyByB,GACvB,IACIC,EAEJrC,KAAKsC,WAELnB,OAAOoB,QAAQC,YAAW,SAAUC,GAClCJ,EAAQI,EAAIR,E,IAGd,IAAK,IAAIhB,KAAKmB,EAAQ,CACpBV,QAAQC,IAAI,SAAWV,GACvB,IAAIZ,EAAS,GAGb,IAAK,IAAIqC,KAAKN,EAAOnB,GACnBZ,EAAO2B,KAAKhC,KAAKC,QAAQD,KAAKI,QAAQgC,EAAOnB,GAAGyB,MAChDhB,QAAQC,IAAIS,EAAOnB,GAAGyB,GAAI1C,KAAKI,QAAQgC,EAAOnB,GAAGyB,KAGnDhB,QAAQC,IAAI,2BAEUR,OAAOC,KAAKuB,MAAM,CAAEC,iBAAkB,CAAEC,SAAUR,GAAShC,OAAQA,G,EAK7FM,oBAAoBmC,EAAaC,GAG/B,IACIvC,QAAUW,OAAOC,KAAKG,MADP,CAAEC,eAAe,IAGhClB,EAAI,IAAI0C,IACZxC,EAAEqB,SAAQC,KACW,GAAfA,EAAIL,SACNnB,EAAE2C,IAAInB,EAAIL,QAAQ,IAItB,IAAIL,EAAOZ,EAAEU,OACTkB,EAAS9B,EAAE4C,KAAOJ,EAElBK,EAAgBnD,KAAKI,QAAQc,OAE7BkC,GAAO,IAAIC,MAAOC,oBAGhBnC,OAAOoC,QAAQC,KAAKC,IAAI,CAAC,QAAQ,SAAUC,GAG/C,IAAIC,EAAOD,EAAO/B,IAAM+B,EAAO/B,IAAM,GAErCD,QAAQC,IAAI+B,GACZhC,QAAQC,IAAIgC,GAGZ,IAAIC,EAAU,CACZR,KAAMA,EACNhB,OAAQA,EACRyB,SAAUzC,EACV2B,UAAWA,EACXI,cAAeA,GAGjBQ,EAAK3B,KAAK4B,GACVzC,OAAOoC,QAAQC,KAAKM,IAAI,CAAEnC,IAAOgC,IAAQ,WACvCjC,QAAQC,IAAI,Q,OAMlBhB,yBACQQ,OAAOoC,QAAQC,KAAKC,IAAI,CAAC,QAAQ,SAAUC,GAE/C,IAAIC,EAAOD,EAAO/B,IAClBD,QAAQC,IAAIgC,E,OD5IJI","sources":["src/background.js","src/chrome_manager.js"],"sourcesContent":["// background service worker\r\nconst ChromeManager = require('./chrome_manager.js');\r\n\r\n// Retrieve all the log data from Chrome\r\nlet chromeManager = new ChromeManager();\r\nchromeManager.getLogData();","var list_sentences = [];\r\nvar tabDict = {}\r\n\r\n// Class that works with Chrome APIs\r\nclass ChromeManager {\r\n\r\n  // Instantiates the manager with the tabs currently open\r\n  constructor() {\r\n    this.tabDict = {}; // list of tab from chrome\r\n    this.tabUrlDict = {};\r\n    this.urls = [];\r\n    this.allTabs = []; // list of all tab titles\r\n    this.tabIds = [];\r\n\r\n    this.g = this.ut = this.t = 0;\r\n  }\r\n\r\n  getAllTabs() {\r\n    return this.allTabs;\r\n  }\r\n\r\n  getNonGroupTabs() {\r\n\r\n  }\r\n\r\n  async sortTabs() {\r\n    this.urls.sort(function (a, b) {\r\n      return a.toLowerCase().localeCompare(b.toLowerCase());\r\n    });\r\n\r\n    for (let i = 0; i<this.urls.length; i++) {\r\n      chrome.tabs.move(this.tabUrlDict[this.urls[i]], { index: 1000 + i });\r\n      this.tabUrlDict[this.urls[i]] = i\r\n    }\r\n  }\r\n\r\n  // Queries Chrome for opened tabs\r\n  async queryTabs() {\r\n\r\n    let queryOptions = { currentWindow: true, groupId: -1 };\r\n    let tabs = await chrome.tabs.query(queryOptions);\r\n    console.log(tabs);\r\n    let tabsToRemove = []\r\n    // close duplicate tabs here\r\n    tabs.forEach(tab => {\r\n      if(this.tabDict[tab.title]) {\r\n        tabsToRemove.push(tab.id);\r\n      } else {\r\n        this.allTabs.push(tab.title);\r\n        this.urls.push(tab.url);\r\n        this.tabIds.push(tab.id);\r\n        this.tabUrlDict[tab.url] = tab.id;\r\n        this.tabDict[tab.title] = tab.id;\r\n      }\r\n    });\r\n\r\n    //this.removeTabs(tabsToRemove);\r\n    // this.sortTabs();\r\n  }\r\n\r\n\r\n  async removeTabs(tabIds) {\r\n    tabIds.forEach(id => {\r\n      chrome.tabs.remove(id);\r\n    });\r\n  }\r\n\r\n  // Function to create Chrome tab groups based on groups from SentenceModel\r\n  async createChromeGroups(groups) {\r\n    var createData = { type: \"normal\", state: \"maximized\" };\r\n    var winId;\r\n\r\n    this.sortTabs();\r\n\r\n    chrome.windows.getCurrent(function (win) {\r\n      winId = win.id;\r\n    });\r\n\r\n    for (let i in groups) {\r\n      console.log(\"Group:\" + i);\r\n      let tabIds = [];\r\n\r\n      // Find all the tab ids within a group\r\n      for (let j in groups[i]) {\r\n        tabIds.push(this.tabDict[this.allTabs[groups[i][j]]]);\r\n        console.log(groups[i][j], this.allTabs[groups[i][j]])\r\n      }\r\n\r\n      console.log(\"Creating groups..\");\r\n\r\n      const groupId = await chrome.tabs.group({ createProperties: { windowId: winId }, tabIds: tabIds });\r\n    }\r\n  }\r\n  \r\n  // Updating log data using Chrome storage API for user study purposes\r\n  async updateLogData(groupLength, threshold) {\r\n\r\n    // Getting number of groups, opened tabs, unopened tabs\r\n    let queryOptions = { currentWindow: true };\r\n    let t = await chrome.tabs.query(queryOptions);\r\n\r\n    let g = new Set();\r\n    t.forEach(tab => {\r\n      if (tab.groupId != -1) {\r\n        g.add(tab.groupId);\r\n      }\r\n    })\r\n\r\n    let tabs = t.length;\r\n    let groups = g.size - groupLength;\r\n\r\n    let ungroupedTabs = this.allTabs.length;\r\n\r\n    let date = new Date().toUTCString();\r\n    // let dateString = date.toJSON().slice(0, 10);\r\n\r\n    await chrome.storage.sync.get(['log'], function (result) {\r\n\r\n      // result is a list of structs\r\n      let data = result.log ? result.log : [];\r\n\r\n      console.log(result);\r\n      console.log(data);\r\n\r\n      // Sets log data based on date accessed, and number of tabs open\r\n      let logData = {\r\n        date: date,\r\n        groups: groups,\r\n        tabsOpen: tabs,\r\n        threshold: threshold,\r\n        ungroupedTabs: ungroupedTabs,\r\n      };\r\n\r\n      data.push(logData);\r\n      chrome.storage.sync.set({ 'log': data }, function () {\r\n        console.log('saved');\r\n      });\r\n    });\r\n  }\r\n\r\n  // gets all log data stored in Chrome's sync storage\r\n  async getLogData() {\r\n    await chrome.storage.sync.get(['log'], function (result) {\r\n      // result is a list of structs\r\n      let data = result.log;\r\n      console.log(data);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = ChromeManager;\r\n"],"names":["constructor","this","tabDict","tabUrlDict","urls","allTabs","tabIds","g","ut","t","getAllTabs","getNonGroupTabs","async","sort","a","b","toLowerCase","localeCompare","i","length","chrome","tabs","move","index","query","currentWindow","groupId","console","log","tabsToRemove","forEach","tab","title","push","id","url","remove","groups","winId","sortTabs","windows","getCurrent","win","j","group","createProperties","windowId","groupLength","threshold","Set","add","size","ungroupedTabs","date","Date","toUTCString","storage","sync","get","result","data","logData","tabsOpen","set","getLogData"],"version":3,"file":"background.js.map"}