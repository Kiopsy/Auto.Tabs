{"mappings":"CAIoB,ICApB,MAGEA,cACEC,KAAKC,QAAU,GACfD,KAAKE,UAAY,E,CAGnBC,UACE,OAAOH,KAAKE,S,CAIdE,yBAEmBC,OAAOC,KAAKC,MADV,CAAEC,eAAe,KAK/BC,SAAQC,IACXV,KAAKE,UAAUS,KAAKD,EAAIE,OACxBZ,KAAKC,QAAQS,EAAIE,OAASF,EAAIG,EAAE,G,CAKpCT,yBAAyBU,GACvB,IACIC,EAEJV,OAAOW,QAAQC,YAAW,SAAUC,GAClCH,EAAQG,EAAIL,E,IAGd,IAAI,IAAIM,KAAKL,EAAQ,CACnBM,QAAQC,IAAI,SAAWF,GACvB,IAAIG,EAAQ,GAGZ,IAAI,IAAIC,KAAKT,EAAOK,GAClBG,EAAOX,KAAKX,KAAKC,QAAQD,KAAKE,UAAUY,EAAOK,GAAGI,MAClDH,QAAQC,IAAIP,EAAOK,GAAGI,GAAIvB,KAAKE,UAAUY,EAAOK,GAAGI,KAGrDH,QAAQC,IAAI,2BAEUhB,OAAOC,KAAKkB,MAAM,CAACC,iBAAkB,CAACC,SAAUX,GAAQO,OAAQA,G,EAK1FlB,sBAEE,IAAIuB,EAAO,IAAIC,KACXC,EAAaF,EAAKG,SAASC,MAAM,EAAG,UAElC1B,OAAO2B,QAAQC,KAAKC,IAAI,CAAC,QAAQ,SAASC,GAG5C,IAAIC,EAAOD,EAAOd,IAElBD,QAAQC,IAAIc,GACZf,QAAQC,IAAIe,GAGZ,IAAIC,EAAU,CACZV,KAAME,EACNS,SAAUtC,KAAKE,UAAUqC,OACzBC,KAAMb,EAAKc,WAAa,IAAMd,EAAKe,cAGrCN,EAAKzB,KAAK0B,GACVhC,OAAO2B,QAAQC,KAAKU,IAAI,CAACtB,IAAOe,IAAO,WAAW,G,IAKxDhC,yBACQC,OAAO2B,QAAQC,KAAKC,IAAI,CAAC,QAAQ,SAASC,GAE5C,IAAIC,EAAOD,EAAOd,IAClBD,QAAQC,IAAIe,E,ODhFNQ","sources":["src/background.js","src/chrome_manager.js"],"sourcesContent":["// background service worker\r\nconst ChromeManager = require('./chrome_manager.js');\r\n\r\n// Retrieve all the log data from Chrome\r\nlet chromeManager = new ChromeManager();\r\nchromeManager.getLogData();","var list_sentences = [];\r\nvar tabDict = {}\r\n\r\n// Class that works with Chrome APIs\r\nclass ChromeManager {\r\n\r\n  // Instantiates the manager with the tabs currently open\r\n  constructor() {\r\n    this.tabDict = {}; // dictionary with tab ids\r\n    this.tabTitles = []; // list of tab titles\r\n  }\r\n\r\n  getTabs() {\r\n    return this.tabTitles;\r\n  }\r\n\r\n  // Queries Chrome for opened tabs\r\n  async queryTabs() {\r\n    let queryOptions = { currentWindow: true };\r\n    let tabs = await chrome.tabs.query(queryOptions);\r\n\r\n    // close duplicate tabs here\r\n\r\n    tabs.forEach(tab => {\r\n      this.tabTitles.push(tab.title);\r\n      this.tabDict[tab.title] = tab.id;\r\n    });\r\n  }\r\n\r\n  // Function to create Chrome tab groups based on groups from SentenceModel\r\n  async createChromeGroups(groups) {\r\n    var createData = {type: \"normal\", state: \"maximized\"};\r\n    var winId;\r\n\r\n    chrome.windows.getCurrent(function (win) {\r\n      winId = win.id;\r\n    });\r\n\r\n    for(let i in groups) {\r\n      console.log(\"Group:\" + i);\r\n      let tabIds= [];\r\n\r\n      // Find all the tab ids within a group\r\n      for(let j in groups[i]){\r\n        tabIds.push(this.tabDict[this.tabTitles[groups[i][j]]]);\r\n        console.log(groups[i][j], this.tabTitles[groups[i][j]])\r\n      }\r\n\r\n      console.log(\"Creating groups..\");\r\n\r\n      const groupId = await chrome.tabs.group({createProperties: {windowId: winId}, tabIds: tabIds});\r\n    }\r\n  }\r\n\r\n  // Updating log data using Chrome storage API for user study purposes\r\n  async updateLogData(){\r\n\r\n    let date = new Date();\r\n    let dateString = date.toJSON().slice(0, 10);\r\n\r\n    await chrome.storage.sync.get(['log'], function(result) {\r\n\r\n        // result is a list of structs\r\n        let data = result.log;\r\n\r\n        console.log(result);\r\n        console.log(data);\r\n\r\n        // Sets log data based on date accessed, and number of tabs open\r\n        let logData = {\r\n          date: dateString, \r\n          tabsOpen: this.tabTitles.length,\r\n          time: date.getHours() + \":\" + date.getMinutes(),\r\n        };\r\n\r\n        data.push(logData);\r\n        chrome.storage.sync.set({'log': data}, function() {});\r\n    });\r\n  }\r\n\r\n  // gets all log data stored in Chrome's sync storage\r\n  async getLogData(){\r\n    await chrome.storage.sync.get(['log'], function(result) {\r\n        // result is a list of structs\r\n        let data = result.log;\r\n        console.log(data);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = ChromeManager;\r\n"],"names":["constructor","this","tabDict","tabTitles","getTabs","async","chrome","tabs","query","currentWindow","forEach","tab","push","title","id","groups","winId","windows","getCurrent","win","i","console","log","tabIds","j","group","createProperties","windowId","date","Date","dateString","toJSON","slice","storage","sync","get","result","data","logData","tabsOpen","length","time","getHours","getMinutes","set","getLogData"],"version":3,"file":"background.js.map"}