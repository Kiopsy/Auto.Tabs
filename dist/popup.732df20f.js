var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var r={},s={},a=e.parcelRequire3f73;null==a&&((a=function(e){if(e in r)return r[e].exports;if(e in s){var t=s[e];delete s[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){s[e]=t},e.parcelRequire3f73=a),a.register("kjyEk",(function(e,t){})),a.register("cmoHh",(function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new r(e),a=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("euRi5",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("hDsEw",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("3J2Zm",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("6Px8M",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),s=0,a=-32;a<l;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("lDm0S",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));var o={};o=class{constructor(){this.tabDict={},this.tabUrlDict={},this.urls=[],this.allTabs=[],this.tabIds=[],this.g=this.ut=this.t=0}getAllTabs(){return this.allTabs}getNonGroupTabs(){}async sortTabs(){this.urls.sort((function(e,t){return e.toLowerCase().localeCompare(t.toLowerCase())}));for(let e=0;e<this.urls.length;e++)chrome.tabs.move(this.tabUrlDict[this.urls[e]],{index:1e3+e}),this.tabUrlDict[this.urls[e]]=e}async queryTabs(){let e=await chrome.tabs.query({currentWindow:!0,groupId:-1});console.log(e);let t=[];e.forEach((e=>{this.tabDict[e.title]?t.push(e.id):(this.allTabs.push(e.title),this.urls.push(e.url),this.tabIds.push(e.id),this.tabUrlDict[e.url]=e.id,this.tabDict[e.title]=e.id)}))}async removeTabs(e){e.forEach((e=>{chrome.tabs.remove(e)}))}async createChromeGroups(e){var t;this.sortTabs(),chrome.windows.getCurrent((function(e){t=e.id}));for(let n in e){console.log("Group:"+n);let r=[];for(let t in e[n])r.push(this.tabDict[this.allTabs[e[n][t]]]),console.log(e[n][t],this.allTabs[e[n][t]]);console.log("Creating groups..");await chrome.tabs.group({createProperties:{windowId:t},tabIds:r})}}async updateLogData(e,t){let n=await chrome.tabs.query({currentWindow:!0}),r=new Set;n.forEach((e=>{-1!=e.groupId&&r.add(e.groupId)}));let s=n.length,a=r.size-e,o=this.allTabs.length,i=(new Date).toUTCString();await chrome.storage.sync.get(["log"],(function(e){let n=e.log?e.log:[];console.log(e),console.log(n);let r={date:i,groups:a,tabsOpen:s,threshold:t,ungroupedTabs:o};n.push(r),chrome.storage.sync.set({log:n},(function(){console.log("saved")}))}))}async getLogData(){await chrome.storage.sync.get(["log"],(function(e){let t=e.log;console.log(t)}))}};var i={};class l{refCount(e){return u("refCount")}incRef(e){return u("incRef")}timerAvailable(){return!0}time(e){return u("time")}read(e){return u("read")}readSync(e){return u("readSync")}readToGPU(e,t){return u("readToGPU")}numDataIds(){return u("numDataIds")}disposeData(e,t){return u("disposeData")}write(e,t,n){return u("write")}move(e,t,n,r,s){return u("move")}memory(){return u("memory")}floatPrecision(){return u("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return u("dispose")}}function u(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var c={};function p(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,m(e,t,n)}function h(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,m(e,n,r),m(t,n,r)}function d(e,t,n){return Math.max(e,Math.min(t,n))}function f(e){return e%2==0?e:e+1}function m(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function g(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function y(e,t){const n=Math.random();return t*n+(1-n)*e}function b(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function x(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function w(e,t,n=""){x(I(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function k(e){x(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function v(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||P(e)&&!n)for(let r=0;r<e.length;++r)v(e[r],t,n);else t.push(e);return t}function N(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function S(e){return 0===e.length}function I(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function T(e){return e%1==0}function E(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function $(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function C(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return p(t),t}function A(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function _(e,t=(e=>0),n,r=setTimeout){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const l=t(o);null!=n&&o>=n?a():r(i,l)};i()}))}function R(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function D(e,t){const n=t.length;return x((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),x(e.every((e=>T(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function F(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:D(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function M(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function L(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function z(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function B(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function P(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function V(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function W(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function U(e){return"string"==typeof e||e instanceof String}function G(e){return"boolean"==typeof e}function H(e){return"number"==typeof e}function q(e){return Array.isArray(e)?q(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":H(e)?"float32":U(e)?"string":G(e)?"bool":"float32"}function j(e){return!!(e&&e.constructor&&e.call&&e.apply)}function K(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function X(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Y(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=Y(e+t*i,o,n,r)}return s}function Z(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Y(0,e,t,n)}function J(e,t){const n=Q(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Q(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ee(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Z(e,new Float32Array(n));if("int32"===t)return Z(e,new Int32Array(n));if("bool"===t)return Z(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function te(e){e.forEach((t=>{x(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ne(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function re(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function se(e){return e&&e.then&&"function"==typeof e.then}t(c,"shuffle",(()=>p)),t(c,"swap",(()=>m)),t(c,"shuffleCombo",(()=>h)),t(c,"clamp",(()=>d)),t(c,"nearestLargerEven",(()=>f)),t(c,"sum",(()=>g)),t(c,"randUniform",(()=>y)),t(c,"distSquared",(()=>b)),t(c,"assert",(()=>x)),t(c,"assertShapesMatch",(()=>w)),t(c,"arraysEqual",(()=>I)),t(c,"assertNonNull",(()=>k)),t(c,"flatten",(()=>v)),t(c,"isTypedArray",(()=>P)),t(c,"sizeFromShape",(()=>N)),t(c,"isScalarShape",(()=>S)),t(c,"isInt",(()=>T)),t(c,"tanh",(()=>E)),t(c,"sizeToSquarishShape",(()=>$)),t(c,"createShuffledIndices",(()=>C)),t(c,"rightPad",(()=>A)),t(c,"repeatedTry",(()=>_)),t(c,"inferFromImplicitShape",(()=>R)),t(c,"parseAxisParam",(()=>D)),t(c,"squeezeShape",(()=>F)),t(c,"getTypedArrayFromDType",(()=>O)),t(c,"getArrayFromDType",(()=>M)),t(c,"checkConversionForErrors",(()=>L)),t(c,"isValidDtype",(()=>z)),t(c,"hasEncodingLoss",(()=>B)),t(c,"bytesPerElement",(()=>V)),t(c,"bytesFromStringArray",(()=>W)),t(c,"isString",(()=>U)),t(c,"isBoolean",(()=>G)),t(c,"isNumber",(()=>H)),t(c,"inferDtype",(()=>q)),t(c,"isFunction",(()=>j)),t(c,"nearestDivisor",(()=>K)),t(c,"computeStrides",(()=>X)),t(c,"toNestedArray",(()=>Z)),t(c,"makeOnesTypedArray",(()=>J)),t(c,"makeZerosTypedArray",(()=>Q)),t(c,"makeZerosNestedTypedArray",(()=>ee)),t(c,"assertNonNegativeIntegerDimensions",(()=>te)),t(c,"locToIndex",(()=>ne)),t(c,"indexToLoc",(()=>re)),t(c,"isPromise",(()=>se));class ae{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=oe,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(ie().getBool("IS_TEST")||ie().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];ie().getBool("IS_TEST")||ie().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(se(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function oe(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function ie(){return le}let le=null;var ue,ce,pe={},he=pe={};function de(){throw new Error("setTimeout has not been defined")}function fe(){throw new Error("clearTimeout has not been defined")}function me(e){if(ue===setTimeout)return setTimeout(e,0);if((ue===de||!ue)&&setTimeout)return ue=setTimeout,setTimeout(e,0);try{return ue(e,0)}catch(t){try{return ue.call(null,e,0)}catch(t){return ue.call(this,e,0)}}}!function(){try{ue="function"==typeof setTimeout?setTimeout:de}catch(e){ue=de}try{ce="function"==typeof clearTimeout?clearTimeout:fe}catch(e){ce=fe}}();var ge,ye=[],be=!1,xe=-1;function we(){be&&ge&&(be=!1,ge.length?ye=ge.concat(ye):xe=-1,ye.length&&ke())}function ke(){if(!be){var e=me(we);be=!0;for(var t=ye.length;t;){for(ge=ye,ye=[];++xe<t;)ge&&ge[xe].run();xe=-1,t=ye.length}ge=null,be=!1,function(e){if(ce===clearTimeout)return clearTimeout(e);if((ce===fe||!ce)&&clearTimeout)return ce=clearTimeout,clearTimeout(e);try{ce(e)}catch(t){try{return ce.call(null,e)}catch(t){return ce.call(this,e)}}}(e)}}function ve(e,t){this.fun=e,this.array=t}function Ne(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Se;function Ie(){if(null==Se){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==pe)t=pe;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Se=t}return Se}function Te(e,t){const n=function(){const e=Ie();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}he.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];ye.push(new ve(e,t)),1!==ye.length||be||me(ke)},ve.prototype.run=function(){this.fun.apply(null,this.array)},he.title="browser",he.browser=!0,he.env={},he.argv=[],he.version="",he.versions={},he.on=Ne,he.addListener=Ne,he.once=Ne,he.off=Ne,he.removeListener=Ne,he.removeAllListeners=Ne,he.emit=Ne,he.prependListener=Ne,he.prependOnceListener=Ne,he.listeners=function(e){return[]},he.binding=function(e){throw new Error("process.binding is not supported")},he.cwd=function(){return"/"},he.chdir=function(e){throw new Error("process.chdir is not supported")},he.umask=function(){return 0};function Ee(...e){ie().getBool("IS_TEST")||ie().getBool("PROD")||console.warn(...e)}const $e=Te("kernelRegistry",(()=>new Map)),Ce=Te("gradRegistry",(()=>new Map));function Ae(e,t){const n=De(e,t);return $e.get(n)}function _e(e){return Ce.get(e)}function Re(e){const t=$e.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function De(e,t){return`${t}_${e}`}var Fe={};t(Fe,"createScalarValue",(()=>wt)),t(Fe,"encodeString",(()=>St)),t(Fe,"toTypedArray",(()=>kt)),t(Fe,"now",(()=>vt)),t(Fe,"fetch",(()=>Nt)),t(Fe,"decodeString",(()=>It));var Oe={};t(Oe,"hexToLong",(()=>lt)),t(Oe,"fingerPrint64",(()=>xt));var Me;Me=ze;var Le=null;try{Le=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function ze(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function Be(e){return!0===(e&&e.__isLong__)}ze.prototype.__isLong__,Object.defineProperty(ze.prototype,"__isLong__",{value:!0}),ze.isLong=Be;var Pe={},Ve={};function We(e,t){var n,r,s;return t?(s=0<=(e>>>=0)&&e<256)&&(r=Ve[e])?r:(n=Ge(e,(0|e)<0?-1:0,!0),s&&(Ve[e]=n),n):(s=-128<=(e|=0)&&e<128)&&(r=Pe[e])?r:(n=Ge(e,e<0?-1:0,!1),s&&(Pe[e]=n),n)}function Ue(e,t){if(isNaN(e))return t?Qe:Je;if(t){if(e<0)return Qe;if(e>=Xe)return st}else{if(e<=-Ye)return at;if(e+1>=Ye)return rt}return e<0?Ue(-e,t).neg():Ge(e%Ke|0,e/Ke|0,t)}function Ge(e,t,n){return new ze(e,t,n)}ze.fromInt=We,ze.fromNumber=Ue,ze.fromBits=Ge;var He=Math.pow;function qe(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Je;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return qe(e.substring(1),t,n).neg();for(var s=Ue(He(n,8)),a=Je,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),l=parseInt(e.substring(o,o+i),n);if(i<8){var u=Ue(He(n,i));a=a.mul(u).add(Ue(l))}else a=(a=a.mul(s)).add(Ue(l))}return a.unsigned=t,a}function je(e,t){return"number"==typeof e?Ue(e,t):"string"==typeof e?qe(e,t):Ge(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}ze.fromString=qe,ze.fromValue=je;var Ke=4294967296,Xe=Ke*Ke,Ye=Xe/2,Ze=We(16777216),Je=We(0);ze.ZERO=Je;var Qe=We(0,!0);ze.UZERO=Qe;var et=We(1);ze.ONE=et;var tt=We(1,!0);ze.UONE=tt;var nt=We(-1);ze.NEG_ONE=nt;var rt=Ge(-1,2147483647,!1);ze.MAX_VALUE=rt;var st=Ge(-1,-1,!0);ze.MAX_UNSIGNED_VALUE=st;var at=Ge(0,-2147483648,!1);ze.MIN_VALUE=at;var ot=ze.prototype;ot.toInt=function(){return this.unsigned?this.low>>>0:this.low},ot.toNumber=function(){return this.unsigned?(this.high>>>0)*Ke+(this.low>>>0):this.high*Ke+(this.low>>>0)},ot.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(at)){var t=Ue(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=Ue(He(e,6),this.unsigned),a=this,o="";;){var i=a.div(s),l=(a.sub(i.mul(s)).toInt()>>>0).toString(e);if((a=i).isZero())return l+o;for(;l.length<6;)l="0"+l;o=""+l+o}},ot.getHighBits=function(){return this.high},ot.getHighBitsUnsigned=function(){return this.high>>>0},ot.getLowBits=function(){return this.low},ot.getLowBitsUnsigned=function(){return this.low>>>0},ot.getNumBitsAbs=function(){if(this.isNegative())return this.eq(at)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},ot.isZero=function(){return 0===this.high&&0===this.low},ot.eqz=ot.isZero,ot.isNegative=function(){return!this.unsigned&&this.high<0},ot.isPositive=function(){return this.unsigned||this.high>=0},ot.isOdd=function(){return 1==(1&this.low)},ot.isEven=function(){return 0==(1&this.low)},ot.equals=function(e){return Be(e)||(e=je(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},ot.eq=ot.equals,ot.notEquals=function(e){return!this.eq(e)},ot.neq=ot.notEquals,ot.ne=ot.notEquals,ot.lessThan=function(e){return this.comp(e)<0},ot.lt=ot.lessThan,ot.lessThanOrEqual=function(e){return this.comp(e)<=0},ot.lte=ot.lessThanOrEqual,ot.le=ot.lessThanOrEqual,ot.greaterThan=function(e){return this.comp(e)>0},ot.gt=ot.greaterThan,ot.greaterThanOrEqual=function(e){return this.comp(e)>=0},ot.gte=ot.greaterThanOrEqual,ot.ge=ot.greaterThanOrEqual,ot.compare=function(e){if(Be(e)||(e=je(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},ot.comp=ot.compare,ot.negate=function(){return!this.unsigned&&this.eq(at)?at:this.not().add(et)},ot.neg=ot.negate,ot.add=function(e){Be(e)||(e=je(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=0,u=0,c=0,p=0;return c+=(p+=s+(65535&e.low))>>>16,u+=(c+=r+i)>>>16,l+=(u+=n+o)>>>16,l+=t+a,Ge((c&=65535)<<16|(p&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},ot.subtract=function(e){return Be(e)||(e=je(e)),this.add(e.neg())},ot.sub=ot.subtract,ot.multiply=function(e){if(this.isZero())return Je;if(Be(e)||(e=je(e)),Le)return Ge(Le.mul(this.low,this.high,e.low,e.high),Le.get_high(),this.unsigned);if(e.isZero())return Je;if(this.eq(at))return e.isOdd()?at:Je;if(e.eq(at))return this.isOdd()?at:Je;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(Ze)&&e.lt(Ze))return Ue(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=65535&e.low,u=0,c=0,p=0,h=0;return p+=(h+=s*l)>>>16,c+=(p+=r*l)>>>16,p&=65535,c+=(p+=s*i)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=r*i)>>>16,c&=65535,u+=(c+=s*o)>>>16,u+=t*l+n*i+r*o+s*a,Ge((p&=65535)<<16|(h&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},ot.mul=ot.multiply,ot.divide=function(e){if(Be(e)||(e=je(e)),e.isZero())throw Error("division by zero");var t,n,r;if(Le)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?Ge((this.unsigned?Le.div_u:Le.div_s)(this.low,this.high,e.low,e.high),Le.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Qe:Je;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Qe;if(e.gt(this.shru(1)))return tt;r=Qe}else{if(this.eq(at))return e.eq(et)||e.eq(nt)?at:e.eq(at)?et:(t=this.shr(1).div(e).shl(1)).eq(Je)?e.isNegative()?et:nt:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(at))return this.unsigned?Qe:Je;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=Je}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),a=s<=48?1:He(2,s-48),o=Ue(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=Ue(t-=a,this.unsigned)).mul(e);o.isZero()&&(o=et),r=r.add(o),n=n.sub(i)}return r},ot.div=ot.divide,ot.modulo=function(e){return Be(e)||(e=je(e)),Le?Ge((this.unsigned?Le.rem_u:Le.rem_s)(this.low,this.high,e.low,e.high),Le.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},ot.mod=ot.modulo,ot.rem=ot.modulo,ot.not=function(){return Ge(~this.low,~this.high,this.unsigned)},ot.and=function(e){return Be(e)||(e=je(e)),Ge(this.low&e.low,this.high&e.high,this.unsigned)},ot.or=function(e){return Be(e)||(e=je(e)),Ge(this.low|e.low,this.high|e.high,this.unsigned)},ot.xor=function(e){return Be(e)||(e=je(e)),Ge(this.low^e.low,this.high^e.high,this.unsigned)},ot.shiftLeft=function(e){return Be(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Ge(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Ge(0,this.low<<e-32,this.unsigned)},ot.shl=ot.shiftLeft,ot.shiftRight=function(e){return Be(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Ge(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Ge(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},ot.shr=ot.shiftRight,ot.shiftRightUnsigned=function(e){if(Be(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?Ge(this.low>>>e|t<<32-e,t>>>e,this.unsigned):Ge(32===e?t:t>>>e-32,0,this.unsigned)},ot.shru=ot.shiftRightUnsigned,ot.shr_u=ot.shiftRightUnsigned,ot.toSigned=function(){return this.unsigned?Ge(this.low,this.high,!1):this},ot.toUnsigned=function(){return this.unsigned?this:Ge(this.low,this.high,!0)},ot.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},ot.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},ot.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},ze.fromBytes=function(e,t,n){return n?ze.fromBytesLE(e,t):ze.fromBytesBE(e,t)},ze.fromBytesLE=function(e,t){return new ze(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},ze.fromBytesBE=function(e,t){return new ze(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const it=Me.default||Me;function lt(e){return it.fromString(e,!0,16)}const ut=lt("c3a5c85c97cb3127"),ct=lt("b492b66fbe98f273"),pt=lt("9ae16a3b2f90404f");function ht(e){return e.xor(e.shru(47))}function dt(e,t,n){const r=e.slice(t,t+n);return it.fromBytes(Array.from(r),!0,!0)}function ft(e,t){return dt(e,t,8)}function mt(e,t){return dt(e,t,4)}function gt(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function yt(e,t,n=lt("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function bt(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=gt(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(gt(s,44)),[s.add(r),a.add(o)]}(ft(e,t),ft(e,t+8),ft(e,t+16),ft(e,t+24),n,r)}function xt(e,t=e.length){const n=it.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=pt.add(2*t),r=ft(e,0).add(pt),s=ft(e,t-8);return yt(gt(s,37).mul(n).add(r),gt(r,25).add(s).mul(n),n)}if(t>=4){const n=pt.add(2*t);return yt(mt(e,0).shl(3).add(t),mt(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return ht(pt.mul(n).xor(ut.mul(r))).mul(pt)}return pt}(e,t):function(e,t=e.length){const n=pt.add(2*t),r=ft(e,0).mul(ct),s=ft(e,8),a=ft(e,t-8).mul(n),o=ft(e,t-16).mul(pt);return yt(gt(r.add(s),43).add(gt(a,30)).add(o),r.add(gt(s.add(pt),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=pt.add(2*t),r=ft(e,0).mul(pt),s=ft(e,8),a=ft(e,t-8).mul(n),o=ft(e,t-16).mul(pt),i=gt(r.add(s),43).add(gt(a,30)).add(o),l=yt(i,r.add(gt(s.add(pt),18)).add(a),n),u=ft(e,16).mul(n),c=ft(e,24),p=i.add(ft(e,t-32)).mul(n),h=l.add(ft(e,t-24)).mul(n);return yt(gt(u.add(c),43).add(gt(p,30)).add(h),u.add(gt(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(ct).add(113),a=ht(s.mul(pt).add(113)).mul(pt),o=[it.UZERO,it.UZERO],i=[it.UZERO,it.UZERO];r=r.mul(pt).add(ft(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{r=gt(r.add(s).add(o[0]).add(ft(e,l+8)),37).mul(ct),s=gt(s.add(o[1]).add(ft(e,l+48)),42).mul(ct),r=r.xor(i[1]),s=s.add(o[0]).add(ft(e,l+40)),a=gt(a.add(i[0]),33).mul(ct),o=bt(e,l,o[1].mul(ct),r.add(i[0])),i=bt(e,l+32,a.add(i[1]),s.add(ft(e,l+16))),[a,r]=[r,a],l+=64}while(l!==u);const p=ct.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=gt(r.add(s).add(o[0]).add(ft(e,l+8)),37).mul(p),s=gt(s.add(o[1]).add(ft(e,l+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(ft(e,l+40))),a=gt(a.add(i[0]),33).mul(p),o=bt(e,l,o[1].mul(p),r.add(i[0])),i=bt(e,l+32,a.add(i[1]),s.add(ft(e,l+16))),[a,r]=[r,a],yt(yt(o[0],i[0],p).add(ht(s).mul(ut)).add(a),yt(o[1],i[1],p).add(r),p)}function wt(e,t){return"string"===t?St(e):kt([e],t)}function kt(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=v(e)),ie().getBool("DEBUG")&&L(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function vt(){return ie().platform.now()}function Nt(e,t){return ie().platform.fetch(e,t)}function St(e,t="utf-8"){return t=t||"utf-8",ie().platform.encode(e,t)}function It(e,t="utf-8"){return t=t||"utf-8",ie().platform.decode(e,t)}n(Fe,c),n(Fe,Oe);class Tt{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new $t)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=vt();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:vt()-o})}if(ie().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Et(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function Et(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class $t{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?A(`${r}ms`,9):r.error,i=A(e,25),l=t.rank,u=t.size,c=A(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ct(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function At(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!I(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function _t(e,t,n,r){const s=X(t),a=function(e,t,n,r){const s=N(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===n?Ot(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],Rt(l[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=Ft(e,t,n,s,a),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function Rt(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:U(e)?`'${e}'`:"bool"===n?Dt(e):parseFloat(e.toFixed(7)).toString(),A(r,t)}function Dt(e){return 0===e?"false":"true"}function Ft(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[Rt(Ot(e)[0],0,n)]}return"bool"===n?[Dt(e[0])]:[e[0].toString()]}if(1===l){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Ot(r),a=Ot(a)),["["+r.map(((e,t)=>Rt(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Rt(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Ot(e):Array.from(e)).map(((e,t)=>Rt(e,s[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...Ft(e.slice(r,a),u,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...Ft(e.slice(r,a),u,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...Ft(e.slice(r,a),u,n,c,s,t===i-1))}const d=2===l?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function Ot(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Mt{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=N(e),null!=n){const e=n.length;x(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(t,this.size),this.strides=X(e)}set(e,...t){0===t.length&&(t=[0]),x(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Lt().makeTensor(this.values,this.shape,this.dtype)}}let Lt=null,zt=null,Bt=null;class Pt{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=N(e),this.strides=X(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return zt.buffer(this.shape,this.dtype,e)}bufferSync(){return zt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Z(this.shape,e,"complex64"===this.dtype)}arraySync(){return Z(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Lt().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>It(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Lt().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Lt().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>It(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Lt().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Lt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return zt.print(this,e)}clone(){return this.throwIfDisposed(),zt.clone(this)}toString(e=!1){return _t(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),zt.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Lt().makeVariable(this,e,t,n)}}Object.defineProperty(Pt,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Te("Tensor",(()=>Pt));class Vt extends Pt{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!I(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Lt().disposeTensor(this),this.dataId=e.dataId,Lt().incRef(this,null)}dispose(){Lt().disposeVariable(this),this.isDisposedInternal=!0}}var Wt,Ut,Gt,Ht,qt,jt,Kt,Xt,Yt,Zt;Object.defineProperty(Vt,Symbol.hasInstance,{value:e=>e instanceof Pt&&null!=e.assign&&e.assign instanceof Function}),(Ut=Wt||(Wt={})).R0="R0",Ut.R1="R1",Ut.R2="R2",Ut.R3="R3",Ut.R4="R4",Ut.R5="R5",Ut.R6="R6",(Ht=Gt||(Gt={})).float32="float32",Ht.int32="int32",Ht.bool="int32",Ht.complex64="complex64",(jt=qt||(qt={})).float32="float32",jt.int32="int32",jt.bool="bool",jt.complex64="complex64",(Xt=Kt||(Kt={})).float32="float32",Xt.int32="float32",Xt.bool="float32",Xt.complex64="complex64",(Zt=Yt||(Yt={})).float32="complex64",Zt.int32="complex64",Zt.bool="complex64",Zt.complex64="complex64";const Jt={float32:Kt,int32:Gt,bool:qt,complex64:Yt};function Qt(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Jt[e][t]}function en(e,t){if(e.dtype===t.dtype)return[e,t];const n=Qt(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function tn(e){const t=[];return nn(e,t,new Set),t}function nn(e,t,n){if(null==e)return;if(e instanceof Pt)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),nn(r,t,n))}}function rn(e){return null!=e.kernelName}class sn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class an{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new sn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Ee(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Tt(this.backendInstance),!0}setupRegisteredKernels(){Re(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Re(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof l||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Ee(`Initialization of backend ${e} failed`),Ee(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return Ee(`Initialization of backend ${e} failed`),Ee(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return an.nextTensorId++}nextVariableId(){return an.nextVariableId++}clone(e){const t=ln.runKernel("Identity",{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return ln.runKernel("Cast",t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Ae(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=rn(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(rn(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const l=Ae(t,this.backendName);x(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,p=rn(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(l,u,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=_e(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(x(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&U(e[0])&&(s=e.map((e=>St(e))));const a=r.write(s,t,n),o=new Pt(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=W(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new Pt(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Vt(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*V(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Vt||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*V(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=_e(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Q(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=tn(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(x(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));x(s instanceof Pt,(()=>"The result y returned by f() must be a tensor."));const a=Ct(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=J(N(e),"float32");return ln.makeTensor(t,e,"float32")}(s.shape):n,At(e,a,(e=>this.tidy(e)),un);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return x(j(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;x(t.every((e=>e instanceof Pt)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),x(n.value instanceof Pt,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),x(j(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];x(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),x(a.every((e=>e instanceof Pt)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=vt(),n=await this.backend.time(e);return n.wallMs=vt()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new sn;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function on(){const e=Ie();if(null==e._tfengine){const t=new ae(e);e._tfengine=new an(t)}var t;return t=e._tfengine.ENV,le=t,Lt=()=>e._tfengine,e._tfengine}an.nextTensorId=0,an.nextVariableId=0;const ln=on();function un(e,t){const n={a:e,b:t};return ln.runKernel("Add",n)}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cn=ie();function pn(e,t){let n=e;if(P(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||P(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&ie().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&hn(e,r,[]),r}function hn(e,t,n){if(n=n||[],!Array.isArray(e)&&!P(e))return void x(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));x(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),x(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)hn(e[t],r,n.concat(t))}function dn(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function fn(e,t,n,r="numeric"){if(e instanceof Pt)return dn(r,e.dtype,t,n),e;let s=q(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),dn(r,s,t,n),null==e||!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=pn(e,s);P(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?kt(e,s):v(e,[],!0);return ln.makeTensor(o,a,s)}function mn(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>fn(e,`${t}[${s}]`,n,r)))}cn.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),cn.registerFlag("IS_BROWSER",(()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope)),cn.registerFlag("IS_NODE",(()=>void 0!==pe&&void 0!==pe.versions&&void 0!==pe.versions.node)),cn.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),cn.registerFlag("PROD",(()=>!1)),cn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>cn.getBool("DEBUG"))),cn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),cn.registerFlag("IS_TEST",(()=>!1)),cn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),cn.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),cn.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),cn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),cn.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));function gn(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{ln.startScope(n);try{const t=r(...e);return se(t)&&console.error("Cannot return a Promise inside of tidy."),ln.endScope(t),t}catch(e){throw ln.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const yn=gn({complex_:function(e,t){const n=fn(e,"real","complex"),r=fn(t,"imag","complex");w(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return ln.runKernel("Complex",s)}});function bn(e,t,n,r){if(null==r&&(r=q(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){te(t);const e=N(t),r=N(n);x(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==N(t.slice(e));x(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return P(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?kt(e,r):v(e,[],!0),ln.makeTensor(e,t,r)}function xn(e,t,n){return bn(e,t,pn(e,n),n)}const wn={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var kn,vn,Nn;vn=function(e){var t,n,r=Rn(e),s=r[0],a=r[1],o=new $n(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),i=0,l=a>0?s-4:s;for(n=0;n<l;n+=4)t=En[e.charCodeAt(n)]<<18|En[e.charCodeAt(n+1)]<<12|En[e.charCodeAt(n+2)]<<6|En[e.charCodeAt(n+3)],o[i++]=t>>16&255,o[i++]=t>>8&255,o[i++]=255&t;2===a&&(t=En[e.charCodeAt(n)]<<2|En[e.charCodeAt(n+1)]>>4,o[i++]=255&t);1===a&&(t=En[e.charCodeAt(n)]<<10|En[e.charCodeAt(n+1)]<<4|En[e.charCodeAt(n+2)]>>2,o[i++]=t>>8&255,o[i++]=255&t);return o},Nn=function(e){for(var t,n=e.length,r=n%3,s=[],a=16383,o=0,i=n-r;o<i;o+=a)s.push(Dn(e,o,o+a>i?i:o+a));1===r?(t=e[n-1],s.push(Tn[t>>2]+Tn[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],s.push(Tn[t>>10]+Tn[t>>4&63]+Tn[t<<2&63]+"="));return s.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var Sn,In,Tn=[],En=[],$n="undefined"!=typeof Uint8Array?Uint8Array:Array,Cn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",An=0,_n=Cn.length;An<_n;++An)Tn[An]=Cn[An],En[Cn.charCodeAt(An)]=An;function Rn(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function Dn(e,t,n){for(var r,s,a=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(Tn[(s=r)>>18&63]+Tn[s>>12&63]+Tn[s>>6&63]+Tn[63&s]);return a.join("")}En["-".charCodeAt(0)]=62,En["_".charCodeAt(0)]=63,Sn=function(e,t,n,r,s){var a,o,i=8*s-r-1,l=(1<<i)-1,u=l>>1,c=-7,p=n?s-1:0,h=n?-1:1,d=e[t+p];for(p+=h,a=d&(1<<-c)-1,d>>=-c,c+=i;c>0;a=256*a+e[t+p],p+=h,c-=8);for(o=a&(1<<-c)-1,a>>=-c,c+=r;c>0;o=256*o+e[t+p],p+=h,c-=8);if(0===a)a=1-u;else{if(a===l)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,r),a-=u}return(d?-1:1)*o*Math.pow(2,a-r)},In=function(e,t,n,r,s,a){var o,i,l,u=8*a-s-1,c=(1<<u)-1,p=c>>1,h=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),(t+=o+p>=1?h/l:h*Math.pow(2,1-p))*l>=2&&(o++,l/=2),o+p>=c?(i=0,o=c):o+p>=1?(i=(t*l-1)*Math.pow(2,s),o+=p):(i=t*Math.pow(2,p-1)*Math.pow(2,s),o=0));s>=8;e[n+d]=255&i,d+=f,i/=256,s-=8);for(o=o<<s|i,u+=s;u>0;e[n+d]=255&o,d+=f,o/=256,u-=8);e[n+d-f]|=128*m};const Fn="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;kn=Mn;function On(e){if(e>2147483647)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,Mn.prototype),t}function Mn(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return Bn(e)}return Ln(e,t,n)}function Ln(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!Mn.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|Un(e,t);let r=On(n);const s=r.write(e,t);s!==n&&(r=r.slice(0,s));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(vr(e,Uint8Array)){const t=new Uint8Array(e);return Vn(t.buffer,t.byteOffset,t.byteLength)}return Pn(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(vr(e,ArrayBuffer)||e&&vr(e.buffer,ArrayBuffer))return Vn(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(vr(e,SharedArrayBuffer)||e&&vr(e.buffer,SharedArrayBuffer)))return Vn(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return Mn.from(r,t,n);const s=function(e){if(Mn.isBuffer(e)){const t=0|Wn(e.length),n=On(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Nr(e.length)?On(0):Pn(e);if("Buffer"===e.type&&Array.isArray(e.data))return Pn(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return Mn.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function zn(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function Bn(e){return zn(e),On(e<0?0:0|Wn(e))}function Pn(e){const t=e.length<0?0:0|Wn(e.length),n=On(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function Vn(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,Mn.prototype),r}function Wn(e){if(e>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647..toString(16)+" bytes");return 0|e}function Un(e,t){if(Mn.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||vr(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return xr(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return wr(e).length;default:if(s)return r?-1:xr(e).length;t=(""+t).toLowerCase(),s=!0}}function Gn(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return rr(this,t,n);case"utf8":case"utf-8":return er(this,t,n);case"ascii":return tr(this,t,n);case"latin1":case"binary":return nr(this,t,n);case"base64":return Qn(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return sr(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function Hn(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function qn(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Nr(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=Mn.from(t,r)),Mn.isBuffer(t))return 0===t.length?-1:jn(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):jn(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function jn(e,t,n,r,s){let a,o=1,i=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,i/=2,l/=2,n/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s){let r=-1;for(a=n;a<i;a++)if(u(e,a)===u(t,-1===r?0:a-r)){if(-1===r&&(r=a),a-r+1===l)return r*o}else-1!==r&&(a-=a-r),r=-1}else for(n+l>i&&(n=i-l),a=n;a>=0;a--){let n=!0;for(let r=0;r<l;r++)if(u(e,a+r)!==u(t,r)){n=!1;break}if(n)return a}return-1}function Kn(e,t,n,r){n=Number(n)||0;const s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;const a=t.length;let o;for(r>a/2&&(r=a/2),o=0;o<r;++o){const r=parseInt(t.substr(2*o,2),16);if(Nr(r))return o;e[n+o]=r}return o}function Xn(e,t,n,r){return kr(xr(t,e.length-n),e,n,r)}function Yn(e,t,n,r){return kr(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function Zn(e,t,n,r){return kr(wr(t),e,n,r)}function Jn(e,t,n,r){return kr(function(e,t){let n,r,s;const a=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,s=n%256,a.push(s),a.push(r);return a}(t,e.length-n),e,n,r)}function Qn(e,t,n){return 0===t&&n===e.length?Nn(e):Nn(e.slice(t,n))}function er(e,t,n){n=Math.min(e.length,n);const r=[];let s=t;for(;s<n;){const t=e[s];let a=null,o=t>239?4:t>223?3:t>191?2:1;if(s+o<=n){let n,r,i,l;switch(o){case 1:t<128&&(a=t);break;case 2:n=e[s+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(a=l));break;case 3:n=e[s+1],r=e[s+2],128==(192&n)&&128==(192&r)&&(l=(15&t)<<12|(63&n)<<6|63&r,l>2047&&(l<55296||l>57343)&&(a=l));break;case 4:n=e[s+1],r=e[s+2],i=e[s+3],128==(192&n)&&128==(192&r)&&128==(192&i)&&(l=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&i,l>65535&&l<1114112&&(a=l))}}null===a?(a=65533,o=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),s+=o}return function(e){const t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}Mn.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),Mn.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Mn.prototype,"parent",{enumerable:!0,get:function(){if(Mn.isBuffer(this))return this.buffer}}),Object.defineProperty(Mn.prototype,"offset",{enumerable:!0,get:function(){if(Mn.isBuffer(this))return this.byteOffset}}),Mn.poolSize=8192,Mn.from=function(e,t,n){return Ln(e,t,n)},Object.setPrototypeOf(Mn.prototype,Uint8Array.prototype),Object.setPrototypeOf(Mn,Uint8Array),Mn.alloc=function(e,t,n){return function(e,t,n){return zn(e),e<=0?On(e):void 0!==t?"string"==typeof n?On(e).fill(t,n):On(e).fill(t):On(e)}(e,t,n)},Mn.allocUnsafe=function(e){return Bn(e)},Mn.allocUnsafeSlow=function(e){return Bn(e)},Mn.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==Mn.prototype},Mn.compare=function(e,t){if(vr(e,Uint8Array)&&(e=Mn.from(e,e.offset,e.byteLength)),vr(t,Uint8Array)&&(t=Mn.from(t,t.offset,t.byteLength)),!Mn.isBuffer(e)||!Mn.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let s=0,a=Math.min(n,r);s<a;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},Mn.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Mn.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Mn.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=Mn.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(vr(t,Uint8Array))s+t.length>r.length?(Mn.isBuffer(t)||(t=Mn.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else{if(!Mn.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,s)}s+=t.length}return r},Mn.byteLength=Un,Mn.prototype._isBuffer=!0,Mn.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)Hn(this,t,t+1);return this},Mn.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)Hn(this,t,t+3),Hn(this,t+1,t+2);return this},Mn.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)Hn(this,t,t+7),Hn(this,t+1,t+6),Hn(this,t+2,t+5),Hn(this,t+3,t+4);return this},Mn.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?er(this,0,e):Gn.apply(this,arguments)},Mn.prototype.toLocaleString=Mn.prototype.toString,Mn.prototype.equals=function(e){if(!Mn.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Mn.compare(this,e)},Mn.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},Fn&&(Mn.prototype[Fn]=Mn.prototype.inspect),Mn.prototype.compare=function(e,t,n,r,s){if(vr(e,Uint8Array)&&(e=Mn.from(e,e.offset,e.byteLength)),!Mn.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(s>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0);const i=Math.min(a,o),l=this.slice(r,s),u=e.slice(t,n);for(let e=0;e<i;++e)if(l[e]!==u[e]){a=l[e],o=u[e];break}return a<o?-1:o<a?1:0},Mn.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Mn.prototype.indexOf=function(e,t,n){return qn(this,e,t,n,!0)},Mn.prototype.lastIndexOf=function(e,t,n){return qn(this,e,t,n,!1)},Mn.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let a=!1;for(;;)switch(r){case"hex":return Kn(this,e,t,n);case"utf8":case"utf-8":return Xn(this,e,t,n);case"ascii":case"latin1":case"binary":return Yn(this,e,t,n);case"base64":return Zn(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Jn(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},Mn.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function tr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function nr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function rr(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let s="";for(let r=t;r<n;++r)s+=Sr[e[r]];return s}function sr(e,t,n){const r=e.slice(t,n);let s="";for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}function ar(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function or(e,t,n,r,s,a){if(!Mn.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function ir(e,t,n,r,s){mr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,n}function lr(e,t,n,r,s){mr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=o,o>>=8,e[n+2]=o,o>>=8,e[n+1]=o,o>>=8,e[n]=o,n+8}function ur(e,t,n,r,s,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function cr(e,t,n,r,s){return t=+t,n>>>=0,s||ur(e,0,n,4),In(e,t,n,r,23,4),n+4}function pr(e,t,n,r,s){return t=+t,n>>>=0,s||ur(e,0,n,8),In(e,t,n,r,52,8),n+8}Mn.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,Mn.prototype),r},Mn.prototype.readUintLE=Mn.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||ar(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return r},Mn.prototype.readUintBE=Mn.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||ar(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},Mn.prototype.readUint8=Mn.prototype.readUInt8=function(e,t){return e>>>=0,t||ar(e,1,this.length),this[e]},Mn.prototype.readUint16LE=Mn.prototype.readUInt16LE=function(e,t){return e>>>=0,t||ar(e,2,this.length),this[e]|this[e+1]<<8},Mn.prototype.readUint16BE=Mn.prototype.readUInt16BE=function(e,t){return e>>>=0,t||ar(e,2,this.length),this[e]<<8|this[e+1]},Mn.prototype.readUint32LE=Mn.prototype.readUInt32LE=function(e,t){return e>>>=0,t||ar(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Mn.prototype.readUint32BE=Mn.prototype.readUInt32BE=function(e,t){return e>>>=0,t||ar(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Mn.prototype.readBigUInt64LE=Ir((function(e){gr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||yr(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(s)<<BigInt(32))})),Mn.prototype.readBigUInt64BE=Ir((function(e){gr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||yr(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(s)})),Mn.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||ar(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},Mn.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||ar(e,t,this.length);let r=t,s=1,a=this[e+--r];for(;r>0&&(s*=256);)a+=this[e+--r]*s;return s*=128,a>=s&&(a-=Math.pow(2,8*t)),a},Mn.prototype.readInt8=function(e,t){return e>>>=0,t||ar(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Mn.prototype.readInt16LE=function(e,t){e>>>=0,t||ar(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Mn.prototype.readInt16BE=function(e,t){e>>>=0,t||ar(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Mn.prototype.readInt32LE=function(e,t){return e>>>=0,t||ar(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Mn.prototype.readInt32BE=function(e,t){return e>>>=0,t||ar(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Mn.prototype.readBigInt64LE=Ir((function(e){gr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||yr(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),Mn.prototype.readBigInt64BE=Ir((function(e){gr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||yr(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),Mn.prototype.readFloatLE=function(e,t){return e>>>=0,t||ar(e,4,this.length),Sn(this,e,!0,23,4)},Mn.prototype.readFloatBE=function(e,t){return e>>>=0,t||ar(e,4,this.length),Sn(this,e,!1,23,4)},Mn.prototype.readDoubleLE=function(e,t){return e>>>=0,t||ar(e,8,this.length),Sn(this,e,!0,52,8)},Mn.prototype.readDoubleBE=function(e,t){return e>>>=0,t||ar(e,8,this.length),Sn(this,e,!1,52,8)},Mn.prototype.writeUintLE=Mn.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){or(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=1,a=0;for(this[t]=255&e;++a<n&&(s*=256);)this[t+a]=e/s&255;return t+n},Mn.prototype.writeUintBE=Mn.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){or(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=n-1,a=1;for(this[t+s]=255&e;--s>=0&&(a*=256);)this[t+s]=e/a&255;return t+n},Mn.prototype.writeUint8=Mn.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,1,255,0),this[t]=255&e,t+1},Mn.prototype.writeUint16LE=Mn.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Mn.prototype.writeUint16BE=Mn.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Mn.prototype.writeUint32LE=Mn.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Mn.prototype.writeUint32BE=Mn.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Mn.prototype.writeBigUInt64LE=Ir((function(e,t=0){return ir(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Mn.prototype.writeBigUInt64BE=Ir((function(e,t=0){return lr(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Mn.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);or(this,e,t,n,r-1,-r)}let s=0,a=1,o=0;for(this[t]=255&e;++s<n&&(a*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},Mn.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);or(this,e,t,n,r-1,-r)}let s=n-1,a=1,o=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},Mn.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Mn.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Mn.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Mn.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Mn.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||or(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Mn.prototype.writeBigInt64LE=Ir((function(e,t=0){return ir(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Mn.prototype.writeBigInt64BE=Ir((function(e,t=0){return lr(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Mn.prototype.writeFloatLE=function(e,t,n){return cr(this,e,t,!0,n)},Mn.prototype.writeFloatBE=function(e,t,n){return cr(this,e,t,!1,n)},Mn.prototype.writeDoubleLE=function(e,t,n){return pr(this,e,t,!0,n)},Mn.prototype.writeDoubleBE=function(e,t,n){return pr(this,e,t,!1,n)},Mn.prototype.copy=function(e,t,n,r){if(!Mn.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},Mn.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Mn.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const a=Mn.isBuffer(e)?e:Mn.from(e,r),o=a.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=a[s%o]}return this};const hr={};function dr(e,t,n){hr[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function fr(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function mr(e,t,n,r,s,a){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let s;throw s=a>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(a+1)}${r}`:`>= -(2${r} ** ${8*(a+1)-1}${r}) and < 2 ** ${8*(a+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new hr.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){gr(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||yr(t,e.length-(n+1))}(r,s,a)}function gr(e,t){if("number"!=typeof e)throw new hr.ERR_INVALID_ARG_TYPE(t,"number",e)}function yr(e,t,n){if(Math.floor(e)!==e)throw gr(e,n),new hr.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new hr.ERR_BUFFER_OUT_OF_BOUNDS;throw new hr.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}dr("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),dr("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),dr("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=fr(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=fr(s)),s+="n"),r+=` It must be ${t}. Received ${s}`,r}),RangeError);const br=/[^+/0-9A-Za-z-_]/g;function xr(e,t){let n;t=t||1/0;const r=e.length;let s=null;const a=[];for(let o=0;o<r;++o){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function wr(e){return vn(function(e){if((e=(e=e.split("=")[0]).trim().replace(br,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function kr(e,t,n,r){let s;for(s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function vr(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Nr(e){return e!=e}const Sr=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let s=0;s<16;++s)t[r+s]=e[n]+e[s]}return t}();function Ir(e){return"undefined"==typeof BigInt?Tr:e}function Tr(){throw new Error("BigInt not supported")}var Er=kn;async function $r(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:Ar(await Promise.all(r)),specs:n}}function Cr(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,l=N(i);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=wn[n.dtype],c=e.slice(s,s+l*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Wr()),u=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=Math.round(t*n.scale+n.min)}}s+=l*i}else if("string"===o){const t=N(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));u.push(n),s+=t}}else{const r=wn[o],a=e.slice(s,s+l*r);if("float32"===o)u=new Float32Array(a);else if("int32"===o)u=new Int32Array(a);else if("bool"===o)u=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const s=xn(e,i,"float32"),o=xn(r,i,"float32");n[t]=yn(s,o),s.dispose(),o.dispose()}}s+=l*r}"complex64"!==o&&(n[t]=xn(u,i,o))}return n}function Ar(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const _r=void 0!==Er&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Rr(e){return _r?Er.byteLength(e):new Blob([e]).size}function Dr(e){if(_r)return Er.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function Fr(e){if(_r){const t=Er.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function Or(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Mr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Lr(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function zr(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function Br(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),zr(e,n,r)}function Pr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Rr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Rr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Vr(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Wr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class Ur{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Ur.instance&&(Ur.instance=new Ur),Ur.instance}static registerSaveRouter(e){Ur.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Ur.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Ur.getHandlers(e,"save")}static getLoadHandlers(e,t){return Ur.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Ur.getInstance().loadRouters:Ur.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Gr=e=>Ur.registerSaveRouter(e),Hr=e=>Ur.registerLoadRouter(e),qr=e=>Ur.getSaveHandlers(e),jr=(e,t)=>Ur.getLoadHandlers(e,t);function Kr(){if(!ie().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Xr(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class Yr{constructor(e){if(this.indexedDB=Kr(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Xr(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Pr(t),a=s.transaction("model_info_store","readwrite");let o=a.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;i.onsuccess=()=>{l=s.transaction("models_store","readwrite");const i=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}Yr.URL_SCHEME="indexeddb://";const Zr=e=>{return ie().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Yr.URL_SCHEME)?(t=e.slice(Yr.URL_SCHEME.length),new Yr(t)):null;var t};Ur.registerSaveRouter(Zr),Ur.registerLoadRouter(Zr);class Jr{constructor(){this.indexedDB=Kr()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>Xr(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Yr.URL_SCHEME)?t.slice(Yr.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Xr(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),o=a.objectStore("model_info_store"),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{l=s.transaction("models_store","readwrite");const r=l.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const Qr="tensorflowjs_models",es="info",ts="model_topology",ns="weight_specs",rs="weight_data",ss="model_metadata";function as(e){return{info:[Qr,e,es].join("/"),topology:[Qr,e,ts].join("/"),weightSpecs:[Qr,e,ns].join("/"),weightData:[Qr,e,rs].join("/"),modelMetadata:[Qr,e,ss].join("/")}}function os(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function is(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class ls{constructor(e){if(!ie().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=as(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Pr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Dr(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw os(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Fr(a),t}}ls.URL_SCHEME="localstorage://";const us=e=>{return ie().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ls.URL_SCHEME)?(t=e.slice(ls.URL_SCHEME.length),new ls(t)):null;var t};Ur.registerSaveRouter(us),Ur.registerLoadRouter(us);class cs{constructor(){x(ie().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),x("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Qr+"/",n="/"+es;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[is(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=as(e=(t=e).startsWith(ls.URL_SCHEME)?t.slice(ls.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return os(n),r}}class ps{constructor(){this.managers={}}static getInstance(){return null==ps.instance&&(ps.instance=new ps),ps.instance}static registerManager(e,t){x(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),x(e.length>0,(()=>"scheme must not be an empty string."));const n=ps.getInstance();x(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=ps.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(ps.getInstance().managers)}}function hs(e){if(-1===e.indexOf("://"))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ps.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function ds(e,t,n=!1){x(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Ur.getLoadHandlers(e);x(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),x(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Ur.getSaveHandlers(t);x(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),x(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=hs(e).scheme,l=hs(e).path,u=i===hs(e).scheme,c=await s.load();n&&u&&await ps.getManager(i).removeModel(l);const p=await o.save(c);return n&&!u&&await ps.getManager(i).removeModel(l),p.modelArtifactsInfo}async function fs(){const e=ps.getSchemes(),t={};for(const n of e){const e=await ps.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t}async function ms(e){const t=hs(e);return ps.getManager(t.scheme).removeModel(t.path)}async function gs(e,t){return ds(e,t,!1)}async function ys(e,t){return ds(e,t,!0)}class bs{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&ie().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(ie().get("IS_BROWSER")){ie().setPlatform("browser",new bs);try{ps.registerManager(ls.URL_SCHEME,new cs)}catch(e){}try{ps.registerManager(Yr.URL_SCHEME,new Jr)}catch(e){}}const xs=()=>a("kjyEk");let ws;function ks(e,t="float32",n){return t=t||"float32",te(e),new Mt(e,t,n)}ie().get("IS_NODE")&&!ie().get("IS_BROWSER")&&ie().setPlatform("node",new class{constructor(){this.util=a("kjyEk"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=ie().global.fetch?ie().global.fetch(e,t):(null==ws&&(ws=xs()),ws(e,t))}now(){const e=pe.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const vs=gn({cast_:function(e,t){const n=fn(e,"x","cast");if(!z(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return ln.runKernel("Cast",r,s)}});const Ns=gn({clone_:function(e){const t={x:fn(e,"x","clone","string_or_numeric")};return ln.runKernel("Identity",t)}});function Ss(e,t=!1){console.log(e.toString(t))}on();zt={buffer:ks,cast:vs,clone:Ns,print:Ss};var Is={};t(Is,"copyModel",(()=>gs)),t(Is,"listModels",(()=>fs)),t(Is,"moveModel",(()=>ys)),t(Is,"removeModel",(()=>ms)),t(Is,"browserFiles",(()=>Cs)),t(Is,"browserHTTPRequest",(()=>zs)),t(Is,"concatenateArrayBuffers",(()=>Or)),t(Is,"decodeWeights",(()=>Cr)),t(Is,"encodeWeights",(()=>$r)),t(Is,"fromMemory",(()=>Ws)),t(Is,"fromMemorySync",(()=>Us)),t(Is,"getLoadHandlers",(()=>jr)),t(Is,"getModelArtifactsForJSON",(()=>Br)),t(Is,"getModelArtifactsForJSONSync",(()=>zr)),t(Is,"getModelArtifactsInfoForJSON",(()=>Pr)),t(Is,"getSaveHandlers",(()=>qr)),t(Is,"getWeightSpecs",(()=>Vr)),t(Is,"http",(()=>Ls)),t(Is,"isHTTPScheme",(()=>Os)),t(Is,"loadWeights",(()=>Rs)),t(Is,"registerLoadRouter",(()=>Hr)),t(Is,"registerSaveRouter",(()=>Gr)),t(Is,"weightsLoaderFactory",(()=>Ds)),t(Is,"withSaveHandler",(()=>Gs)),t(Is,"withSaveHandlerSync",(()=>Hs));function Ts(e){return new Promise((e=>setTimeout(e))).then(e)}class Es{constructor(e){if(!ie().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Es.URL_SCHEME)&&(e=e.slice(Es.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Lr(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Ts((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ts((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Pr(e)}}}}Es.URL_SCHEME="downloads://";class $s{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Br(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,Or(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Mr(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Mr(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Cs(e){return new $s(e)}function As(e,t,n,r){!function(e){x(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){x(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),x(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),x(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function _s(e,t){null==t&&(t={});const n=null==t.fetchFunc?ie().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await As(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await As(s,t.onProgress,.5,1)}async function Rs(e,t="",n,r){return Ds((e=>_s(e,{requestInit:r})))(e,t,n)}function Ds(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=wn[l]*N(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let h=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=Cr(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Ur.registerSaveRouter((e=>ie().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Es.URL_SCHEME)?function(e="model"){return new Es(e)}(e.slice(Es.URL_SCHEME.length)):null));class Fs{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(x("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=ie().platform.fetch,x(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&x(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Lr(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Pr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Br(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Vr(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,Or(await _s(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Os(e){return null!=e.match(Fs.URL_SCHEME_REGEX)}Fs.URL_SCHEME_REGEX=/^https?:\/\//;const Ms=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Os(e))):Os(e),n)return Ls(e,t)}return null};function Ls(e,t){return new Fs(e,t)}function zs(e,t){return Ls(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */Ur.registerSaveRouter(Ms),Ur.registerLoadRouter(Ms);class Bs{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Ps{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Vs{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ws(e,t,n,r){const s=arguments;return new Vs(Us(...s))}function Us(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Bs(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Bs({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Bs({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Gs(e){return new Ps(e)}function Hs(e){return new Ps(e)}var qs={};t(qs,"spectral",(()=>Nc)),t(qs,"signal",(()=>Sc)),t(qs,"image",(()=>Ic)),t(qs,"linalg",(()=>Tc)),t(qs,"losses",(()=>Ec)),t(qs,"sparse",(()=>$c)),t(qs,"string",(()=>Cc)),t(qs,"abs",(()=>Po)),t(qs,"acos",(()=>Di)),t(qs,"acosh",(()=>Fi)),t(qs,"add",(()=>ca)),t(qs,"addN",(()=>Oi)),t(qs,"all",(()=>Mi)),t(qs,"any",(()=>Li)),t(qs,"argMax",(()=>zi)),t(qs,"argMin",(()=>Bi)),t(qs,"asin",(()=>Pi)),t(qs,"asinh",(()=>Vi)),t(qs,"atan",(()=>Wi)),t(qs,"atan2",(()=>Ui)),t(qs,"atanh",(()=>Gi)),t(qs,"avgPool",(()=>Hi)),t(qs,"avgPool3d",(()=>qi)),t(qs,"basicLSTMCell",(()=>Ki)),t(qs,"batchToSpaceND",(()=>Xi)),t(qs,"batchNorm",(()=>Zi)),t(qs,"batchNorm2d",(()=>Ji)),t(qs,"batchNorm3d",(()=>Qi)),t(qs,"batchNorm4d",(()=>el)),t(qs,"bincount",(()=>vo)),t(qs,"broadcastArgs",(()=>tl)),t(qs,"broadcastTo",(()=>Co)),t(qs,"buffer",(()=>ks)),t(qs,"cast",(()=>vs)),t(qs,"ceil",(()=>nl)),t(qs,"clipByValue",(()=>rl)),t(qs,"clone",(()=>Ns)),t(qs,"complex",(()=>yn)),t(qs,"concat",(()=>js)),t(qs,"concat1d",(()=>sl)),t(qs,"concat2d",(()=>al)),t(qs,"concat3d",(()=>ol)),t(qs,"concat4d",(()=>il)),t(qs,"conv1d",(()=>ll)),t(qs,"conv2d",(()=>wa)),t(qs,"conv2dTranspose",(()=>ul)),t(qs,"conv3d",(()=>cl)),t(qs,"conv3dTranspose",(()=>hl)),t(qs,"cos",(()=>dl)),t(qs,"cosh",(()=>fl)),t(qs,"cumprod",(()=>ml)),t(qs,"cumsum",(()=>gl)),t(qs,"denseBincount",(()=>yl)),t(qs,"depthToSpace",(()=>bl)),t(qs,"depthwiseConv2d",(()=>Ma)),t(qs,"diag",(()=>xl)),t(qs,"dilation2d",(()=>wl)),t(qs,"div",(()=>To)),t(qs,"divNoNan",(()=>vl)),t(qs,"dot",(()=>Nl)),t(qs,"einsum",(()=>Sl)),t(qs,"elu",(()=>Na)),t(qs,"equal",(()=>kl)),t(qs,"erf",(()=>Il)),t(qs,"euclideanNorm",(()=>Tl)),t(qs,"exp",(()=>ki)),t(qs,"expandDims",(()=>Qo)),t(qs,"expm1",(()=>El)),t(qs,"eye",(()=>ei)),t(qs,"fill",(()=>Ka)),t(qs,"floor",(()=>$l)),t(qs,"floorDiv",(()=>Io)),t(qs,"gather",(()=>Cl)),t(qs,"greater",(()=>So)),t(qs,"greaterEqual",(()=>Fo)),t(qs,"imag",(()=>Ks)),t(qs,"isFinite",(()=>Al)),t(qs,"isInf",(()=>_l)),t(qs,"isNaN",(()=>Rl)),t(qs,"leakyRelu",(()=>Sa)),t(qs,"less",(()=>Dl)),t(qs,"lessEqual",(()=>No)),t(qs,"linspace",(()=>Fl)),t(qs,"localResponseNormalization",(()=>Ol)),t(qs,"log",(()=>yi)),t(qs,"log1p",(()=>vi)),t(qs,"logSigmoid",(()=>Ll)),t(qs,"logSoftmax",(()=>zl)),t(qs,"logSumExp",(()=>Si)),t(qs,"logicalAnd",(()=>Oo)),t(qs,"logicalNot",(()=>Bl)),t(qs,"logicalOr",(()=>Pl)),t(qs,"logicalXor",(()=>Vl)),t(qs,"lowerBound",(()=>Gl)),t(qs,"matMul",(()=>Pa)),t(qs,"max",(()=>Wo)),t(qs,"maxPool",(()=>Hl)),t(qs,"maxPool3d",(()=>ql)),t(qs,"maxPoolWithArgmax",(()=>jl)),t(qs,"maximum",(()=>Kl)),t(qs,"mean",(()=>li)),t(qs,"meshgrid",(()=>Xl)),t(qs,"min",(()=>Uo)),t(qs,"minimum",(()=>mi)),t(qs,"mirrorPad",(()=>Yl)),t(qs,"mod",(()=>Zl)),t(qs,"moments",(()=>Jl)),t(qs,"mul",(()=>sa)),t(qs,"multiRNNCell",(()=>Ql)),t(qs,"multinomial",(()=>eu)),t(qs,"neg",(()=>ti)),t(qs,"notEqual",(()=>ui)),t(qs,"oneHot",(()=>tu)),t(qs,"ones",(()=>ci)),t(qs,"onesLike",(()=>nu)),t(qs,"outerProduct",(()=>ru)),t(qs,"pad",(()=>su)),t(qs,"pad1d",(()=>au)),t(qs,"pad2d",(()=>ou)),t(qs,"pad3d",(()=>iu)),t(qs,"pad4d",(()=>lu)),t(qs,"pool",(()=>cu)),t(qs,"pow",(()=>Go)),t(qs,"prelu",(()=>Ia)),t(qs,"print",(()=>Ss)),t(qs,"prod",(()=>pu)),t(qs,"raggedGather",(()=>hu)),t(qs,"raggedTensorToTensor",(()=>du)),t(qs,"rand",(()=>fu)),t(qs,"randomGamma",(()=>Tu)),t(qs,"randomNormal",(()=>Eu)),t(qs,"randomStandardNormal",(()=>$u)),t(qs,"randomUniform",(()=>Cu)),t(qs,"range",(()=>_o)),t(qs,"real",(()=>Xs)),t(qs,"reciprocal",(()=>Au)),t(qs,"relu",(()=>Ta)),t(qs,"relu6",(()=>Ea)),t(qs,"reshape",(()=>Ys)),t(qs,"reverse",(()=>aa)),t(qs,"reverse1d",(()=>_u)),t(qs,"reverse2d",(()=>Ru)),t(qs,"reverse3d",(()=>Du)),t(qs,"reverse4d",(()=>Fu)),t(qs,"round",(()=>$o)),t(qs,"rsqrt",(()=>Ou)),t(qs,"scalar",(()=>oa)),t(qs,"selu",(()=>Mu)),t(qs,"separableConv2d",(()=>Lu)),t(qs,"setdiff1dAsync",(()=>zu)),t(qs,"sigmoid",(()=>$a)),t(qs,"sign",(()=>Bu)),t(qs,"sin",(()=>Pu)),t(qs,"sinh",(()=>Vu)),t(qs,"slice",(()=>Zs)),t(qs,"slice1d",(()=>Wu)),t(qs,"slice2d",(()=>Uu)),t(qs,"slice3d",(()=>Gu)),t(qs,"slice4d",(()=>Hu)),t(qs,"softmax",(()=>qu)),t(qs,"softplus",(()=>Ml)),t(qs,"spaceToBatchND",(()=>uu)),t(qs,"fft",(()=>ta)),t(qs,"ifft",(()=>ra)),t(qs,"irfft",(()=>ia)),t(qs,"rfft",(()=>na)),t(qs,"split",(()=>Js)),t(qs,"sqrt",(()=>Ho)),t(qs,"square",(()=>qo)),t(qs,"squaredDifference",(()=>xi)),t(qs,"squeeze",(()=>Xo)),t(qs,"stack",(()=>Mo)),t(qs,"step",(()=>Ca)),t(qs,"stridedSlice",(()=>ju)),t(qs,"sub",(()=>Eo)),t(qs,"sum",(()=>Aa)),t(qs,"tan",(()=>Ku)),t(qs,"tanh",(()=>ji)),t(qs,"tensor",(()=>xn)),t(qs,"tensor1d",(()=>Ua)),t(qs,"tensor2d",(()=>Xa)),t(qs,"tensor3d",(()=>Xu)),t(qs,"tensor4d",(()=>Yu)),t(qs,"tensor5d",(()=>Zu)),t(qs,"tensor6d",(()=>Ju)),t(qs,"tile",(()=>eo)),t(qs,"topk",(()=>Qu)),t(qs,"truncatedNormal",(()=>ec)),t(qs,"unique",(()=>tc)),t(qs,"unsortedSegmentSum",(()=>nc)),t(qs,"unstack",(()=>Lo)),t(qs,"upperBound",(()=>rc)),t(qs,"variable",(()=>sc)),t(qs,"where",(()=>Ao)),t(qs,"whereAsync",(()=>oc)),t(qs,"zeros",(()=>Qs)),t(qs,"zerosLike",(()=>ea)),t(qs,"op",(()=>gn)),t(qs,"OP_SCOPE_SUFFIX",(()=>"__op")),t(qs,"fused",(()=>la));const js=gn({concat_:function(e,t=0){x(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=mn(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Ns(n[0]);const r=n,s={axis:t};return ln.runKernel("Concat",r,s)}});const Ks=gn({imag_:function(e){const t={input:fn(e,"input","imag")};return ln.runKernel("Imag",t)}});const Xs=gn({real_:function(e){const t={input:fn(e,"input","real")};return ln.runKernel("Real",t)}});const Ys=gn({reshape_:function(e,t){const n={x:fn(e,"x","reshape","string_or_numeric")},r={shape:t};return ln.runKernel("Reshape",n,r)}});const Zs=gn({slice_:function(e,t,n){const r=fn(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return ln.runKernel("Slice",s,a)}});const Js=gn({split_:function(e,t,n=0){const r={x:fn(e,"x","split")},s={numOrSizeSplits:t,axis:n};return ln.runKernel("SplitV",r,s)}});function Qs(e,t="float32"){if("complex64"===t){const t=Qs(e,"float32"),n=Qs(e,"float32");return yn(t,n)}const n=Q(N(e),t);return ln.makeTensor(n,e,t)}const ea=gn({zerosLike_:function(e){const t={x:fn(e,"x","zerosLike")};return ln.runKernel("ZerosLike",t)}});const ta=gn({fft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ln.runKernel("FFT",t)}});const na=gn({rfft_:function(e,t){x("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=Zs(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=js([e,Qs(r)],e.shape.length-1),n=t}else s=e;const a=ea(s),o=Ys(yn(s,a),[r,n]),i=ta(o),l=Math.floor(n/2)+1,u=Xs(i),c=Ks(i),p=Js(u,[l,n-l],u.shape.length-1),h=Js(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,Ys(yn(p[0],h[0]),d)}});const ra=gn({ifft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ln.runKernel("IFFT",t)}});const sa=gn({mul_:function(e,t){let n=fn(e,"a","mul"),r=fn(t,"b","mul");[n,r]=en(n,r);const s={a:n,b:r};return ln.runKernel("Multiply",s)}});const aa=gn({reverse_:function(e,t){const n={x:fn(e,"x","reverse")},r={dims:t};return ln.runKernel("Reverse",n,r)}});function oa(e,t){if((P(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&P(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return bn(e,[],[],t)}const ia=gn({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Ys(e,[n,t]);r=ra(s)}else{const s=[n,2*(t-1)],a=Ys(Xs(e),[n,t]),o=Ys(Ks(e),[n,t]),i=aa(Zs(a,[0,1],[n,t-2]),1),l=sa(aa(Zs(o,[0,1],[n,t-2]),1),oa(-1)),u=js([a,i],1),c=js([o,l],1),p=Ys(yn(u,c),[s[0],s[1]]);r=ra(p)}if(r=Xs(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Ys(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var la={};function ua(e){return ln.customGrad(e)}t(la,"conv2d",(()=>Oa)),t(la,"depthwiseConv2d",(()=>Ba)),t(la,"matMul",(()=>Va));const ca=gn({add_:function(e,t){let n=fn(e,"a","add"),r=fn(t,"b","add");[n,r]=en(n,r);const s={a:n,b:r};return ln.runKernel("Add",s)}});function pa(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}function ha(e,t,n,r,s,a,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=fa(n),[y,b]=fa(r),x=ma(h,y),w=ma(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=da(e,t,n));const a=e[0],o=e[1],i=ga((a-t+2*r)/n+1,s),l=ga((o-t+2*r)/n+1,s);return[i,l]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=ga((t-a+h+d)/r+1,i),p=ga((n-o+f+m)/s+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(s,u,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[l,S,v,N]:"channelsLast"===i&&(I=[l,v,N,S]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function da(e,t,n,r=1){const s=ma(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function fa(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function ma(e,t){return t<=1?e:e+(e-1)*(t-1)}function ga(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function ya(e){const[t,n,r]=fa(e);return 1===t&&1===n&&1===r}function ba(e,t){return ya(e)||ya(t)}function xa(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const wa=gn({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=fn(e,"x","conv2d","float32"),l=fn(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Ys(i,[1,i.shape[0],i.shape[1],i.shape[2]])),x(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),xa("conv2d",r,o);const p="NHWC"===s?u.shape[3]:u.shape[1];x(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),x(ba(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=ln.runKernel("Conv2D",h,d);return c?Ys(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ka=gn({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=Ys(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Ys(t,[1,t.shape[0],t.shape[1],t.shape[2]])),x(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),x(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),x(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];x(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),x(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),xa("conv2dDerFilter",s,o);const p={x:i,dy:l},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return ln.runKernel("Conv2DBackpropFilter",p,h)}});const va=gn({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=Ys(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),x(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),x(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),x(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?l.shape[3]:l.shape[1];x(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),x(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),xa("conv2dDerInput",s,o);const h={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=ln.runKernel("Conv2DBackpropInput",h,d);return u?Ys(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Na=gn({elu_:function(e){const t={x:fn(e,"x","elu","float32")};return ln.runKernel("Elu",t)}});const Sa=gn({leakyRelu_:function(e,t=.2){const n={x:fn(e,"x","leakyRelu")},r={alpha:t};return ln.runKernel("LeakyRelu",n,r)}});const Ia=gn({prelu_:function(e,t){const n={x:fn(e,"x","prelu"),alpha:fn(t,"alpha","prelu")};return ln.runKernel("Prelu",n)}});const Ta=gn({relu_:function(e){const t={x:fn(e,"x","relu")};return ln.runKernel("Relu",t)}});const Ea=gn({relu6_:function(e){const t={x:fn(e,"x","relu6")};return ln.runKernel("Relu6",t)}});const $a=gn({sigmoid_:function(e){const t={x:fn(e,"x","sigmoid","float32")};return ln.runKernel("Sigmoid",t)}});const Ca=gn({step_:function(e,t=0){const n={x:fn(e,"x","step")},r={alpha:t};return ln.runKernel("Step",n,r)}});const Aa=gn({sum_:function(e,t=null,n=!1){let r=fn(e,"x","sum");"bool"===r.dtype&&(r=vs(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return ln.runKernel("Sum",s,a)}});function _a(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return sa(e,Ca(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ra(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(e.shape,t.shape);return r.length>0&&(n=Aa(n,r)),Ys(n,e.shape)}function Da(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Ta(e);if("elu"===t)return Na(e);if("relu6"===t)return Ea(e);if("prelu"===t)return Ia(e,n);if("leakyrelu"===t)return Sa(e,r);if("sigmoid"===t)return $a(e);throw new Error(`Unknown fused activation ${t}.`)}const Fa=(e,t)=>!(e>0)||"linear"===t;const Oa=gn({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Fa(ln.state.gradientDepth,l)){x("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=wa(e,t,n,r,s,a,o);return null!=i&&(p=ca(p,i)),Da(p,l,u,c)}const p=fn(e,"x","conv2d","float32"),h=fn(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Ys(p,[1,p.shape[0],p.shape[1],p.shape[2]])),x(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),xa("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];x(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),x(ba(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=ha(d.shape,h.shape,n,a,r,o);let y,b;if(null!=i&&(y=fn(i,"bias","fused conv2d"),[y]=en(y,p),"NHWC"===s?pa(g.outShape,y.shape):(x(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),x(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(x(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)x(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{pa(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=fn(u,"prelu weights","fused conv2d")}const w=(e,t)=>{x("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,u,c]=t,p=_a(e,u,l);x(ya(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[va(i.shape,p,o,n,r),ka(i,p,o.shape,n,r)];if(null!=c){const e=Ra(c,p);h.push(e)}return h},k={x:d,filter:h,bias:y,preluActivationWeights:b},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=ua(((e,t,n)=>{let r=ln.runKernel("FusedConv2D",k,v);return n([t,e,r]),f&&(r=Ys(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}));return e(d,h)}{const e=ua(((e,t,n,r)=>{let s=ln.runKernel("FusedConv2D",k,v);return r([t,e,s,n]),f&&(s=Ys(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}));return e(d,h,y)}}});const Ma=gn({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=fn(e,"x","depthwiseConv2d","float32"),l=fn(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Ys(i,[1,i.shape[0],i.shape[1],i.shape[2]])),x(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const p="NHWC"===s?u.shape[3]:u.shape[1];x(p===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`)),xa("depthwiseConv2d",r,o);const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=ln.runKernel("DepthwiseConv2dNative",h,d);return c?Ys(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const La=gn({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=Ys(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Ys(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return ln.runKernel("DepthwiseConv2dNativeBackpropFilter",u,c)}});const za=gn({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=Ys(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=ln.runKernel("DepthwiseConv2dNativeBackpropInput",u,c);return l?Ys(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Ba=gn({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Fa(ln.state.gradientDepth,l)){let p=Ma(e,t,n,r,s,a,o);return null!=i&&(p=ca(p,i)),Da(p,l,u,c)}const p=fn(e,"x","depthwiseConv2d","float32"),h=fn(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Ys(p,[1,p.shape[0],p.shape[1],p.shape[2]])),x(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),x(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),x(ba(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),xa("fused depthwiseConv2d",r,o);const m=ha(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=fn(i,"bias","fused conv2d"),[g]=en(g,p),pa(m.outShape,g.shape)),null!=u&&(y=fn(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{x(ya(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,u,c]=t,p=_a(e,u,l),h=za(i.shape,p,s,n,r,a,o),d=La(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,Ra(g,p)]}return[h,d]},w={x:d,filter:h,bias:g,preluActivationWeights:y},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=ua(((e,t,n)=>{let r=ln.runKernel("FusedDepthwiseConv2D",w,k);return n([t,e,r]),f&&(r=Ys(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=ua(((e,t,n,r)=>{let s=ln.runKernel("FusedDepthwiseConv2D",w,k);return r([t,e,s,n]),f&&(s=Ys(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,g)}}});const Pa=gn({matMul_:function(e,t,n=!1,r=!1){let s=fn(e,"a","matMul"),a=fn(t,"b","matMul");[s,a]=en(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return ln.runKernel("BatchMatMul",o,i)}});const Va=gn({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Fa(ln.state.gradientDepth,a)){let l=Pa(e,t,n,r);return null!=s&&(l=ca(l,s)),Da(l,a,o,i)}let l=fn(e,"a","fused matMul"),u=fn(t,"b","fused matMul");[l,u]=en(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=N(f),y=N(m);x(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=pa(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([h,d]),w=Ys(l,n?[g,c,h]:[g,h,c]),k=Ys(u,r?[y,d,p]:[y,p,d]);let v,S;null!=s&&(v=fn(s,"bias","fused matMul"),[v]=en(v,l),pa(b,v.shape)),null!=o&&(S=fn(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,l,u]=t,c=_a(Ys(e,l.shape),l,a);let p,h;if(n||r?!n&&r?(p=Pa(c,i,!1,!1),h=Pa(c,o,!0,!1)):n&&!r?(p=Pa(i,c,!1,!0),h=Pa(o,c,!1,!1)):(p=Pa(i,c,!0,!0),h=Pa(c,o,!0,!0)):(p=Pa(c,i,!1,!0),h=Pa(o,c,!0,!1)),null!=s){return[p,h,Ra(u,c)]}return[p,h]},T={a:w,b:k,bias:v,preluActivationWeights:S},E={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=ua(((e,t,n)=>{const r=ln.runKernel("_FusedMatMul",T,E);return n([e,t,r]),{value:Ys(r,b),gradFunc:I}}));return e(w,k)}{const e=ua(((e,t,n,r)=>{const s=ln.runKernel("_FusedMatMul",T,E);return r([e,t,s,n]),{value:Ys(s,b),gradFunc:I}}));return e(w,k,v)}}});var Wa={};function Ua(e,t){k(e);const n=pn(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return bn(e,null,n,t)}function Ga(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Ha(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return Ua(s,"float32")}t(Wa,"enclosingPowerOfTwo",(()=>Ga)),t(Wa,"cosineWindow",(()=>Ha));const qa=gn({hammingWindow_:function(e){return Ha(e,.54,.46)}});const ja=gn({hannWindow_:function(e){return Ha(e,.5,.5)}});function Ka(e,t,n){const r={shape:e,value:t,dtype:n};return ln.runKernel("Fill",{},r)}function Xa(e,t,n){if(k(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=pn(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return bn(e,t,r,n)}const Ya=gn({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(Zs(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=js([Zs(e,a,t-r),Ka([r],s)]);o.push(i),a+=n}return 0===o.length?Xa([],[0,t]):Ys(js(o),[o.length,t])}});const Za=gn({stft_:function(e,t,n,r,s=ja){null==r&&(r=Ga(t));const a=Ya(e,t,n),o=sa(a,s(t));return na(o,r)}});const Ja=gn({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=fn(e,"image","cropAndResize"),i=fn(t,"boxes","cropAndResize","float32"),l=fn(n,"boxInd","cropAndResize","int32"),u=i.shape[0];x(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),x(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),x(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),x(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),x(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),x("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:l},p={method:s,extrapolationValue:a,cropSize:r};return ln.runKernel("CropAndResize",c,p)}});const Qa=gn({flipLeftRight_:function(e){const t=fn(e,"image","flipLeftRight","float32");x(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return ln.runKernel("FlipLeftRight",n,{})}});const eo=gn({tile_:function(e,t){const n=fn(e,"x","tile","string_or_numeric");x(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return ln.runKernel("Tile",r,s)}});const to=gn({grayscaleToRGB_:function(e){const t=fn(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];x(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),x(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,eo(t,s)}});const no=gn({rotateWithOffset_:function(e,t,n=0,r=.5){const s=fn(e,"image","rotateWithOffset","float32");x(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return ln.runKernel("RotateWithOffset",a,o)}});function ro(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),x(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),x(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),x(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),x(1===t.rank,(()=>"scores must be a 1D tensor")),x(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),x(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const so=gn({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=fn(e,"boxes","nonMaxSuppression","float32"),o=fn(t,"scores","nonMaxSuppression","float32"),i=ro(a,o,n,r,s),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return ln.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},l)}});function ao(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||oo)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function oo(e,t){return e>t?1:e<t?-1:0}function io(e,t,n,r,s){return co(e,t,n,r,s,0)}function lo(e,t,n,r,s,a){return co(e,t,n,r,s,0,!1,a,!0)}function uo(e,t,n,r,s,a){return co(e,t,n,r,s,a,!0)}function co(e,t,n,r,s,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>s&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(fo);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=po(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*ho(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&ao(u,t,fo))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function po(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function ho(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function fo(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const mo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=fn(e,"boxes","nonMaxSuppressionAsync"),o=fn(t,"scores","nonMaxSuppressionAsync"),i=ro(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const l=await Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:p}=io(u,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),Ua(p,"int32")};const go=gn({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=fn(e,"boxes","nonMaxSuppression"),i=fn(t,"scores","nonMaxSuppression"),l=ro(o,i,n,r,s,a),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},p=ln.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const yo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=fn(e,"boxes","nonMaxSuppressionAsync"),i=fn(t,"scores","nonMaxSuppressionAsync"),l=ro(o,i,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h,selectedScores:d}=uo(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Ua(h,"int32"),selectedScores:Ua(d)}};const bo=gn({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=fn(e,"boxes","nonMaxSuppression"),i=fn(t,"scores","nonMaxSuppression"),l=ro(o,i,n,r,s,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},p=ln.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const xo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=fn(e,"boxes","nonMaxSuppressionAsync"),i=fn(t,"scores","nonMaxSuppressionAsync"),l=ro(o,i,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=lo(h,d,u,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Ua(f,"int32"),validOutputs:oa(m,"int32")}};const wo=gn({resizeBilinear_:function(e,t,n=!1,r=!1){const s=fn(e,"images","resizeBilinear");x(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),x(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),x(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Ys(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=ln.runKernel("ResizeBilinear",i,l);return o?Ys(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const ko=gn({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=fn(e,"images","resizeNearestNeighbor");x(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),x(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),x("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),x(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Ys(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=ln.runKernel("ResizeNearestNeighbor",i,l);return o?Ys(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const vo=gn({bincount_:function(e,t,n){const r=fn(e,"x","bincount"),s=fn(t,"weights","bincount");x("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return ln.runKernel("Bincount",a,o)}});const No=gn({lessEqual_:function(e,t){let n=fn(e,"a","lessEqual","string_or_numeric"),r=fn(t,"b","lessEqual","string_or_numeric");[n,r]=en(n,r),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("LessEqual",s)}});const So=gn({greater_:function(e,t){let n=fn(e,"a","greater","string_or_numeric"),r=fn(t,"b","greater","string_or_numeric");[n,r]=en(n,r),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("Greater",s)}});const Io=gn({floorDiv_:function(e,t){let n=fn(e,"a","floorDiv"),r=fn(t,"b","floorDiv");[n,r]=en(n,r);const s={a:n,b:r};return ln.runKernel("FloorDiv",s)}});const To=gn({div_:function(e,t){let n=fn(e,"a","div"),r=fn(t,"b","div");if([n,r]=en(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Io(n,r);const s={a:n,b:r};return ln.runKernel("RealDiv",s,{})}});const Eo=gn({sub_:function(e,t){let n=fn(e,"a","sub"),r=fn(t,"b","sub");[n,r]=en(n,r);const s={a:n,b:r};return ln.runKernel("Sub",s)}});const $o=gn({round_:function(e){const t={x:fn(e,"x","round")};return ln.runKernel("Round",t)}});const Co=gn({broadcastTo_:function(e,t){let n=fn(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Ys(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Ns(n);const o={x:n},i={reps:a};return ln.runKernel("Tile",o,i)}});const Ao=gn({where_:function(e,t,n){const r=fn(t,"a","where"),s=fn(n,"b","where"),a=fn(e,"condition","where","bool"),o=pa(pa(a.shape,r.shape),s.shape),i={condition:Co(a,o),t:Co(r,o),e:Co(s,o)};return ln.runKernel("Select",i)}});function _o(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return ln.runKernel("Range",{},s)}const Ro=gn({threshold_:function(e,t="binary",n=!1,r=.5){const s=fn(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,l,u,c=sa(Ua([r]),255);if(x(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),x(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),x("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),x("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,l]=Js(s,[1,1,1],-1);const e=sa(o,.2989),t=sa(i,.587),n=sa(l,.114);u=ca(ca(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,l=Ua([-1]),u=Ua([0]),c=Ua([0]);for(let p=0;p<e.size-1;p++){n=Zs(e,0,p+1),r=Zs(e,p+1),o=To(Aa(n),t),i=To(Aa(r),t);const h=Aa(sa(n,_o(0,n.size)));s=To(h,Aa(n));const d=Ka(r.shape,n.size),f=ca(_o(0,r.size),d),m=sa(r,f);a=To(Aa(m),Aa(r));const g=Eo(s,a),y=Eo(s,a),b=sa(o,i);c=sa(sa(b,g),y);const x=So(c,u);u=Ao(x,c,u),l=Ao(x,Ua([p]),l)}return l}(vo(vs($o(u),"int32"),xn([]),256),a)}const p=n?No(u,c):So(u,c);return vs(sa(p,255),"int32")}});const Do=gn({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=fn(e,"image","transform","float32"),i=fn(t,"transforms","transform","float32");x(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),x(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),x(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return ln.runKernel("Transform",l,u)}});const Fo=gn({greaterEqual_:function(e,t){let n=fn(e,"a","greaterEqual","string_or_numeric"),r=fn(t,"b","greaterEqual","string_or_numeric");[n,r]=en(n,r),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("GreaterEqual",s)}});const Oo=gn({logicalAnd_:function(e,t){const n=fn(e,"a","logicalAnd","bool"),r=fn(t,"b","logicalAnd","bool");pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("LogicalAnd",s)}});const Mo=gn({stack_:function(e,t=0){const n=mn(e,"tensors","stack","string_or_numeric");x(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&x(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return ln.runKernel("Pack",r,s)}});const Lo=gn({unstack_:function(e,t=0){const n=fn(e,"x","unstack","string_or_numeric");x(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return ln.runKernel("Unpack",r,s)}});const zo=gn({bandPart_:function(e,t,n){x(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),x(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=fn(e,"a","bandPart");x(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Ys(_o(0,a,1,"int32"),[-1,1]),l=_o(0,o,1,"int32"),u=Eo(i,l),c=Oo(No(u,oa(+t,"int32")),Fo(u,oa(-n,"int32"))),p=Qs([a,o],r.dtype);return Ys(Mo(Lo(Ys(r,[-1,a,o])).map((e=>Ao(c,e,p)))),s)}});var Bo={};t(Bo,"norm",(()=>Ko));const Po=gn({abs_:function(e){const t=fn(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return ln.runKernel("ComplexAbs",e)}{const e={x:t};return ln.runKernel("Abs",e)}}});function Vo(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}(e,t.map((e=>1)),t)}const Wo=gn({max_:function(e,t=null,n=!1){const r={x:fn(e,"x","max")},s={reductionIndices:t,keepDims:n};return ln.runKernel("Max",r,s)}});const Uo=gn({min_:function(e,t=null,n=!1){const r={x:fn(e,"x","min")},s={axis:t,keepDims:n};return ln.runKernel("Min",r,s)}});const Go=gn({pow_:function(e,t){let n=fn(e,"base","pow"),r=fn(t,"exp","pow");[n,r]=en(n,r);const s={a:n,b:r};return ln.runKernel("Pow",s)}});const Ho=gn({sqrt_:function(e){const t={x:fn(e,"x","sqrt","float32")};return ln.runKernel("Sqrt",t)}});const qo=gn({square_:function(e){const t=fn(e,"x","square");return ln.runKernel("Square",{x:t},{})}});function jo(e,t,n=null){if(0===e.rank)return Po(e);if(1!==e.rank&&null===n)return jo(Ys(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Aa(Po(e),n);if(t===1/0)return Wo(Po(e),n);if(t===-1/0)return Uo(Po(e),n);if("euclidean"===t||2===t)return Ho(Aa(Go(Po(e),oa(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Wo(Aa(Po(e),n[0]),n[1]-1);if(t===1/0)return Wo(Aa(Po(e),n[1]),n[0]);if(t===-1/0)return Uo(Aa(Po(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Ho(Aa(qo(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Ko=gn({norm_:function(e,t="euclidean",n=null,r=!1){const s=jo(e=fn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=D(n,e.shape);a=Vo(s.shape,t)}return Ys(s,a)}});const Xo=gn({squeeze_:function(e,t){const n=fn(e,"x","squeeze","string_or_numeric");return Ys(n,F(n.shape,t).newShape)}});const Yo=gn({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,x(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)x(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Js(e,e.shape[0],0).map((e=>Xo(e,[0])));x(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(ln.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=sa(Aa(sa(n[r],e)),n[r]);e=Eo(e,t)}return To(e,Ko(e,"euclidean"))})));return t?Mo(n,0):n}});function Zo(e,t){return ln.tidy(e,t)}function Jo(e){return ln.keep(e)}Bt=function(e){ie().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const Qo=gn({expandDims_:function(e,t=0){const n=fn(e,"x","expandDims","string_or_numeric");x(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return ln.runKernel("ExpandDims",r,s)}});const ei=gn({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=ks([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=Ys(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return eo(Qo(o,0),[n[0],1,1]);if(2===n.length)return eo(Qo(Qo(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return eo(Qo(Qo(Qo(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const ti=gn({neg_:function(e){const t={x:fn(e,"x","neg")};return ln.runKernel("Neg",t)}});var ni={};t(ni,"transpose",(()=>ri));const ri=gn({transpose_:function(e,t,n){const r=fn(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),x(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{x(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?Zo((()=>{let e=Xs(r),t=Ks(r);return e=ln.runKernel("Transpose",{x:e},a),t=ln.runKernel("Transpose",{x:t},a),n&&(t=ti(t)),yn(e,t)})):ln.runKernel("Transpose",s,a)}});function si(e,t=!1){return ln.tidy((()=>{x(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=ei(n),a=Ns(e);const o=Xa([[1]],[1,1]);let i=Ns(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,l=i,u=s;[i,a,s]=ln.tidy((()=>{const t=Zs(a,[e,e],[n-e,1]),l=Ko(t),u=Zs(a,[e,e],[1,1]),c=Ao(So(u,0),Xa([[-1]]),Xa([[1]])),p=Eo(u,sa(c,l)),h=To(t,p);i=1===h.shape[0]?Ns(o):js([o,Zs(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=ti(To(Pa(c,p),l)),f=Zs(a,[e,0],[n-e,r]),m=sa(d,i),g=ri(i);if(0===e)a=Eo(f,Pa(m,Pa(g,f)));else{const t=Eo(f,Pa(m,Pa(g,f)));a=js([Zs(a,[0,0],[e,r]),t],0)}const y=ri(m),b=Zs(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Eo(b,Pa(Pa(b,i),y));else{const t=Eo(b,Pa(Pa(b,i),y));s=js([Zs(s,[0,0],[n,e]),t],1)}return[i,a,s]})),tn([t,l,u]).forEach((e=>e.dispose()))}return!t&&n>r&&(s=Zs(s,[0,0],[n,r]),a=Zs(a,[0,0],[r,r])),[s,a]}))}const ai=gn({qr_:function(e,t=!1){if(x(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return si(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Lo(Ys(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=si(e,t);s.push(n),a.push(r)}));return[Ys(Mo(s,0),e.shape),Ys(Mo(a,0),e.shape)]}}});var oi,ii;(ii=oi||(oi={}))[ii.NONE=0]="NONE",ii[ii.MEAN=1]="MEAN",ii[ii.SUM=2]="SUM",ii[ii.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const li=gn({mean_:function(e,t=null,n=!1){const r={x:fn(e,"x","mean")},s={axis:t,keepDims:n};return ln.runKernel("Mean",r,s)}});const ui=gn({notEqual_:function(e,t){let n=fn(e,"a","notEqual","string_or_numeric"),r=fn(t,"b","notEqual","string_or_numeric");[n,r]=en(n,r),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("NotEqual",s)}});function ci(e,t="float32"){if("complex64"===t){const t=ci(e,"float32"),n=Qs(e,"float32");return yn(t,n)}const n=J(N(e),t);return ln.makeTensor(n,e,t)}const pi=gn({computeWeightedLoss_:function(e,t,n=oi.SUM_BY_NONZERO_WEIGHTS){const r=fn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=fn(t,"weights","computeWeightedLoss"));const a=null==s?r:sa(r,s);if(n===oi.NONE)return a;if(n===oi.SUM)return Aa(a);if(n===oi.MEAN){if(null==s)return li(a);{const e=r.size/s.size,t=To(Aa(a),Aa(s));return e>1?To(t,oa(e)):t}}if(n===oi.SUM_BY_NONZERO_WEIGHTS){if(null==s)return To(Aa(a),oa(r.size));{const e=sa(s,ci(r.shape)),t=vs(Aa(ui(e,oa(0))),"float32");return To(Aa(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const hi=gn({absoluteDifference_:function(e,t,n,r=oi.SUM_BY_NONZERO_WEIGHTS){const s=fn(e,"labels","absoluteDifference"),a=fn(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=fn(n,"weights","absoluteDifference")),w(s.shape,a.shape,"Error in absoluteDifference: ");const i=Po(Eo(s,a));return pi(i,o,r)}});const di=gn({cosineDistance_:function(e,t,n,r,s=oi.SUM_BY_NONZERO_WEIGHTS){const a=fn(e,"labels","cosineDistance"),o=fn(t,"predictions","cosineDistance");let i=null;null!=r&&(i=fn(r,"weights","cosineDistance")),w(a.shape,o.shape,"Error in cosineDistance: ");const l=oa(1),u=Eo(l,Aa(sa(a,o),n,!0));return pi(u,i,s)}});const fi=gn({hingeLoss_:function(e,t,n,r=oi.SUM_BY_NONZERO_WEIGHTS){let s=fn(e,"labels","hingeLoss");const a=fn(t,"predictions","hingeLoss");let o=null;null!=n&&(o=fn(n,"weights","hingeLoss")),w(s.shape,a.shape,"Error in hingeLoss: ");const i=oa(1);s=Eo(sa(oa(2),s),i);const l=Ta(Eo(i,sa(s,a)));return pi(l,o,r)}});const mi=gn({minimum_:function(e,t){let n=fn(e,"a","minimum"),r=fn(t,"b","minimum");[n,r]=en(n,r),"bool"===n.dtype&&(n=vs(n,"int32"),r=vs(r,"int32")),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("Minimum",s)}});const gi=gn({huberLoss_:function(e,t,n,r=1,s=oi.SUM_BY_NONZERO_WEIGHTS){const a=fn(e,"labels","huberLoss"),o=fn(t,"predictions","huberLoss");let i=null;null!=n&&(i=fn(n,"weights","huberLoss")),w(a.shape,o.shape,"Error in huberLoss: ");const l=oa(r),u=Po(Eo(o,a)),c=mi(u,l),p=Eo(u,c),h=ca(sa(oa(.5),qo(c)),sa(l,p));return pi(h,i,s)}});const yi=gn({log_:function(e){const t={x:fn(e,"x","log","float32")};return ln.runKernel("Log",t)}});const bi=gn({logLoss_:function(e,t,n,r=1e-7,s=oi.SUM_BY_NONZERO_WEIGHTS){const a=fn(e,"labels","logLoss"),o=fn(t,"predictions","logLoss");let i=null;null!=n&&(i=fn(n,"weights","logLoss")),w(a.shape,o.shape,"Error in logLoss: ");const l=oa(1),u=oa(r),c=ti(sa(a,yi(ca(o,u)))),p=sa(Eo(l,a),yi(ca(Eo(l,o),u))),h=Eo(c,p);return pi(h,i,s)}});const xi=gn({squaredDifference_:function(e,t){let n=fn(e,"a","squaredDifference"),r=fn(t,"b","squaredDifference");[n,r]=en(n,r),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("SquaredDifference",s,{})}});const wi=gn({meanSquaredError_:function(e,t,n,r=oi.SUM_BY_NONZERO_WEIGHTS){const s=fn(e,"labels","meanSquaredError"),a=fn(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=fn(n,"weights","meanSquaredError")),w(s.shape,a.shape,"Error in meanSquaredError: ");const i=xi(s,a);return pi(i,o,r)}});const ki=gn({exp_:function(e){const t={x:fn(e,"x","exp")};return ln.runKernel("Exp",t)}});const vi=gn({log1p_:function(e){const t={x:fn(e,"x","log1p")};return ln.runKernel("Log1p",t)}});const Ni=gn({sigmoidCrossEntropy_:function(e,t,n,r=0,s=oi.SUM_BY_NONZERO_WEIGHTS){let a=fn(e,"multiClassLabels","sigmoidCrossEntropy");const o=fn(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=fn(n,"weights","sigmoidCrossEntropy")),w(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=oa(r),t=oa(1),n=oa(.5);a=ca(sa(a,Eo(t,e)),sa(n,e))}const l=function(e,t){const n=fn(e,"labels","sigmoidCrossEntropyWithLogits"),r=fn(t,"logits","sigmoidCrossEntropyWithLogits");w(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Ta(r),a=sa(r,n),o=vi(ki(ti(Po(r))));return ca(Eo(s,a),o)}(a,o);return pi(l,i,s)}});const Si=gn({logSumExp_:function(e,t=null,n=!1){const r=fn(e,"x","logSumExp"),s=D(t,r.shape),a=Wo(r,s,!0),o=Eo(r,a),i=ki(o),l=Aa(i,s),u=yi(l),c=ca(Ys(a,u.shape),u);if(n){const e=Vo(c.shape,s);return Ys(c,e)}return c}});const Ii=gn({softmaxCrossEntropy_:function(e,t,n,r=0,s=oi.SUM_BY_NONZERO_WEIGHTS){let a=fn(e,"onehotLabels","softmaxCrossEntropy");const o=fn(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=fn(n,"weights","softmaxCrossEntropy")),w(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=oa(r),t=oa(1),n=oa(a.shape[1]);a=ca(sa(a,Eo(t,e)),To(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=ua(((e,t,r)=>{const s=Si(t,[n],!0),a=Eo(vs(t,"float32"),s);r([e,a]);const o=ti(sa(a,e));return{value:Aa(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Vo(e.shape,[n]);return[sa(Ys(e,a),Eo(vs(r,"float32"),ki(s))),sa(Ys(e,a),Eo(ki(s),vs(r,"float32")))]}}}));return r(e,t)}(a,o);return pi(l,i,s)}});const Ti=gn({sparseFillEmptyRows_:function(e,t,n,r){const s=fn(e,"indices","sparseFillEmptyRows","int32"),a=fn(t,"values","sparseFillEmptyRows"),o=fn(n,"denseShape","sparseFillEmptyRows","int32"),i=fn(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:s,values:a,denseShape:o,defaultValue:i},u=ln.runKernel("SparseFillEmptyRows",l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const Ei=gn({sparseReshape_:function(e,t,n){const r=fn(e,"inputIndices","sparseReshape","int32"),s=fn(t,"inputShape","sparseReshape","int32"),a=fn(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=ln.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const $i=gn({sparseSegmentMean_:function(e,t,n){const r=fn(e,"data","sparseSegmentMean"),s=fn(t,"indices","sparseSegmentMean","int32"),a=fn(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return ln.runKernel("SparseSegmentMean",o)}});const Ci=gn({sparseSegmentSum_:function(e,t,n){const r=fn(e,"data","sparseSegmentSum"),s=fn(t,"indices","sparseSegmentSum","int32"),a=fn(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return ln.runKernel("SparseSegmentSum",o)}});const Ai=gn({stringNGrams_:function(e,t,n,r,s,a,o,i){const l=fn(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=fn(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:l,dataSplits:u},h=ln.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const _i=gn({stringSplit_:function(e,t,n=!0){const r=fn(e,"input","stringSplit","string"),s=fn(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=ln.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const Ri=gn({stringToHashBucketFast_:function(e,t){const n=fn(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return ln.runKernel("StringToHashBucketFast",s,r)}});const Di=gn({acos_:function(e){const t={x:fn(e,"x","acos")};return ln.runKernel("Acos",t)}});const Fi=gn({acosh_:function(e){const t={x:fn(e,"x","acosh")};return ln.runKernel("Acosh",t)}});const Oi=gn({addN_:function(e){x(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),x(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>fn(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!I(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return ln.runKernel("AddN",r)}});const Mi=gn({all_:function(e,t=null,n=!1){const r={x:fn(e,"x","all","bool")},s={axis:t,keepDims:n};return ln.runKernel("All",r,s)}});const Li=gn({any_:function(e,t=null,n=!1){const r={x:fn(e,"x","any","bool")},s={axis:t,keepDims:n};return ln.runKernel("Any",r,s)}});const zi=gn({argMax_:function(e,t=0){const n={x:fn(e,"x","argMax")},r={axis:t};return ln.runKernel("ArgMax",n,r)}});const Bi=gn({argMin_:function(e,t=0){const n={x:fn(e,"x","argMin")},r={axis:t};return ln.runKernel("ArgMin",n,r)}});const Pi=gn({asin_:function(e){const t={x:fn(e,"x","asin")};return ln.runKernel("Asin",t)}});const Vi=gn({asinh_:function(e){const t={x:fn(e,"x","asinh")};return ln.runKernel("Asinh",t)}});const Wi=gn({atan_:function(e){const t={x:fn(e,"x","atan")};return ln.runKernel("Atan",t)}});const Ui=gn({atan2_:function(e,t){let n=fn(e,"a","atan2"),r=fn(t,"b","atan2");[n,r]=en(n,r);const s={a:n,b:r};return ln.runKernel("Atan2",s)}});const Gi=gn({atanh_:function(e){const t={x:fn(e,"x","atanh")};return ln.runKernel("Atanh",t)}});const Hi=gn({avgPool_:function(e,t,n,r,s){const a=fn(e,"x","avgPool","float32");x(ba(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=Ys(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),xa("avgPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=ln.runKernel("AvgPool",l,u);return c=vs(c,a.dtype),i?Ys(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const qi=gn({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=fn(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=Ys(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),x("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),xa("avgPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=ln.runKernel("AvgPool3D",u,c);return p=vs(p,i.dtype),l?Ys(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const ji=gn({tanh_:function(e){const t={x:fn(e,"x","tanh","float32")};return ln.runKernel("Tanh",t)}});const Ki=gn({basicLSTMCell_:function(e,t,n,r,s,a){const o=fn(e,"forgetBias","basicLSTMCell"),i=fn(t,"lstmKernel","basicLSTMCell"),l=fn(n,"lstmBias","basicLSTMCell"),u=fn(r,"data","basicLSTMCell"),c=fn(s,"c","basicLSTMCell"),p=fn(a,"h","basicLSTMCell"),h=js([u,p],1),d=Pa(h,i),f=ca(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Zs(f,[0,0],y),x=Zs(f,[0,g],y),w=Zs(f,[0,2*g],y),k=Zs(f,[0,3*g],y),v=ca(sa($a(b),ji(x)),sa(c,$a(ca(o,w))));return[v,sa(ji(v),$a(k))]}});const Xi=gn({batchToSpaceND_:function(e,t,n){const r=fn(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));x(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),x(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),x(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return ln.runKernel("BatchToSpaceND",a,o)}});function Yi(e){let t;return t=0===e.rank||1===e.rank?Ys(e,[1,1,1,e.size]):2===e.rank?Ys(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Ys(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const Zi=gn({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=fn(e,"x","batchNorm"),i=fn(t,"mean","batchNorm"),l=fn(n,"variance","batchNorm");let u,c;null!=s&&(u=fn(s,"scale","batchNorm")),null!=r&&(c=fn(r,"offset","batchNorm")),x(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),x(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),x(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:Yi(o),scale:u,offset:c,mean:i,variance:l},h={varianceEpsilon:a},d=ln.runKernel("FusedBatchNorm",p,h);return Ys(d,o.shape)}});const Ji=gn({batchNorm2d_:function(e,t,n,r,s,a){const o=fn(e,"x","batchNorm"),i=fn(t,"mean","batchNorm"),l=fn(n,"variance","batchNorm");let u,c;return null!=s&&(u=fn(s,"scale","batchNorm")),null!=r&&(c=fn(r,"offset","batchNorm")),x(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),x(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),x(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Zi(o,i,l,c,u,a)}});const Qi=gn({batchNorm3d_:function(e,t,n,r,s,a){const o=fn(e,"x","batchNorm"),i=fn(t,"mean","batchNorm"),l=fn(n,"variance","batchNorm");let u,c;return null!=s&&(u=fn(s,"scale","batchNorm")),null!=r&&(c=fn(r,"offset","batchNorm")),x(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),x(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),x(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Zi(o,i,l,c,u,a)}});const el=gn({batchNorm4d_:function(e,t,n,r,s,a){const o=fn(e,"x","batchNorm"),i=fn(t,"mean","batchNorm"),l=fn(n,"variance","batchNorm");let u,c;return null!=s&&(u=fn(s,"scale","batchNorm")),null!=r&&(c=fn(r,"offset","batchNorm")),x(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),x(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),x(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Zi(o,i,l,c,u,a)}});const tl=gn({broadcastArgs_:function(e,t){const n=fn(e,"s0","broadcastArgs","int32"),r=fn(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return ln.runKernel("BroadcastArgs",s)}});const nl=gn({ceil_:function(e){const t={x:fn(e,"x","ceil","float32")};return ln.runKernel("Ceil",t)}});const rl=gn({clipByValue_:function(e,t,n){const r=fn(e,"x","clipByValue");if(x(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return Ka(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return ln.runKernel("ClipByValue",s,a)}});const sl=gn({concat1d_:function(e){return js(e,0)}});const al=gn({concat2d_:function(e,t){return js(e,t)}});const ol=gn({concat3d_:function(e,t){return js(e,t)}});const il=gn({concat4d_:function(e,t){return js(e,t)}});const ll=gn({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=fn(e,"x","conv1d"),l=fn(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=Ys(i,[1,i.shape[0],i.shape[1]])),x(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),x(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),xa("conv1d",r,o),x(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),x(ba(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),x("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=Ys(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=Ys(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=wa(h,p,[1,n],r,"NHWC",[1,a],o);return Ys(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const ul=gn({conv2dTranspose_:function(e,t,n,r,s,a){const o=fn(e,"x","conv2dTranspose"),i=fn(t,"filter","conv2dTranspose");return va(n,o,i,r,s,"NHWC",a)}});const cl=gn({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=fn(e,"x","conv3d"),i=fn(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Ys(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),x(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),x(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),x(ba(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:l,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=ln.runKernel("Conv3D",c,p);return u?Ys(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const pl=gn({conv3DBackpropInput_:function(e,t,n,r,s){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Ys(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=o.shape[4];x(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),x(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),x(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),x(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),x(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=ln.runKernel("Conv3DBackpropInputV2",c,p);return i?Ys(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const hl=gn({conv3dTranspose_:function(e,t,n,r,s){const a=fn(e,"x","conv3dTranspose"),o=fn(t,"filter","conv3dTranspose");return pl(n,a,o,r,s)}});const dl=gn({cos_:function(e){const t={x:fn(e,"x","cos","float32")};return ln.runKernel("Cos",t)}});const fl=gn({cosh_:function(e){const t={x:fn(e,"x","cosh","float32")};return ln.runKernel("Cosh",t)}});const ml=gn({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:fn(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return ln.runKernel("Cumprod",s,a)}});const gl=gn({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:fn(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return ln.runKernel("Cumsum",s,a)}});const yl=gn({denseBincount_:function(e,t,n,r=!1){const s=fn(e,"x","denseBincount"),a=fn(t,"weights","denseBincount");x("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),x(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return ln.runKernel("DenseBincount",o,i)}});const bl=gn({depthToSpace_:function(e,t,n="NHWC"){const r=fn(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];x(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),x(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),x(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),x(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},l={blockSize:t,dataFormat:n};return ln.runKernel("DepthToSpace",i,l)}});const xl=gn({diag_:function(e){const t={x:fn(e,"x","diag")};return ln.runKernel("Diag",t)}});const wl=gn({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=fn(e,"x","dilation2d"),i=fn(t,"filter","dilation2d");x(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),x(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),x("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=o,u=!1;3===o.rank&&(l=Ys(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0);const c={x:l,filter:i},p={strides:n,pad:r,dilations:s},h=ln.runKernel("Dilation2D",c,p);return u?Ys(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const kl=gn({equal_:function(e,t){let n=fn(e,"a","equal","string_or_numeric"),r=fn(t,"b","equal","string_or_numeric");[n,r]=en(n,r),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("Equal",s)}});const vl=gn({divNoNan_:function(e,t){let n=fn(e,"a","div"),r=fn(t,"b","div");[n,r]=en(n,r);const s=To(n,r),a=ea(s),o=kl(r,a);return Ao(o,a,s)}});const Nl=gn({dot_:function(e,t){const n=fn(e,"t1","dot"),r=fn(t,"t2","dot");x(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(x(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Ys(n,[1,-1]),t=Ys(r,[-1,1]),s=Pa(e,t);return Ys(s,[])}if(1===n.rank&&2===r.rank){const e=Ys(n,[1,-1]),t=Ys(r,[r.shape[0],r.shape[1]]),s=Pa(e,t);return Ys(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Ys(r,[-1,1]),t=Pa(n,e);return Ys(t,[t.size])}{const e=Ys(r,[r.shape[0],r.shape[1]]);return Pa(n,e)}}});const Sl=gn({einsum_:function(e,...t){const n=t.map(((e,t)=>fn(e,`tensors${t}`,"einsum"))),r={equation:e};return ln.runKernel("Einsum",n,r)}});const Il=gn({erf_:function(e){let t=fn(e,"x","erf");x("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=vs(t,"float32"));const n={x:t};return ln.runKernel("Erf",n)}});const Tl=gn({euclideanNorm_:function(e,t=null,n=!1){return Ko(e,"euclidean",t,n)}});const El=gn({expm1_:function(e){const t={x:fn(e,"x","expm1")};return ln.runKernel("Expm1",t)}});const $l=gn({floor_:function(e){const t={x:fn(e,"x","floor","float32")};return ln.runKernel("Floor",t)}});const Cl=gn({gather_:function(e,t,n=0,r=0){const s={x:fn(e,"x","gather"),indices:fn(t,"indices","gather","int32")},a={axis:n,batchDims:r};return ln.runKernel("GatherV2",s,a)}});const Al=gn({isFinite_:function(e){const t={x:fn(e,"x","isFinite")};return ln.runKernel("IsFinite",t)}});const _l=gn({isInf_:function(e){const t={x:fn(e,"x","isInf")};return ln.runKernel("IsInf",t)}});const Rl=gn({isNaN_:function(e){const t={x:fn(e,"x","isNaN")};return ln.runKernel("IsNan",t)}});const Dl=gn({less_:function(e,t){let n=fn(e,"a","less","string_or_numeric"),r=fn(t,"b","less","string_or_numeric");[n,r]=en(n,r),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("Less",s)}});function Fl(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return ln.runKernel("LinSpace",{},r)}const Ol=gn({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=fn(e,"x","localResponseNormalization");x(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),x(T(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=Ys(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:r,beta:s},c=ln.runKernel("LRN",l,u);return i?Ys(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Ml=gn({softplus_:function(e){const t={x:fn(e,"x","softplus")};return ln.runKernel("Softplus",t)}});const Ll=gn({logSigmoid_:function(e){const t=fn(e,"x","logSigmoid"),n=ua((e=>({value:ti(Ml(ti(e))),gradFunc:t=>sa(t,$a(ti(e)))})));return n(t)}});const zl=gn({logSoftmax_:function(e,t=-1){const n=fn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=ua(((e,n)=>{const r=Wo(e,t,!0),s=Eo(e,r),a=Eo(vs(s,"float32"),yi(Aa(ki(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=ki(r);return Eo(e,sa(Aa(e,t,!0),s))}}}));return r(n)}});const Bl=gn({logicalNot_:function(e){const t={x:fn(e,"x","logicalNot","bool")};return ln.runKernel("LogicalNot",t)}});const Pl=gn({logicalOr_:function(e,t){const n=fn(e,"a","logicalOr","bool"),r=fn(t,"b","logicalOr","bool");pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("LogicalOr",s)}});const Vl=gn({logicalXor_:function(e,t){const n=fn(e,"a","logicalXor","bool"),r=fn(t,"b","logicalXor","bool");return pa(n.shape,r.shape),Oo(Pl(e,t),Bl(Oo(e,t)))}});var Wl={};t(Wl,"searchSorted",(()=>Ul));const Ul=gn({searchSorted_:function(e,t,n="left"){const r=fn(e,"sortedSequence","searchSorted"),s=fn(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=Ys(r,[-1,a]),l=Ys(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(N(l.shape)>=2147483648)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=2147483648)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const u={sortedSequence:i,values:l},c={side:n};return ln.runKernel("SearchSorted",u,c)}});function Gl(e,t){return Ul(e,t,"left")}const Hl=gn({maxPool_:function(e,t,n,r,s){const a=fn(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Ys(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),x(ba(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),xa("maxPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=ln.runKernel("MaxPool",l,u);return i?Ys(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ql=gn({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=fn(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=Ys(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),x("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),xa("maxPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=ln.runKernel("MaxPool3D",u,c);return l?Ys(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const jl=gn({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:fn(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=ln.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const Kl=gn({maximum_:function(e,t){let n=fn(e,"a","maximum"),r=fn(t,"b","maximum");[n,r]=en(n,r),"bool"===n.dtype&&(n=vs(n,"int32"),r=vs(r,"int32")),pa(n.shape,r.shape);const s={a:n,b:r};return ln.runKernel("Maximum",s)}});function Xl(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=fn(e,"x","meshgrid",e instanceof Pt?e.dtype:"float32");if(void 0===t)return[r];let s=fn(t,"y","meshgrid",t instanceof Pt?t.dtype:"float32");const a=N(r.shape),o=N(s.shape);return"xy"===n?(r=Ys(r,[1,-1]),s=Ys(s,[-1,1]),[Pa(ci([o,1],r.dtype),r),Pa(s,ci([1,a],s.dtype))]):(r=Ys(r,[-1,1]),s=Ys(s,[1,-1]),[Pa(r,ci([1,o],r.dtype)),Pa(ci([a,1],s.dtype),s)])}const Yl=gn({mirrorPad_:function(e,t,n){x("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=fn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");x(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)x(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),x(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return ln.runKernel("MirrorPad",o,a)}});const Zl=gn({mod_:function(e,t){let n=fn(e,"a","mod"),r=fn(t,"b","mod");[n,r]=en(n,r);const s={a:n,b:r};return ln.runKernel("Mod",s)}});const Jl=gn({moments_:function(e,t=null,n=!1){const r=D(t,(e=fn(e,"x","moments")).shape),s=li(e,r,n);let a=s.shape;n||(a=Vo(s.shape,r));const o=qo(Eo(vs(e,"float32"),Ys(s,a)));return{mean:s,variance:li(o,r,n)}}});const Ql=gn({multiRNNCell_:function(e,t,n,r){const s=fn(t,"data","multiRNNCell"),a=mn(n,"c","multiRNNCell"),o=mn(r,"h","multiRNNCell");let i=s;const l=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);l.push(n[0]),l.push(n[1]),i=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const eu=gn({multinomial_:function(e,t,n,r=!1){const s=fn(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Ys(s,[1,-1]):s},l={numSamples:t,seed:n,normalized:r},u=ln.runKernel("Multinomial",i,l);return 1===o?Ys(u,[u.size]):u}});const tu=gn({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:fn(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return ln.runKernel("OneHot",a,o)}});const nu=gn({onesLike_:function(e){const t={x:fn(e,"x","onesLike")};return ln.runKernel("OnesLike",t)}});const ru=gn({outerProduct_:function(e,t){const n=fn(e,"v1","outerProduct"),r=fn(t,"v2","outerProduct");x(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=Ys(n,[-1,1]),a=Ys(r,[1,-1]);return Pa(s,a)}});const su=gn({pad_:function(e,t,n=0){const r=fn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return ln.runKernel("PadV2",a,s)}});const au=gn({pad1d_:function(e,t,n=0){return x(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),su(e,[t],n)}});const ou=gn({pad2d_:function(e,t,n=0){return x(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),su(e,t,n)}});const iu=gn({pad3d_:function(e,t,n=0){return x(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),su(e,t,n)}});const lu=gn({pad4d_:function(e,t,n=0){return x(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),su(e,t,n)}});const uu=gn({spaceToBatchND_:function(e,t,n){const r=fn(e,"x","spaceToBatchND");x(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),x(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),x(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return ln.runKernel("SpaceToBatchND",s,a)}});const cu=gn({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=fn(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=Ys(i,[1,i.shape[0],i.shape[1],i.shape[2]])),x(ba(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=function(e,t,n,r,s,a,o="channelsLast"){const[i,l]=fa(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return ha(e,u,n,r,s,a,!1,o)}(l.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),l=t.map(((e,t)=>[r[t],i[t]])),u=t.map(((e,t)=>[0,o[t]]));return[l,u]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?l:uu(l,p,f),b=("avg"===n?()=>Hi(y,t,a,g,o):()=>Hl(y,t,a,g,o))(),w=d?b:Xi(b,p,m);return u?Ys(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const pu=gn({prod_:function(e,t=null,n=!1){let r=fn(e,"x","prod");"bool"===r.dtype&&(r=vs(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return ln.runKernel("Prod",s,a)}});const hu=gn({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>fn(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:fn(t,"paramsDenseValues","raggedGather"),indices:fn(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=ln.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const du=gn({raggedTensorToTensor_:function(e,t,n,r,s){const a=fn(e,"shape","raggedTensorToTensor","int32"),o=fn(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:fn(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>fn(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:s};return ln.runKernel("RaggedTensorToTensor",i,l)}});const fu=gn({rand_:function(e,t,n){const r=N(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return ln.makeTensor(s,e,n)}});var mu={},gu=a("cmoHh"),yu=a("euRi5"),bu=a("hDsEw"),xu=a("3J2Zm"),wu=a("6Px8M"),ku=a("lDm0S"),vu={};!function(e,t,n){var r,s=256,o=n.pow(s,6),i=n.pow(2,52),l=2*i,u=255;function c(a,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[a,m(t)]:null==a?function(){try{var n;return r&&(n=r.randomBytes)?n=n(s):(n=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(n)),m(n)}catch(n){var a=e.navigator,o=a&&a.plugins;return[+new Date,e,o,e.screen,m(t)]}}():a,3),g),b=new p(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*s,t*=s,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,r,s){return s&&(s.S&&h(s,b),e.state=function(){return h(b,{})}),r?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function p(e){var t,n=e.length,r=this,a=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<s;)i[a]=a++;for(a=0;a<s;a++)i[a]=i[o=u&o+e[a%n]+(t=i[a])],i[o]=t;(r.g=function(e){for(var t,n=0,a=r.i,o=r.j,i=r.S;e--;)t=i[a=u&a+1],n=n*s+i[u&(i[a]=i[o=u&o+t])+(i[o]=t)];return r.i=a,r.j=o,n})(s)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(d(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function f(e,t){for(var n,r=e+"",s=0;s<r.length;)t[u&s]=u&(n^=19*t[u&s])+r.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),vu){vu=c;try{r=a("kjyEk")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n.seedrandom=c}("undefined"!=typeof self?self:vu,[],Math),vu.alea=gu,vu.xor128=yu,vu.xorwow=bu,vu.xorshift7=xu,vu.xor4096=wu,vu.tychei=ku,mu=vu;class Nu{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=mu.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Su{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=mu.alea(s.toString()),this.randn=new Nu(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Iu{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=mu.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Tu=gn({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Su(t,n,r,s),o=ks(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Eu=gn({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Nu(t,n,r,!1,s),o=ks(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const $u=gn({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Eu(e,0,1,t,n)}});const Cu=gn({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=ks(e,r),o=new Iu(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const Au=gn({reciprocal_:function(e){const t={x:fn(e,"x","reciprocal")};return ln.runKernel("Reciprocal",t)}});const _u=gn({reverse1d_:function(e){const t=fn(e,"x","reverse");return x(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),aa(t,0)}});const Ru=gn({reverse2d_:function(e,t){const n=fn(e,"x","reverse");return x(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),aa(n,t)}});const Du=gn({reverse3d_:function(e,t){const n=fn(e,"x","reverse");return x(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),aa(n,t)}});const Fu=gn({reverse4d_:function(e,t){const n=fn(e,"x","reverse");return x(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),aa(n,t)}});const Ou=gn({rsqrt_:function(e){const t={x:fn(e,"x","rsqrt","float32")};return ln.runKernel("Rsqrt",t)}});const Mu=gn({selu_:function(e){const t={x:fn(e,"x","selu")};return ln.runKernel("Selu",t)}});const Lu=gn({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=fn(e,"x","separableConv2d"),l=fn(t,"depthwiseFilter","separableConv2d"),u=fn(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Ys(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");x(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),x(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),x(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),x(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const h=l.shape[2],d=l.shape[3];x(u.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${u.shape[2]}.`));const f=Ma(c,l,r,s,o,a),m=wa(f,u,1,"valid",o);return p?Ys(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const zu=async function(e,t){const n=fn(e,"x","setdiff1d"),r=fn(t,"y","setdiff1d");x(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),x(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),x(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const l=new Mt([i],n.dtype),u=new Mt([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(l.values[t]=s[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const Bu=gn({sign_:function(e){const t={x:fn(e,"x","sign")};return ln.runKernel("Sign",t)}});const Pu=gn({sin_:function(e){const t={x:fn(e,"x","sin","float32")};return ln.runKernel("Sin",t)}});const Vu=gn({sinh_:function(e){const t={x:fn(e,"x","sinh")};return ln.runKernel("Sinh",t)}});const Wu=gn({slice1d_:function(e,t,n){const r=fn(e,"x","slice1d");return x(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Zs(r,[t],[n])}});const Uu=gn({slice2d_:function(e,t,n){const r=fn(e,"x","slice2d");return x(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Zs(r,t,n)}});const Gu=gn({slice3d_:function(e,t,n){const r=fn(e,"x","slice3d");return x(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Zs(r,t,n)}});const Hu=gn({slice4d_:function(e,t,n){const r=fn(e,"x","slice4d");return x(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Zs(r,t,n)}});const qu=gn({softmax_:function(e,t=-1){const n=fn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return ln.runKernel("Softmax",r,s)}});const ju=gn({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,l=0){const u={x:fn(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return ln.runKernel("StridedSlice",u,c)}});const Ku=gn({tan_:function(e){const t={x:fn(e,"x","tan","float32")};return ln.runKernel("Tan",t)}});function Xu(e,t,n){if(k(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=pn(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return bn(e,t,r,n)}function Yu(e,t,n){if(k(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=pn(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return bn(e,t,r,n)}function Zu(e,t,n){if(k(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=pn(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return bn(e,t,r,n)}function Ju(e,t,n){if(k(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=pn(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return bn(e,t=t||r,r,n)}const Qu=gn({topk_:function(e,t=1,n=!0){const r=fn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,l]=ln.runKernel("TopK",a,o);return{values:i,indices:l}}});const ec=gn({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Nu(t,n,r,!0,s),o=ks(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const tc=gn({unique_:function(e,t=0){const n=fn(e,"x","unique","string_or_numeric");x(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=ln.runKernel("Unique",r,s);return{values:a,indices:o}}});const nc=gn({unsortedSegmentSum_:function(e,t,n){const r=fn(e,"x","unsortedSegmentSum"),s=fn(t,"segmentIds","unsortedSegmentSum","int32");x(T(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return ln.runKernel("UnsortedSegmentSum",a,o)}});function rc(e,t){return Ul(e,t,"right")}function sc(e,t=!0,n,r){return ln.makeVariable(e,t,n,r)}function ac(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=ks(e,"int32"),s=ks([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const oc=async function(e){const t=fn(e,"condition","whereAsync","bool"),n=await t.data(),r=ac(t.shape,n);return e!==t&&t.dispose(),r};var ic={};t(ic,"booleanMaskAsync",(()=>lc));const lc=async function(e,t,n){const r=fn(e,"tensor","boolMask"),s=fn(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;x(o>0,(()=>"mask cannot be scalar")),w(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+o;e++)l*=i[e];const u=i.slice(0,a).concat([l],i.slice(a+o)),c=Ys(r,u),p=Ys(s,[-1]),h=await oc(p),d=Xo(h,[1]),f=Cl(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var uc={};t(uc,"movingAverage",(()=>cc));const cc=gn({movingAverage_:function(e,t,n,r,s=!0){const a=fn(e,"v","movingAverage"),o=fn(t,"x","movingAverage"),i=fn(n,"decay","movingAverage");var l,u;u=o,x((l=a).dtype===u.dtype,(()=>`The dtypes of the first(${l.dtype}) and second(${u.dtype}) input must match`)),x(I(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const c=oa(1),p=Eo(c,i);let h=sa(Eo(o,a),p);if(s){x(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=fn(r,"step","movingAverage");h=To(h,Eo(c,Go(i,e)))}return ca(a,h)}});var pc={};function hc(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}(n,t,e)}t(pc,"scatterND",(()=>dc));const dc=gn({scatterND_:function(e,t,n){const r=fn(e,"indices","scatterND","int32"),s=fn(t,"updates","scatterND");hc(s,r,n);const a={indices:r,updates:s},o={shape:n};return ln.runKernel("ScatterNd",a,o)}});var fc={};t(fc,"sparseToDense",(()=>mc));const mc=gn({sparseToDense_:function(e,t,n,r=0){const s=fn(e,"sparseIndices","sparseToDense","int32"),a=fn(t,"sparseValues","sparseToDense","string_or_numeric"),o=fn(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},l={outputShape:n};return ln.runKernel("SparseToDense",i,l)}});var gc={};t(gc,"gatherND",(()=>yc));const yc=gn({gatherND_:function(e,t){const n=fn(t,"indices","gatherND","int32"),r={params:fn(e,"x","gatherND","string_or_numeric"),indices:n};return ln.runKernel("GatherNd",r)}});var bc={};function xc(e,t){if(null==t)return e.shape.slice();if(I(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(bc,"dropout",(()=>wc));const wc=gn({dropout_:function(e,t,n,r){const s=fn(e,"x","dropout");if(x("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),x(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Pt?s.clone():s;const a=xc(s,n),o=1-t,i=To($l(ca(Cu(a,0,1,"float32",r),o)),o);return sa(s,i)}});var kc={};t(kc,"inTopKAsync",(()=>vc));const vc=async function(e,t,n=1){const r=fn(e,"predictions","inTopK"),s=fn(t,"targets","inTopK");x(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),x(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),w(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];x(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[l,u]=[o.length/a,a],c=O("bool",l);for(let e=0;e<l;e++){const t=e*u,r=o.subarray(t,t+u),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),xn(c,s.shape,"bool")},Nc={fft:ta,ifft:ra,rfft:na,irfft:ia},Sc={hammingWindow:qa,hannWindow:ja,frame:Ya,stft:Za},Ic={flipLeftRight:Qa,grayscaleToRGB:to,resizeNearestNeighbor:ko,resizeBilinear:wo,rotateWithOffset:no,cropAndResize:Ja,nonMaxSuppression:so,nonMaxSuppressionAsync:mo,nonMaxSuppressionWithScore:go,nonMaxSuppressionWithScoreAsync:yo,nonMaxSuppressionPadded:bo,nonMaxSuppressionPaddedAsync:xo,threshold:Ro,transform:Do},Tc={bandPart:zo,gramSchmidt:Yo,qr:ai},Ec={absoluteDifference:hi,computeWeightedLoss:pi,cosineDistance:di,hingeLoss:fi,huberLoss:gi,logLoss:bi,meanSquaredError:wi,sigmoidCrossEntropy:Ni,softmaxCrossEntropy:Ii},$c={sparseFillEmptyRows:Ti,sparseReshape:Ei,sparseSegmentMean:$i,sparseSegmentSum:Ci},Cc={stringNGrams:Ai,stringSplit:_i,stringToHashBucketFast:Ri};n(qs,ic),n(qs,ni),n(qs,Bo),n(qs,uc),n(qs,pc),n(qs,Wl),n(qs,fc),n(qs,gc),n(qs,bc),n(qs,Wa),n(qs,kc);var Ac,_c,Rc;ie().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),(_c=Ac||(Ac={}))[_c.DT_INVALID=0]="DT_INVALID",_c[_c.DT_FLOAT=1]="DT_FLOAT",_c[_c.DT_DOUBLE=2]="DT_DOUBLE",_c[_c.DT_INT32=3]="DT_INT32",_c[_c.DT_UINT8=4]="DT_UINT8",_c[_c.DT_INT16=5]="DT_INT16",_c[_c.DT_INT8=6]="DT_INT8",_c[_c.DT_STRING=7]="DT_STRING",_c[_c.DT_COMPLEX64=8]="DT_COMPLEX64",_c[_c.DT_INT64=9]="DT_INT64",_c[_c.DT_BOOL=10]="DT_BOOL",_c[_c.DT_QINT8=11]="DT_QINT8",_c[_c.DT_QUINT8=12]="DT_QUINT8",_c[_c.DT_QINT32=13]="DT_QINT32",_c[_c.DT_BFLOAT16=14]="DT_BFLOAT16",_c[_c.DT_QINT16=15]="DT_QINT16",_c[_c.DT_QUINT16=16]="DT_QUINT16",_c[_c.DT_UINT16=17]="DT_UINT16",_c[_c.DT_COMPLEX128=18]="DT_COMPLEX128",_c[_c.DT_HALF=19]="DT_HALF",_c[_c.DT_RESOURCE=20]="DT_RESOURCE",_c[_c.DT_VARIANT=21]="DT_VARIANT",_c[_c.DT_UINT32=22]="DT_UINT32",_c[_c.DT_UINT64=23]="DT_UINT64",_c[_c.DT_FLOAT_REF=101]="DT_FLOAT_REF",_c[_c.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",_c[_c.DT_INT32_REF=103]="DT_INT32_REF",_c[_c.DT_UINT8_REF=104]="DT_UINT8_REF",_c[_c.DT_INT16_REF=105]="DT_INT16_REF",_c[_c.DT_INT8_REF=106]="DT_INT8_REF",_c[_c.DT_STRING_REF=107]="DT_STRING_REF",_c[_c.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",_c[_c.DT_INT64_REF=109]="DT_INT64_REF",_c[_c.DT_BOOL_REF=110]="DT_BOOL_REF",_c[_c.DT_QINT8_REF=111]="DT_QINT8_REF",_c[_c.DT_QUINT8_REF=112]="DT_QUINT8_REF",_c[_c.DT_QINT32_REF=113]="DT_QINT32_REF",_c[_c.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",_c[_c.DT_QINT16_REF=115]="DT_QINT16_REF",_c[_c.DT_QUINT16_REF=116]="DT_QUINT16_REF",_c[_c.DT_UINT16_REF=117]="DT_UINT16_REF",_c[_c.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",_c[_c.DT_HALF_REF=119]="DT_HALF_REF",_c[_c.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",_c[_c.DT_VARIANT_REF=121]="DT_VARIANT_REF",_c[_c.DT_UINT32_REF=122]="DT_UINT32_REF",_c[_c.DT_UINT64_REF=123]="DT_UINT64_REF",function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Rc||(Rc={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Dc={};function Fc(e){return Dc[e]}function Oc(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Mc(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,o).map((e=>Mc(e,n,r,s)))}const i=Mc(t.inputNames.slice(e)[0],n,r,s),l=i.dataSync();return"number"===a.type?l[0]:Fe.toNestedArray(i.shape,l)}const o=t.attrParams[e];return o&&o.value}function Mc(e,t,n,r){const[s,a]=Pc(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[Bc(s,e)]));return void 0!==o?t[Bc(s,o)][a]:void 0}function Lc(e,t,n){return t[Bc(e,n.currentContextId)]}function zc(e,t){const[n,r,s]=Pc(e);return[Bc(n,t&&t.currentContextId),r,s]}function Bc(e,t){return t?`${e}-${t}`:e}function Pc(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function Vc(e,t,n){let r=Oc("pad",e,t,n);if("explicit"===r){r=Oc("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function Wc(e){return e.kept?e:Ns(e)}var Uc={};t(Uc,"json",(()=>Gc));const Gc=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Hc={};t(Hc,"json",(()=>qc));const qc=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var jc={};t(jc,"json",(()=>Kc));const Kc=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var Xc={};t(Xc,"json",(()=>Yc));const Yc=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var Zc={};t(Zc,"json",(()=>Jc));const Jc=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var Qc={};t(Qc,"json",(()=>ep));const ep=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var tp={};t(tp,"json",(()=>np));const np=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var rp={};t(rp,"json",(()=>sp));const sp=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var ap={};t(ap,"json",(()=>op));const op=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var ip={};t(ip,"json",(()=>lp));const lp=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var up={};t(up,"json",(()=>cp));const cp=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var pp={};t(pp,"json",(()=>hp));const hp=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var dp={};t(dp,"json",(()=>fp));const fp=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var mp={};t(mp,"json",(()=>gp));const gp=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var yp={};t(yp,"json",(()=>bp));const bp=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var xp={};t(xp,"json",(()=>wp));const wp=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var kp={};t(kp,"json",(()=>vp));const vp=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var Np={};t(Np,"json",(()=>Sp));const Sp=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var Ip={};t(Ip,"json",(()=>Tp));const Tp=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Ep=kn;class $p{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Uc,Hc,jc,Xc,Zc,Qc,tp,rp,ap,ip,up,pp,dp,mp,yp,xp,kp,Np,Ip].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=zc(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=zc(e),n=o[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=zc(e),n=o[t];n&&(n.signatureKey=u[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:l,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Fc(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=Ap(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Ap(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=Pp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Pp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Rp(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Rp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Bp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Bp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=_p(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=_p(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Wp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Wp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=zp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=zp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Vp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Vp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Op(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Op(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Mp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Mp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Fp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Fp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=zc(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Dp(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=zc(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=zc(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Cp(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=ie().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==Ep)return new Ep(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Ap(e,t,n,r=!1){const s=e[t];return null!=s?Cp(s.s,r):n}function _p(e,t,n){const r=e[t];return r?r.b:n}function Rp(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Dp(e){switch("string"==typeof e&&(e=Ac[e]),e){case Ac.DT_FLOAT:case Ac.DT_HALF:return"float32";case Ac.DT_INT32:case Ac.DT_INT64:case Ac.DT_INT8:case Ac.DT_UINT8:return"int32";case Ac.DT_BOOL:return"bool";case Ac.DT_DOUBLE:return"float32";case Ac.DT_STRING:return"string";default:return null}}function Fp(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Op(e,t,n){const r=e[t];return r&&r.type?Dp(r.type):n}function Mp(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Dp(e))):n}function Lp(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function zp(e,t,n){const r=e[t];return r&&r.shape?Lp(r.shape):n}function Bp(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Pp(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>Cp(e,r))):n}function Vp(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>Lp(e))):n}function Wp(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class Up{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Mc(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Mc(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Rp(this.node.rawAttrs,e,t);if(null!=n.s)return Ap(this.node.rawAttrs,e,t);if(null!=n.b)return _p(this.node.rawAttrs,e,t);if(null!=n.shape)return zp(this.node.rawAttrs,e,t);if(null!=n.type)return Op(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Bp(this.node.rawAttrs,e,t);if(null!=n.list.s)return Pp(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Vp(this.node.rawAttrs,e,t);if(null!=n.list.b)return Wp(this.node.rawAttrs,e,t);if(null!=n.list.type)return Mp(this.node.rawAttrs,e,t)}return t}}var Gp={};n(Gp,qs);function Hp(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){Fe.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];Fe.assert(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function qp(e){return"number"!=typeof e&&!e.some((e=>e<0))}function jp(e,t,n){let r=Kp(e,n);const s=!qp(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=Kp(e.shape,r)})),!qp(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function Kp(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class Xp{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=oa(0),Jo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Hp(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Jo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return xn([],[0].concat(this.elementShape));const n=this.readMany(e);return Hp(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Mo(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return xn([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Hp(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),js(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Lo(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];Zo((()=>{t=Ys(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=Ys(Zs(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class Yp{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Hp(t,e.shape,"TensorList shape mismatch: "),Jo(e)})),this.idTensor=oa(0),this.maxNumElements=r,Jo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Yp([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Hp(e,this.elementShape,"TensorList shape mismatch: ");const r=jp(this.elementShape,this.tensors,e);return Zo((()=>{const e=this.tensors.map((e=>Ys(e,r)));return Mo(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=jp(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,Hp(r.shape,e,"TensorList shape mismatch: "),Ys(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Hp(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Jo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Yp([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Hp(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=jp(this.elementShape,this.tensors,t);return Ys(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Hp(this.elementShape,t.shape,"TensorList shape mismatch: "),Jo(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Hp(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=jp(this.elementShape,this.tensors,n);return 0===e.length?xn([],[0].concat(r)):Zo((()=>{const t=e.map((e=>Ys(this.tensors[e],r)));return Mo(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Hp(this.elementShape,t,"TensorList shape mismatch: ");const n=jp(this.elementShape,this.tensors,t);return 0===this.size()?xn([],[0].concat(n)):Zo((()=>{const e=this.tensors.map((e=>Ys(e,n)));return js(e,0)}))}}function Zp(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Hp(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Lo(e);return new Yp(s,t,r)}function Jp(e,t,n,r){return new Yp([],e,t,r)}function Qp(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Yp([],n,e.dtype,r),o=Lo(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}function eh(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=Kp(e.shape.slice(1),n),o=0===r?0:e.size/r,i=Zo((()=>{const n=[];e=Ys(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],l=[1,t[r],o];n[r]=Ys(Zs(e,i,l),a)}return e.dispose(),n})),l=new Yp([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)l.setItem(e,i[e]);return l}const th=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Oc("thenBranch",e,t,n),s=Oc("elseBranch",e,t,n),a=Oc("cond",e,t,n),o=Oc("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Oc("body",e,t,n),s=Oc("cond",e,t,n),a=Oc("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let l=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[Wc(Oc("pred",e,t,n))];case"Switch":{const r=Oc("pred",e,t,n);let s=Oc("data",e,t,n);return s.kept||(s=Wc(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==Mc(e,t,n)));if(r){return[Wc(Mc(r,t,n))]}return}case"Enter":{const r=Oc("frameName",e,t,n),s=Oc("tensor",e,t,n);return n.enterFrame(r),[Wc(s)]}case"Exit":{const r=Oc("tensor",e,t,n);return n.exitFrame(),[Wc(r)]}case"NextIteration":{const r=Oc("tensor",e,t,n);return n.nextIteration(),[Wc(r)]}case"TensorArrayV3":{const r=Oc("size",e,t,n),s=Oc("dtype",e,t,n),a=Oc("elementShape",e,t,n),o=Oc("dynamicSize",e,t,n),i=Oc("clearAfterRead",e,t,n),l=Oc("identicalElementShapes",e,t,n),u=Oc("name",e,t,n),c=new Xp(u,s,r,a,l,o,i);return n.addTensorArray(c),[c.idTensor,oa(1)]}case"TensorArrayWriteV3":{const r=Oc("tensorArrayId",e,t,n),s=Oc("index",e,t,n),a=Oc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=Oc("tensorArrayId",e,t,n),s=Oc("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Oc("tensorArrayId",e,t,n),s=Oc("indices",e,t,n),a=Oc("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Oc("tensorArrayId",e,t,n),s=Oc("indices",e,t,n),a=Oc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=Oc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=Oc("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Oc("tensorArrayId",e,t,n),s=Oc("tensor",e,t,n),a=Oc("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=Oc("tensorArrayId",e,t,n);return[oa(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Oc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Oc("tensorListId",e,t,n),s=Oc("index",e,t,n),a=Oc("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=Oc("tensorListId",e,t,n),s=Oc("index",e,t,n),a=Oc("elementShape",e,t,n),o=Oc("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Oc("indices",e,t,n),s=Qp(Oc("tensor",e,t,n),r,Oc("elementShape",e,t,n),Oc("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Oc("elementShape",e,t,n),s=Oc("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=Oc(a,e,t,n),i=Jp(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Oc("tensorListId",e,t,n),s=Oc("indices",e,t,n),a=Oc("elementShape",e,t,n),o=Oc("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=Oc("tensorListId",e,t,n),s=Oc("elementShape",e,t,n),a=Oc("elementDType",e,t,n),o=Oc("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=Zp(Oc("tensor",e,t,n),Oc("elementShape",e,t,n),Oc("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Oc("tensorListId",e,t,n),s=n.getTensorList(r.id),a=Oc("dtype",e,t,n),o=Oc("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=Oc("tensorListId",e,t,n),s=Oc("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Oc("tensorListId",e,t,n),s=Oc("elementShape",e,t,n),a=Oc("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Oc("tensor",e,t,n),s=Oc("elementShape",e,t,n),a=eh(r,Oc("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=Oc("tensorListId",e,t,n);return[oa(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=Oc("tensorListId",e,t,n),s=Oc("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function nh(e,t,n){const[r,s]=Oc("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,l="fusedbatchnorm"===r,u=Oc("numArgs",e,t,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=Oc("strides",e,t,n),p=Vc(e,t,n),h=Oc("dataFormat",e,t,n).toUpperCase(),d=Oc("dilations",e,t,n);let[f,m]=Oc("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:Oc("leakyreluAlpha",e,t,n)}}function rh(e,t,n){return{boxes:Oc("boxes",e,t,n),scores:Oc("scores",e,t,n),maxOutputSize:Oc("maxOutputSize",e,t,n),iouThreshold:Oc("iouThreshold",e,t,n),scoreThreshold:Oc("scoreThreshold",e,t,n),softNmsSigma:Oc("softNmsSigma",e,t,n)}}class sh{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=oa(0),this.tensorMap=new Map,Jo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return oa(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Zo((()=>{const e=Lo(t),r=n.length,s=e.length;Fe.assert(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];Jo(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Zo((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return Mo(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function ah(e,t,n,r,s=Zo){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(Oc("a",e,t,n),Oc("b",e,t,n))];case"AddN":return[r.addN(Oc("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(Oc("a",e,t,n),Oc("b",e,t,n))];case"Mul":return[r.mul(Oc("a",e,t,n),Oc("b",e,t,n))];case"RealDiv":case"Div":return[r.div(Oc("a",e,t,n),Oc("b",e,t,n))];case"DivNoNan":return[r.divNoNan(Oc("a",e,t,n),Oc("b",e,t,n))];case"FloorDiv":return[r.floorDiv(Oc("a",e,t,n),Oc("b",e,t,n))];case"Sub":return[r.sub(Oc("a",e,t,n),Oc("b",e,t,n))];case"Minimum":return[r.minimum(Oc("a",e,t,n),Oc("b",e,t,n))];case"Maximum":return[r.maximum(Oc("a",e,t,n),Oc("b",e,t,n))];case"Pow":return[r.pow(Oc("a",e,t,n),Oc("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(Oc("a",e,t,n),Oc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(Oc("x",e,t,n))];case"Acos":return[r.acos(Oc("x",e,t,n))];case"Acosh":return[r.acosh(Oc("x",e,t,n))];case"Asin":return[r.asin(Oc("x",e,t,n))];case"Asinh":return[r.asinh(Oc("x",e,t,n))];case"Atan":return[r.atan(Oc("x",e,t,n))];case"Atan2":return[r.atan2(Oc("x",e,t,n),Oc("y",e,t,n))];case"Atanh":return[r.atanh(Oc("x",e,t,n))];case"Ceil":return[r.ceil(Oc("x",e,t,n))];case"Complex":return[r.complex(Oc("real",e,t,n),Oc("imag",e,t,n))];case"Cos":return[r.cos(Oc("x",e,t,n))];case"Cosh":return[r.cosh(Oc("x",e,t,n))];case"Elu":return[r.elu(Oc("x",e,t,n))];case"Erf":return[r.erf(Oc("x",e,t,n))];case"Exp":return[r.exp(Oc("x",e,t,n))];case"Expm1":return[r.expm1(Oc("x",e,t,n))];case"Floor":return[r.floor(Oc("x",e,t,n))];case"Log":return[r.log(Oc("x",e,t,n))];case"Log1p":return[r.log1p(Oc("x",e,t,n))];case"Imag":return[r.imag(Oc("x",e,t,n))];case"Neg":return[r.neg(Oc("x",e,t,n))];case"Reciprocal":return[r.reciprocal(Oc("x",e,t,n))];case"Real":return[r.real(Oc("x",e,t,n))];case"Relu":return[r.relu(Oc("x",e,t,n))];case"Round":return[r.round(Oc("x",e,t,n))];case"Selu":return[r.selu(Oc("x",e,t,n))];case"Sigmoid":return[r.sigmoid(Oc("x",e,t,n))];case"Sin":return[r.sin(Oc("x",e,t,n))];case"Sign":return[r.sign(Oc("x",e,t,n))];case"Sinh":return[r.sinh(Oc("x",e,t,n))];case"Softplus":return[r.softplus(Oc("x",e,t,n))];case"Sqrt":return[r.sqrt(Oc("x",e,t,n))];case"Square":return[r.square(Oc("x",e,t,n))];case"Tanh":return[r.tanh(Oc("x",e,t,n))];case"Tan":return[r.tan(Oc("x",e,t,n))];case"ClipByValue":return[r.clipByValue(Oc("x",e,t,n),Oc("clipValueMin",e,t,n),Oc("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(Oc("x",e,t,n))];case"Rsqrt":return[r.rsqrt(Mc(e.inputNames[0],t,n))];case"Prod":return[r.prod(Oc("x",e,t,n),Oc("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(Oc("x",e,t,n),Oc("alpha",e,t,n))];case"Prelu":return[r.prelu(Oc("x",e,t,n),Oc("alpha",e,t,n))];case"IsNan":return[r.isNaN(Mc(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return th(e,t,n);case"convolution":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"Conv1D":{const s=Oc("stride",e,t,n),a=Oc("pad",e,t,n),o=Oc("dataFormat",e,t,n).toUpperCase(),i=Oc("dilation",e,t,n);return[r.conv1d(Oc("x",e,t,n),Oc("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=Oc("strides",e,t,n),a=Vc(e,t,n),o=Oc("dataFormat",e,t,n).toUpperCase(),i=Oc("dilations",e,t,n);return[r.conv2d(Oc("x",e,t,n),Oc("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=nh(e,t,n);return[r.fused.conv2d({x:Oc("x",e,t,n),filter:Oc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=nh(e,t,n);return[r.fused.depthwiseConv2d({x:Oc("x",e,t,n),filter:Oc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Oc("outputShape",e,t,n),a=Oc("strides",e,t,n),o=Vc(e,t,n);return[r.conv2dTranspose(Oc("x",e,t,n),Oc("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Oc("strides",e,t,n),a=Vc(e,t,n),o=Oc("dilations",e,t,n),i=Oc("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(Oc("input",e,t,n),Oc("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=Oc("strides",e,t,n),a=Oc("pad",e,t,n),o=Oc("dataFormat",e,t,n).toUpperCase(),i=Oc("dilations",e,t,n);return[r.conv3d(Oc("x",e,t,n),Oc("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Oc("strides",e,t,n),a=Oc("pad",e,t,n),o=Oc("kernelSize",e,t,n);return[r.avgPool(Oc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=Oc("strides",e,t,n),a=Oc("pad",e,t,n),o=Oc("kernelSize",e,t,n);return[r.maxPool(Oc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=Oc("strides",e,t,n),a=Oc("pad",e,t,n),o=Oc("kernelSize",e,t,n),i=Oc("includeBatchInIndex",e,t,n),{result:l,indexes:u}=r.maxPoolWithArgmax(Oc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[l,u]}case"AvgPool3D":{const s=Oc("strides",e,t,n),a=Oc("pad",e,t,n),o=Oc("kernelSize",e,t,n);return[r.avgPool3d(Oc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=Oc("strides",e,t,n),a=Oc("pad",e,t,n),o=Oc("kernelSize",e,t,n);return[r.maxPool3d(Oc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=Oc("strides",e,t,n),a=Oc("pad",e,t,n),o=Oc("dilations",e,t,n),i=s[1],l=s[2],u=o[1],c=o[2];return[r.dilation2d(Oc("x",e,t,n),Oc("filter",e,t,n),[i,l],a,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"Fill":{const s=Oc("shape",e,t,n),a=Oc("dtype",e,t,n),o=Oc("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=Oc("start",e,t,n),a=Oc("stop",e,t,n),o=Oc("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=Oc("logits",e,t,n),a=Oc("numSamples",e,t,n),o=Oc("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=Oc("indices",e,t,n),a=Oc("depth",e,t,n),o=Oc("onValue",e,t,n),i=Oc("offValue",e,t,n),l=Oc("dtype",e,t,n);return[r.oneHot(s,a,o,i,l)]}case"Ones":return[r.ones(Oc("shape",e,t,n),Oc("dtype",e,t,n))];case"OnesLike":return[r.onesLike(Oc("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(Oc("shape",e,t,n),Oc("dtype",e,t,n),Oc("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(Oc("shape",e,t,n),Oc("minval",e,t,n),Oc("maxval",e,t,n),Oc("dtype",e,t,n))];case"Range":{const s=Oc("start",e,t,n),a=Oc("stop",e,t,n),o=Oc("step",e,t,n);return[r.range(s,a,o,Oc("dtype",e,t,n))]}case"TruncatedNormal":{const s=Oc("shape",e,t,n),a=Oc("mean",e,t,n),o=Oc("stdDev",e,t,n),i=Oc("seed",e,t,n);return[r.truncatedNormal(s,a,o,Oc("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(Oc("shape",e,t,n),Oc("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(Oc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=Gp)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=rh(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=rh(e,t,n),u=Oc("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=rh(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,l)]}case"Where":{const r=s.cast(Oc("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(Oc("x",e,t,n),Oc("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"LowerBound":{const s=Oc("sortedSequence",e,t,n),a=Oc("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=Oc("x",e,t,n),a=Oc("k",e,t,n),o=Oc("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=Oc("sortedSequence",e,t,n),a=Oc("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=Oc("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=Oc("x",e,t,n),a=Oc("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"ResizeBilinear":{const s=Oc("images",e,t,n),a=Oc("size",e,t,n),o=Oc("alignCorners",e,t,n),i=Oc("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=Oc("images",e,t,n),a=Oc("size",e,t,n),o=Oc("alignCorners",e,t,n),i=Oc("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=Oc("image",e,t,n),a=Oc("boxes",e,t,n),o=Oc("boxInd",e,t,n),i=Oc("cropSize",e,t,n),l=Oc("method",e,t,n),u=Oc("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,l,u)]}case"ImageProjectiveTransformV3":{const s=Oc("images",e,t,n),a=Oc("transforms",e,t,n),o=Oc("outputShape",e,t,n),i=Oc("fillValue",e,t,n),l=Oc("interpolation",e,t,n),u=Oc("fillMode",e,t,n);return[r.image.transform(s,a,l.toLowerCase(),u.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Oc("default",e,t,n);return[Mc(e.name,t,n)||s];case"Placeholder":return[Mc(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Wc(Oc("x",e,t,n))];case"IdentityN":return Oc("x",e,t,n).map((e=>Wc(e)));case"Shape":return[r.tensor1d(Oc("x",e,t,n).shape,"int32")];case"ShapeN":return Oc("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(Oc("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(Oc("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=Oc("x",e,t,n),o=Oc("data",e,t,n),i=Oc("message",e,t,n),l=Oc("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,l));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"Equal":return[r.equal(Oc("a",e,t,n),Oc("b",e,t,n))];case"NotEqual":return[r.notEqual(Oc("a",e,t,n),Oc("b",e,t,n))];case"Greater":return[r.greater(Oc("a",e,t,n),Oc("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(Oc("a",e,t,n),Oc("b",e,t,n))];case"Less":return[r.less(Oc("a",e,t,n),Oc("b",e,t,n))];case"LessEqual":return[r.lessEqual(Oc("a",e,t,n),Oc("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(Oc("a",e,t,n),Oc("b",e,t,n))];case"LogicalNot":return[r.logicalNot(Oc("a",e,t,n))];case"LogicalOr":return[r.logicalOr(Oc("a",e,t,n),Oc("b",e,t,n))];case"Select":case"SelectV2":return[r.where(Oc("condition",e,t,n),Oc("a",e,t,n),Oc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(Oc("a",e,t,n),Oc("b",e,t,n),Oc("transposeA",e,t,n),Oc("transposeB",e,t,n))];case"Einsum":return[r.einsum(Oc("equation",e,t,n),...Oc("tensors",e,t,n))];case"Transpose":return[r.transpose(Oc("x",e,t,n),Oc("perm",e,t,n))];case"_FusedMatMul":const[s,a]=Oc("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,l=Oc("numArgs",e,t,n),u=Oc("leakyreluAlpha",e,t,n);if(o){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=Oc("args",e,t,n);return[r.fused.matMul({a:Oc("a",e,t,n),b:Oc("b",e,t,n),transposeA:Oc("transposeA",e,t,n),transposeB:Oc("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:p,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(Oc("x",e,t,n),Oc("axis",e,t,n),Oc("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(Oc("x",e,t,n),Oc("mean",e,t,n),Oc("variance",e,t,n),Oc("offset",e,t,n),Oc("scale",e,t,n),Oc("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(Oc("x",e,t,n),Oc("radius",e,t,n),Oc("bias",e,t,n),Oc("alpha",e,t,n),Oc("beta",e,t,n))];case"Softmax":return[r.softmax(Oc("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(Oc("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(Oc("sparseIndices",e,t,n),Oc("outputShape",e,t,n),Oc("sparseValues",e,t,n),Oc("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"Max":{const s=Oc("axis",e,t,n),a=Oc("keepDims",e,t,n);return[r.max(Oc("x",e,t,n),s,a)]}case"Mean":{const s=Oc("axis",e,t,n),a=Oc("keepDims",e,t,n);return[r.mean(Oc("x",e,t,n),s,a)]}case"Min":{const s=Oc("axis",e,t,n),a=Oc("keepDims",e,t,n);return[r.min(Oc("x",e,t,n),s,a)]}case"Sum":{const s=Oc("axis",e,t,n),a=Oc("keepDims",e,t,n);return[r.sum(Oc("x",e,t,n),s,a)]}case"All":{const s=Oc("axis",e,t,n),a=Oc("keepDims",e,t,n);return[r.all(Oc("x",e,t,n),s,a)]}case"Any":{const s=Oc("axis",e,t,n),a=Oc("keepDims",e,t,n);return[r.any(Oc("x",e,t,n),s,a)]}case"ArgMax":{const s=Oc("axis",e,t,n);return[r.argMax(Oc("x",e,t,n),s)]}case"ArgMin":{const s=Oc("axis",e,t,n);return[r.argMin(Oc("x",e,t,n),s)]}case"Prod":{const s=Oc("axis",e,t,n),a=Oc("keepDims",e,t,n);return[r.prod(Oc("x",e,t,n),s,a)]}case"Cumprod":{const s=Oc("axis",e,t,n),a=Oc("exclusive",e,t,n),o=Oc("reverse",e,t,n);return[r.cumprod(Oc("x",e,t,n),s,a,o)]}case"Cumsum":{const s=Oc("axis",e,t,n),a=Oc("exclusive",e,t,n),o=Oc("reverse",e,t,n);return[r.cumsum(Oc("x",e,t,n),s,a,o)]}case"Bincount":const s=Oc("x",e,t,n),a=Oc("weights",e,t,n),o=Oc("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=Oc("x",e,t,n),a=Oc("weights",e,t,n),o=Oc("size",e,t,n),i=Oc("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Oc("n",e,t,n),a=Oc("axis",e,t,n);let o=Oc("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=Oc("x",e,t,n),a=Oc("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=Oc("axis",e,t,n),a=Oc("batchDims",e,t,n),o=Oc("x",e,t,n),i=Oc("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=Oc("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=Oc("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=Oc("axis",e,t,n),a=Oc("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=Oc("begin",e,t,n),a=Oc("size",e,t,n);return[r.slice(Oc("x",e,t,n),s,a)]}case"StridedSlice":{const s=Oc("begin",e,t,n),a=Oc("end",e,t,n),o=Oc("strides",e,t,n),i=Oc("beginMask",e,t,n),l=Oc("endMask",e,t,n),u=Oc("ellipsisMask",e,t,n),c=Oc("newAxisMask",e,t,n),p=Oc("shrinkAxisMask",e,t,n),h=Oc("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,l,u,c,p)]}case"Pack":return Zo((()=>{const s=Oc("axis",e,t,n),a=Oc("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,l=a.map((e=>{const t=Fe.arraysEqual(e.shape,o);if(!t&&!Fe.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(l,s)]}));case"Unpack":{const s=Oc("axis",e,t,n),a=Oc("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=Oc("reps",e,t,n);return[r.tile(Oc("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Oc("axis",e,t,n),a=Oc("numOrSizeSplits",e,t,n),o=Oc("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=Oc("indices",e,t,n),a=Oc("values",e,t,n),o=Oc("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=Oc("x",e,t,n),a=Oc("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=Oc("sparseIndices",e,t,n),a=Oc("outputShape",e,t,n),o=Oc("sparseValues",e,t,n),i=Oc("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(Oc("indices",e,t,n),Oc("values",e,t,n),Oc("denseShape",e,t,n),Oc("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(Oc("inputIndices",e,t,n),Oc("inputShape",e,t,n),Oc("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(Oc("data",e,t,n),Oc("indices",e,t,n),Oc("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(Oc("data",e,t,n),Oc("indices",e,t,n),Oc("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"FFT":return[r.fft(Oc("x",e,t,n))];case"IFFT":return[r.ifft(Oc("x",e,t,n))];case"RFFT":return[r.rfft(Oc("x",e,t,n))];case"IRFFT":return[r.irfft(Oc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(Oc("data",e,t,n),Oc("dataSplits",e,t,n),Oc("separator",e,t,n),Oc("nGramWidths",e,t,n),Oc("leftPad",e,t,n),Oc("rightPad",e,t,n),Oc("padWidth",e,t,n),Oc("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(Oc("input",e,t,n),Oc("delimiter",e,t,n),Oc("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(Oc("input",e,t,n),Oc("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=Gp)=>{switch(e.op){case"Cast":return[r.cast(Oc("x",e,t,n),Oc("dtype",e,t,n))];case"ExpandDims":{const s=Oc("axis",e,t,n);return[r.expandDims(Oc("x",e,t,n),s)]}case"Squeeze":{const s=Oc("axis",e,t,n);return[r.squeeze(Oc("x",e,t,n),s)]}case"Reshape":return[r.reshape(Oc("x",e,t,n),Oc("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(Oc("x",e,t,n),Oc("padding",e,t,n),Oc("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(Oc("x",e,t,n),Oc("padding",e,t,n),Oc("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Oc("blockShape",e,t,n),a=Oc("paddings",e,t,n);return[r.spaceToBatchND(Oc("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=Oc("blockShape",e,t,n),a=Oc("crops",e,t,n);return[r.batchToSpaceND(Oc("x",e,t,n),s,a)]}case"DepthToSpace":{const s=Oc("blockSize",e,t,n),a=Oc("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(Oc("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(Oc("x",e,t,n),Oc("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(Oc("s0",e,t,n),Oc("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=Oc("keyDType",e,t,n),a=Oc("valueDType",e,t,n),o=new sh(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Oc("tableHandle",e,t,n,r),a=Oc("keys",e,t,n),o=Oc("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Oc("tableHandle",e,t,n,r),a=Oc("keys",e,t,n),o=Oc("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=Oc("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=Fc(e.op);if(a&&a.customExecutor)return a.customExecutor(new Up(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Fe.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class oh{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function ih(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const l=new Set,u=Object.keys(e).map((e=>Pc(e)[0]));let c=[];null!=r&&(c=r.map((e=>Pc(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(hh(e)||dh(e)||fh(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),p.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}function lh(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((e=>Pc(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}const uh=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],ch=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],ph=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function hh(e){return uh.indexOf(e.op)>=0}function dh(e){return ch.indexOf(e.op)>=0}function fh(e){return ph.indexOf(e.op)>=0}class mh{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new mh(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=ih(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return lh(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[Pc(e)[0]])),s=t.map((e=>Pc(e)[0]));let a=s.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const l={},u={};return Zo((()=>{const n=new oh(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=Pc(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=ah(t,r,n,this._resourceManager);if(Fe.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map((e=>Mc(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=Lc(e.name,n,r);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=zc(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=ie().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new oh(this.weightMap,r,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const o=t.map((e=>Mc(e,this.tensorsMap,a))),i=o.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[Pc(e)[0]])),o=n.map((e=>Pc(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:p}=ih(e,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=Pc(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;h.length>0;){const e=this.processStack(a,h,t,d,g,m,o,f,l);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!hh(e)&&!Mc(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,r,s,a,o,i,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Oc("isConstant",e.node,r,n)&&([c]=zc(e.node.name,n)),null==r[e.node.name]){const p=ah(e.node,r,n,this._resourceManager);c||([c]=zc(e.node.name,n));const h=n.currentContext;Fe.isPromise(p)?u.push(p.then((u=>(r[c]=u,n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l),u)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l))}else this.processChildNodes(e.node,t,n,r,s,l)}return u}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=zc(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Mc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Mc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=Pc(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));Fe.assert(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&Fe.assert(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=Pc(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=Pc(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class gh{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class yh{constructor(e,t={},n=Is){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new gh}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return Fe.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new mh($p.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=$p.Instance.transformGraph(e.modelInitializer);this.initializer=new mh(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof Pt?[n]:n).forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(e){if(!(e instanceof Pt||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function bh(e,t={},n=Is){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}model.json?tfjs-format=file`}
/** @license See the LICENSE file. */(e));const r=new yh(e,t,n);return await r.load(),r}function xh(e,t,n,r){return new(n||(n=Promise))((function(s,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function i(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}l((r=r.apply(e,t||[])).next())}))}function wh(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}var kh=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var s=r[n];t.push(s)}return t},vh=function(){this.parent=null,this.children={},this.end=!1,this.word=[[],0,0]},Nh=function(){function e(){this.root=new vh}return e.prototype.insert=function(e,t,n){for(var r=this.root,s=kh(e),a=0;a<s.length;a++)r.children[s[a]]||(r.children[s[a]]=new vh,r.children[s[a]].parent=r,r.children[s[a]].word[0]=r.word[0].concat(s[a])),r=r.children[s[a]],a===s.length-1&&(r.end=!0,r.word[1]=t,r.word[2]=n)},e.prototype.commonPrefixSearch=function(e){for(var t=[],n=this.root.children[e[0]],r=0;r<e.length&&n;r++)n.end&&t.push(n.word),n=n.children[e[r+1]];return t.length||t.push([[e[0]],0,0]),t},e}();var Sh=function(){function e(e,t){void 0===t&&(t=6),this.vocabulary=e,this.reservedSymbolsCount=t,this.trie=new Nh;for(var n=this.reservedSymbolsCount;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n)}return e.prototype.encode=function(e){var t=[],n=[],r=[];e=function(e){var t=e.normalize("NFKC");return t.length>0?"▁"+t.replace(/ /g,"▁"):t}(e);for(var s=kh(e),a=0;a<=s.length;a++)t.push({}),n.push(0),r.push(0);for(a=0;a<s.length;a++)for(var o=this.trie.commonPrefixSearch(s.slice(a)),i=0;i<o.length;i++){var l=o[i],u={key:l[0],score:l[1],index:l[2]};null==t[a+(c=l[0].length)][a]&&(t[a+c][a]=[]),t[a+c][a].push(u)}for(var c=0;c<=s.length;c++)for(var p in t[c]){var h=t[c][p];for(i=0;i<h.length;i++){var d=h[i],f=d.score+r[c-d.key.length];(0===r[c]||f>=r[c])&&(r[c]=f,n[c]=h[i].index)}}for(var m=[],g=n.length-1;g>0;)m.push(n[g]),g-=this.vocabulary[n[g]][0].length;var y=[],b=!1;for(a=0;a<m.length;a++){var x=m[a];b&&0===x||y.push(x),b=0===x}return y.reverse()},e}();function Ih(e){return xh(this,void 0,void 0,(function(){return wh(this,(function(t){switch(t.label){case 0:return[4,Fe.fetch(e)];case 1:return[2,t.sent().json()]}}))}))}var Th=[0,1,2];!function(){function e(){}e.prototype.loadModel=function(){return xh(this,void 0,void 0,(function(){return wh(this,(function(e){return[2,bh("https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1",{fromTFHub:!0})]}))}))},e.prototype.load=function(){return xh(this,void 0,void 0,(function(){var e,t,n;return wh(this,(function(r){switch(r.label){case 0:return[4,Promise.all([this.loadModel(),Ih("https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1/vocab.json?tfjs-format=file")])];case 1:return e=r.sent(),t=e[0],n=e[1],this.model=t,this.tokenizer=new Sh(n,3),[2]}}))}))},e.prototype.embed=function(e){var t=this,n=Zo((function(){var n=t.tokenizeStrings(e.queries,192),r=t.tokenizeStrings(e.responses,192);if(null!=e.contexts&&e.contexts.length!==e.responses.length)throw new Error("The length of response strings and context strings need to match.");var s=e.contexts||[];null==e.contexts&&(s.length=e.responses.length,s.fill(""));var a=t.tokenizeStrings(s,192),o={};return o.input_inp_text=n,o.input_res_text=r,o.input_res_context=a,t.model.execute(o,["Final/EncodeQuery/mul","Final/EncodeResult/mul"])}));return{queryEmbedding:n[0],responseEmbedding:n[1]}},e.prototype.tokenizeStrings=function(e,t){var n=this;return Xa(e.map((function(e){return n.shiftTokens(n.tokenizer.encode(e),192)})),[e.length,192],"int32")},e.prototype.shiftTokens=function(e,t){e.unshift(1);for(var n=0;n<t;n++)n>=e.length?e[n]=2:Th.includes(e[n])||(e[n]+=3);return e.slice(0,t)}}();var Eh=function(){function e(){}return e.prototype.loadModel=function(e){return xh(this,void 0,void 0,(function(){return wh(this,(function(t){return[2,e?bh(e):bh("https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1",{fromTFHub:!0})]}))}))},e.prototype.load=function(e){return void 0===e&&(e={}),xh(this,void 0,void 0,(function(){var t,n,r;return wh(this,(function(s){switch(s.label){case 0:return[4,Promise.all([this.loadModel(e.modelUrl),Ih(e.vocabUrl||"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/vocab.json")])];case 1:return t=s.sent(),n=t[0],r=t[1],this.model=n,this.tokenizer=new Sh(r),[2]}}))}))},e.prototype.embed=function(e){return xh(this,void 0,void 0,(function(){var t,n,r,s,a,o,i,l,u=this;return wh(this,(function(c){switch(c.label){case 0:for("string"==typeof e&&(e=[e]),t=e.map((function(e){return u.tokenizer.encode(e)})),n=t.map((function(e,t){return e.map((function(e,n){return[t,n]}))})),r=[],s=0;s<n.length;s++)r=r.concat(n[s]);return a=Xa(r,[r.length,2],"int32"),o=Ua(Fe.flatten(t),"int32"),i={indices:a,values:o},[4,this.model.executeAsync(i)];case 1:return l=c.sent(),a.dispose(),o.dispose(),[2,l]}}))}))},e}();class $h{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class Ch{refCount(e){return Ah("refCount")}incRef(e){return Ah("incRef")}timerAvailable(){return!0}time(e){return Ah("time")}read(e){return Ah("read")}readSync(e){return Ah("readSync")}readToGPU(e,t){return Ah("readToGPU")}numDataIds(){return Ah("numDataIds")}disposeData(e,t){return Ah("disposeData")}write(e,t,n){return Ah("write")}move(e,t,n,r,s){return Ah("move")}createTensorFromTexture(e,t,n){return Ah("createTensorFromTexture")}memory(){return Ah("memory")}floatPrecision(){return Ah("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Ah("dispose")}}function Ah(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var _h={};function Rh(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,Mh(e,t,n)}function Dh(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,Mh(e,n,r),Mh(t,n,r)}function Fh(e,t,n){return Math.max(e,Math.min(t,n))}function Oh(e){return e%2==0?e:e+1}function Mh(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function Lh(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function zh(e,t){const n=Math.random();return t*n+(1-n)*e}function Bh(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function Ph(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function Vh(e,t,n=""){Ph(qh(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function Wh(e){Ph(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function Uh(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||id(e)&&!n)for(let r=0;r<e.length;++r)Uh(e[r],t,n);else t.push(e);return t}function Gh(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function Hh(e){return 0===e.length}function qh(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function jh(e){return e%1==0}function Kh(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function Xh(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function Yh(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return Rh(t),t}function Zh(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function Jh(e,t=(e=>0),n,r){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const l=t(o);null!=n&&o>=n?a():null!=r?r(i,l):setTimeout(i,l)};i()}))}function Qh(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function ed(e,t){const n=t.length;return Ph((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),Ph(e.every((e=>jh(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function td(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:ed(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function nd(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function rd(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function sd(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function ad(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function od(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function id(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function ld(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function ud(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function cd(e){return"string"==typeof e||e instanceof String}function pd(e){return"boolean"==typeof e}function hd(e){return"number"==typeof e}function dd(e){return Array.isArray(e)?dd(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":hd(e)?"float32":cd(e)?"string":pd(e)?"bool":"float32"}function fd(e){return!!(e&&e.constructor&&e.call&&e.apply)}function md(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function gd(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function yd(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=yd(e+t*i,o,n,r)}return s}function bd(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return yd(0,e,t,n)}function xd(e,t){const n=wd(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function wd(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function kd(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return bd(e,new Float32Array(n));if("int32"===t)return bd(e,new Int32Array(n));if("bool"===t)return bd(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function vd(e){e.forEach((t=>{Ph(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Nd(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Sd(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Id(e){return e&&e.then&&"function"==typeof e.then}t(_h,"shuffle",(()=>Rh)),t(_h,"swap",(()=>Mh)),t(_h,"shuffleCombo",(()=>Dh)),t(_h,"clamp",(()=>Fh)),t(_h,"nearestLargerEven",(()=>Oh)),t(_h,"sum",(()=>Lh)),t(_h,"randUniform",(()=>zh)),t(_h,"distSquared",(()=>Bh)),t(_h,"assert",(()=>Ph)),t(_h,"assertShapesMatch",(()=>Vh)),t(_h,"arraysEqual",(()=>qh)),t(_h,"assertNonNull",(()=>Wh)),t(_h,"flatten",(()=>Uh)),t(_h,"isTypedArray",(()=>id)),t(_h,"sizeFromShape",(()=>Gh)),t(_h,"isScalarShape",(()=>Hh)),t(_h,"isInt",(()=>jh)),t(_h,"tanh",(()=>Kh)),t(_h,"sizeToSquarishShape",(()=>Xh)),t(_h,"createShuffledIndices",(()=>Yh)),t(_h,"rightPad",(()=>Zh)),t(_h,"repeatedTry",(()=>Jh)),t(_h,"inferFromImplicitShape",(()=>Qh)),t(_h,"parseAxisParam",(()=>ed)),t(_h,"squeezeShape",(()=>td)),t(_h,"getTypedArrayFromDType",(()=>nd)),t(_h,"getArrayFromDType",(()=>rd)),t(_h,"checkConversionForErrors",(()=>sd)),t(_h,"isValidDtype",(()=>ad)),t(_h,"hasEncodingLoss",(()=>od)),t(_h,"bytesPerElement",(()=>ld)),t(_h,"bytesFromStringArray",(()=>ud)),t(_h,"isString",(()=>cd)),t(_h,"isBoolean",(()=>pd)),t(_h,"isNumber",(()=>hd)),t(_h,"inferDtype",(()=>dd)),t(_h,"isFunction",(()=>fd)),t(_h,"nearestDivisor",(()=>md)),t(_h,"computeStrides",(()=>gd)),t(_h,"toNestedArray",(()=>bd)),t(_h,"makeOnesTypedArray",(()=>xd)),t(_h,"makeZerosTypedArray",(()=>wd)),t(_h,"makeZerosNestedTypedArray",(()=>kd)),t(_h,"assertNonNegativeIntegerDimensions",(()=>vd)),t(_h,"locToIndex",(()=>Nd)),t(_h,"indexToLoc",(()=>Sd)),t(_h,"isPromise",(()=>Id));class Td{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Ed,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&($d().getBool("IS_TEST")||$d().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];$d().getBool("IS_TEST")||$d().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Id(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function Ed(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function $d(){return Ad}let Cd,Ad=null;function _d(){if(null==Cd){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==pe)t=pe;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Cd=t}return Cd}function Rd(e,t){const n=function(){const e=_d();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}var Dd={};function Fd(...e){$d().getBool("IS_TEST")||$d().getBool("PROD")||console.warn(...e)}function Od(...e){$d().getBool("IS_TEST")||$d().getBool("PROD")||console.log(...e)}t(Dd,"warn",(()=>Fd)),t(Dd,"log",(()=>Od));const Md=Rd("kernelRegistry",(()=>new Map)),Ld=Rd("gradRegistry",(()=>new Map));function zd(e,t){const n=Ud(e,t);return Md.get(n)}function Bd(e){return Ld.get(e)}function Pd(e){const t=Md.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function Vd(e){const{kernelName:t,backendName:n}=e,r=Ud(t,n);Md.has(r)&&Fd(`The kernel '${t}' for backend '${n}' is already registered`),Md.set(r,e)}function Wd(e){const{kernelName:t}=e;Ld.has(t)&&$d().getBool("DEBUG")&&Fd(`Overriding the gradient for '${t}'`),Ld.set(t,e)}function Ud(e,t){return`${t}_${e}`}var Gd={};t(Gd,"createScalarValue",(()=>af)),t(Gd,"encodeString",(()=>cf)),t(Gd,"toTypedArray",(()=>of)),t(Gd,"now",(()=>lf)),t(Gd,"fetch",(()=>uf)),t(Gd,"decodeString",(()=>pf));var Hd={};t(Hd,"hexToLong",(()=>jd)),t(Hd,"fingerPrint64",(()=>sf));const qd=Me.default||Me;function jd(e){return qd.fromString(e,!0,16)}const Kd=jd("c3a5c85c97cb3127"),Xd=jd("b492b66fbe98f273"),Yd=jd("9ae16a3b2f90404f");function Zd(e){return e.xor(e.shru(47))}function Jd(e,t,n){const r=e.slice(t,t+n);return qd.fromBytes(Array.from(r),!0,!0)}function Qd(e,t){return Jd(e,t,8)}function ef(e,t){return Jd(e,t,4)}function tf(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function nf(e,t,n=jd("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function rf(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=tf(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(tf(s,44)),[s.add(r),a.add(o)]}(Qd(e,t),Qd(e,t+8),Qd(e,t+16),Qd(e,t+24),n,r)}function sf(e,t=e.length){const n=qd.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Yd.add(2*t),r=Qd(e,0).add(Yd),s=Qd(e,t-8);return nf(tf(s,37).mul(n).add(r),tf(r,25).add(s).mul(n),n)}if(t>=4){const n=Yd.add(2*t);return nf(ef(e,0).shl(3).add(t),ef(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return Zd(Yd.mul(n).xor(Kd.mul(r))).mul(Yd)}return Yd}(e,t):function(e,t=e.length){const n=Yd.add(2*t),r=Qd(e,0).mul(Xd),s=Qd(e,8),a=Qd(e,t-8).mul(n),o=Qd(e,t-16).mul(Yd);return nf(tf(r.add(s),43).add(tf(a,30)).add(o),r.add(tf(s.add(Yd),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Yd.add(2*t),r=Qd(e,0).mul(Yd),s=Qd(e,8),a=Qd(e,t-8).mul(n),o=Qd(e,t-16).mul(Yd),i=tf(r.add(s),43).add(tf(a,30)).add(o),l=nf(i,r.add(tf(s.add(Yd),18)).add(a),n),u=Qd(e,16).mul(n),c=Qd(e,24),p=i.add(Qd(e,t-32)).mul(n),h=l.add(Qd(e,t-24)).mul(n);return nf(tf(u.add(c),43).add(tf(p,30)).add(h),u.add(tf(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(Xd).add(113),a=Zd(s.mul(Yd).add(113)).mul(Yd),o=[qd.UZERO,qd.UZERO],i=[qd.UZERO,qd.UZERO];r=r.mul(Yd).add(Qd(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{r=tf(r.add(s).add(o[0]).add(Qd(e,l+8)),37).mul(Xd),s=tf(s.add(o[1]).add(Qd(e,l+48)),42).mul(Xd),r=r.xor(i[1]),s=s.add(o[0]).add(Qd(e,l+40)),a=tf(a.add(i[0]),33).mul(Xd),o=rf(e,l,o[1].mul(Xd),r.add(i[0])),i=rf(e,l+32,a.add(i[1]),s.add(Qd(e,l+16))),[a,r]=[r,a],l+=64}while(l!==u);const p=Xd.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=tf(r.add(s).add(o[0]).add(Qd(e,l+8)),37).mul(p),s=tf(s.add(o[1]).add(Qd(e,l+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(Qd(e,l+40))),a=tf(a.add(i[0]),33).mul(p),o=rf(e,l,o[1].mul(p),r.add(i[0])),i=rf(e,l+32,a.add(i[1]),s.add(Qd(e,l+16))),[a,r]=[r,a],nf(nf(o[0],i[0],p).add(Zd(s).mul(Kd)).add(a),nf(o[1],i[1],p).add(r),p)}function af(e,t){return"string"===t?cf(e):of([e],t)}function of(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Uh(e)),$d().getBool("DEBUG")&&sd(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function lf(){return $d().platform.now()}function uf(e,t){return $d().platform.fetch(e,t)}function cf(e,t="utf-8"){return t=t||"utf-8",$d().platform.encode(e,t)}function pf(e,t="utf-8"){return t=t||"utf-8",$d().platform.decode(e,t)}n(Gd,_h),n(Gd,Hd);class hf{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ff)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=lf();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:lf()-o})}if($d().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{df(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function df(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class ff{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?Zh(`${r}ms`,9):r.error,i=Zh(e,25),l=t.rank,u=t.size,c=Zh(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function mf(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function gf(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!qh(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function yf(e,t,n,r){const s=gd(t),a=function(e,t,n,r){const s=Gh(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===n?kf(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],bf(l[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=wf(e,t,n,s,a),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function bf(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:cd(e)?`'${e}'`:"bool"===n?xf(e):parseFloat(e.toFixed(7)).toString(),Zh(r,t)}function xf(e){return 0===e?"false":"true"}function wf(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[bf(kf(e)[0],0,n)]}return"bool"===n?[xf(e[0])]:[e[0].toString()]}if(1===l){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=kf(r),a=kf(a)),["["+r.map(((e,t)=>bf(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>bf(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?kf(e):Array.from(e)).map(((e,t)=>bf(e,s[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...wf(e.slice(r,a),u,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...wf(e.slice(r,a),u,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...wf(e.slice(r,a),u,n,c,s,t===i-1))}const d=2===l?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function kf(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class vf{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=Gh(e),null!=n){const e=n.length;Ph(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||rd(t,this.size),this.strides=gd(e)}set(e,...t){0===t.length&&(t=[0]),Ph(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Nf().makeTensor(this.values,this.shape,this.dtype)}}let Nf=null,Sf=null,If=null;function Tf(e){Nf=e}class Ef{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=Gh(e),this.strides=gd(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Sf.buffer(this.shape,this.dtype,e)}bufferSync(){return Sf.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return bd(this.shape,e,"complex64"===this.dtype)}arraySync(){return bd(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Nf().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>pf(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Nf().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Nf().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>pf(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Nf().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Nf().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Sf.print(this,e)}clone(){return this.throwIfDisposed(),Sf.clone(this)}toString(e=!1){return yf(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Sf.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Nf().makeVariable(this,e,t,n)}}function $f(){return Rd("Tensor",(()=>Ef))}Object.defineProperty(Ef,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),$f();class Cf extends Ef{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!qh(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Nf().disposeTensor(this),this.dataId=e.dataId,Nf().incRef(this,null)}dispose(){Nf().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Cf,Symbol.hasInstance,{value:e=>e instanceof Ef&&null!=e.assign&&e.assign instanceof Function});var Af,_f,Rf,Df,Ff,Of={};t(Of,"makeTypesMatch",(()=>Bf)),t(Of,"assertTypesMatch",(()=>Pf)),t(Of,"isTensorInList",(()=>Vf)),t(Of,"getTensorsInContainer",(()=>Wf)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Af||(Af={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(_f||(_f={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Rf||(Rf={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Df||(Df={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Ff||(Ff={}));const Mf={float32:Df,int32:_f,bool:Rf,complex64:Ff};function Lf(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Mf[e][t]}function zf(e){return Lf(e,"int32")}function Bf(e,t){if(e.dtype===t.dtype)return[e,t];const n=Lf(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Pf(e,t){Ph(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Vf(e,t){return t.some((t=>t.id===e.id))}function Wf(e){const t=[];return Uf(e,t,new Set),t}function Uf(e,t,n){if(null==e)return;if(e instanceof Ef)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),Uf(r,t,n))}}function Gf(e){return null!=e.kernelName}class Hf{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class qf{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Hf}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Fd(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new hf(this.backendInstance),!0}setupRegisteredKernels(){Pd(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Pd(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof Ch||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Fd(`Initialization of backend ${e} failed`),Fd(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return Fd(`Initialization of backend ${e} failed`),Fd(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return qf.nextTensorId++}nextVariableId(){return qf.nextVariableId++}clone(e){const t=Kf.runKernel("Identity",{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Kf.runKernel("Cast",t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=zd(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Gf(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Gf(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const l=zd(t,this.backendName);Ph(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,p=Gf(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(l,u,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Bd(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(Ph(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&cd(e[0])&&(s=e.map((e=>cf(e))));const a=r.write(s,t,n),o=new Ef(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=ud(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new Ef(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Cf(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*ld(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Cf||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*ld(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=Bd(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=wd(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Wf(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(Ph(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));Ph(s instanceof Ef,(()=>"The result y returned by f() must be a tensor."));const a=mf(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=xd(Gh(e),"float32");return Kf.makeTensor(t,e,"float32")}(s.shape):n,gf(e,a,(e=>this.tidy(e)),Xf);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return Ph(fd(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;Ph(t.every((e=>e instanceof Ef)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),Ph(n.value instanceof Ef,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),Ph(fd(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];Ph(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),Ph(a.every((e=>e instanceof Ef)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=lf(),n=await this.backend.time(e);return n.wallMs=lf()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Hf;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function jf(){const e=_d();if(null==e._tfengine){const t=new Td(e);e._tfengine=new qf(t)}var t;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */return t=e._tfengine.ENV,Ad=t,Tf((()=>e._tfengine)),e._tfengine}qf.nextTensorId=0,qf.nextVariableId=0;const Kf=jf();function Xf(e,t){const n={a:e,b:t};return Kf.runKernel("Add",n)}var Yf={};let Zf;function Jf(e){Zf=e}function Qf(e){if(void 0!==Zf)return Zf;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function em(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(Yf,"mockIsMobile",(()=>Jf)),t(Yf,"isMobile",(()=>Qf)),t(Yf,"isBrowser",(()=>em));const tm=$d();function nm(e,t){let n=e;if(id(e))return"string"===t?[]:[e.length];if("object"==typeof e&&"texture"in e){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||id(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&$d().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&rm(e,r,[]),r}function rm(e,t,n){if(n=n||[],!Array.isArray(e)&&!id(e))return void Ph(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));Ph(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),Ph(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)rm(e[t],r,n.concat(t))}function sm(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function am(e,t,n,r="numeric"){if(e instanceof Ef)return sm(r,e.dtype,t,n),e;let s=dd(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),sm(r,s,t,n),null==e||!id(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=nm(e,s);id(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?of(e,s):Uh(e,[],!0);return Kf.makeTensor(o,a,s)}function om(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>am(e,`${t}[${s}]`,n,r)))}tm.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),tm.registerFlag("IS_BROWSER",(()=>em())),tm.registerFlag("IS_NODE",(()=>void 0!==pe&&void 0!==pe.versions&&void 0!==pe.versions.node)),tm.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),tm.registerFlag("PROD",(()=>!1)),tm.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>tm.getBool("DEBUG"))),tm.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),tm.registerFlag("IS_TEST",(()=>!1)),tm.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),tm.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),tm.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),tm.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),tm.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));function im(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{Kf.startScope(n);try{const t=r(...e);return Id(t)&&console.error("Cannot return a Promise inside of tidy."),Kf.endScope(t),t}catch(e){throw Kf.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const lm=im({complex_:function(e,t){const n=am(e,"real","complex"),r=am(t,"imag","complex");Vh(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Kf.runKernel("Complex",s)}});function um(e,t,n,r){if(null==r&&(r=dd(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if("object"==typeof e&&"texture"in e){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from texture only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return e.channels=e.channels||"RGBA",Kf.backend.createTensorFromTexture(e,t||n,r)}if(!id(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){vd(t);const e=Gh(t),r=Gh(n);Ph(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==Gh(t.slice(e));Ph(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return id(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?of(e,r):Uh(e,[],!0),Kf.makeTensor(e,t,r)}function cm(e,t,n){return um(e,t,nm(e,n),n)}const pm={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var hm=kn;async function dm(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:mm(await Promise.all(r)),specs:n}}function fm(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,l=Gh(i);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=pm[n.dtype],c=e.slice(s,s+l*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Em()),u=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=Math.round(t*n.scale+n.min)}}s+=l*i}else if("string"===o){const t=Gh(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));u.push(n),s+=t}}else{const r=pm[o],a=e.slice(s,s+l*r);if("float32"===o)u=new Float32Array(a);else if("int32"===o)u=new Int32Array(a);else if("bool"===o)u=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const s=cm(e,i,"float32"),o=cm(r,i,"float32");n[t]=lm(s,o),s.dispose(),o.dispose()}}s+=l*r}"complex64"!==o&&(n[t]=cm(u,i,o))}return n}function mm(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const gm=void 0!==hm&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ym(e){return gm?hm.byteLength(e):new Blob([e]).size}function bm(e){if(gm)return hm.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function xm(e){if(gm){const t=hm.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function wm(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function km(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function vm(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Nm(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function Sm(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Nm(e,n,r)}function Im(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:ym(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:ym(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Tm(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Em(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class $m{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==$m.instance&&($m.instance=new $m),$m.instance}static registerSaveRouter(e){$m.getInstance().saveRouters.push(e)}static registerLoadRouter(e){$m.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return $m.getHandlers(e,"save")}static getLoadHandlers(e,t){return $m.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?$m.getInstance().loadRouters:$m.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Cm=e=>$m.registerSaveRouter(e),Am=e=>$m.registerLoadRouter(e),_m=e=>$m.getSaveHandlers(e),Rm=(e,t)=>$m.getLoadHandlers(e,t);function Dm(){if(!$d().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Fm(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class Om{constructor(e){if(this.indexedDB=Dm(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Fm(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Im(t),a=s.transaction("model_info_store","readwrite");let o=a.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;i.onsuccess=()=>{l=s.transaction("models_store","readwrite");const i=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}Om.URL_SCHEME="indexeddb://";const Mm=e=>{return $d().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Om.URL_SCHEME)?(t=e.slice(Om.URL_SCHEME.length),new Om(t)):null;var t};$m.registerSaveRouter(Mm),$m.registerLoadRouter(Mm);class Lm{constructor(){this.indexedDB=Dm()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>Fm(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Om.URL_SCHEME)?t.slice(Om.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Fm(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),o=a.objectStore("model_info_store"),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{l=s.transaction("models_store","readwrite");const r=l.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const zm="tensorflowjs_models",Bm="info",Pm="model_topology",Vm="weight_specs",Wm="weight_data",Um="model_metadata";function Gm(e){return{info:[zm,e,Bm].join("/"),topology:[zm,e,Pm].join("/"),weightSpecs:[zm,e,Vm].join("/"),weightData:[zm,e,Wm].join("/"),modelMetadata:[zm,e,Um].join("/")}}function Hm(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function qm(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class jm{constructor(e){if(!$d().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Gm(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Im(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,bm(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw Hm(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=xm(a),t}}jm.URL_SCHEME="localstorage://";const Km=e=>{return $d().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(jm.URL_SCHEME)?(t=e.slice(jm.URL_SCHEME.length),new jm(t)):null;var t};$m.registerSaveRouter(Km),$m.registerLoadRouter(Km);class Xm{constructor(){Ph($d().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Ph("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=zm+"/",n="/"+Bm;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[qm(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=Gm(e=(t=e).startsWith(jm.URL_SCHEME)?t.slice(jm.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return Hm(n),r}}class Ym{constructor(){this.managers={}}static getInstance(){return null==Ym.instance&&(Ym.instance=new Ym),Ym.instance}static registerManager(e,t){Ph(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),Ph(e.length>0,(()=>"scheme must not be an empty string."));const n=Ym.getInstance();Ph(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Ym.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Ym.getInstance().managers)}}function Zm(e){if(-1===e.indexOf("://"))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Ym.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function Jm(e,t,n=!1){Ph(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=$m.getLoadHandlers(e);Ph(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),Ph(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=$m.getSaveHandlers(t);Ph(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),Ph(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=Zm(e).scheme,l=Zm(e).path,u=i===Zm(e).scheme,c=await s.load();n&&u&&await Ym.getManager(i).removeModel(l);const p=await o.save(c);return n&&!u&&await Ym.getManager(i).removeModel(l),p.modelArtifactsInfo}async function Qm(){const e=Ym.getSchemes(),t={};for(const n of e){const e=await Ym.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t}async function eg(e){const t=Zm(e);return Ym.getManager(t.scheme).removeModel(t.path)}async function tg(e,t){return Jm(e,t,!1)}async function ng(e,t){return Jm(e,t,!0)}class rg{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&$d().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if($d().get("IS_BROWSER")){$d().setPlatform("browser",new rg);try{Ym.registerManager(jm.URL_SCHEME,new Xm)}catch(e){}try{Ym.registerManager(Om.URL_SCHEME,new Lm)}catch(e){}}const sg=()=>a("kjyEk");let ag;function og(e,t="float32",n){return t=t||"float32",vd(e),new vf(e,t,n)}$d().get("IS_NODE")&&!$d().get("IS_BROWSER")&&$d().setPlatform("node",new class{constructor(){this.util=a("kjyEk"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=$d().global.fetch?$d().global.fetch(e,t):(null==ag&&(ag=sg()),ag(e,t))}now(){const e=pe.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const ig=im({cast_:function(e,t){const n=am(e,"x","cast");if(!ad(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return Kf.runKernel("Cast",r,s)}});const lg=im({clone_:function(e){const t={x:am(e,"x","clone","string_or_numeric")};return Kf.runKernel("Identity",t)}});function ug(e,t=!1){console.log(e.toString(t))}jf();!function(e){Sf=e}({buffer:og,cast:ig,clone:lg,print:ug});var cg={};t(cg,"copyModel",(()=>tg)),t(cg,"listModels",(()=>Qm)),t(cg,"moveModel",(()=>ng)),t(cg,"removeModel",(()=>eg)),t(cg,"browserFiles",(()=>fg)),t(cg,"browserHTTPRequest",(()=>Ng)),t(cg,"concatenateArrayBuffers",(()=>wm)),t(cg,"decodeWeights",(()=>fm)),t(cg,"encodeWeights",(()=>dm)),t(cg,"fromMemory",(()=>Eg)),t(cg,"fromMemorySync",(()=>$g)),t(cg,"getLoadHandlers",(()=>Rm)),t(cg,"getModelArtifactsForJSON",(()=>Sm)),t(cg,"getModelArtifactsForJSONSync",(()=>Nm)),t(cg,"getModelArtifactsInfoForJSON",(()=>Im)),t(cg,"getSaveHandlers",(()=>_m)),t(cg,"getWeightSpecs",(()=>Tm)),t(cg,"http",(()=>vg)),t(cg,"isHTTPScheme",(()=>wg)),t(cg,"loadWeights",(()=>yg)),t(cg,"registerLoadRouter",(()=>Am)),t(cg,"registerSaveRouter",(()=>Cm)),t(cg,"weightsLoaderFactory",(()=>bg)),t(cg,"withSaveHandler",(()=>Cg)),t(cg,"withSaveHandlerSync",(()=>Ag));function pg(e){return new Promise((e=>setTimeout(e))).then(e)}class hg{constructor(e){if(!$d().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(hg.URL_SCHEME)&&(e=e.slice(hg.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=vm(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await pg((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await pg((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Im(e)}}}}hg.URL_SCHEME="downloads://";class dg{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Sm(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,wm(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>km(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=km(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function fg(e){return new dg(e)}function mg(e,t,n,r){!function(e){Ph(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){Ph(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),Ph(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),Ph(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function gg(e,t){null==t&&(t={});const n=null==t.fetchFunc?$d().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await mg(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await mg(s,t.onProgress,.5,1)}async function yg(e,t="",n,r){return bg((e=>gg(e,{requestInit:r})))(e,t,n)}function bg(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=pm[l]*Gh(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let h=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=fm(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}$m.registerSaveRouter((e=>$d().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(hg.URL_SCHEME)?function(e="model"){return new hg(e)}(e.slice(hg.URL_SCHEME.length)):null));class xg{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Ph("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=$d().platform.fetch,Ph(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&Ph(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=vm(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Im(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Sm(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Tm(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,wm(await gg(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function wg(e){return null!=e.match(xg.URL_SCHEME_REGEX)}xg.URL_SCHEME_REGEX=/^https?:\/\//;const kg=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>wg(e))):wg(e),n)return vg(e,t)}return null};function vg(e,t){return new xg(e,t)}function Ng(e,t){return vg(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */$m.registerSaveRouter(kg),$m.registerLoadRouter(kg);class Sg{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Ig{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Tg{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Eg(e,t,n,r){const s=arguments;return new Tg($g(...s))}function $g(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Sg(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Sg({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Sg({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Cg(e){return new Ig(e)}function Ag(e){return new Ig(e)}var _g={};function Rg(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function Dg(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function Fg(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(_g,"getBroadcastDims",(()=>Rg)),t(_g,"getReductionAxes",(()=>Dg)),t(_g,"assertAndGetBroadcastShape",(()=>Fg));var Og={};function Mg(e,t,n){if(Wh(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=nm(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return um(e,t,r,n)}let Lg;function zg(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=zd("FromPixels",Kf.backendName)){const n={pixels:e},r={numChannels:t};return Kf.runKernel("FromPixels",n,r)}const[l,u]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(r||n)c=e.data;else if(a||s||i){if(null==Lg)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Lg=new OffscreenCanvas(1,1).getContext("2d")}else Lg=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Lg.canvas.width=l,Lg.canvas.height=u,Lg.drawImage(e,0,0,l,u),c=Lg.getImageData(0,0,l,u).data}if(4===t)p=new Int32Array(c);else{const e=l*u;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return Mg(p,[u,l,t],"int32")}function Bg(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function Pg(e,t=3){let n=null;if($d().getBool("WRAP_TO_IMAGEBITMAP")&&Bg(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return zg(n,t)}async function Vg(e,t){let n=am(e,"img","toPixels");if(!(e instanceof Ef)){const e=n;n=ig(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=o[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*i,t[1]=s*i,t[2]=s*i):t[r]=s*i}const r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}t(Og,"fromPixelsAsync",(()=>Pg)),t(Og,"toPixels",(()=>Vg)),t(Og,"fromPixels",(()=>Wg));const Wg=im({fromPixels_:zg});var Ug={};t(Ug,"assertParamsValid",(()=>Gg)),t(Ug,"maskToAxes",(()=>Hg)),t(Ug,"computeOutShape",(()=>qg)),t(Ug,"stridesWithElidedDims",(()=>jg)),t(Ug,"getNormalizedAxes",(()=>Yg)),t(Ug,"startIndicesWithElidedDims",(()=>Zg)),t(Ug,"stopIndicesWithElidedDims",(()=>Jg)),t(Ug,"startForAxis",(()=>ey)),t(Ug,"stopForAxis",(()=>ty)),t(Ug,"stridesForAxis",(()=>Qg)),t(Ug,"isSliceContinous",(()=>ny)),t(Ug,"computeFlatOffset",(()=>ry)),t(Ug,"parseSliceParams",(()=>sy)),t(Ug,"sliceInfo",(()=>ay));function Gg(e,t,n){const r=e.shape.length;Ph(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),Ph(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)Ph(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function Hg(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function qg(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function jg(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function Kg(e,t,n){return n<=e?n:n-(t-1)}function Xg(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Yg(e,t,n,r,s,a,o,i,l){const u=e.length;let c=new Array(u),p=new Array(u),h=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Zg(o,l,u,r,e),p=Jg(i,l,u,s,e),h=jg(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=ey(o,r,a,e,t,l),p[t]=ty(i,s,a,e,t,l),h[t]=Qg(a,t,l);return{begin:c,end:p,strides:h}}function Zg(e,t,n,r,s){const a=[...s],o=Xg(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=Kg(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function Jg(e,t,n,r,s){const a=[...s],o=Xg(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=Kg(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=Fh(0,a[e],s[e])}return a}function Qg(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function ey(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=Fh(0,o,l-1),o}function ty(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=i>0?Fh(0,o,l):Fh(-1,o,l-1),o}function ny(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function ry(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function sy(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{Ph(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(Ph(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function ay(e,t,n,r,s,a,o,i,l){let u;if(null==r?(u=new Array(t.length),u.fill(1)):u=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[h.beginMask&1<<t,h.endMask&1<<t],a=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=oy(h.begin[t],0,h.strides[t],r,s,a),h.end[t]=oy(h.end[t],1,h.strides[t],r,s,a);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,l=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],l=!0):n?(i=1,l=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,l=!0),l){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==h.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function oy(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var iy={};t(iy,"Serializable",(()=>ly)),t(iy,"SerializationMap",(()=>uy)),t(iy,"registerClass",(()=>cy));class ly{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class uy{constructor(){this.classNameMap={}}static getMap(){return null==uy.instance&&(uy.instance=new uy),uy.instance}static register(e){uy.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function cy(e){Ph(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),Ph("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),Ph(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),uy.register(e)}
/** @license See the LICENSE file. */var py={};t(py,"fromUint8ToStringArray",(()=>bx)),t(py,"fromStringArrayToUint8",(()=>xx)),t(py,"slice_util",(()=>Ug)),t(py,"upcastType",(()=>Lf)),t(py,"segment_util",(()=>hy));var hy={};t(hy,"segOpComputeOptimalWindowSize",(()=>gy)),t(hy,"computeOutShape",(()=>yy)),t(hy,"collectGatherOpShapeInfo",(()=>by));var dy={};t(dy,"PARALLELIZE_THRESHOLD",(()=>fy)),t(dy,"computeOptimalWindowSize",(()=>my));const fy=30;function my(e){return e<=fy?e:md(e,Math.floor(Math.sqrt(e)))}function gy(e,t){let n,r=!1;for(e<=fy?(n=e,r=!0):n=md(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=md(e,n+1);return n}function yy(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function by(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}var xy={};function wy(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function ky(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function vy(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function Ny(e,t){return ky(e,t.map((e=>1)),t)}function Sy(e,t,n){Ph(wy(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Iy(e,t){if(wy(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function Ty(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Ey(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(xy,"axesAreInnerMostDims",(()=>wy)),t(xy,"combineLocations",(()=>ky)),t(xy,"computeOutAndReduceShapes",(()=>vy)),t(xy,"expandShapeToKeepDim",(()=>Ny)),t(xy,"assertAxesAreInnerMostDims",(()=>Sy)),t(xy,"getAxesPermutation",(()=>Iy)),t(xy,"getUndoAxesPermutation",(()=>Ty)),t(xy,"getInnerMostAxes",(()=>Ey));var $y={};function Cy(e,t){const n=e[0].length;e.forEach(((e,t)=>{Ph(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),Ph(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)Ph(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function Ay(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t($y,"assertParamsConsistent",(()=>Cy)),t($y,"computeOutShape",(()=>Ay));var _y={};function Ry(e,t,n,r,s="NHWC",a){return Oy(e,[...t,e[3]],n,a,r,null,null,Gy(s))}function Dy(e,t,n,r,s,a,o="channelsLast"){const[i,l]=zy(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return Oy(e,u,n,r,s,a,!1,o)}function Fy(e,t,n,r,s,a,o="NDHWC"){const[i,l,u]=By(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,l,u,e[1],e[1]]}return My(e,c,n,r,s,!1,p,a)}function Oy(e,t,n,r,s,a,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=zy(n),[y,b]=zy(r),x=Py(h,y),w=Py(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Ly(e,t,n));const a=e[0],o=e[1],i=Vy((a-t+2*r)/n+1,s),l=Vy((o-t+2*r)/n+1,s);return[i,l]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Vy((t-a+h+d)/r+1,i),p=Vy((n-o+f+m)/s+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(s,u,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[l,S,v,N]:"channelsLast"===i&&(I=[l,v,N,S]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function My(e,t,n,r,s,a=!1,o="channelsLast",i){let[l,u,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=By(n),[w,k,v]=By(r),N=Py(d,w),S=Py(f,k),I=Py(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,s,a,o,i,l,u,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Ly(e,t,r));const o=e[0],i=e[1],l=e[2],u=Vy((o-t+2*s)/r+1,a),c=Vy((i-t+2*s)/r+1,a),p=Vy((l-t+2*s)/r+1,a);return[u,c,p,n]}([t,n,r,1],i,1,s,e,c);h=a[0],d=a[1],f=a[2]}else if("same"===e){h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+l-n,m=(f-1)*o+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,u,c,p,y,b,x,N,S,I,i),A=a?g*h:g;let _;return"channelsFirst"===o?_=[l,A,E,$,C]:"channelsLast"===o&&(_=[l,E,$,C,A]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:_,filterShape:t}}function Ly(e,t,n,r=1){const s=Py(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function zy(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function By(e){return"number"==typeof e?[e,e,e]:e}function Py(e,t){return t<=1?e:e+(e-1)*(t-1)}function Vy(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Wy(e){const[t,n,r]=zy(e);return 1===t&&1===n&&1===r}function Uy(e,t){return Wy(e)||Wy(t)}function Gy(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Hy(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)Ph(jh(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{Ph(jh(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(_y,"computeDilation2DInfo",(()=>Ry)),t(_y,"convertConv2DDataFormat",(()=>Gy)),t(_y,"computeConv2DInfo",(()=>Oy)),t(_y,"computePool2DInfo",(()=>Dy)),t(_y,"computePool3DInfo",(()=>Fy)),t(_y,"computeConv3DInfo",(()=>My)),t(_y,"computeDefaultPad",(()=>Ly)),t(_y,"tupleValuesAreOne",(()=>Wy)),t(_y,"eitherStridesOrDilationsAreOne",(()=>Uy)),t(_y,"checkPadOnDimRoundingMode",(()=>Hy));var qy={};t(qy,"getFusedDyActivation",(()=>rb)),t(qy,"getFusedBiasGradient",(()=>sb)),t(qy,"applyActivation",(()=>ab)),t(qy,"shouldFuse",(()=>ob));const jy=im({elu_:function(e){const t={x:am(e,"x","elu","float32")};return Kf.runKernel("Elu",t)}});const Ky=im({leakyRelu_:function(e,t=.2){const n={x:am(e,"x","leakyRelu")},r={alpha:t};return Kf.runKernel("LeakyRelu",n,r)}});const Xy=im({mul_:function(e,t){let n=am(e,"a","mul"),r=am(t,"b","mul");[n,r]=Bf(n,r);const s={a:n,b:r};return Kf.runKernel("Multiply",s)}});const Yy=im({prelu_:function(e,t){const n={x:am(e,"x","prelu"),alpha:am(t,"alpha","prelu")};return Kf.runKernel("Prelu",n)}});const Zy=im({relu_:function(e){const t={x:am(e,"x","relu")};return Kf.runKernel("Relu",t)}});const Jy=im({relu6_:function(e){const t={x:am(e,"x","relu6")};return Kf.runKernel("Relu6",t)}});const Qy=im({reshape_:function(e,t){const n={x:am(e,"x","reshape","string_or_numeric")},r={shape:t};return Kf.runKernel("Reshape",n,r)}});const eb=im({sigmoid_:function(e){const t={x:am(e,"x","sigmoid","float32")};return Kf.runKernel("Sigmoid",t)}});const tb=im({step_:function(e,t=0){const n={x:am(e,"x","step")},r={alpha:t};return Kf.runKernel("Step",n,r)}});const nb=im({sum_:function(e,t=null,n=!1){let r=am(e,"x","sum");"bool"===r.dtype&&(r=ig(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Kf.runKernel("Sum",s,a)}});function rb(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Xy(e,tb(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function sb(e,t){let n=t;const r=Dg(e.shape,t.shape);return r.length>0&&(n=nb(n,r)),Qy(n,e.shape)}function ab(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Zy(e);if("elu"===t)return jy(e);if("relu6"===t)return Jy(e);if("prelu"===t)return Yy(e,n);if("leakyrelu"===t)return Ky(e,r);if("sigmoid"===t)return eb(e);throw new Error(`Unknown fused activation ${t}.`)}const ob=(e,t)=>!(e>0)||"linear"===t;var ib,lb,ub={};function cb(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],o=r[r.length-n.length+s],i=r[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${i}`)}else r[o]=a}return r}function pb(e){const t={FIRST_DIM_SIZE:ib.FIRST_DIM_SIZE,VALUE_ROWIDS:ib.VALUE_ROWIDS,ROW_LENGTHS:ib.ROW_LENGTHS,ROW_SPLITS:ib.ROW_SPLITS,ROW_LIMITS:ib.ROW_LIMITS,ROW_STARTS:ib.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function hb(e){return 0===e.length?0:e[0]===ib.FIRST_DIM_SIZE?e.length-1:e.length}function db(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}t(ub,"RowPartitionType",(()=>ib)),t(ub,"combineRaggedTensorToTensorShapes",(()=>cb)),t(ub,"getRowPartitionTypesHelper",(()=>pb)),t(ub,"getRaggedRank",(()=>hb)),t(ub,"validateDefaultValueShape",(()=>db)),(lb=ib||(ib={}))[lb.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",lb[lb.VALUE_ROWIDS=1]="VALUE_ROWIDS",lb[lb.ROW_LENGTHS=2]="ROW_LENGTHS",lb[lb.ROW_SPLITS=3]="ROW_SPLITS",lb[lb.ROW_LIMITS=4]="ROW_LIMITS",lb[lb.ROW_STARTS=5]="ROW_STARTS";var fb={};function mb(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(fb,"getImageCenter",(()=>mb));var gb={};function yb(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function bb(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function xb(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function wb(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function kb(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}t(gb,"getReshaped",(()=>yb)),t(gb,"getPermuted",(()=>bb)),t(gb,"getReshapedPermuted",(()=>xb)),t(gb,"getSliceBeginCoords",(()=>wb)),t(gb,"getSliceSize",(()=>kb));var vb={};function Nb(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===Gh(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,l=s.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=i[e],l.push(i[e]);const c=[...gd(e.shape).map((e=>e/u)),1].slice(0,a);return[l,o,u,c]}t(vb,"prepareAndValidate",(()=>Nb));var Sb={};function Ib(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function Tb(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Ib(n,t,e)}function Eb(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:Gh(t.shape)/i,sliceSize:o,strides:[...gd(n.slice(0,s)),1],outputSize:Gh(n)}}t(Sb,"validateUpdateShape",(()=>Ib)),t(Sb,"validateInput",(()=>Tb)),t(Sb,"calculateShapes",(()=>Eb));var $b={};t($b,"SELU_SCALEALPHA",(()=>Cb)),t($b,"SELU_SCALE",(()=>Ab));const Cb=1.7580993408473768,Ab=1.0507009873554805;var _b={};t(_b,"ERF_P",(()=>Rb)),t(_b,"ERF_A1",(()=>Db)),t(_b,"ERF_A2",(()=>Fb)),t(_b,"ERF_A3",(()=>Ob)),t(_b,"ERF_A4",(()=>Mb)),t(_b,"ERF_A5",(()=>Lb));const Rb=.3275911,Db=.254829592,Fb=-.284496736,Ob=1.421413741,Mb=-1.453152027,Lb=1.061405429;var zb={};function Bb(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Pb(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Vb(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Wb(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Ub(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Gb(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Hb(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function qb(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(zb,"mergeRealAndImagArrays",(()=>Bb)),t(zb,"splitRealAndImagArrays",(()=>Pb)),t(zb,"complexWithEvenIndex",(()=>Vb)),t(zb,"complexWithOddIndex",(()=>Wb)),t(zb,"getComplexWithIndex",(()=>Ub)),t(zb,"assignToTypedArray",(()=>Gb)),t(zb,"exponents",(()=>Hb)),t(zb,"exponent",(()=>qb));var jb={};t(jb,"decodeEinsumEquation",(()=>Xb)),t(jb,"getEinsumPermutation",(()=>Yb)),t(jb,"checkEinsumDimSizes",(()=>Zb)),t(jb,"getEinsumComputePath",(()=>Jb)),t(jb,"isIdentityPermutation",(()=>Qb));const Kb=/->/g;function Xb(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Kb,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split("->");Ph(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=r.split(","),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const l=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(i.indexOf(a[e][t]))}const u=i.length,c=[];for(let e=s.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function Yb(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Zb(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:Ph(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function Jb(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=ex(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function Qb(e){return e.every(((e,t)=>e===t))}function ex(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var tx={};function nx(e,t,n=0){let r=[];if("number"==typeof t)Ph(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{Ph(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}Ph(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}t(tx,"prepareSplitSize",(()=>nx));var rx={};function sx(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function ax(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function ox(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(rx,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>sx)),t(rx,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>ax)),t(rx,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>ox));var ix={};function lx(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function ux(e,t){return`size ${e} must be non-negative, not ${t}`}function cx(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function px(e,t){return`Input to reshape is a SparseTensor with ${Gh(e)}\n  dense values, but the requested shape requires a multiple of ${Gh(t)}. inputShape=${e} outputShape= ${t}`}function hx(e,t){return`Input to reshape is a tensor with ${Gh(e)} dense values, but the requested shape has ${Gh(t)}. inputShape=${e} outputShape=${t}`}t(ix,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>lx)),t(ix,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>ux)),t(ix,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>cx)),t(ix,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>px)),t(ix,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>hx));var dx={};function fx(){return"segment ids must be >= 0"}function mx(){return"segment ids are not increasing"}function gx(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function yx(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function bx(e){try{return e.map((e=>pf(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function xx(e){return e.map((e=>cf(e)))}t(dx,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>fx)),t(dx,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>mx)),t(dx,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>gx)),t(dx,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>yx)),n(py,xy),n(py,_g),n(py,$y),n(py,_y),n(py,qy),n(py,{}),n(py,ub),n(py,dy),n(py,fb),n(py,gb),n(py,vb),n(py,Sb),n(py,$b),n(py,_b),n(py,Dd),n(py,zb),n(py,jb),n(py,tx),n(py,rx),n(py,ix),n(py,dx);var wx={};function kx(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||vx)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function vx(e,t){return e>t?1:e<t?-1:0}function Nx(e,t,n,r,s){return Tx(e,t,n,r,s,0)}function Sx(e,t,n,r,s,a){return Tx(e,t,n,r,s,0,!1,a,!0)}function Ix(e,t,n,r,s,a){return Tx(e,t,n,r,s,a,!0)}function Tx(e,t,n,r,s,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>s&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Cx);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=Ex(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*$x(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&kx(u,t,Cx))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function Ex(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function $x(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Cx(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function Ax(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=og(e,"int32"),s=og([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}function _x(){return Kf}function Rx(){return Kf.memory()}function Dx(e,t){return Kf.tidy(e,t)}function Fx(e){Wf(e).forEach((e=>e.dispose()))}function Ox(e){return Kf.keep(e)}function Mx(e,t,n=1){return Kf.registerBackend(e,t,n)}function Lx(e,t){Ph(fd(e),(()=>"The f passed in variableGrads(f) must be a function")),Ph(null==t||Array.isArray(t)&&t.every((e=>e instanceof Cf)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Kf.registeredVariables)t.push(Kf.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;Ph((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:o}=Kf.gradients(e,t,null,!0);Ph(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),Ph(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:a,grads:i}}function zx(e){return Kf.customGrad(e)}t(wx,"nonMaxSuppressionV3Impl",(()=>Nx)),t(wx,"nonMaxSuppressionV4Impl",(()=>Sx)),t(wx,"nonMaxSuppressionV5Impl",(()=>Ix)),t(wx,"whereImpl",(()=>Ax)),function(e){If=e}((function(e){$d().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}));var Bx={};t(Bx,"spectral",(()=>vS)),t(Bx,"signal",(()=>NS)),t(Bx,"image",(()=>SS)),t(Bx,"linalg",(()=>IS)),t(Bx,"losses",(()=>TS)),t(Bx,"sparse",(()=>ES)),t(Bx,"string",(()=>$S)),t(Bx,"abs",(()=>Qw)),t(Bx,"acos",(()=>Wk)),t(Bx,"acosh",(()=>Uk)),t(Bx,"add",(()=>ew)),t(Bx,"addN",(()=>Gk)),t(Bx,"all",(()=>Hk)),t(Bx,"any",(()=>qk)),t(Bx,"argMax",(()=>jk)),t(Bx,"argMin",(()=>Kk)),t(Bx,"asin",(()=>Xk)),t(Bx,"asinh",(()=>Yk)),t(Bx,"atan",(()=>Zk)),t(Bx,"atan2",(()=>Jk)),t(Bx,"atanh",(()=>Qk)),t(Bx,"avgPool",(()=>ev)),t(Bx,"avgPool3d",(()=>tv)),t(Bx,"basicLSTMCell",(()=>rv)),t(Bx,"batchToSpaceND",(()=>sv)),t(Bx,"batchNorm",(()=>ov)),t(Bx,"batchNorm2d",(()=>iv)),t(Bx,"batchNorm3d",(()=>lv)),t(Bx,"batchNorm4d",(()=>uv)),t(Bx,"bincount",(()=>Ow)),t(Bx,"broadcastArgs",(()=>cv)),t(Bx,"broadcastTo",(()=>Ww)),t(Bx,"buffer",(()=>og)),t(Bx,"cast",(()=>ig)),t(Bx,"ceil",(()=>pv)),t(Bx,"clipByValue",(()=>hv)),t(Bx,"clone",(()=>lg)),t(Bx,"complex",(()=>lm)),t(Bx,"concat",(()=>Px)),t(Bx,"concat1d",(()=>dv)),t(Bx,"concat2d",(()=>fv)),t(Bx,"concat3d",(()=>mv)),t(Bx,"concat4d",(()=>gv)),t(Bx,"conv1d",(()=>yv)),t(Bx,"conv2d",(()=>tw)),t(Bx,"conv2dTranspose",(()=>bv)),t(Bx,"conv3d",(()=>xv)),t(Bx,"conv3dTranspose",(()=>kv)),t(Bx,"cos",(()=>vv)),t(Bx,"cosh",(()=>Nv)),t(Bx,"cumprod",(()=>Sv)),t(Bx,"cumsum",(()=>Iv)),t(Bx,"denseBincount",(()=>Tv)),t(Bx,"depthToSpace",(()=>Ev)),t(Bx,"depthwiseConv2d",(()=>aw)),t(Bx,"diag",(()=>$v)),t(Bx,"dilation2d",(()=>Cv)),t(Bx,"div",(()=>Bw)),t(Bx,"divNoNan",(()=>_v)),t(Bx,"dot",(()=>Rv)),t(Bx,"einsum",(()=>Dv)),t(Bx,"elu",(()=>jy)),t(Bx,"equal",(()=>Av)),t(Bx,"erf",(()=>Fv)),t(Bx,"euclideanNorm",(()=>Ov)),t(Bx,"exp",(()=>Ak)),t(Bx,"expandDims",(()=>uk)),t(Bx,"expm1",(()=>Mv)),t(Bx,"eye",(()=>ck)),t(Bx,"fill",(()=>yw)),t(Bx,"floor",(()=>Lv)),t(Bx,"floorDiv",(()=>zw)),t(Bx,"gather",(()=>zv)),t(Bx,"greater",(()=>Lw)),t(Bx,"greaterEqual",(()=>jw)),t(Bx,"imag",(()=>Vx)),t(Bx,"isFinite",(()=>Bv)),t(Bx,"isInf",(()=>Pv)),t(Bx,"isNaN",(()=>Vv)),t(Bx,"leakyRelu",(()=>Ky)),t(Bx,"less",(()=>Wv)),t(Bx,"lessEqual",(()=>Mw)),t(Bx,"linspace",(()=>Uv)),t(Bx,"localResponseNormalization",(()=>Gv)),t(Bx,"log",(()=>Tk)),t(Bx,"log1p",(()=>_k)),t(Bx,"logSigmoid",(()=>qv)),t(Bx,"logSoftmax",(()=>jv)),t(Bx,"logSumExp",(()=>Dk)),t(Bx,"logicalAnd",(()=>Kw)),t(Bx,"logicalNot",(()=>Kv)),t(Bx,"logicalOr",(()=>Xv)),t(Bx,"logicalXor",(()=>Yv)),t(Bx,"lowerBound",(()=>Qv)),t(Bx,"matMul",(()=>uw)),t(Bx,"max",(()=>ek)),t(Bx,"maxPool",(()=>eN)),t(Bx,"maxPool3d",(()=>tN)),t(Bx,"maxPoolWithArgmax",(()=>nN)),t(Bx,"maximum",(()=>rN)),t(Bx,"mean",(()=>yk)),t(Bx,"meshgrid",(()=>sN)),t(Bx,"min",(()=>tk)),t(Bx,"minimum",(()=>Sk)),t(Bx,"mirrorPad",(()=>aN)),t(Bx,"mod",(()=>oN)),t(Bx,"moments",(()=>iN)),t(Bx,"mul",(()=>Xy)),t(Bx,"multiRNNCell",(()=>lN)),t(Bx,"multinomial",(()=>uN)),t(Bx,"neg",(()=>pk)),t(Bx,"notEqual",(()=>bk)),t(Bx,"oneHot",(()=>cN)),t(Bx,"ones",(()=>xk)),t(Bx,"onesLike",(()=>pN)),t(Bx,"outerProduct",(()=>hN)),t(Bx,"pad",(()=>dN)),t(Bx,"pad1d",(()=>fN)),t(Bx,"pad2d",(()=>mN)),t(Bx,"pad3d",(()=>gN)),t(Bx,"pad4d",(()=>yN)),t(Bx,"pool",(()=>xN)),t(Bx,"pow",(()=>nk)),t(Bx,"prelu",(()=>Yy)),t(Bx,"print",(()=>ug)),t(Bx,"prod",(()=>wN)),t(Bx,"raggedGather",(()=>kN)),t(Bx,"raggedRange",(()=>vN)),t(Bx,"raggedTensorToTensor",(()=>NN)),t(Bx,"rand",(()=>SN)),t(Bx,"randomGamma",(()=>$N)),t(Bx,"randomNormal",(()=>CN)),t(Bx,"randomStandardNormal",(()=>AN)),t(Bx,"randomUniform",(()=>_N)),t(Bx,"range",(()=>Gw)),t(Bx,"real",(()=>Wx)),t(Bx,"reciprocal",(()=>RN)),t(Bx,"relu",(()=>Zy)),t(Bx,"relu6",(()=>Jy)),t(Bx,"reshape",(()=>Qy)),t(Bx,"reverse",(()=>Yx)),t(Bx,"reverse1d",(()=>DN)),t(Bx,"reverse2d",(()=>FN)),t(Bx,"reverse3d",(()=>ON)),t(Bx,"reverse4d",(()=>MN)),t(Bx,"round",(()=>Vw)),t(Bx,"rsqrt",(()=>LN)),t(Bx,"scalar",(()=>Zx)),t(Bx,"selu",(()=>zN)),t(Bx,"separableConv2d",(()=>BN)),t(Bx,"setdiff1dAsync",(()=>PN)),t(Bx,"sigmoid",(()=>eb)),t(Bx,"sign",(()=>VN)),t(Bx,"sin",(()=>WN)),t(Bx,"sinh",(()=>UN)),t(Bx,"slice",(()=>Ux)),t(Bx,"slice1d",(()=>GN)),t(Bx,"slice2d",(()=>HN)),t(Bx,"slice3d",(()=>qN)),t(Bx,"slice4d",(()=>jN)),t(Bx,"softmax",(()=>KN)),t(Bx,"softplus",(()=>Hv)),t(Bx,"spaceToBatchND",(()=>bN)),t(Bx,"fft",(()=>jx)),t(Bx,"ifft",(()=>Xx)),t(Bx,"irfft",(()=>Jx)),t(Bx,"rfft",(()=>Kx)),t(Bx,"split",(()=>Gx)),t(Bx,"sqrt",(()=>rk)),t(Bx,"square",(()=>sk)),t(Bx,"squaredDifference",(()=>$k)),t(Bx,"squeeze",(()=>ik)),t(Bx,"stack",(()=>Xw)),t(Bx,"step",(()=>tb)),t(Bx,"stridedSlice",(()=>XN)),t(Bx,"sub",(()=>Pw)),t(Bx,"sum",(()=>nb)),t(Bx,"tan",(()=>YN)),t(Bx,"tanh",(()=>nv)),t(Bx,"tensor",(()=>cm)),t(Bx,"tensor1d",(()=>hw)),t(Bx,"tensor2d",(()=>bw)),t(Bx,"tensor3d",(()=>Mg)),t(Bx,"tensor4d",(()=>ZN)),t(Bx,"tensor5d",(()=>JN)),t(Bx,"tensor6d",(()=>QN)),t(Bx,"tile",(()=>Nw)),t(Bx,"topk",(()=>eS)),t(Bx,"truncatedNormal",(()=>tS)),t(Bx,"unique",(()=>nS)),t(Bx,"unsortedSegmentSum",(()=>rS)),t(Bx,"unstack",(()=>Yw)),t(Bx,"upperBound",(()=>sS)),t(Bx,"variable",(()=>aS)),t(Bx,"where",(()=>Uw)),t(Bx,"whereAsync",(()=>oS)),t(Bx,"zeros",(()=>Hx)),t(Bx,"zerosLike",(()=>qx)),t(Bx,"op",(()=>im)),t(Bx,"OP_SCOPE_SUFFIX",(()=>"__op")),t(Bx,"fused",(()=>Qx));const Px=im({concat_:function(e,t=0){Ph(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=om(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return lg(n[0]);const r=n,s={axis:t};return Kf.runKernel("Concat",r,s)}});const Vx=im({imag_:function(e){const t={input:am(e,"input","imag")};return Kf.runKernel("Imag",t)}});const Wx=im({real_:function(e){const t={input:am(e,"input","real")};return Kf.runKernel("Real",t)}});const Ux=im({slice_:function(e,t,n){const r=am(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return Kf.runKernel("Slice",s,a)}});const Gx=im({split_:function(e,t,n=0){const r={x:am(e,"x","split")},s={numOrSizeSplits:t,axis:n};return Kf.runKernel("SplitV",r,s)}});function Hx(e,t="float32"){if("complex64"===t){const t=Hx(e,"float32"),n=Hx(e,"float32");return lm(t,n)}const n=wd(Gh(e),t);return Kf.makeTensor(n,e,t)}const qx=im({zerosLike_:function(e){const t={x:am(e,"x","zerosLike")};return Kf.runKernel("ZerosLike",t)}});const jx=im({fft_:function(e){Ph("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Kf.runKernel("FFT",t)}});const Kx=im({rfft_:function(e,t){Ph("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=Ux(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=Px([e,Hx(r)],e.shape.length-1),n=t}else s=e;const a=qx(s),o=Qy(lm(s,a),[r,n]),i=jx(o),l=Math.floor(n/2)+1,u=Wx(i),c=Vx(i),p=Gx(u,[l,n-l],u.shape.length-1),h=Gx(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,Qy(lm(p[0],h[0]),d)}});const Xx=im({ifft_:function(e){Ph("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Kf.runKernel("IFFT",t)}});const Yx=im({reverse_:function(e,t){const n={x:am(e,"x","reverse")},r={dims:t};return Kf.runKernel("Reverse",n,r)}});function Zx(e,t){if((id(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&id(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return um(e,[],[],t)}const Jx=im({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Qy(e,[n,t]);r=Xx(s)}else{const s=[n,2*(t-1)],a=Qy(Wx(e),[n,t]),o=Qy(Vx(e),[n,t]),i=Yx(Ux(a,[0,1],[n,t-2]),1),l=Xy(Yx(Ux(o,[0,1],[n,t-2]),1),Zx(-1)),u=Px([a,i],1),c=Px([o,l],1),p=Qy(lm(u,c),[s[0],s[1]]);r=Xx(p)}if(r=Wx(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Qy(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var Qx={};t(Qx,"conv2d",(()=>sw)),t(Qx,"depthwiseConv2d",(()=>lw)),t(Qx,"matMul",(()=>cw));const ew=im({add_:function(e,t){let n=am(e,"a","add"),r=am(t,"b","add");[n,r]=Bf(n,r);const s={a:n,b:r};return Kf.runKernel("Add",s)}});const tw=im({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=am(e,"x","conv2d","float32"),l=am(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Qy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Ph(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),Ph(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Hy("conv2d",r,o);const p="NHWC"===s?u.shape[3]:u.shape[1];Ph(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),Ph(Uy(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=Kf.runKernel("Conv2D",h,d);return c?Qy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const nw=im({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=Qy(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Qy(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Ph(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),Ph(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),Ph(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];Ph(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),Ph(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Hy("conv2dDerFilter",s,o);const p={x:i,dy:l},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return Kf.runKernel("Conv2DBackpropFilter",p,h)}});const rw=im({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){Ph(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=Qy(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),Ph(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),Ph(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),Ph(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?l.shape[3]:l.shape[1];Ph(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),Ph(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Hy("conv2dDerInput",s,o);const h={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=Kf.runKernel("Conv2DBackpropInput",h,d);return u?Qy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const sw=im({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===ob(Kf.state.gradientDepth,l)){Ph("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=tw(e,t,n,r,s,a,o);return null!=i&&(p=ew(p,i)),ab(p,l,u,c)}const p=am(e,"x","conv2d","float32"),h=am(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Qy(p,[1,p.shape[0],p.shape[1],p.shape[2]])),Ph(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),Ph(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),Hy("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];Ph(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),Ph(Uy(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=Oy(d.shape,h.shape,n,a,r,o);let y,b;if(null!=i&&(y=am(i,"bias","fused conv2d"),[y]=Bf(y,p),"NHWC"===s?Fg(g.outShape,y.shape):(Ph(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),Ph(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(Ph(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)Ph(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Fg(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=am(u,"prelu weights","fused conv2d")}const x=(e,t)=>{Ph("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,u,c]=t,p=rb(e,u,l);Ph(Wy(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[rw(i.shape,p,o,n,r),nw(i,p,o.shape,n,r)];if(null!=c){const e=sb(c,p);h.push(e)}return h},w={x:d,filter:h,bias:y,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=zx(((e,t,n)=>{let r=Kf.runKernel("FusedConv2D",w,k);return n([t,e,r]),f&&(r=Qy(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=zx(((e,t,n,r)=>{let s=Kf.runKernel("FusedConv2D",w,k);return r([t,e,s,n]),f&&(s=Qy(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,y)}}});const aw=im({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=am(e,"x","depthwiseConv2d","float32"),l=am(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Qy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Ph(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),Ph(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const p="NHWC"===s?u.shape[3]:u.shape[1];Ph(p===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Hy("depthwiseConv2d",r,o);const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=Kf.runKernel("DepthwiseConv2dNative",h,d);return c?Qy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ow=im({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=Qy(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Qy(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return Kf.runKernel("DepthwiseConv2dNativeBackpropFilter",u,c)}});const iw=im({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=Qy(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=Kf.runKernel("DepthwiseConv2dNativeBackpropInput",u,c);return l?Qy(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const lw=im({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===ob(Kf.state.gradientDepth,l)){let p=aw(e,t,n,r,s,a,o);return null!=i&&(p=ew(p,i)),ab(p,l,u,c)}const p=am(e,"x","depthwiseConv2d","float32"),h=am(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Qy(p,[1,p.shape[0],p.shape[1],p.shape[2]])),Ph(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),Ph(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),Ph(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),Ph(Uy(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Hy("fused depthwiseConv2d",r,o);const m=Oy(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=am(i,"bias","fused conv2d"),[g]=Bf(g,p),Fg(m.outShape,g.shape)),null!=u&&(y=am(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{Ph(Wy(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,u,c]=t,p=rb(e,u,l),h=iw(i.shape,p,s,n,r,a,o),d=ow(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,sb(g,p)]}return[h,d]},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=zx(((e,t,n)=>{let r=Kf.runKernel("FusedDepthwiseConv2D",x,w);return n([t,e,r]),f&&(r=Qy(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=zx(((e,t,n,r)=>{let s=Kf.runKernel("FusedDepthwiseConv2D",x,w);return r([t,e,s,n]),f&&(s=Qy(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,g)}}});const uw=im({matMul_:function(e,t,n=!1,r=!1){let s=am(e,"a","matMul"),a=am(t,"b","matMul");[s,a]=Bf(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return Kf.runKernel("BatchMatMul",o,i)}});const cw=im({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===ob(Kf.state.gradientDepth,a)){let l=uw(e,t,n,r);return null!=s&&(l=ew(l,s)),ab(l,a,o,i)}let l=am(e,"a","fused matMul"),u=am(t,"b","fused matMul");[l,u]=Bf(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=Gh(f),y=Gh(m);Ph(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=Fg(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([h,d]),x=Qy(l,n?[g,c,h]:[g,h,c]),w=Qy(u,r?[y,d,p]:[y,p,d]);let k,v;null!=s&&(k=am(s,"bias","fused matMul"),[k]=Bf(k,l),Fg(b,k.shape)),null!=o&&(v=am(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,l,u]=t,c=rb(Qy(e,l.shape),l,a);let p,h;if(n||r?!n&&r?(p=uw(c,i,!1,!1),h=uw(c,o,!0,!1)):n&&!r?(p=uw(i,c,!1,!0),h=uw(o,c,!1,!1)):(p=uw(i,c,!0,!0),h=uw(c,o,!0,!0)):(p=uw(c,i,!1,!0),h=uw(o,c,!0,!1)),null!=s){return[p,h,sb(u,c)]}return[p,h]},S={a:x,b:w,bias:k,preluActivationWeights:v},I={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=zx(((e,t,n)=>{const r=Kf.runKernel("_FusedMatMul",S,I);return n([e,t,r]),{value:Qy(r,b),gradFunc:N}}));return e(x,w)}{const e=zx(((e,t,n,r)=>{const s=Kf.runKernel("_FusedMatMul",S,I);return r([e,t,s,n]),{value:Qy(s,b),gradFunc:N}}));return e(x,w,k)}}});var pw={};function hw(e,t){Wh(e);const n=nm(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return um(e,null,n,t)}function dw(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function fw(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return hw(s,"float32")}t(pw,"enclosingPowerOfTwo",(()=>dw)),t(pw,"cosineWindow",(()=>fw));const mw=im({hammingWindow_:function(e){return fw(e,.54,.46)}});const gw=im({hannWindow_:function(e){return fw(e,.5,.5)}});function yw(e,t,n){const r={shape:e,value:t,dtype:n};return Kf.runKernel("Fill",{},r)}function bw(e,t,n){if(Wh(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=nm(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return um(e,t,r,n)}const xw=im({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(Ux(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=Px([Ux(e,a,t-r),yw([r],s)]);o.push(i),a+=n}return 0===o.length?bw([],[0,t]):Qy(Px(o),[o.length,t])}});const ww=im({stft_:function(e,t,n,r,s=gw){null==r&&(r=dw(t));const a=xw(e,t,n),o=Xy(a,s(t));return Kx(o,r)}});const kw=im({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=am(e,"image","cropAndResize"),i=am(t,"boxes","cropAndResize","float32"),l=am(n,"boxInd","cropAndResize","int32"),u=i.shape[0];Ph(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),Ph(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),Ph(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),Ph(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),Ph(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),Ph("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:l},p={method:s,extrapolationValue:a,cropSize:r};return Kf.runKernel("CropAndResize",c,p)}});const vw=im({flipLeftRight_:function(e){const t=am(e,"image","flipLeftRight","float32");Ph(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Kf.runKernel("FlipLeftRight",n,{})}});const Nw=im({tile_:function(e,t){const n=am(e,"x","tile","string_or_numeric");Ph(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return Kf.runKernel("Tile",r,s)}});const Sw=im({grayscaleToRGB_:function(e){const t=am(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];Ph(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),Ph(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,Nw(t,s)}});const Iw=im({rotateWithOffset_:function(e,t,n=0,r=.5){const s=am(e,"image","rotateWithOffset","float32");Ph(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return Kf.runKernel("RotateWithOffset",a,o)}});function Tw(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),Ph(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),Ph(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),Ph(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),Ph(1===t.rank,(()=>"scores must be a 1D tensor")),Ph(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),Ph(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Ew=im({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=am(e,"boxes","nonMaxSuppression","float32"),o=am(t,"scores","nonMaxSuppression","float32"),i=Tw(a,o,n,r,s),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return Kf.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},l)}});const $w=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=am(e,"boxes","nonMaxSuppressionAsync"),o=am(t,"scores","nonMaxSuppressionAsync"),i=Tw(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const l=await Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:p}=Nx(u,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),hw(p,"int32")};const Cw=im({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=am(e,"boxes","nonMaxSuppression"),i=am(t,"scores","nonMaxSuppression"),l=Tw(o,i,n,r,s,a),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},p=Kf.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const Aw=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=am(e,"boxes","nonMaxSuppressionAsync"),i=am(t,"scores","nonMaxSuppressionAsync"),l=Tw(o,i,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h,selectedScores:d}=Ix(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:hw(h,"int32"),selectedScores:hw(d)}};const _w=im({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=am(e,"boxes","nonMaxSuppression"),i=am(t,"scores","nonMaxSuppression"),l=Tw(o,i,n,r,s,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},p=Kf.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Rw=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=am(e,"boxes","nonMaxSuppressionAsync"),i=am(t,"scores","nonMaxSuppressionAsync"),l=Tw(o,i,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=Sx(h,d,u,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:hw(f,"int32"),validOutputs:Zx(m,"int32")}};const Dw=im({resizeBilinear_:function(e,t,n=!1,r=!1){const s=am(e,"images","resizeBilinear");Ph(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),Ph(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),Ph(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Qy(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=Kf.runKernel("ResizeBilinear",i,l);return o?Qy(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Fw=im({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=am(e,"images","resizeNearestNeighbor");Ph(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),Ph(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),Ph("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),Ph(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Qy(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=Kf.runKernel("ResizeNearestNeighbor",i,l);return o?Qy(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Ow=im({bincount_:function(e,t,n){const r=am(e,"x","bincount"),s=am(t,"weights","bincount");Ph("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),Ph(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Ph(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return Kf.runKernel("Bincount",a,o)}});const Mw=im({lessEqual_:function(e,t){let n=am(e,"a","lessEqual","string_or_numeric"),r=am(t,"b","lessEqual","string_or_numeric");[n,r]=Bf(n,r),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("LessEqual",s)}});const Lw=im({greater_:function(e,t){let n=am(e,"a","greater","string_or_numeric"),r=am(t,"b","greater","string_or_numeric");[n,r]=Bf(n,r),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("Greater",s)}});const zw=im({floorDiv_:function(e,t){let n=am(e,"a","floorDiv"),r=am(t,"b","floorDiv");[n,r]=Bf(n,r);const s={a:n,b:r};return Kf.runKernel("FloorDiv",s)}});const Bw=im({div_:function(e,t){let n=am(e,"a","div"),r=am(t,"b","div");if([n,r]=Bf(n,r),"int32"===n.dtype&&"int32"===r.dtype)return zw(n,r);const s={a:n,b:r};return Kf.runKernel("RealDiv",s,{})}});const Pw=im({sub_:function(e,t){let n=am(e,"a","sub"),r=am(t,"b","sub");[n,r]=Bf(n,r);const s={a:n,b:r};return Kf.runKernel("Sub",s)}});const Vw=im({round_:function(e){const t={x:am(e,"x","round")};return Kf.runKernel("Round",t)}});const Ww=im({broadcastTo_:function(e,t){let n=am(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Qy(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return lg(n);const o={x:n},i={reps:a};return Kf.runKernel("Tile",o,i)}});const Uw=im({where_:function(e,t,n){const r=am(t,"a","where"),s=am(n,"b","where"),a=am(e,"condition","where","bool"),o=Fg(Fg(a.shape,r.shape),s.shape),i={condition:Ww(a,o),t:Ww(r,o),e:Ww(s,o)};return Kf.runKernel("Select",i)}});function Gw(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return Kf.runKernel("Range",{},s)}const Hw=im({threshold_:function(e,t="binary",n=!1,r=.5){const s=am(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,l,u,c=Xy(hw([r]),255);if(Ph(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),Ph(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),Ph("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),Ph("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,l]=Gx(s,[1,1,1],-1);const e=Xy(o,.2989),t=Xy(i,.587),n=Xy(l,.114);u=ew(ew(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,l=hw([-1]),u=hw([0]),c=hw([0]);for(let p=0;p<e.size-1;p++){n=Ux(e,0,p+1),r=Ux(e,p+1),o=Bw(nb(n),t),i=Bw(nb(r),t);const h=nb(Xy(n,Gw(0,n.size)));s=Bw(h,nb(n));const d=yw(r.shape,n.size),f=ew(Gw(0,r.size),d),m=Xy(r,f);a=Bw(nb(m),nb(r));const g=Pw(s,a),y=Pw(s,a),b=Xy(o,i);c=Xy(Xy(b,g),y);const x=Lw(c,u);u=Uw(x,c,u),l=Uw(x,hw([p]),l)}return l}(Ow(ig(Vw(u),"int32"),cm([]),256),a)}const p=n?Mw(u,c):Lw(u,c);return ig(Xy(p,255),"int32")}});const qw=im({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=am(e,"image","transform","float32"),i=am(t,"transforms","transform","float32");Ph(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),Ph(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),Ph(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return Kf.runKernel("Transform",l,u)}});const jw=im({greaterEqual_:function(e,t){let n=am(e,"a","greaterEqual","string_or_numeric"),r=am(t,"b","greaterEqual","string_or_numeric");[n,r]=Bf(n,r),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("GreaterEqual",s)}});const Kw=im({logicalAnd_:function(e,t){const n=am(e,"a","logicalAnd","bool"),r=am(t,"b","logicalAnd","bool");Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("LogicalAnd",s)}});const Xw=im({stack_:function(e,t=0){const n=om(e,"tensors","stack","string_or_numeric");Ph(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&Ph(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return Kf.runKernel("Pack",r,s)}});const Yw=im({unstack_:function(e,t=0){const n=am(e,"x","unstack","string_or_numeric");Ph(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return Kf.runKernel("Unpack",r,s)}});const Zw=im({bandPart_:function(e,t,n){Ph(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),Ph(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=am(e,"a","bandPart");Ph(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Qy(Gw(0,a,1,"int32"),[-1,1]),l=Gw(0,o,1,"int32"),u=Pw(i,l),c=Kw(Mw(u,Zx(+t,"int32")),jw(u,Zx(-n,"int32"))),p=Hx([a,o],r.dtype);return Qy(Xw(Yw(Qy(r,[-1,a,o])).map((e=>Uw(c,e,p)))),s)}});var Jw={};t(Jw,"norm",(()=>ok));const Qw=im({abs_:function(e){const t=am(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Kf.runKernel("ComplexAbs",e)}{const e={x:t};return Kf.runKernel("Abs",e)}}});const ek=im({max_:function(e,t=null,n=!1){const r={x:am(e,"x","max")},s={reductionIndices:t,keepDims:n};return Kf.runKernel("Max",r,s)}});const tk=im({min_:function(e,t=null,n=!1){const r={x:am(e,"x","min")},s={axis:t,keepDims:n};return Kf.runKernel("Min",r,s)}});const nk=im({pow_:function(e,t){let n=am(e,"base","pow"),r=am(t,"exp","pow");[n,r]=Bf(n,r);const s={a:n,b:r};return Kf.runKernel("Pow",s)}});const rk=im({sqrt_:function(e){const t={x:am(e,"x","sqrt","float32")};return Kf.runKernel("Sqrt",t)}});const sk=im({square_:function(e){const t=am(e,"x","square");return Kf.runKernel("Square",{x:t},{})}});function ak(e,t,n=null){if(0===e.rank)return Qw(e);if(1!==e.rank&&null===n)return ak(Qy(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return nb(Qw(e),n);if(t===1/0)return ek(Qw(e),n);if(t===-1/0)return tk(Qw(e),n);if("euclidean"===t||2===t)return rk(nb(nk(Qw(e),Zx(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return ek(nb(Qw(e),n[0]),n[1]-1);if(t===1/0)return ek(nb(Qw(e),n[1]),n[0]);if(t===-1/0)return tk(nb(Qw(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return rk(nb(sk(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ok=im({norm_:function(e,t="euclidean",n=null,r=!1){const s=ak(e=am(e,"x","norm"),t,n);let a=s.shape;if(r){const t=ed(n,e.shape);a=Ny(s.shape,t)}return Qy(s,a)}});const ik=im({squeeze_:function(e,t){const n=am(e,"x","squeeze","string_or_numeric");return Qy(n,td(n.shape,t).newShape)}});const lk=im({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Ph(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)Ph(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Gx(e,e.shape[0],0).map((e=>ik(e,[0])));Ph(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(Kf.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=Xy(nb(Xy(n[r],e)),n[r]);e=Pw(e,t)}return Bw(e,ok(e,"euclidean"))})));return t?Xw(n,0):n}});const uk=im({expandDims_:function(e,t=0){const n=am(e,"x","expandDims","string_or_numeric");Ph(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return Kf.runKernel("ExpandDims",r,s)}});const ck=im({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=og([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=Qy(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Nw(uk(o,0),[n[0],1,1]);if(2===n.length)return Nw(uk(uk(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Nw(uk(uk(uk(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const pk=im({neg_:function(e){const t={x:am(e,"x","neg")};return Kf.runKernel("Neg",t)}});var hk={};t(hk,"transpose",(()=>dk));const dk=im({transpose_:function(e,t,n){const r=am(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),Ph(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{Ph(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?Dx((()=>{let e=Wx(r),t=Vx(r);return e=Kf.runKernel("Transpose",{x:e},a),t=Kf.runKernel("Transpose",{x:t},a),n&&(t=pk(t)),lm(e,t)})):Kf.runKernel("Transpose",s,a)}});function fk(e,t=!1){return Kf.tidy((()=>{Ph(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=ck(n),a=lg(e);const o=bw([[1]],[1,1]);let i=lg(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,l=i,u=s;[i,a,s]=Kf.tidy((()=>{const t=Ux(a,[e,e],[n-e,1]),l=ok(t),u=Ux(a,[e,e],[1,1]),c=Uw(Lw(u,0),bw([[-1]]),bw([[1]])),p=Pw(u,Xy(c,l)),h=Bw(t,p);i=1===h.shape[0]?lg(o):Px([o,Ux(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=pk(Bw(uw(c,p),l)),f=Ux(a,[e,0],[n-e,r]),m=Xy(d,i),g=dk(i);if(0===e)a=Pw(f,uw(m,uw(g,f)));else{const t=Pw(f,uw(m,uw(g,f)));a=Px([Ux(a,[0,0],[e,r]),t],0)}const y=dk(m),b=Ux(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Pw(b,uw(uw(b,i),y));else{const t=Pw(b,uw(uw(b,i),y));s=Px([Ux(s,[0,0],[n,e]),t],1)}return[i,a,s]})),Fx([t,l,u])}return!t&&n>r&&(s=Ux(s,[0,0],[n,r]),a=Ux(a,[0,0],[r,r])),[s,a]}))}const mk=im({qr_:function(e,t=!1){if(Ph(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return fk(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Yw(Qy(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=fk(e,t);s.push(n),a.push(r)}));return[Qy(Xw(s,0),e.shape),Qy(Xw(a,0),e.shape)]}}});var gk;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(gk||(gk={}));const yk=im({mean_:function(e,t=null,n=!1){const r={x:am(e,"x","mean")},s={axis:t,keepDims:n};return Kf.runKernel("Mean",r,s)}});const bk=im({notEqual_:function(e,t){let n=am(e,"a","notEqual","string_or_numeric"),r=am(t,"b","notEqual","string_or_numeric");[n,r]=Bf(n,r),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("NotEqual",s)}});function xk(e,t="float32"){if("complex64"===t){const t=xk(e,"float32"),n=Hx(e,"float32");return lm(t,n)}const n=xd(Gh(e),t);return Kf.makeTensor(n,e,t)}const wk=im({computeWeightedLoss_:function(e,t,n=gk.SUM_BY_NONZERO_WEIGHTS){const r=am(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=am(t,"weights","computeWeightedLoss"));const a=null==s?r:Xy(r,s);if(n===gk.NONE)return a;if(n===gk.SUM)return nb(a);if(n===gk.MEAN){if(null==s)return yk(a);{const e=r.size/s.size,t=Bw(nb(a),nb(s));return e>1?Bw(t,Zx(e)):t}}if(n===gk.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Bw(nb(a),Zx(r.size));{const e=Xy(s,xk(r.shape)),t=ig(nb(bk(e,Zx(0))),"float32");return Bw(nb(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const kk=im({absoluteDifference_:function(e,t,n,r=gk.SUM_BY_NONZERO_WEIGHTS){const s=am(e,"labels","absoluteDifference"),a=am(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=am(n,"weights","absoluteDifference")),Vh(s.shape,a.shape,"Error in absoluteDifference: ");const i=Qw(Pw(s,a));return wk(i,o,r)}});const vk=im({cosineDistance_:function(e,t,n,r,s=gk.SUM_BY_NONZERO_WEIGHTS){const a=am(e,"labels","cosineDistance"),o=am(t,"predictions","cosineDistance");let i=null;null!=r&&(i=am(r,"weights","cosineDistance")),Vh(a.shape,o.shape,"Error in cosineDistance: ");const l=Zx(1),u=Pw(l,nb(Xy(a,o),n,!0));return wk(u,i,s)}});const Nk=im({hingeLoss_:function(e,t,n,r=gk.SUM_BY_NONZERO_WEIGHTS){let s=am(e,"labels","hingeLoss");const a=am(t,"predictions","hingeLoss");let o=null;null!=n&&(o=am(n,"weights","hingeLoss")),Vh(s.shape,a.shape,"Error in hingeLoss: ");const i=Zx(1);s=Pw(Xy(Zx(2),s),i);const l=Zy(Pw(i,Xy(s,a)));return wk(l,o,r)}});const Sk=im({minimum_:function(e,t){let n=am(e,"a","minimum"),r=am(t,"b","minimum");[n,r]=Bf(n,r),"bool"===n.dtype&&(n=ig(n,"int32"),r=ig(r,"int32")),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("Minimum",s)}});const Ik=im({huberLoss_:function(e,t,n,r=1,s=gk.SUM_BY_NONZERO_WEIGHTS){const a=am(e,"labels","huberLoss"),o=am(t,"predictions","huberLoss");let i=null;null!=n&&(i=am(n,"weights","huberLoss")),Vh(a.shape,o.shape,"Error in huberLoss: ");const l=Zx(r),u=Qw(Pw(o,a)),c=Sk(u,l),p=Pw(u,c),h=ew(Xy(Zx(.5),sk(c)),Xy(l,p));return wk(h,i,s)}});const Tk=im({log_:function(e){const t={x:am(e,"x","log","float32")};return Kf.runKernel("Log",t)}});const Ek=im({logLoss_:function(e,t,n,r=1e-7,s=gk.SUM_BY_NONZERO_WEIGHTS){const a=am(e,"labels","logLoss"),o=am(t,"predictions","logLoss");let i=null;null!=n&&(i=am(n,"weights","logLoss")),Vh(a.shape,o.shape,"Error in logLoss: ");const l=Zx(1),u=Zx(r),c=pk(Xy(a,Tk(ew(o,u)))),p=Xy(Pw(l,a),Tk(ew(Pw(l,o),u))),h=Pw(c,p);return wk(h,i,s)}});const $k=im({squaredDifference_:function(e,t){let n=am(e,"a","squaredDifference"),r=am(t,"b","squaredDifference");[n,r]=Bf(n,r),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("SquaredDifference",s,{})}});const Ck=im({meanSquaredError_:function(e,t,n,r=gk.SUM_BY_NONZERO_WEIGHTS){const s=am(e,"labels","meanSquaredError"),a=am(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=am(n,"weights","meanSquaredError")),Vh(s.shape,a.shape,"Error in meanSquaredError: ");const i=$k(s,a);return wk(i,o,r)}});const Ak=im({exp_:function(e){const t={x:am(e,"x","exp")};return Kf.runKernel("Exp",t)}});const _k=im({log1p_:function(e){const t={x:am(e,"x","log1p")};return Kf.runKernel("Log1p",t)}});const Rk=im({sigmoidCrossEntropy_:function(e,t,n,r=0,s=gk.SUM_BY_NONZERO_WEIGHTS){let a=am(e,"multiClassLabels","sigmoidCrossEntropy");const o=am(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=am(n,"weights","sigmoidCrossEntropy")),Vh(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Zx(r),t=Zx(1),n=Zx(.5);a=ew(Xy(a,Pw(t,e)),Xy(n,e))}const l=function(e,t){const n=am(e,"labels","sigmoidCrossEntropyWithLogits"),r=am(t,"logits","sigmoidCrossEntropyWithLogits");Vh(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Zy(r),a=Xy(r,n),o=_k(Ak(pk(Qw(r))));return ew(Pw(s,a),o)}(a,o);return wk(l,i,s)}});const Dk=im({logSumExp_:function(e,t=null,n=!1){const r=am(e,"x","logSumExp"),s=ed(t,r.shape),a=ek(r,s,!0),o=Pw(r,a),i=Ak(o),l=nb(i,s),u=Tk(l),c=ew(Qy(a,u.shape),u);if(n){const e=Ny(c.shape,s);return Qy(c,e)}return c}});const Fk=im({softmaxCrossEntropy_:function(e,t,n,r=0,s=gk.SUM_BY_NONZERO_WEIGHTS){let a=am(e,"onehotLabels","softmaxCrossEntropy");const o=am(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=am(n,"weights","softmaxCrossEntropy")),Vh(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Zx(r),t=Zx(1),n=Zx(a.shape[1]);a=ew(Xy(a,Pw(t,e)),Bw(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=zx(((e,t,r)=>{const s=Dk(t,[n],!0),a=Pw(ig(t,"float32"),s);r([e,a]);const o=pk(Xy(a,e));return{value:nb(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Ny(e.shape,[n]);return[Xy(Qy(e,a),Pw(ig(r,"float32"),Ak(s))),Xy(Qy(e,a),Pw(Ak(s),ig(r,"float32")))]}}}));return r(e,t)}(a,o);return wk(l,i,s)}});const Ok=im({sparseFillEmptyRows_:function(e,t,n,r){const s=am(e,"indices","sparseFillEmptyRows","int32"),a=am(t,"values","sparseFillEmptyRows"),o=am(n,"denseShape","sparseFillEmptyRows","int32"),i=am(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:s,values:a,denseShape:o,defaultValue:i},u=Kf.runKernel("SparseFillEmptyRows",l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const Mk=im({sparseReshape_:function(e,t,n){const r=am(e,"inputIndices","sparseReshape","int32"),s=am(t,"inputShape","sparseReshape","int32"),a=am(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=Kf.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Lk=im({sparseSegmentMean_:function(e,t,n){const r=am(e,"data","sparseSegmentMean"),s=am(t,"indices","sparseSegmentMean","int32"),a=am(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Kf.runKernel("SparseSegmentMean",o)}});const zk=im({sparseSegmentSum_:function(e,t,n){const r=am(e,"data","sparseSegmentSum"),s=am(t,"indices","sparseSegmentSum","int32"),a=am(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Kf.runKernel("SparseSegmentSum",o)}});const Bk=im({stringNGrams_:function(e,t,n,r,s,a,o,i){const l=am(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=am(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:l,dataSplits:u},h=Kf.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const Pk=im({stringSplit_:function(e,t,n=!0){const r=am(e,"input","stringSplit","string"),s=am(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=Kf.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const Vk=im({stringToHashBucketFast_:function(e,t){const n=am(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return Kf.runKernel("StringToHashBucketFast",s,r)}});const Wk=im({acos_:function(e){const t={x:am(e,"x","acos")};return Kf.runKernel("Acos",t)}});const Uk=im({acosh_:function(e){const t={x:am(e,"x","acosh")};return Kf.runKernel("Acosh",t)}});const Gk=im({addN_:function(e){Ph(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),Ph(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>am(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!qh(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return Kf.runKernel("AddN",r)}});const Hk=im({all_:function(e,t=null,n=!1){const r={x:am(e,"x","all","bool")},s={axis:t,keepDims:n};return Kf.runKernel("All",r,s)}});const qk=im({any_:function(e,t=null,n=!1){const r={x:am(e,"x","any","bool")},s={axis:t,keepDims:n};return Kf.runKernel("Any",r,s)}});const jk=im({argMax_:function(e,t=0){const n={x:am(e,"x","argMax")},r={axis:t};return Kf.runKernel("ArgMax",n,r)}});const Kk=im({argMin_:function(e,t=0){const n={x:am(e,"x","argMin")},r={axis:t};return Kf.runKernel("ArgMin",n,r)}});const Xk=im({asin_:function(e){const t={x:am(e,"x","asin")};return Kf.runKernel("Asin",t)}});const Yk=im({asinh_:function(e){const t={x:am(e,"x","asinh")};return Kf.runKernel("Asinh",t)}});const Zk=im({atan_:function(e){const t={x:am(e,"x","atan")};return Kf.runKernel("Atan",t)}});const Jk=im({atan2_:function(e,t){let n=am(e,"a","atan2"),r=am(t,"b","atan2");[n,r]=Bf(n,r);const s={a:n,b:r};return Kf.runKernel("Atan2",s)}});const Qk=im({atanh_:function(e){const t={x:am(e,"x","atanh")};return Kf.runKernel("Atanh",t)}});const ev=im({avgPool_:function(e,t,n,r,s){const a=am(e,"x","avgPool","float32");Ph(Uy(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=Qy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Ph(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Hy("avgPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=Kf.runKernel("AvgPool",l,u);return c=ig(c,a.dtype),i?Qy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const tv=im({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=am(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=Qy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Ph(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),Ph("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Hy("avgPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=Kf.runKernel("AvgPool3D",u,c);return p=ig(p,i.dtype),l?Qy(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const nv=im({tanh_:function(e){const t={x:am(e,"x","tanh","float32")};return Kf.runKernel("Tanh",t)}});const rv=im({basicLSTMCell_:function(e,t,n,r,s,a){const o=am(e,"forgetBias","basicLSTMCell"),i=am(t,"lstmKernel","basicLSTMCell"),l=am(n,"lstmBias","basicLSTMCell"),u=am(r,"data","basicLSTMCell"),c=am(s,"c","basicLSTMCell"),p=am(a,"h","basicLSTMCell"),h=Px([u,p],1),d=uw(h,i),f=ew(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Ux(f,[0,0],y),x=Ux(f,[0,g],y),w=Ux(f,[0,2*g],y),k=Ux(f,[0,3*g],y),v=ew(Xy(eb(b),nv(x)),Xy(c,eb(ew(o,w))));return[v,Xy(nv(v),eb(k))]}});const sv=im({batchToSpaceND_:function(e,t,n){const r=am(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));Ph(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),Ph(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),Ph(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return Kf.runKernel("BatchToSpaceND",a,o)}});function av(e){let t;return t=0===e.rank||1===e.rank?Qy(e,[1,1,1,e.size]):2===e.rank?Qy(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Qy(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const ov=im({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=am(e,"x","batchNorm"),i=am(t,"mean","batchNorm"),l=am(n,"variance","batchNorm");let u,c;null!=s&&(u=am(s,"scale","batchNorm")),null!=r&&(c=am(r,"offset","batchNorm")),Ph(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Ph(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Ph(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:av(o),scale:u,offset:c,mean:i,variance:l},h={varianceEpsilon:a},d=Kf.runKernel("FusedBatchNorm",p,h);return Qy(d,o.shape)}});const iv=im({batchNorm2d_:function(e,t,n,r,s,a){const o=am(e,"x","batchNorm"),i=am(t,"mean","batchNorm"),l=am(n,"variance","batchNorm");let u,c;return null!=s&&(u=am(s,"scale","batchNorm")),null!=r&&(c=am(r,"offset","batchNorm")),Ph(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),Ph(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),Ph(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&Ph(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&Ph(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),ov(o,i,l,c,u,a)}});const lv=im({batchNorm3d_:function(e,t,n,r,s,a){const o=am(e,"x","batchNorm"),i=am(t,"mean","batchNorm"),l=am(n,"variance","batchNorm");let u,c;return null!=s&&(u=am(s,"scale","batchNorm")),null!=r&&(c=am(r,"offset","batchNorm")),Ph(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),Ph(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),Ph(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&Ph(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&Ph(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),ov(o,i,l,c,u,a)}});const uv=im({batchNorm4d_:function(e,t,n,r,s,a){const o=am(e,"x","batchNorm"),i=am(t,"mean","batchNorm"),l=am(n,"variance","batchNorm");let u,c;return null!=s&&(u=am(s,"scale","batchNorm")),null!=r&&(c=am(r,"offset","batchNorm")),Ph(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),Ph(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),Ph(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&Ph(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&Ph(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),ov(o,i,l,c,u,a)}});const cv=im({broadcastArgs_:function(e,t){const n=am(e,"s0","broadcastArgs","int32"),r=am(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return Kf.runKernel("BroadcastArgs",s)}});const pv=im({ceil_:function(e){const t={x:am(e,"x","ceil","float32")};return Kf.runKernel("Ceil",t)}});const hv=im({clipByValue_:function(e,t,n){const r=am(e,"x","clipByValue");if(Ph(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return yw(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return Kf.runKernel("ClipByValue",s,a)}});const dv=im({concat1d_:function(e){return Px(e,0)}});const fv=im({concat2d_:function(e,t){return Px(e,t)}});const mv=im({concat3d_:function(e,t){return Px(e,t)}});const gv=im({concat4d_:function(e,t){return Px(e,t)}});const yv=im({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=am(e,"x","conv1d"),l=am(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=Qy(i,[1,i.shape[0],i.shape[1]])),Ph(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),Ph(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Hy("conv1d",r,o),Ph(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),Ph(Uy(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),Ph("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=Qy(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=Qy(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=tw(h,p,[1,n],r,"NHWC",[1,a],o);return Qy(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const bv=im({conv2dTranspose_:function(e,t,n,r,s,a){const o=am(e,"x","conv2dTranspose"),i=am(t,"filter","conv2dTranspose");return rw(n,o,i,r,s,"NHWC",a)}});const xv=im({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=am(e,"x","conv3d"),i=am(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Qy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Ph(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),Ph(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),Ph(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),Ph(Uy(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Ph("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:l,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=Kf.runKernel("Conv3D",c,p);return u?Qy(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const wv=im({conv3DBackpropInput_:function(e,t,n,r,s){Ph(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Qy(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=o.shape[4];Ph(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),Ph(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),Ph(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),Ph(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),Ph(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=Kf.runKernel("Conv3DBackpropInputV2",c,p);return i?Qy(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const kv=im({conv3dTranspose_:function(e,t,n,r,s){const a=am(e,"x","conv3dTranspose"),o=am(t,"filter","conv3dTranspose");return wv(n,a,o,r,s)}});const vv=im({cos_:function(e){const t={x:am(e,"x","cos","float32")};return Kf.runKernel("Cos",t)}});const Nv=im({cosh_:function(e){const t={x:am(e,"x","cosh","float32")};return Kf.runKernel("Cosh",t)}});const Sv=im({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:am(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return Kf.runKernel("Cumprod",s,a)}});const Iv=im({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:am(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return Kf.runKernel("Cumsum",s,a)}});const Tv=im({denseBincount_:function(e,t,n,r=!1){const s=am(e,"x","denseBincount"),a=am(t,"weights","denseBincount");Ph("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),Ph(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),Ph(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Ph(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return Kf.runKernel("DenseBincount",o,i)}});const Ev=im({depthToSpace_:function(e,t,n="NHWC"){const r=am(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];Ph(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),Ph(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),Ph(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),Ph(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},l={blockSize:t,dataFormat:n};return Kf.runKernel("DepthToSpace",i,l)}});const $v=im({diag_:function(e){const t={x:am(e,"x","diag")};return Kf.runKernel("Diag",t)}});const Cv=im({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=am(e,"x","dilation2d"),i=am(t,"filter","dilation2d");Ph(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),Ph(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),Ph("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=o,u=!1;3===o.rank&&(l=Qy(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0);const c={x:l,filter:i},p={strides:n,pad:r,dilations:s},h=Kf.runKernel("Dilation2D",c,p);return u?Qy(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Av=im({equal_:function(e,t){let n=am(e,"a","equal","string_or_numeric"),r=am(t,"b","equal","string_or_numeric");[n,r]=Bf(n,r),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("Equal",s)}});const _v=im({divNoNan_:function(e,t){let n=am(e,"a","div"),r=am(t,"b","div");[n,r]=Bf(n,r);const s=Bw(n,r),a=qx(s),o=Av(r,a);return Uw(o,a,s)}});const Rv=im({dot_:function(e,t){const n=am(e,"t1","dot"),r=am(t,"t2","dot");Ph(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(Ph(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Qy(n,[1,-1]),t=Qy(r,[-1,1]),s=uw(e,t);return Qy(s,[])}if(1===n.rank&&2===r.rank){const e=Qy(n,[1,-1]),t=Qy(r,[r.shape[0],r.shape[1]]),s=uw(e,t);return Qy(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Qy(r,[-1,1]),t=uw(n,e);return Qy(t,[t.size])}{const e=Qy(r,[r.shape[0],r.shape[1]]);return uw(n,e)}}});const Dv=im({einsum_:function(e,...t){const n=t.map(((e,t)=>am(e,`tensors${t}`,"einsum"))),r={equation:e};return Kf.runKernel("Einsum",n,r)}});const Fv=im({erf_:function(e){let t=am(e,"x","erf");Ph("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=ig(t,"float32"));const n={x:t};return Kf.runKernel("Erf",n)}});const Ov=im({euclideanNorm_:function(e,t=null,n=!1){return ok(e,"euclidean",t,n)}});const Mv=im({expm1_:function(e){const t={x:am(e,"x","expm1")};return Kf.runKernel("Expm1",t)}});const Lv=im({floor_:function(e){const t={x:am(e,"x","floor","float32")};return Kf.runKernel("Floor",t)}});const zv=im({gather_:function(e,t,n=0,r=0){const s={x:am(e,"x","gather"),indices:am(t,"indices","gather","int32")},a={axis:n,batchDims:r};return Kf.runKernel("GatherV2",s,a)}});const Bv=im({isFinite_:function(e){const t={x:am(e,"x","isFinite")};return Kf.runKernel("IsFinite",t)}});const Pv=im({isInf_:function(e){const t={x:am(e,"x","isInf")};return Kf.runKernel("IsInf",t)}});const Vv=im({isNaN_:function(e){const t={x:am(e,"x","isNaN")};return Kf.runKernel("IsNan",t)}});const Wv=im({less_:function(e,t){let n=am(e,"a","less","string_or_numeric"),r=am(t,"b","less","string_or_numeric");[n,r]=Bf(n,r),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("Less",s)}});function Uv(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return Kf.runKernel("LinSpace",{},r)}const Gv=im({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=am(e,"x","localResponseNormalization");Ph(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),Ph(jh(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=Qy(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:r,beta:s},c=Kf.runKernel("LRN",l,u);return i?Qy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Hv=im({softplus_:function(e){const t={x:am(e,"x","softplus")};return Kf.runKernel("Softplus",t)}});const qv=im({logSigmoid_:function(e){const t=am(e,"x","logSigmoid"),n=zx((e=>({value:pk(Hv(pk(e))),gradFunc:t=>Xy(t,eb(pk(e)))})));return n(t)}});const jv=im({logSoftmax_:function(e,t=-1){const n=am(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=zx(((e,n)=>{const r=ek(e,t,!0),s=Pw(e,r),a=Pw(ig(s,"float32"),Tk(nb(Ak(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=Ak(r);return Pw(e,Xy(nb(e,t,!0),s))}}}));return r(n)}});const Kv=im({logicalNot_:function(e){const t={x:am(e,"x","logicalNot","bool")};return Kf.runKernel("LogicalNot",t)}});const Xv=im({logicalOr_:function(e,t){const n=am(e,"a","logicalOr","bool"),r=am(t,"b","logicalOr","bool");Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("LogicalOr",s)}});const Yv=im({logicalXor_:function(e,t){const n=am(e,"a","logicalXor","bool"),r=am(t,"b","logicalXor","bool");return Fg(n.shape,r.shape),Kw(Xv(e,t),Kv(Kw(e,t)))}});var Zv={};t(Zv,"searchSorted",(()=>Jv));const Jv=im({searchSorted_:function(e,t,n="left"){const r=am(e,"sortedSequence","searchSorted"),s=am(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=Qy(r,[-1,a]),l=Qy(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Gh(l.shape)>=2147483648)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=2147483648)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const u={sortedSequence:i,values:l},c={side:n};return Kf.runKernel("SearchSorted",u,c)}});function Qv(e,t){return Jv(e,t,"left")}const eN=im({maxPool_:function(e,t,n,r,s){const a=am(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Qy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Ph(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),Ph(Uy(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Hy("maxPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=Kf.runKernel("MaxPool",l,u);return i?Qy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const tN=im({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=am(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=Qy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Ph(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),Ph("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Hy("maxPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=Kf.runKernel("MaxPool3D",u,c);return l?Qy(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const nN=im({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:am(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=Kf.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const rN=im({maximum_:function(e,t){let n=am(e,"a","maximum"),r=am(t,"b","maximum");[n,r]=Bf(n,r),"bool"===n.dtype&&(n=ig(n,"int32"),r=ig(r,"int32")),Fg(n.shape,r.shape);const s={a:n,b:r};return Kf.runKernel("Maximum",s)}});function sN(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=am(e,"x","meshgrid",e instanceof Ef?e.dtype:"float32");if(void 0===t)return[r];let s=am(t,"y","meshgrid",t instanceof Ef?t.dtype:"float32");const a=Gh(r.shape),o=Gh(s.shape);return"xy"===n?(r=Qy(r,[1,-1]),s=Qy(s,[-1,1]),[uw(xk([o,1],r.dtype),r),uw(s,xk([1,a],s.dtype))]):(r=Qy(r,[-1,1]),s=Qy(s,[1,-1]),[uw(r,xk([1,o],r.dtype)),uw(xk([a,1],s.dtype),s)])}const aN=im({mirrorPad_:function(e,t,n){Ph("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=am(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Ph(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)Ph(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Ph(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return Kf.runKernel("MirrorPad",o,a)}});const oN=im({mod_:function(e,t){let n=am(e,"a","mod"),r=am(t,"b","mod");[n,r]=Bf(n,r);const s={a:n,b:r};return Kf.runKernel("Mod",s)}});const iN=im({moments_:function(e,t=null,n=!1){const r=ed(t,(e=am(e,"x","moments")).shape),s=yk(e,r,n);let a=s.shape;n||(a=Ny(s.shape,r));const o=sk(Pw(ig(e,"float32"),Qy(s,a)));return{mean:s,variance:yk(o,r,n)}}});const lN=im({multiRNNCell_:function(e,t,n,r){const s=am(t,"data","multiRNNCell"),a=om(n,"c","multiRNNCell"),o=om(r,"h","multiRNNCell");let i=s;const l=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);l.push(n[0]),l.push(n[1]),i=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const uN=im({multinomial_:function(e,t,n,r=!1){const s=am(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Qy(s,[1,-1]):s},l={numSamples:t,seed:n,normalized:r},u=Kf.runKernel("Multinomial",i,l);return 1===o?Qy(u,[u.size]):u}});const cN=im({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:am(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return Kf.runKernel("OneHot",a,o)}});const pN=im({onesLike_:function(e){const t={x:am(e,"x","onesLike")};return Kf.runKernel("OnesLike",t)}});const hN=im({outerProduct_:function(e,t){const n=am(e,"v1","outerProduct"),r=am(t,"v2","outerProduct");Ph(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=Qy(n,[-1,1]),a=Qy(r,[1,-1]);return uw(s,a)}});const dN=im({pad_:function(e,t,n=0){const r=am(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return Kf.runKernel("PadV2",a,s)}});const fN=im({pad1d_:function(e,t,n=0){return Ph(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),dN(e,[t],n)}});const mN=im({pad2d_:function(e,t,n=0){return Ph(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),dN(e,t,n)}});const gN=im({pad3d_:function(e,t,n=0){return Ph(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),dN(e,t,n)}});const yN=im({pad4d_:function(e,t,n=0){return Ph(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),dN(e,t,n)}});const bN=im({spaceToBatchND_:function(e,t,n){const r=am(e,"x","spaceToBatchND");Ph(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),Ph(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),Ph(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return Kf.runKernel("SpaceToBatchND",s,a)}});const xN=im({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=am(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=Qy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Ph(Uy(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=Dy(l.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),l=t.map(((e,t)=>[r[t],i[t]])),u=t.map(((e,t)=>[0,o[t]]));return[l,u]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?l:bN(l,p,f),b=("avg"===n?()=>ev(y,t,a,g,o):()=>eN(y,t,a,g,o))(),x=d?b:sv(b,p,m);return u?Qy(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const wN=im({prod_:function(e,t=null,n=!1){let r=am(e,"x","prod");"bool"===r.dtype&&(r=ig(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Kf.runKernel("Prod",s,a)}});const kN=im({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>am(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:am(t,"paramsDenseValues","raggedGather"),indices:am(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=Kf.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const vN=im({raggedRange_:function(e,t,n){const r=am(e,"starts","raggedRange"),s={starts:r,limits:am(t,"limits","raggedRange",r.dtype),deltas:am(n,"deltas","raggedRange",r.dtype)},a=Kf.runKernel("RaggedRange",s);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const NN=im({raggedTensorToTensor_:function(e,t,n,r,s){const a=am(e,"shape","raggedTensorToTensor","int32"),o=am(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:am(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>am(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:s};return Kf.runKernel("RaggedTensorToTensor",i,l)}});const SN=im({rand_:function(e,t,n){const r=Gh(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return Kf.makeTensor(s,e,n)}});class IN{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=mu.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class TN{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=mu.alea(s.toString()),this.randn=new IN(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class EN{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=mu.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const $N=im({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new TN(t,n,r,s),o=og(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const CN=im({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new IN(t,n,r,!1,s),o=og(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const AN=im({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return CN(e,0,1,t,n)}});const _N=im({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=og(e,r),o=new EN(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const RN=im({reciprocal_:function(e){const t={x:am(e,"x","reciprocal")};return Kf.runKernel("Reciprocal",t)}});const DN=im({reverse1d_:function(e){const t=am(e,"x","reverse");return Ph(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Yx(t,0)}});const FN=im({reverse2d_:function(e,t){const n=am(e,"x","reverse");return Ph(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Yx(n,t)}});const ON=im({reverse3d_:function(e,t){const n=am(e,"x","reverse");return Ph(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Yx(n,t)}});const MN=im({reverse4d_:function(e,t){const n=am(e,"x","reverse");return Ph(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Yx(n,t)}});const LN=im({rsqrt_:function(e){const t={x:am(e,"x","rsqrt","float32")};return Kf.runKernel("Rsqrt",t)}});const zN=im({selu_:function(e){const t={x:am(e,"x","selu")};return Kf.runKernel("Selu",t)}});const BN=im({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=am(e,"x","separableConv2d"),l=am(t,"depthwiseFilter","separableConv2d"),u=am(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Qy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Ph(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),Ph(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),Ph(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),Ph(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),Ph(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const h=l.shape[2],d=l.shape[3];Ph(u.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${u.shape[2]}.`));const f=aw(c,l,r,s,o,a),m=tw(f,u,1,"valid",o);return p?Qy(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const PN=async function(e,t){const n=am(e,"x","setdiff1d"),r=am(t,"y","setdiff1d");Ph(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),Ph(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),Ph(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const l=new vf([i],n.dtype),u=new vf([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(l.values[t]=s[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const VN=im({sign_:function(e){const t={x:am(e,"x","sign")};return Kf.runKernel("Sign",t)}});const WN=im({sin_:function(e){const t={x:am(e,"x","sin","float32")};return Kf.runKernel("Sin",t)}});const UN=im({sinh_:function(e){const t={x:am(e,"x","sinh")};return Kf.runKernel("Sinh",t)}});const GN=im({slice1d_:function(e,t,n){const r=am(e,"x","slice1d");return Ph(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Ux(r,[t],[n])}});const HN=im({slice2d_:function(e,t,n){const r=am(e,"x","slice2d");return Ph(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Ux(r,t,n)}});const qN=im({slice3d_:function(e,t,n){const r=am(e,"x","slice3d");return Ph(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Ux(r,t,n)}});const jN=im({slice4d_:function(e,t,n){const r=am(e,"x","slice4d");return Ph(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Ux(r,t,n)}});const KN=im({softmax_:function(e,t=-1){const n=am(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return Kf.runKernel("Softmax",r,s)}});const XN=im({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,l=0){const u={x:am(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return Kf.runKernel("StridedSlice",u,c)}});const YN=im({tan_:function(e){const t={x:am(e,"x","tan","float32")};return Kf.runKernel("Tan",t)}});function ZN(e,t,n){if(Wh(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=nm(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return um(e,t,r,n)}function JN(e,t,n){if(Wh(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=nm(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return um(e,t,r,n)}function QN(e,t,n){if(Wh(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=nm(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return um(e,t=t||r,r,n)}const eS=im({topk_:function(e,t=1,n=!0){const r=am(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,l]=Kf.runKernel("TopK",a,o);return{values:i,indices:l}}});const tS=im({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new IN(t,n,r,!0,s),o=og(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const nS=im({unique_:function(e,t=0){const n=am(e,"x","unique","string_or_numeric");Ph(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=Kf.runKernel("Unique",r,s);return{values:a,indices:o}}});const rS=im({unsortedSegmentSum_:function(e,t,n){const r=am(e,"x","unsortedSegmentSum"),s=am(t,"segmentIds","unsortedSegmentSum","int32");Ph(jh(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return Kf.runKernel("UnsortedSegmentSum",a,o)}});function sS(e,t){return Jv(e,t,"right")}function aS(e,t=!0,n,r){return Kf.makeVariable(e,t,n,r)}const oS=async function(e){const t=am(e,"condition","whereAsync","bool"),n=await t.data(),r=Ax(t.shape,n);return e!==t&&t.dispose(),r};var iS={};t(iS,"booleanMaskAsync",(()=>lS));const lS=async function(e,t,n){const r=am(e,"tensor","boolMask"),s=am(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;Ph(o>0,(()=>"mask cannot be scalar")),Vh(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+o;e++)l*=i[e];const u=i.slice(0,a).concat([l],i.slice(a+o)),c=Qy(r,u),p=Qy(s,[-1]),h=await oS(p),d=ik(h,[1]),f=zv(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var uS={};t(uS,"movingAverage",(()=>cS));const cS=im({movingAverage_:function(e,t,n,r,s=!0){const a=am(e,"v","movingAverage"),o=am(t,"x","movingAverage"),i=am(n,"decay","movingAverage");Pf(a,o),Ph(qh(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=Zx(1),u=Pw(l,i);let c=Xy(Pw(o,a),u);if(s){Ph(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=am(r,"step","movingAverage");c=Bw(c,Pw(l,nk(i,e)))}return ew(a,c)}});var pS={};t(pS,"scatterND",(()=>hS));const hS=im({scatterND_:function(e,t,n){const r=am(e,"indices","scatterND","int32"),s=am(t,"updates","scatterND");Tb(s,r,n);const a={indices:r,updates:s},o={shape:n};return Kf.runKernel("ScatterNd",a,o)}});var dS={};t(dS,"sparseToDense",(()=>fS));const fS=im({sparseToDense_:function(e,t,n,r=0){const s=am(e,"sparseIndices","sparseToDense","int32"),a=am(t,"sparseValues","sparseToDense","string_or_numeric"),o=am(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},l={outputShape:n};return Kf.runKernel("SparseToDense",i,l)}});var mS={};t(mS,"gatherND",(()=>gS));const gS=im({gatherND_:function(e,t){const n=am(t,"indices","gatherND","int32"),r={params:am(e,"x","gatherND","string_or_numeric"),indices:n};return Kf.runKernel("GatherNd",r)}});var yS={};function bS(e,t){if(null==t)return e.shape.slice();if(qh(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(yS,"dropout",(()=>xS));const xS=im({dropout_:function(e,t,n,r){const s=am(e,"x","dropout");if(Ph("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),Ph(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Ef?s.clone():s;const a=bS(s,n),o=1-t,i=Bw(Lv(ew(_N(a,0,1,"float32",r),o)),o);return Xy(s,i)}});var wS={};t(wS,"inTopKAsync",(()=>kS));const kS=async function(e,t,n=1){const r=am(e,"predictions","inTopK"),s=am(t,"targets","inTopK");Ph(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),Ph(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),Vh(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];Ph(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[l,u]=[o.length/a,a],c=nd("bool",l);for(let e=0;e<l;e++){const t=e*u,r=o.subarray(t,t+u),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),cm(c,s.shape,"bool")},vS={fft:jx,ifft:Xx,rfft:Kx,irfft:Jx},NS={hammingWindow:mw,hannWindow:gw,frame:xw,stft:ww},SS={flipLeftRight:vw,grayscaleToRGB:Sw,resizeNearestNeighbor:Fw,resizeBilinear:Dw,rotateWithOffset:Iw,cropAndResize:kw,nonMaxSuppression:Ew,nonMaxSuppressionAsync:$w,nonMaxSuppressionWithScore:Cw,nonMaxSuppressionWithScoreAsync:Aw,nonMaxSuppressionPadded:_w,nonMaxSuppressionPaddedAsync:Rw,threshold:Hw,transform:qw},IS={bandPart:Zw,gramSchmidt:lk,qr:mk},TS={absoluteDifference:kk,computeWeightedLoss:wk,cosineDistance:vk,hingeLoss:Nk,huberLoss:Ik,logLoss:Ek,meanSquaredError:Ck,sigmoidCrossEntropy:Rk,softmaxCrossEntropy:Fk},ES={sparseFillEmptyRows:Ok,sparseReshape:Mk,sparseSegmentMean:Lk,sparseSegmentSum:zk},$S={stringNGrams:Bk,stringSplit:Pk,stringToHashBucketFast:Vk};n(Bx,iS),n(Bx,hk),n(Bx,Jw),n(Bx,uS),n(Bx,pS),n(Bx,Zv),n(Bx,dS),n(Bx,mS),n(Bx,yS),n(Bx,pw),n(Bx,wS);class CS extends ly{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return Fx(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Lx(e,t)}dispose(){null!=this.iterations_&&Fx(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Zx(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(CS,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class AS extends CS{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Kf.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Kf.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Dx((()=>qx(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Dx((()=>qx(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Dx((()=>{const e=ew(Xy(a,this.rho),Xy(sk(s),1-this.rho)),t=Xy(Bw(rk(ew(o,this.epsilon)),rk(ew(a,this.epsilon))),s),n=ew(Xy(o,this.rho),Xy(sk(t),1-this.rho));a.assign(e),o.assign(n);const i=ew(Xy(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Fx(this.accumulatedGrads.map((e=>e.variable))),Fx(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}AS.className="Adadelta",cy(AS);class _S extends CS{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Kf.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Dx((()=>yw(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Dx((()=>{const e=ew(a,sk(s));a.assign(e);const t=ew(Xy(Bw(s,rk(ew(e,Kf.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Fx(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}_S.className="Adagrad",cy(_S);class RS extends CS{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Dx((()=>{this.accBeta1=Zx(t).variable(),this.accBeta2=Zx(n).variable()})),null==r&&(this.epsilon=Kf.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Dx((()=>{const n=Pw(1,this.accBeta1),r=Pw(1,this.accBeta2);t.forEach(((t,s)=>{const a=Kf.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Dx((()=>qx(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:Dx((()=>qx(a).variable(false)))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=ew(Xy(i,this.beta1),Xy(o,1-this.beta1)),c=ew(Xy(l,this.beta2),Xy(sk(o),1-this.beta2)),p=Bw(u,n),h=Bw(c,r);i.assign(u),l.assign(c);const d=ew(Xy(Bw(p,ew(rk(h),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Xy(this.accBeta1,this.beta1)),this.accBeta2.assign(Xy(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Fx(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Fx(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Dx((()=>{this.accBeta1.assign(nk(this.beta1,this.iterations_+1)),this.accBeta2.assign(nk(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}RS.className="Adam",cy(RS);class DS extends CS{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Dx((()=>{this.iteration=Zx(0).variable(),this.accBeta1=Zx(t).variable()})),null==r&&(this.epsilon=Kf.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Dx((()=>{const n=Pw(1,this.accBeta1),r=Bw(-this.learningRate,ew(Xy(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=Kf.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:qx(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:qx(a).variable(false)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=ew(Xy(i,this.beta1),Xy(o,1-this.beta1)),c=Xy(l,this.beta2),p=Qw(o),h=rN(c,p);i.assign(u),l.assign(h);const d=ew(Xy(Bw(r,n),Bw(u,ew(h,this.epsilon))),a);a.assign(d)})),this.iteration.assign(ew(this.iteration,1)),this.accBeta1.assign(Xy(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Fx(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Fx(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}DS.className="Adamax",cy(DS);class FS extends CS{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=Kf.registeredVariables[t];Dx((()=>{const e=ew(Xy(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Ox(Zx(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}FS.className="SGD",cy(FS);class OS extends FS{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Zx(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Kf.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Dx((()=>qx(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Dx((()=>{let e;const t=ew(Xy(this.m,s),a);e=this.useNesterov?ew(Xy(this.c,ew(a,Xy(t,this.m))),r):ew(Xy(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Fx(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}OS.className="Momentum",cy(OS);class MS extends CS{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Kf.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Kf.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Dx((()=>qx(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Dx((()=>qx(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Dx((()=>qx(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Dx((()=>{const e=ew(Xy(o,this.decay),Xy(sk(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=ew(Xy(t,this.decay),Xy(a,1-this.decay)),l=Bw(Xy(a,this.learningRate),rk(Pw(e,ew(sk(s),this.epsilon)))),u=ew(Xy(i,this.momentum),l);o.assign(e),t.assign(s),i.assign(u);const c=Pw(r,u);r.assign(c)}else{const e=ew(Xy(o,this.decay),Xy(sk(a),1-this.decay)),t=ew(Xy(i,this.momentum),Bw(Xy(a,this.learningRate),rk(ew(e,this.epsilon))));o.assign(e),i.assign(t);const n=Pw(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Fx(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Fx(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Fx(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}MS.className="RMSProp",cy(MS);class LS{static sgd(e){return new FS(e)}static momentum(e,t,n=!1){return new OS(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new MS(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new RS(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new AS(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new DS(e,t,n,r,s)}static adagrad(e,t=.1){return new _S(e,t)}}const zS={sgd:LS.sgd,momentum:LS.momentum,adadelta:LS.adadelta,adagrad:LS.adagrad,rmsprop:LS.rmsprop,adamax:LS.adamax,adam:LS.adam},BS="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function PS(){return new Promise((e=>BS((()=>e()))))}const VS={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(e,tb(ig(n,"float32"),-1))}}},WS={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=sk(ig(n,"float32")),r=rk(Pw(Zx(1),t));return pk(Bw(e,r))}}}},US={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=rk(Pw(sk(ig(n,"float32")),1));return Bw(e,t)}}}},GS={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Fg(n.shape,r.shape);return{a:()=>{let t=e;const r=Dg(n.shape,s);return r.length>0&&(t=nb(t,r)),Qy(t,n.shape)},b:()=>{let t=e;const n=Dg(r.shape,s);return n.length>0&&(t=nb(t,n)),Qy(t,r.shape)}}}},HS={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},qS={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>qx(n)}}},jS={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>qx(n)}}},KS={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,rk(Pw(Zx(1),sk(ig(n,"float32")))))}}},XS={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=rk(ew(Zx(1),sk(ig(n,"float32"))));return Bw(e,t)}}}},YS={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Fg(n.shape,r.shape);return{a:()=>{const t=ew(sk(n),sk(r));let a=Xy(e,Bw(r,t));const o=Dg(n.shape,s);return o.length>0&&(a=nb(a,o)),Qy(a,n.shape)},b:()=>{const t=ew(sk(n),sk(r));let a=pk(Xy(e,Bw(n,t)));const o=Dg(r.shape,s);return o.length>0&&(a=nb(a,o)),Qy(a,r.shape)}}}},ZS={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,ew(sk(ig(n,"float32")),1))}}},JS={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,Pw(Zx(1),sk(ig(n,"float32"))))}}};const QS=im({avgPool3dGrad_:function(e,t,n,r,s,a){const o=am(e,"dy","avgPool3dGrad"),i=am(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=Qy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=Qy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Ph(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),Ph(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),Hy("avgPool3dGrad",s,a);const p={dy:l,input:u},h={filterSize:n,strides:r,pad:s,dimRoundingMode:a},d=Kf.runKernel("AvgPool3DGrad",p,h);return c?Qy(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),eI={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>QS(e,r,s,a,o,i)}}};const tI=im({avgPoolGrad_:function(e,t,n,r,s){const a=am(e,"dy","avgPoolGrad"),o=am(t,"input","avgPoolGrad");Ph(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=Qy(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=Qy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Ph(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),Ph(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},p={filterSize:n,strides:r,pad:s},h=Kf.runKernel("AvgPoolGrad",c,p);return u?Qy(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),nI={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>tI(e,r,s,a,o)}}},rI={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>uw(e,s,!1,!1),b:()=>uw(e,r,!0,!1)}:a&&!o?{a:()=>uw(s,e,!1,!0),b:()=>uw(r,e,!1,!1)}:{a:()=>uw(s,e,!0,!0),b:()=>uw(e,r,!0,!0)}:{a:()=>uw(e,s,!1,!0),b:()=>uw(r,e,!0,!1)}}},sI={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>bN(e,r,s)}}},aI={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>nb(e,i,!0)}}},oI={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},iI={kernelName:"Ceil",gradFunc:e=>({x:()=>qx(e)})},lI={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Uw(Kw(jw(r,s),Mw(r,a)),e,qx(e))}}},uI={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:VS.gradFunc},cI={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=ed(s,t[0].shape)[0],o=r.map((e=>e[a]));return Gx(e,o,a).map((e=>()=>e))}},pI={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=n;return Ph(Wy(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>rw(r.shape,e,s,o,i,l),filter:()=>nw(r,e,s.shape,o,i,l)}}},hI={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>tw(e,s,a,o,i,1,l),filter:()=>nw(e,r,s.shape,a,o,i,l)}}};const dI=im({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Qy(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=Qy(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),Ph(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),Ph(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),Ph(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),Ph(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),Ph(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},l={strides:r,pad:s,filterShape:n};return Kf.runKernel("Conv3DBackpropFilterV2",i,l)}}),fI={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;Ph(Wy(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>wv(o.shape,e,i,s,a),filter:()=>dI(o,e,i.shape,s,a)}}},mI={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(pk(WN(ig(n,"float32"))),e)}}},gI={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(UN(ig(n,"float32")),e)}}},yI={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=Iy([s],r.rank);let n=Iv(e,s,a,!o);return null!=t&&(n=dk(n,t)),n}}}},bI={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;Ph(Wy(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return Ph(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),Ph(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),Ph(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Ph(Uy(s,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`)),Hy("depthwiseConv2d",a,o),{x:()=>iw(l.shape,e,u,s,a,i,o),filter:()=>ow(l,e,u.shape,s,a,i,o)}}},xI={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>Kf.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Kf.runKernel("Dilation2DBackpropFilter",o,n)}}},wI={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>Kf.runKernel("EluGrad",r)}}},kI={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Xy(Ak(pk(sk(n))),2/Math.sqrt(Math.PI));return{x:()=>Xy(e,r)}}},vI={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(e,n)}}},NI={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Qy(e,n.shape)}}},SI={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(e,Ak(n))}}},II={kernelName:"Floor",gradFunc:e=>({x:()=>qx(e)})},TI={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Fg(n.shape,r.shape);return{a:()=>{const t=Bw(e,ig(r,"float32")),a=Dg(n.shape,s);return a.length>0?Qy(nb(t,a),n.shape):t},b:()=>{let t=Xy(e,ig(n,"float32"));const a=Dg(r.shape,s);a.length>0&&(t=Qy(nb(t,a),r.shape));const o=sk(r);return pk(Bw(t,ig(o,"float32")))}}}},EI={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,l=null==i?Zx(1):i,u=Dg(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=Pw(s,a),h=Xy(e,l),d=LN(ew(o,Zx(r))),f=Xy(Xy(Xy(d,d),d),Zx(-.5));return{x:()=>1===a.rank?Qy(Xy(Xy(e,Nw(Qy(d,[1,1,1,a.shape[0]]),c)),l),s.shape):Qy(Xy(Xy(e,d),l),s.shape),mean:()=>{let e=Xy(Xy(d,Zx(-1)),h);return 1===a.rank&&(e=nb(e,u)),Qy(e,a.shape)},variance:()=>{let e=Xy(Xy(f,p),h);return 1===a.rank&&(e=nb(e,u)),Qy(e,a.shape)},scale:()=>{const t=Xy(p,d);let n=Xy(e,t);return 1===a.rank&&(n=nb(n,u)),Qy(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=nb(t,u)),Qy(t,a.shape)}}}},$I={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,o=ed(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,i=t.slice(0,o),l=i.length,u=t.slice(a,t.length).slice(1),c=u.length,p=CI(0,l),h=CI(l+1,l+1+c),d=AI([i,[n],u]),f=Qy(e,d),m=Qy(s,[n]),g=AI([[l],p,h]),y=dk(f,g);let b=rS(y,m,r.shape[o]);const x=Ty(g);return b=dk(b,x),b},indices:()=>s}}};function CI(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function AI(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const _I={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>qx(n),b:()=>qx(r)}}},RI={kernelName:"Identity",gradFunc:e=>({x:()=>ig(e,"float32")})},DI={kernelName:"IsFinite",gradFunc:e=>({x:()=>qx(e)})},FI={kernelName:"IsInf",gradFunc:e=>({x:()=>qx(e)})},OI={kernelName:"IsNan",gradFunc:e=>({x:()=>qx(e)})},MI={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=Lw(r,0);return{x:()=>Uw(a,e,Xy(e,s))}}},LI={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,ew(n,1))}}},zI={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,ig(n,"float32"))}}},BI={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=Ak(r);return Pw(e,Xy(nb(e,s,!0),t))}}}};const PI=im({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:o};return Kf.runKernel("LRNGrad",i,l)}}),VI={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=n;return{x:()=>PI(r,s,e,a,o,i,l)}}};function WI(e,t,n,r){return t.rank<n.rank&&(t=Qy(t,Ny(t.shape,r))),e.rank<n.rank&&(e=Qy(e,Ny(e.shape,r))),{x:()=>Xy(e,ig(Av(n,t),e.dtype))}}const UI={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],o=WI(e,t[1],a,ed(s,a.shape));return{x:()=>o.x()}}},GI={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Xy(e,ig(jw(n,r),"float32")),b:()=>Xy(e,ig(Wv(n,r),"float32"))}}};const HI=im({maxPool3dGrad_:function(e,t,n,r,s,a,o){const i=am(e,"dy","maxPool3dGrad"),l=am(t,"input","maxPool3dGrad"),u=am(n,"output","maxPool3dGrad");let c=i,p=l,h=u,d=!1;4===l.rank&&(d=!0,c=Qy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),p=Qy(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=Qy(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),Ph(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),Ph(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),Ph(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),Hy("maxPool3dGrad",a,o);const f={dy:c,input:p,output:h},m={filterSize:r,strides:s,pad:a,dimRoundingMode:o},g=Kf.runKernel("MaxPool3DGrad",f,m);return d?Qy(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),qI={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=n;return{x:()=>HI(e,r,s,a,o,i,l)}}};const jI=im({maxPoolGrad_:function(e,t,n,r,s,a,o){const i=am(e,"dy","maxPoolGrad"),l=am(t,"input","maxPoolGrad"),u=am(n,"output","maxPoolGrad");Ph(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),Ph(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),Ph(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),Hy("maxPoolGrad",a,o);const c={dy:i,input:l,output:u},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return Kf.runKernel("MaxPoolGrad",c,p)}}),KI={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Ux(e,a,r.shape)}}};function XI(e,t,n){const r=e.shape.length,s=r-n.length,a=py.getAxesPermutation(n,r);let o=e;null!=a&&(o=dk(e,a));const i=o.shape.slice(),l=i.splice(r-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(l);let u=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=Qy(t,r),a=Sv(e,n,!0,!1),o=Sv(e,n,!0,!0),i=Xy(a,o);return Xy(s,i)}(o.reshape(i),t,s);if(u=u.reshape(o.shape),null!=a){const e=py.getUndoAxesPermutation(a);u=dk(u,e)}return u}const YI={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>sv(e,r,s)}}},ZI={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>Px(e,r)}}};const JI=[VS,WS,US,GS,HS,qS,jS,KS,XS,YS,ZS,JS,eI,nI,rI,sI,aI,oI,iI,lI,uI,cI,hI,pI,fI,mI,gI,yI,bI,xI,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Fg(n.shape,r.shape);return{a:()=>{const t=Bw(e,ig(r,"float32")),a=Dg(n.shape,s);return a.length>0?Qy(nb(t,a),n.shape):t},b:()=>{let t=Xy(e,ig(n,"float32"));const a=Dg(r.shape,s);a.length>0&&(t=Qy(nb(t,a),r.shape));const o=sk(r);return pk(Bw(t,ig(o,"float32")))}}}},wI,kI,vI,NI,SI,TI,II,EI,$I,_I,RI,DI,FI,OI,MI,LI,zI,BI,VI,UI,UI,GI,qI,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>jI(e,r,s,a,o,i)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=ed(s,r.shape),o=Gh(vy(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=Qy(e,t);return Bw(Xy(n,xk(r.shape,"float32")),o)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=WI(e,o,a,ed(s,a.shape));return{x:()=>i.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Xy(e,ig(Mw(n,r),"float32")),b:()=>Xy(e,ig(Lw(n,r),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Ux(e,a,r.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Fg(n.shape,r.shape);return{a:()=>{const t=Dg(n.shape,s);return t.length>0?Qy(nb(e,t),n.shape):e},b:()=>{const t=Xy(e,pk(Lv(Bw(n,r)))),a=Dg(r.shape,s);return a.length>0?Qy(nb(t,a),r.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Fg(n.shape,r.shape);return{a:()=>{const t=Xy(e,ig(r,"float32")),a=Dg(n.shape,s);return a.length>0?Qy(nb(t,a),n.shape):t},b:()=>{const t=Xy(e,ig(n,"float32")),a=Dg(r.shape,s);return a.length>0?Qy(nb(t,a),r.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>pk(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Hx(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>qx(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return Yw(e,r).map((e=>()=>e))}},KI,KI,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=Fg(a.shape,o.shape);return{a:()=>{const t=ig(o,"float32");let n=Xy(e,Xy(t,nk(a,Pw(t,Zx(1)))));const r=Dg(a.shape,i);return r.length>0&&(n=nb(n,r)),Qy(n,a.shape)},b:()=>{const t=Lw(a,0),n=Uw(t,Tk(a),qx(a));let r=Xy(e,Xy(s,n));const l=Dg(o.shape,i);return l.length>0&&(r=nb(r,l)),Qy(r,o.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=Lw(n,0);return{x:()=>Uw(s,e,Xy(e,r)),alpha:()=>{let t=Uw(s,qx(e),Xy(e,n));const a=Dg(r.shape,e.shape);return a.length>0&&(t=nb(t,a)),Qy(t,r.shape)}}}},{kernelName:"Prod",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map(((e,t)=>t)):"number"==typeof s?[s]:s,{x:()=>XI(r,e,a)}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,pk(sk(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Xy(Mw(n,6),tb(n));return{x:()=>Xy(e,ig(r,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(e,ig(tb(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Qy(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>Kf.runKernel("ResizeBilinearGrad",s,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>Kf.runKernel("ResizeNearestNeighborGrad",s,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:r}=n,s=ed(r,e.shape);return{x:()=>Yx(e,s)}}},{kernelName:"Round",gradFunc:e=>({x:()=>qx(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pk(Bw(e,Xy(nk(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>ig(qx(n),"float32"),t:()=>Xy(e,ig(n,e.dtype)),e:()=>Xy(e,ig(Kv(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Lw(n,Zx(0)),r=Zx(Cb),s=Zx(Ab),a=Xy(e,s),o=Xy(Xy(e,r),Ak(ig(n,"float32")));return Uw(t,a,o)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(e,Xy(n,Pw(Zx(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>qx(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(vv(ig(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(Nv(ig(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,l]=sy(r,s,a),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>dN(e,u)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=Xy(e,r);return{logits:()=>Pw(a,Xy(nb(a,[s],true),r))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(e,eb(n))}}},YI,YI,ZI,ZI,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,Xy(rk(ig(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zx(2);return{a:()=>Xy(e,Xy(s,Pw(n,r))),b:()=>Xy(e,Xy(s,Pw(r,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(e,Xy(ig(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>qx(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Fg(n.shape,r.shape);return{a:()=>{let t=e;const r=Dg(n.shape,s);return r.length>0&&(t=nb(t,r)),Qy(t,n.shape)},b:()=>{let t=e;const n=Dg(r.shape,s);return n.length>0&&(t=nb(t,n)),Qy(pk(t),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;ed(a,r.shape).forEach((e=>{s[e]=1}));const o=Qy(e,s),i=Xy(o,xk(r.shape,"float32"));return{x:()=>i}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bw(e,sk(vv(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xy(Pw(Zx(1),sk(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=qx(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=ew(t,Ux(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=ew(t,Ux(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=ew(t,Ux(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=ew(t,Ux(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Ty(s);return{x:()=>dk(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>Xw(e,s)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=rN(t,qx(t)),r=zv(e,n);let s=jw(t,Zx(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=uk(s,e+1);s=Kw(s,xk(r.shape,"bool"));const o=qx(r);return Uw(s,r,o)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>qx(e)})}];for(const e of JI)Wd(e);function QI(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(rT(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const o=QI(e[a],t,n,r);s[a]=o}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function eT(e,t=nT){return tT(e,t)}function tT(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(rT(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=tT(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function nT(e){return null===e?null:rT(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function rT(e){let t=!1;if($d().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("kjyEk");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Ef)&&!(e instanceof Promise)&&!t)}function sT(e){return QI(e,aT)}function aT(e){return e instanceof Ef?{value:e.clone(),recurse:!1}:rT(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}$f().prototype.abs=function(){return this.throwIfDisposed(),Qw(this)},$f().prototype.acos=function(){return this.throwIfDisposed(),Wk(this)},$f().prototype.acosh=function(){return this.throwIfDisposed(),Uk(this)},$f().prototype.add=function(e){return this.throwIfDisposed(),ew(this,e)},$f().prototype.all=function(e,t){return this.throwIfDisposed(),Hk(this,e,t)},$f().prototype.any=function(e,t){return this.throwIfDisposed(),qk(this,e,t)},$f().prototype.argMax=function(e){return this.throwIfDisposed(),jk(this,e)},$f().prototype.argMin=function(e){return this.throwIfDisposed(),Kk(this,e)},$f().prototype.asScalar=function(){return this.throwIfDisposed(),Ph(1===this.size,(()=>"The array must have only 1 element.")),Qy(this,[])},$f().prototype.asType=function(e){return this.throwIfDisposed(),ig(this,e)},$f().prototype.as1D=function(){return this.throwIfDisposed(),Qy(this,[this.size])},$f().prototype.as2D=function(e,t){return this.throwIfDisposed(),Qy(this,[e,t])},$f().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Qy(this,[e,t,n])},$f().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Qy(this,[e,t,n,r])},$f().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Qy(this,[e,t,n,r,s])},$f().prototype.asin=function(){return this.throwIfDisposed(),Xk(this)},$f().prototype.asinh=function(){return this.throwIfDisposed(),Yk(this)},$f().prototype.atan=function(){return this.throwIfDisposed(),Zk(this)},$f().prototype.atan2=function(e){return this.throwIfDisposed(),Jk(this,e)},$f().prototype.atanh=function(){return this.throwIfDisposed(),Qk(this)},$f().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),ev(this,e,t,n,r)},$f().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),sv(this,e,t)},$f().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),ov(this,e,t,n,r,s)},$f().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Ww(this,e)},$f().prototype.cast=function(e){return this.throwIfDisposed(),ig(this,e)},$f().prototype.ceil=function(){return this.throwIfDisposed(),pv(this)},$f().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),hv(this,e,t)},$f().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Ef&&(e=[e]),Px([this,...e],t)},$f().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),yv(this,e,t,n,r,s,a)},$f().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),bv(this,e,t,n,r,s)},$f().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),tw(this,e,t,n,r,s,a)},$f().prototype.cos=function(){return this.throwIfDisposed(),vv(this)},$f().prototype.cosh=function(){return this.throwIfDisposed(),Nv(this)},$f().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),Sv(this,e,t,n)},$f().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Iv(this,e,t,n)},$f().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Ev(this,e,t)},$f().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),aw(this,e,t,n,r,s,a)},$f().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),Cv(this,e,t,n,r,s)},$f().prototype.divNoNan=function(e){return this.throwIfDisposed(),_v(this,e)},$f().prototype.div=function(e){return this.throwIfDisposed(),Bw(this,e)},$f().prototype.dot=function(e){return this.throwIfDisposed(),Rv(this,e)},$f().prototype.elu=function(){return this.throwIfDisposed(),jy(this)},$f().prototype.equal=function(e){return this.throwIfDisposed(),Av(this,e)},$f().prototype.erf=function(){return this.throwIfDisposed(),Fv(this)},$f().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),Ov(this,e,t)},$f().prototype.exp=function(){return this.throwIfDisposed(),Ak(this)},$f().prototype.expandDims=function(e){return this.throwIfDisposed(),uk(this,e)},$f().prototype.expm1=function(){return this.throwIfDisposed(),Mv(this)},$f().prototype.fft=function(){return this.throwIfDisposed(),jx(this)},$f().prototype.flatten=function(){return this.throwIfDisposed(),Qy(this,[this.size])},$f().prototype.floor=function(){return this.throwIfDisposed(),Lv(this)},$f().prototype.floorDiv=function(e){return this.throwIfDisposed(),zw(this,e)},$f().prototype.gather=function(e,t){return this.throwIfDisposed(),zv(this,e,t)},$f().prototype.greaterEqual=function(e){return this.throwIfDisposed(),jw(this,e)},$f().prototype.greater=function(e){return this.throwIfDisposed(),Lw(this,e)},$f().prototype.ifft=function(){return this.throwIfDisposed(),Xx(this)},$f().prototype.irfft=function(){return this.throwIfDisposed(),Jx(this)},$f().prototype.isFinite=function(){return this.throwIfDisposed(),Bv(this)},$f().prototype.isInf=function(){return this.throwIfDisposed(),Pv(this)},$f().prototype.isNaN=function(){return this.throwIfDisposed(),Vv(this)},$f().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Ky(this,e)},$f().prototype.lessEqual=function(e){return this.throwIfDisposed(),Mw(this,e)},$f().prototype.less=function(e){return this.throwIfDisposed(),Wv(this,e)},$f().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),Gv(this,e,t,n,r)},$f().prototype.logSigmoid=function(){return this.throwIfDisposed(),qv(this)},$f().prototype.logSoftmax=function(e){return this.throwIfDisposed(),jv(this,e)},$f().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Dk(this,e,t)},$f().prototype.log=function(){return this.throwIfDisposed(),Tk(this)},$f().prototype.log1p=function(){return this.throwIfDisposed(),_k(this)},$f().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Kw(this,e)},$f().prototype.logicalNot=function(){return this.throwIfDisposed(),Kv(this)},$f().prototype.logicalOr=function(e){return this.throwIfDisposed(),Xv(this,e)},$f().prototype.logicalXor=function(e){return this.throwIfDisposed(),Yv(this,e)},$f().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),uw(this,e,t,n)},$f().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),eN(this,e,t,n,r)},$f().prototype.max=function(e,t){return this.throwIfDisposed(),ek(this,e,t)},$f().prototype.maximum=function(e){return this.throwIfDisposed(),rN(this,e)},$f().prototype.mean=function(e,t){return this.throwIfDisposed(),yk(this,e,t)},$f().prototype.min=function(e,t){return this.throwIfDisposed(),tk(this,e,t)},$f().prototype.minimum=function(e){return this.throwIfDisposed(),Sk(this,e)},$f().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),aN(this,e,t)},$f().prototype.mod=function(e){return this.throwIfDisposed(),oN(this,e)},$f().prototype.mul=function(e){return this.throwIfDisposed(),Xy(this,e)},$f().prototype.neg=function(){return this.throwIfDisposed(),pk(this)},$f().prototype.norm=function(e,t,n){return this.throwIfDisposed(),ok(this,e,t,n)},$f().prototype.notEqual=function(e){return this.throwIfDisposed(),bk(this,e)},$f().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),cN(this,e,t,n)},$f().prototype.onesLike=function(){return this.throwIfDisposed(),pN(this)},$f().prototype.pad=function(e,t){return this.throwIfDisposed(),dN(this,e,t)},$f().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),xN(this,e,t,n,r,s,a)},$f().prototype.pow=function(e){return this.throwIfDisposed(),nk(this,e)},$f().prototype.prelu=function(e){return this.throwIfDisposed(),Yy(this,e)},$f().prototype.prod=function(e,t){return this.throwIfDisposed(),wN(this,e,t)},$f().prototype.reciprocal=function(){return this.throwIfDisposed(),RN(this)},$f().prototype.relu=function(){return this.throwIfDisposed(),Zy(this)},$f().prototype.relu6=function(){return this.throwIfDisposed(),Jy(this)},$f().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Qy(this,e.shape)},$f().prototype.reshape=function(e){return this.throwIfDisposed(),Qy(this,e)},$f().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Dw(this,e,t,n)},$f().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Fw(this,e,t,n)},$f().prototype.reverse=function(e){return this.throwIfDisposed(),Yx(this,e)},$f().prototype.rfft=function(){return this.throwIfDisposed(),Kx(this)},$f().prototype.round=function(){return this.throwIfDisposed(),Vw(this)},$f().prototype.rsqrt=function(){return this.throwIfDisposed(),LN(this)},$f().prototype.selu=function(){return this.throwIfDisposed(),zN(this)},$f().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),BN(this,e,t,n,r,s,a)},$f().prototype.sigmoid=function(){return this.throwIfDisposed(),eb(this)},$f().prototype.sign=function(){return this.throwIfDisposed(),VN(this)},$f().prototype.sin=function(){return this.throwIfDisposed(),WN(this)},$f().prototype.sinh=function(){return this.throwIfDisposed(),UN(this)},$f().prototype.slice=function(e,t){return this.throwIfDisposed(),Ux(this,e,t)},$f().prototype.softmax=function(e){return this.throwIfDisposed(),KN(this,e)},$f().prototype.softplus=function(){return this.throwIfDisposed(),Hv(this)},$f().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),bN(this,e,t)},$f().prototype.split=function(e,t){return this.throwIfDisposed(),Gx(this,e,t)},$f().prototype.sqrt=function(){return this.throwIfDisposed(),rk(this)},$f().prototype.square=function(){return this.throwIfDisposed(),sk(this)},$f().prototype.squaredDifference=function(e){return this.throwIfDisposed(),$k(this,e)},$f().prototype.squeeze=function(e){return this.throwIfDisposed(),ik(this,e)},$f().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Ef?[this,e]:[this,...e];return Xw(n,t)},$f().prototype.step=function(e){return this.throwIfDisposed(),tb(this,e)},$f().prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),XN(this,e,t,n,r,s,a,o,i)},$f().prototype.sub=function(e){return this.throwIfDisposed(),Pw(this,e)},$f().prototype.sum=function(e,t){return this.throwIfDisposed(),nb(this,e,t)},$f().prototype.tan=function(){return this.throwIfDisposed(),YN(this)},$f().prototype.tanh=function(){return this.throwIfDisposed(),nv(this)},$f().prototype.tile=function(e){return this.throwIfDisposed(),Nw(this,e)},$f().prototype.toBool=function(){return this.throwIfDisposed(),ig(this,"bool")},$f().prototype.toFloat=function(){return this.throwIfDisposed(),ig(this,"float32")},$f().prototype.toInt=function(){return this.throwIfDisposed(),ig(this,"int32")},$f().prototype.topk=function(e,t){return this.throwIfDisposed(),eS(this,e,t)},$f().prototype.transpose=function(e){return this.throwIfDisposed(),dk(this,e)},$f().prototype.unique=function(e){return this.throwIfDisposed(),nS(this,e)},$f().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),rS(this,e,t)},$f().prototype.unstack=function(e){return this.throwIfDisposed(),Yw(this,e)},$f().prototype.where=function(e,t){return this.throwIfDisposed(),Uw(e,this,t)},$f().prototype.zerosLike=function(){return this.throwIfDisposed(),qx(this)};class oT{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class iT extends oT{constructor(){super(iT.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function lT(e){return new hT(e)}function uT(e){return new dT(e)}function cT(e,t){return new ST(e,t)}iT.INITIAL_CAPACITY=32;class pT{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new wT(this,e)}filter(e){return new bT(this,e)}map(e){return new xT(this,e)}mapAsync(e){return new kT(this,e)}serialMapAsync(e){return new kT(this,e).serial()}flatmap(e){return new NT(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new yT(this,e,t)}columnMajorBatch(e,t=!0,n=nT){return this.rowMajorBatch(e,t).map((e=>eT(e,n)))}concatenate(e,t){return new ST(lT([this,e]),t)}take(e){return e<0||null==e?this:new gT(this,e)}skip(e){return e<0||null==e?this:new mT(this,e)}prefetch(e){return new ET(this,e)}shuffle(e,t){return new $T(this,e,t)}serial(){return new fT(this)}}class hT extends pT{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:sT(e),done:!1}}}class dT extends pT{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class fT extends pT{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class mT extends pT{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Fx(e.value)}return this.upstream.next()}}class gT extends pT{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class yT extends pT{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class bT extends pT{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Fx(e.value)}}}class xT extends pT{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Of.getTensorsInContainer(e.value),n=this.transform(e.value),r=Of.getTensorsInContainer(n);for(const e of t)Of.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class wT extends pT{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class kT extends pT{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Of.getTensorsInContainer(e.value),n=await this.transform(e.value),r=Of.getTensorsInContainer(n);for(const e of t)Of.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class vT extends pT{constructor(){super(),this.outputQueue=new iT,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class NT extends vT{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Of.getTensorsInContainer(e.value),n=this.transform(e.value),r=Of.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)Of.isTensorInList(e,r)||e.dispose();return!0}}class ST extends pT{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var IT,TT;(TT=IT||(IT={}))[TT.FAIL=0]="FAIL",TT[TT.SHORTEST=1]="SHORTEST",TT[TT.LONGEST=2]="LONGEST";class ET extends pT{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new oT(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class $T extends ET{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=mu.alea(n||Gd.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class CT{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return Gd.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),AT((async()=>(await n.iterator()).columnMajorBatch(e,t,_T)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,AT((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,AT((async()=>(await t.iterator()).filter((t=>Dx((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return AT((async()=>(await t.iterator()).map((t=>Dx((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return AT((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return AT((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,AT((async()=>cT(uT((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,AT((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=mu.alea(t||Gd.now().toString());return AT((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,AT((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function AT(e,t=null){return new class extends CT{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function _T(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof Ef||Gd.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Ef?Xw(e):cm(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}CT.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function RT(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Gd.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function DT(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(RT(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=Gd.sizeFromShape(o.shape),c=n||o.dtype,p=Gd.getArrayFromDType(c,u);for(let e=0;e<u;++e)p[e]=t(l[e],s);return i.makeTensorInfo(o.shape,c,p)}}function FT(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(RT(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=n||o.dtype,c=t(l,u,s);return i.makeTensorInfo(o.shape,u,c)}}const OT=DT("Elu",(e=>e>=0?e:Math.exp(e)-1)),MT={kernelName:"Elu",backendName:"cpu",kernelFunc:OT};function LT(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const zT={kernelName:"Identity",backendName:"cpu",kernelFunc:LT};function BT(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;RT([s],"leakyRelu");const o=Gd.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,l=Gd.getTypedArrayFromDType("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(s.shape,"float32",l)}const PT={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:BT};function VT(e){return(t,n,r,s,a)=>{const o=py.assertAndGetBroadcastShape(t,n),i=o.length,l=Gd.computeStrides(o),u=Gd.sizeFromShape(o),c=Gd.getTypedArrayFromDType(a,u),p=t.length,h=n.length,d=Gd.computeStrides(t),f=Gd.computeStrides(n),m=py.getBroadcastDims(t,o),g=py.getBroadcastDims(n,o);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<c.length;++t){const n=Gd.indexToLoc(t,i,l),a=n.slice(-p);m.forEach((e=>a[e]=0));const o=Gd.locToIndex(a,p,d),u=n.slice(-h);g.forEach((e=>u[e]=0));const y=Gd.locToIndex(u,h,f);c[t]=e(r[o],s[y])}return[c,o]}}const WT=VT(((e,t)=>e<0?t*e:e));function UT(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;RT([r,s],"prelu");const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,[i,l]=WT(r.shape,s.shape,a,o,"float32");return n.makeTensorInfo(l,"float32",i)}const GT={kernelName:"Prelu",backendName:"cpu",kernelFunc:UT},HT=DT("Relu",(e=>Math.max(0,e))),qT={kernelName:"Relu",backendName:"cpu",kernelFunc:HT},jT=DT("Relu6",(e=>Math.min(Math.max(0,e),6))),KT={kernelName:"Relu6",backendName:"cpu",kernelFunc:jT};function XT(e){return(t,n,r)=>{const s=Gd.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const YT=XT((e=>1/(1+Math.exp(-e)))),ZT=DT("Sigmoid",(e=>1/(1+Math.exp(-e)))),JT={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:ZT};function QT(e,t,n,r,s){if("linear"===n)return LT({inputs:{x:t},backend:e});if("relu"===n)return HT({inputs:{x:t},backend:e});if("elu"===n)return OT({inputs:{x:t},backend:e});if("relu6"===n)return jT({inputs:{x:t},backend:e});if("prelu"===n)return UT({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return BT({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return ZT({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function eE(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",o)},i}const tE={kernelName:"Complex",backendName:"cpu",kernelFunc:eE};function nE(e,t,n="float32"){if("complex64"===n){return eE({inputs:{real:nE(e,t,"float32"),imag:nE(e,t,"float32")},backend:e})}const r=Gd.makeZerosTypedArray(Gd.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function rE(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const sE={kernelName:"Real",backendName:"cpu",kernelFunc:rE};function aE(e,t,n,r){if("int32"===r){return[t,"int32",Int32Array.from(e)]}if("bool"===r){const r=Gd.toTypedArray([0],n),[s,a]=VT(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function oE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return LT({inputs:{x:s},backend:n});const e=nE(n,s.shape,s.dtype),t=oE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=eE({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=rE({inputs:{input:s},backend:n}),t=oE({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Gd.hasEncodingLoss(s.dtype,a)){const e=LT({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const o=n.data.get(s.dataId).values,[i,l,u]=aE(o,s.shape,s.dtype,a);return n.makeTensorInfo(i,l,u)}const iE={kernelName:"Cast",backendName:"cpu",kernelFunc:oE};function lE(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:o}=n,i=s;RT([a,o],e);const l=i.data.get(a.dataId).values,u=i.data.get(o.dataId).values,c="string"===a.dtype?py.fromUint8ToStringArray(l):l,p="string"===a.dtype?py.fromUint8ToStringArray(u):u,h=r||a.dtype,[d,f]=t(a.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:s})=>{const{a:a,b:o}=e,i=s;if("complex64"===a.dtype||"complex64"===o.dtype){const e=oE({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,l=i.data.get(r.dataId).values,u=i.data.get(s.dataId).values,c=oE({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,b]=n(a.shape,o.shape,l,u,f,m),x=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),k=eE({inputs:{real:x,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(w),k}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,s=r||a.dtype,[l,u]=t(a.shape,o.shape,e,n,s);return i.makeTensorInfo(u,s,l)}}}function uE(e){return(t,n,r,s,a,o)=>{const i=py.assertAndGetBroadcastShape(t,n),l=Gd.sizeFromShape(i),u=i.length,c=Gd.computeStrides(i),p=Gd.getTypedArrayFromDType("float32",l),h=Gd.getTypedArrayFromDType("float32",l),d=py.getBroadcastDims(t,i),f=py.getBroadcastDims(n,i),m=py.mergeRealAndImagArrays(r,s),g=py.mergeRealAndImagArrays(a,o),y=t.length,b=Gd.computeStrides(t),x=n.length,w=Gd.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=s.real,h[t]=s.imag}else for(let t=0;t<p.length;t++){const n=Gd.indexToLoc(t,u,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=Gd.locToIndex(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const o=Gd.locToIndex(a,x,w),i=e(m[2*s],m[2*s+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const cE=VT(((e,t)=>e+t)),pE=uE(((e,t,n,r)=>({real:e+n,imag:t+r}))),hE=lE("Add",cE,pE),dE={kernelName:"Add",backendName:"cpu",kernelFunc:hE};function fE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=Gd.sizeFromShape(s.shape),i=Gd.inferFromImplicitShape(a,o),l=Gd.sizeFromShape(i);Gd.assert(o===l,(()=>`The new shape (${i}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const u=n.data.get(s.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:s.dataId,shape:i,dtype:s.dtype}}const mE={kernelName:"Reshape",backendName:"cpu",kernelFunc:fE};function gE(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;RT([s,a],"matMul");const l=s.shape.length,u=a.shape.length,c=o?s.shape[l-2]:s.shape[l-1],p=i?a.shape[u-1]:a.shape[u-2],h=o?s.shape[l-1]:s.shape[l-2],d=i?a.shape[u-2]:a.shape[u-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=Gd.sizeFromShape(f),y=Gd.sizeFromShape(m),b=_g.assertAndGetBroadcastShape(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([h,d]);Gd.assert(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const x=i?[y,d,p]:[y,p,d],w=fE({inputs:{x:s},backend:n,attrs:{shape:o?[g,c,h]:[g,h,c]}}),k=fE({inputs:{x:a},backend:n,attrs:{shape:x}}),v=o?w.shape[1]:w.shape[2],N=o?w.shape[2]:w.shape[1],S=i?k.shape[1]:k.shape[2],I=Math.max(g,y),T=n.data.get(w.dataId).values,E=n.data.get(k.dataId).values,$=Gd.computeStrides(w.shape),C=Gd.computeStrides(k.shape),[A,_,R]=o?[$[0],1,$[1]]:[$[0],$[1],1],[D,F,O]=i?[1,C[1],C[0]]:[C[1],1,C[0]],M=N*S,L=og([I,N,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<I;e++)for(let t=0;t<N;t+=B)for(let n=0;n<S;n+=B)for(let r=0;r<v;r+=B){const s=Math.min(t+B,N),a=Math.min(n+B,S),o=Math.min(r+B,v);for(let i=t;i<s;i++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<o;s++){const r=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=T[r+i*_+s*R]*E[s*D+t*F+a]}z[e*M+(i*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const yE={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:gE};const bE={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;let h,d,f;const m=[];h=gE({inputs:{a:s,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(d=hE({inputs:{a:h,b:o},backend:n}),m.push(h),h=d),c&&(f=QT(n,h,c,i,p),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}};function xE(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const wE={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;RT(t,"abs");let r=new Float32Array(Gd.sizeFromShape(t.shape));return r=xE(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},kE={kernelName:"Acos",backendName:"cpu",kernelFunc:DT("Acos",(e=>Math.acos(e)))},vE={kernelName:"Acosh",backendName:"cpu",kernelFunc:DT("Acosh",(e=>Math.acosh(e)))};const NE={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;RT(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=og(r[0].shape,r[0].dtype),o=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function SE(e,t,n,r,s){const a=t.length,o=Gd.sizeFromShape(t),i=Gd.computeStrides(t),l=Gd.computeStrides(s),u=Gd.getTypedArrayFromDType(n,Gd.sizeFromShape(s));for(let t=0;t<o;++t){const n=Gd.indexToLoc(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];u[Gd.locToIndex(s,a,l)]=e[t]}return u}function IE(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;RT(s,"transpose");const o=s.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=s.shape[a[e]];const l=SE(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(l,i,s.dtype),shape:i,dtype:s.dtype}}const TE={kernelName:"Transpose",backendName:"cpu",kernelFunc:IE};const EE={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;RT(s,"all");const i=Gd.parseAxisParam(a,s.shape);let l=i;const u=py.getAxesPermutation(l,s.shape.length);let c=s;null!=u&&(c=IE({inputs:{x:s},backend:n,attrs:{perm:u}}),l=py.getInnerMostAxes(l.length,s.shape.length)),py.assertAxesAreInnerMostDims("all",l,c.shape.length);const[p,h]=py.computeOutAndReduceShapes(c.shape,l),d=Gd.sizeFromShape(h),f=Gd.makeZerosTypedArray(Gd.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=fE({inputs:{x:g},backend:n,attrs:{shape:py.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const $E={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;RT(s,"any");const i=Gd.parseAxisParam(a,s.shape);let l=i;const u=py.getAxesPermutation(l,s.shape.length);let c=s;null!=u&&(c=IE({inputs:{x:s},backend:n,attrs:{perm:u}}),l=py.getInnerMostAxes(l.length,s.shape.length)),py.assertAxesAreInnerMostDims("any",l,c.shape.length);const[p,h]=py.computeOutAndReduceShapes(c.shape,l),d=Gd.sizeFromShape(h),f=Gd.makeZerosTypedArray(Gd.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=fE({inputs:{x:g},backend:n,attrs:{shape:py.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const CE={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;RT(s,"argMax");let o=Gd.parseAxisParam(a,s.shape);const i=py.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=IE({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=py.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],py.assertAxesAreInnerMostDims("argMax",o,l.shape.length);const[c,p]=py.computeOutAndReduceShapes(l.shape,o),h=Gd.sizeFromShape(c),d=Gd.makeZerosTypedArray(h,"int32"),f=Gd.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s>n&&(n=s,r=e)}d[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const AE={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;RT(s,"argMin");let o=Gd.parseAxisParam(a,s.shape);const i=py.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=IE({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=py.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],py.assertAxesAreInnerMostDims("argMin",o,l.shape.length);const[c,p]=py.computeOutAndReduceShapes(l.shape,o),h=Gd.sizeFromShape(c),d=Gd.makeZerosTypedArray(h,"int32"),f=Gd.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s<n&&(n=s,r=e)}d[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},_E={kernelName:"Asin",backendName:"cpu",kernelFunc:DT("Asin",(e=>Math.asin(e)))},RE={kernelName:"Asinh",backendName:"cpu",kernelFunc:DT("Asinh",(e=>Math.asinh(e)))},DE={kernelName:"Atan",backendName:"cpu",kernelFunc:DT("Atan",(e=>Math.atan(e)))},FE={kernelName:"Atan2",backendName:"cpu",kernelFunc:lE("Atan2",VT(((e,t)=>Math.atan2(e,t))))},OE={kernelName:"Atanh",backendName:"cpu",kernelFunc:DT("Atanh",(e=>Math.atanh(e)))};function ME(e,t,n,r,s,a){const o=s.strideHeight,i=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,p=s.effectiveFilterWidth,h=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=og(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*o-h,k=Math.max(0,w),v=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const o=n*i-d,c=Math.max(0,o),h=Math.min(s.inWidth,p+o);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const s=m+n*r[1];for(let n=c;n<h;n+=u){const o=e[s+n*r[2]+t];"max"===a&&o>y?y=o:"avg"===a&&(b+=o,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function LE(e,t,n,r,s=!1,a=!1){const o=og(r.outShape,"int32"),i=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=og(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,p+g);for(let i=0;i<r.outWidth;++i){const p=i*l-f;let d=p;for(;d<0;)d+=c;const x=Math.min(r.inWidth,h+p);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const o=n-g;for(let i=d;i<x;i+=c){const l=i-p,u=m.get(e,n,i,t);u>w&&(w=u,k=s?a?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*h+l)}}o.set(k,e,n,i,t)}}return o}function zE(e,t,n,r,s,a){const o=s.strideDepth,i=s.strideHeight,l=s.strideWidth,u=s.dilationDepth,c=s.dilationHeight,p=s.dilationWidth,h=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=og(s.outShape,n),w=x.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],v=s.outShape[2]*s.outShape[3]*s.outShape[4],N=s.outShape[3]*s.outShape[4],S=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*k,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let k=0;k<s.outDepth;++k){const I=k*o-m;let T=I;for(;T<0;)T+=u;const E=Math.min(s.inDepth,h+I),$=n+k*v;for(let n=0;n<s.outHeight;++n){const o=n*i-g;let h=o;for(;h<0;)h+=c;const m=Math.min(s.inHeight,d+o),k=$+n*N;for(let n=0;n<s.outWidth;++n){const o=n*l-y;let i=o;for(;i<0;)i+=p;const d=Math.min(s.inWidth,f+o),g=k+n*S;let v=b,N=0,I=0;for(let n=T;n<E;n+=u){const s=x+n*r[1];for(let n=h;n<m;n+=c){const o=s+n*r[2];for(let n=i;n<d;n+=p){const s=e[o+n*r[3]+t];if("max"===a&&s>v?v=s:"avg"===a&&(N+=s,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/I:v}}}}return x}function BE(e,t){const n=og(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const w=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){const u=r*s-d;let h=u;for(;h<0;)h+=i;const k=Math.min(t.inHeight,c+u);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let v=d;for(;v<0;)v+=l;const N=Math.min(t.inWidth,p+d);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=x;t<w;t+=o){const n=t-b;for(let r=h;r<k;r+=i){const s=r-u;for(let a=v;a<N;a+=l){const o=a-d,i=e.get(m,t,r,a,g);i>=S&&(S=i,I=n*c*p+s*c+o)}}}n.set(I,m,y,r,s,g)}}}return n}const PE={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;RT(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Gd.assert(py.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=py.computePool2DInfo(s.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Gd.arraysEqual(u.inShape,u.outShape))c=LT({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Gd.computeStrides(s.shape),r=ME(e,s.shape,s.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}};const VE={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;RT(s,"avgPool3d");const c=py.computePool3DInfo(s.shape,a,o,1,i,l,u),p=zE(n.data.get(s.dataId).values,s.shape,s.dtype,Gd.computeStrides(s.shape),c,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}};const WE={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;RT([s,a],"avgPool3DGrad");const c=py.computePool3DInfo(a.shape,o,i,1,l,u),p=c.strideDepth,h=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,S=v-1-c.padInfo.left,I=k-1-c.padInfo.top,T=og(a.shape,"float32"),E=1/(f*m*g),$=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-N,o=r-I,i=s-S;let l=0;for(let n=0;n<w;n+=y){const r=(a+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=b){const s=(o+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<v;n+=x){const a=(i+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=$.get(e,r,s,a,t)}}}T.set(l*E,e,n,r,s,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const UE={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;RT([s,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=py.computePool2DInfo(o.shape,i,l,1,u),p=c.strideHeight,h=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=og(o.shape,"float32"),v=1/(d*f),N=n.data.get(s.dataId).values,S=og(s.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(s+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/h;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;o+=S.get(e,r,s,t)}}k.set(o*v,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const GE={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:o,mean:i,variance:l}=t;Gd.assert(i.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Gd.assert(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Gd.assert(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),RT([s,i,l,a,o],"batchNorm");let{varianceEpsilon:u}=r;null==u&&(u=.001);const c=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,h=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=h.length,x=p.length;let w=0,k=0,v=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-p[k++])*d[v++]/Math.sqrt(h[N++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function HE(e,t,n,r,s){const a=Ug.isSliceContinous(r,t,n),o=Gd.sizeFromShape(n),i=Gd.computeStrides(r);if(a){const n=Ug.computeFlatOffset(t,i);return"string"===s?e.slice(n,n+o):e.subarray(n,n+o)}const l=og(r,s,"string"===s?py.fromUint8ToStringArray(e):e),u=og(n,s);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));u.set(l.get(...r),...n)}return"string"===s?py.fromStringArrayToUint8(u.values):u.values}function qE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r;RT(s,"slice");const[i,l]=Ug.parseSliceParams(s,a,o);Ug.assertParamsValid(s,i,l);const u=HE(n.data.get(s.dataId).values,i,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,u)}const jE={kernelName:"Slice",backendName:"cpu",kernelFunc:qE};const KE={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;RT([s],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),l=py.getReshaped(s.shape,a,i),u=py.getPermuted(l.length,a.length),c=py.getReshapedPermuted(s.shape,a,i),p=py.getSliceBeginCoords(o,a.length),h=py.getSliceSize(c,o,a.length),d=fE({inputs:{x:s},backend:n,attrs:{shape:l}}),f=IE({inputs:{x:d},backend:n,attrs:{perm:u}}),m=fE({inputs:{x:f},backend:n,attrs:{shape:c}}),g=qE({inputs:{x:m},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function XE(e,t,n,r,s){const a=Gd.sizeFromShape(r),o=Gd.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=a>0?t[n]:1)}return o}function YE(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],o=og([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<a;s++){const a=e.get(i,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,s),i,a):o.set(o.get(i,a)+1,i,a))}return o}const ZE={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=XE(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}};const JE={kernelName:"BroadcastArgs",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=py.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},QE=XT((e=>Math.ceil(e))),e$={kernelName:"Ceil",backendName:"cpu",kernelFunc:FT("Ceil",QE)},t$={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:DT("ClipByValue",((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}))},n$={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(Gd.sizeFromShape(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function r$(e,t,n,r){const s=Gd.getArrayFromDType(n,Gd.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=Gd.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?py.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=a[o++]}r+=e.shape[1]}))}return s}function s$(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const a$={kernelName:"Imag",backendName:"cpu",kernelFunc:s$};function o$(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=Gd.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));py.assertParamsConsistent(o,a);let i=py.computeOutShape(t.map((e=>e.shape)),a);if(0===Gd.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter((e=>Gd.sizeFromShape(e.shape)>0));if(1===l.length)return LT({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){const e=l.map((e=>rE({inputs:{input:e},backend:n}))),t=l.map((e=>s$({inputs:{input:e},backend:n}))),r=o$({inputs:e,backend:n,attrs:{axis:a}}),s=o$({inputs:t,backend:n,attrs:{axis:a}}),o=eE({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}const u=l.map((e=>{const t=Gd.sizeFromShape(e.shape.slice(a));return fE({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=py.computeOutShape(u.map((e=>e.shape)),1);const p=1===u[0].shape[0],h=r$(c,i,t[0].dtype,p),d=py.computeOutShape(l.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,h);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const i$={kernelName:"Concat",backendName:"cpu",kernelFunc:o$};function l$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r;RT([s,a],"conv2d");const p=py.convertConv2DDataFormat(l),h=py.computeConv2DInfo(s.shape,a.shape,o,u,i,c,!1,p),d=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,b=h.padInfo.top,x="channelsLast"===h.dataFormat,w=new vf(h.outShape,s.dtype),k=Gd.computeStrides(s.shape),v=Gd.computeStrides(a.shape),N=k[0],S=x?k[1]:k[2],I=x?k[2]:1,T=x?1:k[1],E=w.strides[0],$=x?w.strides[1]:w.strides[2],C=x?w.strides[2]:1,A=x?1:w.strides[1],_=n.data.get(s.dataId).values,R=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<h.batchSize;++e){const t=e*N,n=e*E;for(let e=0;e<h.outHeight;++e){const r=n+e*$,s=e*h.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=h.inHeight)continue;const a=e*v[0],o=t+n*S;for(let e=0;e<h.outWidth;++e){const t=r+e*C,n=e*h.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=h.inWidth)continue;const s=o+r*I;let i=a+e*v[1];for(let e=0;e<h.inChannels;++e){const n=_[s+e*T];for(let e=0;e<h.outChannels;++e)D[t+e*A]+=n*R[i+e];i+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const u$={kernelName:"Conv2D",backendName:"cpu",kernelFunc:l$};const c$={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r;RT([s,a],"conv2dBackpropFilter");const p=py.convertConv2DDataFormat(l),h=py.computeConv2DInfo(s.shape,c,o,1,i,u,!1,p),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,b=new vf(h.filterShape,"float32"),x=h.padInfo.left,w=h.padInfo.top,k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=new vf(s.shape,s.dtype,k),S=new vf(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(h.outHeight,(h.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(h.outWidth,(h.inWidth+x-r)/f);for(let o=0;o<h.inChannels;++o)for(let i=0;i<h.outChannels;++i){let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;l+=y?N.get(u,t,n,o)*S.get(u,c,e,i):N.get(u,o,t,n)*S.get(u,i,c,e)}}b.set(l,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const p$={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r;RT([s,a],"conv2dBackpropInput");const p=Gd.computeStrides(a.shape),h=Gd.computeStrides(s.shape);let d=py.convertConv2DDataFormat(u);const f=py.computeConv2DInfo(o,a.shape,i,1,l,c,!1,d),m=new vf(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=p,{batchSize:v,filterHeight:N,filterWidth:S,inChannels:I,inHeight:T,inWidth:E,outChannels:$,outHeight:C,outWidth:A,strideHeight:_,strideWidth:R}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,F=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=h[0],V=O?h[1]:h[2],W=O?h[2]:1,U=O?1:h[1];for(let e=0;e<v;++e)for(let t=0;t<I;++t)for(let n=0;n<T;++n){const r=n-D,s=Math.max(0,Math.ceil(r/_)),a=Math.min(C,(N+r)/_);for(let o=0;o<E;++o){const i=o-F,l=Math.max(0,Math.ceil(i/R)),u=Math.min(A,(S+i)/R);let c=0;for(let n=s;n<a;++n){const s=n*_-r;for(let r=l;r<u;++r){const a=P*e+V*n+W*r,o=x*(N-1-s)+w*(S-1-(r*R-i))+k*t;for(let e=0;e<$;++e){c+=y[a+U*e]*b[o+e]}}}g[M*e+L*n+z*o+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const h$={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r;RT([s,a],"conv3d");const u=py.computeConv3DInfo(s.shape,a.shape,o,l,i),{filterDepth:c,filterHeight:p,filterWidth:h,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new vf(u.outShape,s.dtype),k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=w.values,S=Gd.computeStrides(s.shape),I=Gd.computeStrides(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const r=n+e*w.strides[1],s=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=u.inDepth)continue;const a=e*I[0],o=t+n*S[1];for(let e=0;e<u.outHeight;++e){const t=r+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<p;++e){const r=n+e*f;if(r<0||r>=u.inHeight)continue;const s=a+e*I[1],i=o+r*S[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,r=e*u.strideWidth-b;for(let e=0;e<h;++e){const t=r+e*m;if(t<0||t>=u.inWidth)continue;const a=s+e*I[2],o=i+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[o+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const d$={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:l}=r;RT([s,a],"conv3dBackpropFilterV2");const u=Gd.computeStrides(s.shape),c=Gd.computeStrides(a.shape),p=py.computeConv3DInfo(s.shape,l,o,1,i),h=p.strideDepth,d=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new vf(p.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,S=n.data.get(a.dataId).values,[I,T,E,$]=c,C=n.data.get(s.dataId).values,[A,_,R,D]=u,F=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((F-e)/h)),n=Math.min(p.outDepth,(p.inDepth+F-e)/h),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),o=Math.min(p.outHeight,(p.inHeight+M-s)/d),i=s*k+r;for(let r=0;r<y;++r){const l=Math.max(0,Math.ceil((O-r)/f)),u=Math.min(p.outWidth,(p.inWidth+O-r)/f),c=r*v+i;for(let i=0;i<p.inChannels;++i){const m=i*N+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let m=0;m<p.batchSize;++m){const p=m*A,y=m*I;for(let m=t;m<n;++m){const t=(e+m*h-F)*_+p,n=m*T+y;for(let e=a;e<o;++e){const a=(s+e*d-M)*R+t,o=e*E+n;for(let e=l;e<u;++e){const t=e*$+o;g+=C[(r+e*f-O)*D+a+i]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const f$={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:l}=r;RT([s],"conv3dBackpropInputV2");const u=Gd.computeStrides(s.shape),c=Gd.computeStrides(a.shape),p=py.computeConv3DInfo(l,a.shape,i,1,o),h=new vf(p.inShape,"float32"),d=h.values,[f,m,g,y]=h.strides,b=n.data.get(s.dataId).values,[x,w,k,v]=u,N=n.data.get(a.dataId).values,[S,I,T,E]=c,{batchSize:$,filterDepth:C,filterHeight:A,filterWidth:_,inChannels:R,inDepth:D,inHeight:F,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:V,strideWidth:W}=p,U=C-1-p.padInfo.front,G=A-1-p.padInfo.top,H=_-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<R;++t)for(let n=0;n<D;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(C+r)/P);for(let o=0;o<F;++o){const i=o-G,l=Math.max(0,Math.ceil(i/V)),u=Math.min(z,(A+i)/V);for(let c=0;c<O;++c){const p=c-H,h=Math.max(0,Math.ceil(p/W)),$=Math.min(B,(_+p)/W);let R=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=l;r<u;++r){const a=r*V-i;for(let o=h;o<$;++o){const i=x*e+w*n+k*r+v*o,l=S*(C-1-s)+I*(A-1-a)+T*(_-1-(o*W-p))+E*t;for(let e=0;e<M;++e){R+=b[i+e]*N[l+e]}}}}d[f*e+m*n+g*o+y*c+t]=R}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},m$={kernelName:"Cos",backendName:"cpu",kernelFunc:DT("Cos",(e=>Math.cos(e)))},g$={kernelName:"Cosh",backendName:"cpu",kernelFunc:DT("Cosh",(e=>Math.cosh(e)))};const y$={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,[c,p,h,d]=s.shape,f=a.shape[0],[m,g]=i,y=og([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,k=Gd.computeStrides(s.shape),v=Gd.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(s-n)*(p-1)/(m-1):0,f=g>1?(a-r)*(h-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+s)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=u}else if("bilinear"===l){const n=Math.floor(c),s=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?r*(h-1)+l*f:.5*(r+a)*(h-1);if(c<0||c>h-1){for(let n=0;n<d;n++){const r=n+l*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const p=Math.floor(c),m=Math.ceil(c),b=c-p;for(let r=0;r<d;r++){let a=r+p*k[2]+n*k[1]+o*k[0];const u=w[a];a=r+m*k[2]+n*k[1]+o*k[0];const c=w[a];a=r+p*k[2]+s*k[1]+o*k[0];const h=w[a];a=r+m*k[2]+s*k[1]+o*k[0];const d=u+(c-u)*b,f=h+(w[a]-h)*b;a=r+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*i}}}else for(let n=0;n<g;++n){const s=g>1?r*(h-1)+n*f:.5*(r+a)*(h-1);if(s<0||s>h-1){for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const i=Math.round(s),l=Math.round(c);for(let r=0;r<d;r++){const s=r+i*k[2]+l*k[1]+o*k[0],a=r+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const b$={kernelName:"Cumprod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;RT(s,"cumprod");const l=py.getAxesPermutation([a],s.shape.length);let u=s;null!=l&&(u=IE({inputs:{x:s},backend:n,attrs:{perm:l}}));const c=py.getInnerMostAxes(1,s.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const p=Lf(u.dtype,"int32"),h=Gd.makeOnesTypedArray(Gd.sizeFromShape(u.shape),p),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?1:d[n];else{const r=m(e,t-1);h[n]=o?d[r]*h[r]:d[n]*h[r]}}const g=n.makeTensorInfo(u.shape,p,h);if(null!=l){const e=IE({inputs:{x:g},backend:n,attrs:{perm:py.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const x$={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;RT(s,"cumsum");const l=py.getAxesPermutation([a],s.shape.length);let u=s;null!=l&&(u=IE({inputs:{x:s},backend:n,attrs:{perm:l}}));const c=py.getInnerMostAxes(1,s.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const p=Lf(u.dtype,"int32"),h=Gd.makeZerosTypedArray(Gd.sizeFromShape(u.shape),p),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?0:d[n];else{const r=m(e,t-1);h[n]=o?d[r]+h[r]:d[n]+h[r]}}const g=n.makeTensorInfo(u.shape,p,h);if(null!=l){const e=IE({inputs:{x:g},backend:n,attrs:{perm:py.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const w$={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=XE(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===s.shape.length){const e=YE(n.bufferSync(s),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const k$={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r;Gd.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=s.shape[0],l=s.shape[1],u=s.shape[2],c=s.shape[3],p=l*a,h=u*a,d=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(i*p*h*d);let g=0;for(let e=0;e<i;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<h;++t){const s=Math.floor(t/a),o=(r*a+t%a)*d;for(let t=0;t<d;++t){const r=t+o+c*(s+u*(n+l*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,p,h,d],s.dtype,m)}};function v$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;RT([s,a],"depthwiseConv2DNative");const c=Gd.computeStrides(s.shape),p=Gd.computeStrides(a.shape);let h=l;null==h&&(h=[1,1]),Gd.assert(py.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=py.computeConv2DInfo(s.shape,a.shape,o,h,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new vf(d.outShape,s.dtype),N=n.data.get(s.dataId).values,S=n.data.get(a.dataId).values,I=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*v.strides[1],s=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*p[0],o=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*p[1],i=o+r*d.inChannels;let l=t,u=s;for(let e=0;e<d.inChannels;++e){const t=N[i+e];for(let e=0;e<k;++e)I[l+e]+=t*S[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const N$={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:v$};const S$={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r;RT([s,a],"depthwiseConv2dNativeBackpropFilter");const p=py.computeConv2DInfo(s.shape,c,o,i,l,u,!0),{strideHeight:h,strideWidth:d,filterHeight:f,filterWidth:m}=p,g=new vf(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,w=n.data.get(s.dataId).values,k=new vf(s.shape,s.dtype,w),v=n.data.get(a.dataId).values,N=new vf(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(p.outHeight,(p.inHeight+b-e)/h);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(p.outWidth,(p.inWidth+y-r)/d);for(let o=0;o<p.outChannels;++o){const i=Math.trunc(o/x),l=o%x;let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*h-b;for(let e=s;e<a;++e){const n=r+e*d-y;u+=k.get(l,t,n,i)*N.get(l,c,e,o)}}g.set(u,e,r,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const I$={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r;RT([s,a],"depthwiseConv2DNativeBackpropInput");const p=Gd.computeStrides(s.shape),h=Gd.computeStrides(a.shape),d=py.computeConv2DInfo(c,a.shape,o,i,l,u,!0),f=new vf(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,k,v]=p,N=n.data.get(a.dataId).values,[S,I,T]=h,{batchSize:E,filterHeight:$,filterWidth:C,inChannels:A,inHeight:_,inWidth:R,outChannels:D,outHeight:F,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=C-1-d.padInfo.left,P=D/A;for(let e=0;e<E;++e)for(let t=0;t<A;++t)for(let n=0;n<_;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(F,($+r)/M);for(let o=0;o<R;++o){const i=o-B,l=Math.max(0,Math.ceil(i/L)),u=Math.min(O,(C+i)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=l;r<u;++r){const a=w*e+k*n+v*r,o=S*($-1-s)+I*(C-1-(r*L-i))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*N[o+e]}}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const T$={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=Gd.sizeFromShape(r.shape),a=n.data.get(r.dataId).values,o=og([s,s],r.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*s+e]=a[e];const l=[...r.shape,...r.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},E$={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:o,dilations:i}=n,l=t,u=l.data.get(r.dataId).values,c=r.shape.length,p=l.data.get(s.dataId).values,h=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=py.computeDilation2DInfo(r.shape,s.shape,a,o,"NHWC",i),E=Gd.sizeFromShape(T),$=T.length,C=Gd.getArrayFromDType(r.dtype,E);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const o=a*k-x.left;for(let i=0;i<g;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=o+n*I;if(d>=0&&d<m){const o=Gd.locToIndex([e,a,d,i],c,Gd.computeStrides(r.shape)),f=Gd.locToIndex([t,n,i],h,Gd.computeStrides(s.shape)),m=u[o]+p[f];m>l&&(l=m)}}}C[Gd.locToIndex([e,t,a,i],$,Gd.computeStrides(T))]=l}}}return{dataId:l.write(Gd.toTypedArray(C,r.dtype),T,r.dtype),shape:T,dtype:r.dtype}}},$$={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Gd.toNestedArray(r.shape,u.data.get(r.dataId).values),p=Gd.toNestedArray(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=py.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",l);Gd.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=Gd.toNestedArray(I,u.data.get(a.dataId).values),E=Gd.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const u=s+n*S;if(u>=0&&u<f){const s=c[e][r][u][a]+p[t][n][a];s>o&&(o=s,i=t,l=n)}}}E[i][l][a]+=T[e][t][r][a]}}}return{dataId:u.write(Gd.toTypedArray(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},C$={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Gd.toNestedArray(r.shape,u.data.get(r.dataId).values),p=Gd.toNestedArray(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=py.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",l);Gd.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=Gd.toNestedArray(I,u.data.get(a.dataId).values),E=Gd.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=s<0?0:s;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const u=s+n*S;if(u>=0&&u<f){const s=c[e][r][u][a]+p[t][n][a];s>o&&(o=s,i=r,l=u)}}}E[e][i][l][a]+=T[e][t][r][a]}}}return{dataId:u.write(Gd.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},A$=VT(((e,t)=>e*t)),_$=uE(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),R$=lE("Multiply",A$,_$),D$={kernelName:"Multiply",backendName:"cpu",kernelFunc:R$};function F$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;let i;RT(s,"sum"),i="bool"===s.dtype?oE({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):LT({inputs:{x:s},backend:n});const l=i.shape.length,u=Gd.parseAxisParam(a,i.shape),c=py.getAxesPermutation(u,l);let p=u,h=i;null!=c&&(h=IE({inputs:{x:i},backend:n,attrs:{perm:c}}),p=py.getInnerMostAxes(p.length,l)),py.assertAxesAreInnerMostDims("sum",p,h.shape.length);const[d,f]=py.computeOutAndReduceShapes(h.shape,p);let m=nE(n,d,py.upcastType(h.dtype,"int32"));const g=Gd.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(h.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=fE({inputs:{x:m},backend:n,attrs:{shape:py.expandShapeToKeepDim(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),m}const O$={kernelName:"Sum",backendName:"cpu",kernelFunc:F$};const M$={kernelName:"Einsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:l}=py.decodeEinsumEquation(s,a.length);py.checkEinsumDimSizes(o.length,l,a);const{path:u,steps:c}=py.getEinsumComputePath(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=py.getEinsumPermutation(d,l[t]);let s;py.isIdentityPermutation(e)?s=a[t]:(s=IE({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Gd.arraysEqual(s.shape,o)||(s=fE({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=R$({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=F$({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}};const L$={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;RT([r,s],"eluGrad");const a=new Float32Array(Gd.sizeFromShape(s.shape)),o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},z$=VT(((e,t)=>e===t?1:0)),B$=lE("Equal",z$,null,"bool"),P$={kernelName:"Equal",backendName:"cpu",kernelFunc:B$},V$=py.ERF_P,W$=py.ERF_A1,U$=py.ERF_A2,G$=py.ERF_A3,H$=py.ERF_A4,q$=py.ERF_A5,j$={kernelName:"Erf",backendName:"cpu",kernelFunc:DT("Erf",(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+V$*n);return t*(1-((((q$*r+H$)*r+G$)*r+U$)*r+W$)*r*Math.exp(-n*n))}))},K$=XT((e=>Math.exp(e))),X$=FT("Exp",K$,"float32"),Y$={kernelName:"Exp",backendName:"cpu",kernelFunc:X$};function Z$(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,o=s.shape.length,i=s.shape.slice();let l=a;return a<0&&(Gd.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),i.splice(l,0,1),fE({inputs:{x:s},backend:n,attrs:{shape:i}})}const J$={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:Z$},Q$=XT((e=>Math.expm1(e))),eC={kernelName:"Expm1",backendName:"cpu",kernelFunc:FT("Expm1",Q$)},tC=lE("RealDiv",VT(((e,t)=>e/t))),nC={kernelName:"RealDiv",backendName:"cpu",kernelFunc:tC},rC=VT(((e,t)=>e-t)),sC=uE(((e,t,n,r)=>({real:e-n,imag:t-r}))),aC=lE("Sub",rC,sC),oC={kernelName:"Sub",backendName:"cpu",kernelFunc:aC};function iC(e,t,n){const r=e.shape,s=r[0],a=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[s,a],c=Gd.sizeFromShape(u),p=Gd.getTypedArrayFromDType("float32",c),h=Gd.getTypedArrayFromDType("float32",c);for(let e=0;e<s;e++){const r=qE({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=qE({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=eE({inputs:{real:r,imag:s},backend:n}),{real:u,imag:c}=lC(o,t,n),d=py.mergeRealAndImagArrays(u,c);for(let t=0;t<a;t++){const n=py.getComplexWithIndex(d,t);p[e*a+t]=n.real,h[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o)}const d=n.makeTensorInfo(u,"float32",p),f=n.makeTensorInfo(u,"float32",h),m=eE({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function lC(e,t,n){const r=Gd.sizeFromShape(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((i=r)&i-1)){const s=uC(a,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",s.real),t=n.makeTensorInfo(i,"float32",s.imag),a=n.makeTensorInfo([],"float32",Gd.createScalarValue(r,"float32")),o=LT({inputs:{x:a},backend:n}),l=nC.kernelFunc({inputs:{a:e,b:a},backend:n}),u=nC.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,p=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:p}}return s}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,o=0;for(let r=0;r<t;r++){const i=py.exponent(s*r,t,n),l=py.getComplexWithIndex(e,r);a+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(a/=t,o/=t),py.assignToTypedArray(r,a,o,s)}return r}(py.mergeRealAndImagArrays(a,o),r,t);return py.splitRealAndImagArrays(e)}var i}function uC(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=py.mergeRealAndImagArrays(e,t),o=n/2,i=py.complexWithEvenIndex(a),l=i.real,u=i.imag,c=[l.length],p=s.makeTensorInfo(c,"float32",l),h=s.makeTensorInfo(c,"float32",u),d=eE({inputs:{real:p,imag:h},backend:s}),f=py.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=eE({inputs:{real:b,imag:x},backend:s}),k=uC(l,u,o,r,s),v=k.real,N=k.imag,S=[v.length],I=s.makeTensorInfo(S,"float32",v),T=s.makeTensorInfo(S,"float32",N),E=eE({inputs:{real:I,imag:T},backend:s}),$=uC(m,g,o,r,s),C=$.real,A=$.imag,_=[C.length],R=s.makeTensorInfo(_,"float32",C),D=s.makeTensorInfo(_,"float32",A),F=eE({inputs:{real:R,imag:D},backend:s}),O=py.exponents(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=eE({inputs:{real:L,imag:z},backend:s}),P=R$({inputs:{a:B,b:F},backend:s}),V=hE({inputs:{a:E,b:P},backend:s}),W=aC({inputs:{a:E,b:P},backend:s}),U=rE({inputs:{input:V},backend:s}),G=rE({inputs:{input:W},backend:s}),H=s$({inputs:{input:V},backend:s}),q=s$({inputs:{input:W},backend:s}),j=o$({inputs:[U,G],backend:s,attrs:{axis:0}}),K=o$({inputs:[H,q],backend:s,attrs:{axis:0}}),X=s.data.get(j.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const cC={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=Gd.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=fE({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=iC(o,!1,n),l=fE({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function pC(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,o=a||Gd.inferDtype(s),i=Gd.getArrayFromDType(o,Gd.sizeFromShape(r));return function(e,t,n){e.fill(t)}(i,s),t.makeTensorInfo(r,o,i)}const hC={kernelName:"Fill",backendName:"cpu",kernelFunc:pC};const dC={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=Gd.getTypedArrayFromDType(r.dtype,Gd.sizeFromShape(r.shape)),[o,i,l,u]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const r=e*u;for(let s=0;s<u;s++){const o=Math.round(l-e-1),i=t+n+r+s;let p=c[i];if(o>=0&&o<l){p=c[t+n+o*u+s]}a[i]=p}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},fC=XT((e=>Math.floor(e))),mC={kernelName:"Floor",backendName:"cpu",kernelFunc:FT("Floor",fC)},gC={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:lE("FloorDiv",VT(((e,t)=>Math.floor(e/t))),null,"int32")};const yC={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=l$({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=fE({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=hE({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=hE({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===i.shape.length&&1!==i.shape[0]){const e=fE({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=QT(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=QT(n,m,d,i,f);n.disposeIntermediateTensorInfo(e)}return m}};const bC={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=v$({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=hE({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=QT(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function xC(e,t,n,r,s,a,o,i,l){const u=og([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*o[t],r.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const wC={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=Gd.sizeFromShape(r.shape),o=s.shape,i=o[o.length-1],[l,u,c,p]=py.prepareAndValidate(r,s);if(0===u)return n.makeTensorInfo(l,r.dtype,[]);const h=xC(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,u,i,c,p,r.shape,a);return n.makeTensorInfo(l,r.dtype,h.values)}};function kC(e,t,n){const r=og(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],o=s[2],i=t.locToIndex([a,o]);s[2]=t.values[i];const l=e.locToIndex(s);0<=l&&l<e.values.length&&(r.values[n]=e.values[l])}return r}const vC={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r;RT([s,a],"gatherV2");const l=Gd.parseAxisParam(o,s.shape)[0],u=n.data.get(a.dataId).values,c=s.shape[l];for(let e=0;e<u.length;++e){const t=u[e];Gd.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let p=i;null==i&&(p=0);const h=Gd.sizeFromShape(a.shape),d=py.segment_util.collectGatherOpShapeInfo(s,a,l,p),f=fE({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=fE({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=kC(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},NC=VT(((e,t)=>e>t?1:0)),SC={kernelName:"Greater",backendName:"cpu",kernelFunc:lE("Greater",NC,null,"bool")},IC=VT(((e,t)=>e>=t?1:0)),TC={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:lE("GreaterEqual",IC,null,"bool")};const EC={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=Gd.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=fE({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=iC(o,!0,n),l=fE({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},$C={kernelName:"IsFinite",backendName:"cpu",kernelFunc:DT("IsFinite",(e=>Number.isFinite(e)?1:0),"bool")},CC={kernelName:"IsInf",backendName:"cpu",kernelFunc:DT("IsInf",(e=>Math.abs(e)===1/0?1:0),"bool")},AC={kernelName:"IsNan",backendName:"cpu",kernelFunc:DT("IsNan",(e=>Number.isNaN(e)?1:0),"bool")},_C=VT(((e,t)=>e<t?1:0)),RC={kernelName:"Less",backendName:"cpu",kernelFunc:lE("Less",_C,null,"bool")},DC=VT(((e,t)=>e<=t?1:0)),FC={kernelName:"LessEqual",backendName:"cpu",kernelFunc:lE("LessEqual",DC,null,"bool")};function OC(e,t,n){const r=(t-e)/(n-1),s=Gd.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const MC={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=OC(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},LC=XT((e=>Math.log(e))),zC={kernelName:"Log",backendName:"cpu",kernelFunc:FT("Log",LC)},BC={kernelName:"Log1p",backendName:"cpu",kernelFunc:DT("Log1p",(e=>Math.log1p(e)))},PC={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:lE("LogicalAnd",VT(((e,t)=>e&&t)),null,"bool")},VC={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:DT("LogicalNot",(e=>e?0:1),"bool")},WC={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:lE("LogicalOr",VT(((e,t)=>e||t)),null,"bool")};const UC={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=r;RT(s,"LRN");const u=s.shape[3],c=u-1,p=n.data.get(s.dataId).values,h=Gd.sizeFromShape(s.shape),d=new Float32Array(h);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let e=0;e<h;e++){const t=f(e),n=p[e]*Math.pow(o+i*t,-l);d[e]=n}return n.makeTensorInfo(s.shape,s.dtype,d)}};const GC={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r;RT(o,"LRNGrad");const p=Gd.sizeFromShape(o.shape),h=o.shape[3],d=n.data.get(o.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(p),y=p;for(let e=0;e<y;e++){const t=e%h,n=e-t+Math.max(0,t-i),r=e-t+Math.min(h,t+i+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=u*s+l;for(let t=n;t<r;t++){let n=-2*u*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(o.shape,s.dtype,g)}};function HC(e,t,n,r){const s=Gd.getTypedArrayFromDType(r,Gd.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}function qC(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=n;let l=s.shape;const u=l.length,c=Gd.parseAxisParam(a,l);let p=c;const h=py.getAxesPermutation(p,u);let d=i.data.get(s.dataId).values;if(null!=h){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[h[t]];d=SE(d,l,s.dtype,h,e),p=py.getInnerMostAxes(p.length,u),l=e}RT(s,"max"),py.assertAxesAreInnerMostDims("max",p,u);const[f,m]=py.computeOutAndReduceShapes(l,p),g=HC(d,Gd.sizeFromShape(m),f,s.dtype),y=i.write(g,f,s.dtype);let b=f;if(o){b=py.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:s.dtype}}const jC={kernelName:"Max",backendName:"cpu",kernelFunc:qC},KC=VT(((e,t)=>Math.max(e,t))),XC={kernelName:"Maximum",backendName:"cpu",kernelFunc:lE("Maximum",KC)};const YC={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;RT(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Gd.assert(py.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=py.computePool2DInfo(s.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Gd.arraysEqual(u.inShape,u.outShape))c=LT({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Gd.computeStrides(s.shape),r=ME(e,s.shape,s.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}};const ZC={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;RT(s,"maxPool3d");const c=py.computePool3DInfo(s.shape,a,o,1,i,l,u),p=zE(n.data.get(s.dataId).values,s.shape,s.dtype,Gd.computeStrides(s.shape),c,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}};const JC={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;RT([s,a],"maxPool3DGrad");const c=py.computePool3DInfo(a.shape,o,i,1,l,u),p=BE(n.bufferSync(a),c),h=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,S=og(a.shape,"float32"),I=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-k,o=r-N,i=s-v;let l=0;for(let n=0;n<b;n+=m){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(o+s)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<w;o+=y){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const h=b*x*w-1-p.get(e,r,a,u,t)===n*x*w+s*w+o?1:0;if(0===h)continue;l+=I.get(e,r,a,u,t)*h}}}S.set(l,e,n,r,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const QC={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;RT([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=py.computePool2DInfo(i.shape,l,u,1,c,p),d=n.data.get(i.dataId).values,f=og(h.outShape,i.dtype,LE(d,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=w-1-h.padInfo.left,v=x-1-h.padInfo.top,N=og(i.shape,"float32"),S=n.data.get(s.dataId).values,I=og(s.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=n-v,a=r-k;let o=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const i=(a+s)/g;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;const l=x*w-1-f.get(e,r,i,t)===n*w+s?1:0;if(0===l)continue;o+=I.get(e,r,i,t)*l}}N.set(o,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};function eA(e,t,n,r,s){const a=ME(e,0,n,Gd.computeStrides(t),s,"max"),o=LE(e,t,n,s,!0,r);return[a.values,o.values]}const tA={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;RT(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=py.computePool2DInfo(r.shape,s,a,[1,1],o),[p,h]=eA(u,r.shape,r.dtype,i,c),d=l.write(p,c.outShape,r.dtype),f=l.write(h,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const nA={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=Gd.parseAxisParam(a,s.shape),l=py.computeOutAndReduceShapes(s.shape,i)[1],u=Gd.sizeFromShape(l),c=[],p=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(p);const h=oE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});c.push(h);const d=tC({inputs:{a:h,b:p},backend:n});c.push(d);const f=F$({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:o}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const rA={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;RT(s,"min");const i=Gd.parseAxisParam(a,s.shape);let l=i;const u=py.getAxesPermutation(l,s.shape.length);let c=s;null!=u&&(c=IE({inputs:{x:s},backend:n,attrs:{perm:u}}),l=py.getInnerMostAxes(l.length,s.shape.length)),py.assertAxesAreInnerMostDims("min",l,c.shape.length);const[p,h]=py.computeOutAndReduceShapes(c.shape,l),d=Gd.sizeFromShape(h),f=Gd.makeZerosTypedArray(Gd.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=fE({inputs:{x:g},backend:n,attrs:{shape:py.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},sA=VT(((e,t)=>Math.min(e,t))),aA={kernelName:"Minimum",backendName:"cpu",kernelFunc:lE("Minimum",sA)};const oA={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:o}=r;RT(s,"mirrorPad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===o?0:1,p=n.data.get(s.dataId).values,h=s.shape.length,d=Gd.computeStrides(s.shape),f=Gd.sizeFromShape(i),m=i.length,g=Gd.computeStrides(i),y=Gd.getTypedArrayFromDType(s.dtype,f);for(let e=0;e<f;e++){let t=Gd.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Gd.locToIndex(t,h,d);y[e]=p[n]}return{dataId:n.write(y,i,s.dtype),shape:i,dtype:s.dtype}}},iA={kernelName:"Mod",backendName:"cpu",kernelFunc:lE("Mod",VT(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})))};function lA(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=s.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=Gd.parseAxisParam([i],s.shape),u=qC({inputs:{x:s},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=py.expandShapeToKeepDim(u.shape,l),p=fE({inputs:{x:u},backend:n,attrs:{shape:c}}),h=aC({inputs:{a:s,b:p},backend:n}),d=X$({inputs:{x:h},backend:n}),f=F$({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=fE({inputs:{x:f},backend:n,attrs:{shape:c}}),g=tC({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const uA={kernelName:"Softmax",backendName:"cpu",kernelFunc:lA};const cA={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r;RT(s,"multinomial");const l=i?s:lA({inputs:{logits:s},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=n.data.get(l.dataId).values,h=[u,a],d=Gd.makeZerosTypedArray(Gd.sizeFromShape(h),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const r=mu.alea(o.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();d[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[s+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(h,"int32",d)}};function pA(e,t,n){const r=Gd.createScalarValue(-1,n);return A$([],t,r,e,n)}const hA={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;RT(r,"neg");const s=n.data.get(r.dataId).values,[a,o]=pA(s,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,a)}},dA=wx.nonMaxSuppressionV3Impl;const fA={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r;RT(s,"NonMaxSuppression");const u=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:p}=dA(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},mA=wx.nonMaxSuppressionV4Impl;const gA={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r;RT(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,{selectedIndices:h,validOutputs:d}=mA(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},yA=wx.nonMaxSuppressionV5Impl;const bA={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r;RT(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=yA(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},xA=VT(((e,t)=>e!==t?1:0)),wA={kernelName:"NotEqual",backendName:"cpu",kernelFunc:lE("NotEqual",xA,null,"bool")};const kA={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:l}=r;RT(s,"oneHot");const u=Gd.sizeFromShape(s.shape),c=new Float32Array(u*o);c.fill(l);const p=n.data.get(s.dataId).values;for(let e=0;e<u;++e)p[e]>=0&&p[e]<o&&(c[e*o+p[e]]=i);return n.makeTensorInfo([...s.shape,o],a,c)}};function vA(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=rE({inputs:{input:r},backend:n}),t=vA({inputs:{x:e},backend:n}),s=s$({inputs:{input:r},backend:n}),a=vA({inputs:{x:s},backend:n}),o=eE({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return pC({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const NA={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:vA};const SA={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=rE({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=s$({inputs:{input:s},backend:r}),o=vA({inputs:{x:a},backend:r}),i=eE({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return pC({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function IA(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return Z$({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{Gd.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Gd.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=o$({inputs:t.map((e=>{const t=Z$({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const TA={kernelName:"Pack",backendName:"cpu",kernelFunc:IA};const EA={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;RT(s,"pad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(s.dataId).values,c=Gd.sizeFromShape(s.shape),p=s.shape.length,h=Gd.computeStrides(s.shape),d=Gd.sizeFromShape(i),f=i.length,m=Gd.computeStrides(i),g=Gd.getTypedArrayFromDType(s.dtype,d);0!==o&&g.fill(o);for(let e=0;e<c;e++){const t=Gd.indexToLoc(e,p,h).map(((e,t)=>e+l[t]));g[Gd.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,i,s.dtype),shape:i,dtype:s.dtype}}},$A={kernelName:"Pow",backendName:"cpu",kernelFunc:lE("Pow",VT(((e,t)=>Math.pow(e,t))))};function CA(e,t,n,r){const[s,a]=py.computeOutAndReduceShapes(e,r),o=Lf(t,"int32"),i=Gd.makeZerosTypedArray(Gd.sizeFromShape(s),o),l=Gd.sizeFromShape(a);for(let e=0;e<i.length;++e){const t=e*l;let r=1;for(let e=0;e<l;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:s,outDtype:o}}const AA={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;RT(s,"prod");const i=s.shape.length,l=Gd.parseAxisParam(a,s.shape),u=py.getAxesPermutation(l,i);let c=l,p=s;const h=[];null!=u&&(p=IE({inputs:{x:s},backend:n,attrs:{perm:u}}),h.push(p),c=py.getInnerMostAxes(c.length,i));const d=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=CA(p.shape,p.dtype,d,c);let y=m;return o&&(y=py.expandShapeToKeepDim(m,l)),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function _A(e,t,n,r){const s=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],l=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=i[s],t=e[e.length-1]-r[o];for(let e=o;e<l;++e)i[s].push(r[e+1]+t)}o=r[o],l=r[l]}l!==o&&(s.push([o,l]),a+=l-o)}return{outSplits:i,valueSlices:s,numValues:a}}function RA(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function DA(e,t,n,r,s){const a=t.slice();a[0]=s;const o=Gd.getArrayFromDType(n,Gd.sizeFromShape(a)),i=e.length;return function(e,t,n,r,s,a){const o=RA(t,2)[1],i=RA(a,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[l*i+t]=e[n*o+t];++l}}(e,t,r,0===i?0:i/t[0],o,a),[o,a]}function FA(e,t,n,r,s,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,r)=>{if(e<0||e>=n){const s=Gd.indexToLoc(r,t.length,Gd.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const l=r[0],{outSplits:u,valueSlices:c,numValues:p}=_A(a,o,e,l),h=function(e){const t=[];for(let n=0;n<e.length;++n){const r=e[n].length,s=Gd.getArrayFromDType("int32",r);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(u),d=DA(n,r,s,c,p);return[h,d[0],d[1]]}const OA={kernelName:"RaggedGather",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,l=s.map((e=>n.data.get(e.dataId).values)),u=s.map((e=>e.shape)),c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,[h,d,f]=FA(l,u,c,a.shape,a.dtype,p,o.shape),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};function MA(e,t,n,r,s,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===s.length,u=0===o.length,c=[];i||c.push(t[0]),l||c.push(s[0]),u||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===c.length?1:c[0],h=Gd.getArrayFromDType("int32",p+1);h[0]=0;for(let t=0;t<p;++t){const n=i?e[0]:e[t],s=l?r[0]:r[t],o=u?a[0]:a[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&s<n||o<0&&s>n)c=0;else if(c=Math.ceil(Math.abs((s-n)/o)),c>2147483647)throw new Error("Requires ((limit - start) / delta) <= 2147483647");h[t+1]=h[t]+c}const d=h[p],f=Gd.getArrayFromDType(n,d);let m=0;for(let t=0;t<p;++t){const n=h[t+1]-h[t];let r=i?e[0]:e[t];const s=u?a[0]:a[t];for(let e=0;e<n;++e)f[m++]=r,r+=s}return[h,f]}const LA={kernelName:"RaggedRange",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=MA(o,r.shape,r.dtype,i,s.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],r.dtype,c)]}};var zA=py.RowPartitionType;class BA{constructor(e,t,n,r,s,a,o,i,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=py.getRowPartitionTypesHelper(u),this.raggedRank=py.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===zA.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===zA.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case zA.VALUE_ROWIDS:return BA.getMaxWidthValueRowID(t);case zA.ROW_SPLITS:return BA.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${zA[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return VA(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;py.validateDefaultValueShape(n,t);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=py.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let e=0;e<r;++e,a+=t)s.push(a);for(let t=r;t<e;++t)s.push(-1);return Gd.assert(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let o=0;o<s-1;++o){const s=e[o+1]-e[o];let i=Math.min(r,s),l=t[o];-1===l&&(i=0);for(let e=0;e<i;++e)a.push(l),l+=n;for(let e=0;e<s-i;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let l=t[i];a.push(l);for(let u=1;u<s;++u){const s=e[u];if(s===i)l>=0&&(++o,o<r?l+=n:l=-1);else{if(o=0,i=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);l=t[s]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case zA.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case zA.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${zA[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case zA.FIRST_DIM_SIZE:return e[0];case zA.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case zA.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${zA[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=VA(t,!1),s=Gd.getArrayFromDType(this.valuesDType,Gd.sizeFromShape(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){a=this.calculateOutputIndex(e-1,a,n[e],t[e])}this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let o=r.slice();o=o.slice(e+1);const i=Gd.sizeFromShape(o),l=t.length;let u=this.defaultValue;if(u.length!==i&&1!==u.length){const e=this.defaultValueShape;Dx((()=>{const t=Qy(u,e),n=Ww(t,o);u=n.dataSync()}))}let c=0,p=0,h=0;for(let e=0;e<=l;++e){let r=e<l?t[e]:-1;if(r!==h){if(p<h){const e=s.subarray(c*i);PA(a.subarray(p*i),e,(h-p)*i)}if(e>=l){const e=n.length;r=Math.floor(e/i)}if(r>h)if(1===this.defaultValue.length)a.subarray(h*i,r*i).fill(this.defaultValue[0]),h=r;else for(;r>h;){PA(a.slice(h*i),u,i),++h}r<0?(c=e+1,p=h):(c=e,p=h,h=p+1)}else++h}}}function PA(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function VA(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function WA(e,t,n,r,s,a,o,i,l,u){return new BA(e,t,n,r,s,a,o,i,l,u).compute()}const UA={kernelName:"RaggedTensorToTensor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=r,u=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,h=i.map((e=>n.data.get(e.dataId).values)),d=i.map((e=>e.shape)),[f,m]=WA(u,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,l);return n.makeTensorInfo(f,a.dtype,m)}};function GA(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return Gd.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/n)),a=Gd.makeZerosTypedArray(s,r);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const HA={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:o}=n,i=GA(r,s,o,a);return t.makeTensorInfo([i.length],a,i)}},qA={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:DT("Reciprocal",(e=>1/e))};const jA={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;RT(s,"resizeBilinear");const l=Gd.computeStrides(s.shape),[u,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(Gd.sizeFromShape([p,u,c,f])),y=[a&&u>1?h-1:h,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(h-1,Math.ceil(n)),i=e*l[0]+r*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),c=i+n*l[2],p=u+n*l[2],h=i+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[p+e],a=t+(m[h+e]-t)*r,o=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=o}}}return n.makeTensorInfo([p,u,c,f],"float32",g)}};const KA={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;RT([a,s],"resizeBilinearGrad");const i=Gd.computeStrides(s.shape),[l,u,c,p]=s.shape,[,h,d]=a.shape,f=new Float32Array(l*u*c*p),m=[o&&h>1?u-1:u,o&&d>1?c-1:c],g=[o&&h>1?h-1:h,o&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<h;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),u-1),a=t+r*i[1],o=t+s*i[1],l=n-r,h=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,u=1-s,d=a+n*i[2],m=a+r*i[2],g=o+n*i[2],y=o+r*i[2],k=h*u,v=h*s,N=l*u,S=l*s;for(let e=0;e<p;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,p],"float32",f)}};const XA={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;RT(s,"resizeNearestNeighbor");const l=Gd.computeStrides(s.shape),[u,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(p*u*c*f),y=[a&&u>1?h-1:h,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<p;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?x*(e+.5):x*e;let r=Math.min(h-1,a?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=t+r*l[1];for(let e=0;e<c;e++){const t=o?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*l[2];for(let e=0;e<f;e++){const t=m[r+e];g[k++]=t}}}}return n.makeTensorInfo([p,u,c,f],s.dtype,g)}};const YA={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;RT([a,s],"resizeNearestNeighborGrad");const i=Gd.computeStrides(s.shape),l=Gd.computeStrides(a.shape),[u,c,p,h]=s.shape,[,d,f]=a.shape,m=new Float32Array(u*c*p*h),g=n.data.get(a.dataId).values,y=[o&&d>1?c-1:c,o&&f>1?p-1:p],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,S=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],r=Math.floor(e*k),s=Math.floor(r-N/2);for(let r=0;r<p;r++){const a=n+r*i[2],u=Math.floor(r*v),y=Math.floor(u-S/2);for(let n=0;n<h;n++){let i=0;for(let a=0;a<N;a++){const u=a+s;if(u<0||u>=d)continue;const h=t+u*l[1],m=u*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const s=h+t*l[2],a=t*w;r===Math.min(p-1,o?Math.round(a):Math.floor(a))&&(i+=g[s+n])}}m[a+n]=i}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const ZA={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;RT(s,"reverse");const o=s.shape.length,i=Gd.parseAxisParam(a,s.shape);if(0===o)return LT({inputs:{x:s},backend:n});const l=new vf(s.shape,s.dtype),u=n.bufferSync(s);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=s.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},JA={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,l=Gd.getTypedArrayFromDType(r.dtype,Gd.sizeFromShape(r.shape)),[u,c,p,h]=r.shape,[d,f]=py.getImageCenter(o,c,p),m=Math.sin(s),g=Math.cos(s),y=i.data.get(r.dataId).values;for(let e=0;e<u;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let r=0;r<p;r++){const s=r*h;for(let o=0;o<h;o++){const i=[u,e,r,o],b=i[2],x=i[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;if("number"!=typeof a&&(v=3===o?255:a[o]),w>=0&&w<p&&k>=0&&k<c){v=y[t+k*(p*h)+w*h+o]}l[t+n+s+o]=v}}}}return{dataId:i.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},QA={kernelName:"Round",backendName:"cpu",kernelFunc:DT("Round",(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}))},e_=XT((e=>1/Math.sqrt(e))),t_={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:FT("Rsqrt",e_)};function n_(e,t,n,r,s,a,o,i,l,u){const c=[r/s,s],p=e.values,h=t.values;if(0===r)return og(n,t.dtype);const d=og(c,t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<o;t++){const n=p[e*o+t];a.push(n),l+=n*i[t]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[l*s+n]+=h[e*s+n]:d.values[l*s+n]=0===t.rank?h[0]:h[e*s+n]}return d}const r_={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=py.calculateShapes(a,s,o),h=n_(n.bufferSync(s),n.bufferSync(a),o,p,u,l,i,c,0,!0);return n.makeTensorInfo(o,h.dtype,h.values)}};function s_(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function a_(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}function o_(e,t,n,r,s,a){const o=Gd.getArrayFromDType("int32",n*s);for(let i=0;i<n;++i){const n=e.slice(i*r,(i+1)*r),l=i*s;for(let e=0;e<s;++e)o[l+e]="left"===a?s_(n,t[e+l]):a_(n,t[e+l])}return o}const i_={kernelName:"SearchSorted",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=o_(n.data.get(s.dataId).values,n.data.get(a.dataId).values,s.shape[0],s.shape[1],a.shape[1],o);return n.makeTensorInfo(a.shape,"int32",i)}};const l_={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;RT([r,s,a],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=Lf(s.dtype,a.dtype),p=Gd.makeZerosTypedArray(Gd.sizeFromShape(s.shape),c);let h=0;const d=0===o||o>1||1===s.shape.length?1:Gd.sizeFromShape(s.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<d;t++)1===i[e]?p[h++]=l[e]:p[h++]=u[e];return n.makeTensorInfo(s.shape,c,p)}},u_=py.SELU_SCALEALPHA,c_=py.SELU_SCALE,p_={kernelName:"Selu",backendName:"cpu",kernelFunc:DT("Selu",(e=>e>=0?c_*e:u_*(Math.exp(e)-1)))},h_={kernelName:"Sign",backendName:"cpu",kernelFunc:DT("Sign",(e=>e<0?-1:e>0?1:0))},d_={kernelName:"Sin",backendName:"cpu",kernelFunc:DT("Sin",(e=>Math.sin(e)))},f_={kernelName:"Sinh",backendName:"cpu",kernelFunc:DT("Sinh",(e=>Math.sinh(e)))},m_=Math.log(1.1920928955078125e-7)+2,g_={kernelName:"Softplus",backendName:"cpu",kernelFunc:DT("Softplus",(e=>{const t=e>-m_,n=e<m_,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s}))};const y_={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;RT([s],"spaceToBatchND");const i=Gd.sizeFromShape(a),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const u=EA.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),c=py.getReshaped(u.shape,a,i,!1),p=py.getPermuted(c.length,a.length,!1),h=py.getReshapedPermuted(u.shape,a,i,!1),d=fE({inputs:{x:u},backend:n,attrs:{shape:c}}),f=IE({inputs:{x:d},backend:n,attrs:{perm:p}}),m=fE({inputs:{x:f},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function b_(e,t,n,r,s,a,o){const i=t[0],l=a[0],u=new Array(l),c=new Array(i),p=t[1];if(0===l){if(0!==i)throw new Error(py.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));return[Gd.getArrayFromDType(n,0),[0,p],Gd.getArrayFromDType(s,0),u,c]}let h=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(py.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(py.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,u,c]}{const t=f[l-1],a=Gd.getArrayFromDType(n,t*p),h=Gd.getArrayFromDType(s,t),d=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p],s=d[n],o=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<p;++n)a[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;h[t]=o}}return[a,[t,p],h,u,c]}}const x_={kernelName:"SparseFillEmptyRows",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[p,h,d,f,m]=b_(i,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function w_(e,t,n,r,s){const a=Gd.sizeFromShape(r),o=t[0],i=s.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(py.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(py.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(py.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/u);if(u*e!==a)throw new Error(py.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[c]=e}if(Gd.sizeFromShape(l)!==a)throw new Error(py.getSparseReshapeInputOutputMismatchErrorMessage(r,l));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=Gd.getArrayFromDType(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],l]}const k_={kernelName:"SparseReshape",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(s.dataId).values),i=n.data.get(r.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,p]=w_(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};function v_(e,t,n,r,s,a=!1,o=0){const i=r.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?s[i-1]+1:0;if(c<0)throw new Error(py.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=c;const h=p.reduce(((e,t)=>e*t),1),d=Gd.getArrayFromDType(n,h);if(0===i)return c>0&&d.fill(o),[d,p];if(c<=0)throw new Error(py.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=s[f];for(;;){let t=0;if(m<i){if(t=s[m],y===t){++m;continue}if(y>=t)throw new Error(py.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(py.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(o,g*u,y*u);for(let t=f;t<m;++t){const n=r[t];if(n<0||n>=l[0])throw new Error(py.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],l[0]));for(let t=0;t<u;t++)d[y*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>i)break}return g<c&&d.fill(o,g*u,c*u),[d,p]}const N_={kernelName:"SparseSegmentMean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=v_(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}};const S_={kernelName:"SparseSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=v_(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}};const I_={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:h}=py.calculateShapes(a,s,i),d=!1,f=n.bufferSync(s);let m;switch(a.dtype){case"bool":m=n_(f,n.bufferSync(a),i,h,c,u,l,p,Boolean(n.data.get(o.dataId).values[0]),d);break;case"float32":m=n_(f,n.bufferSync(a),i,h,c,u,l,p,n.data.get(o.dataId).values[0],d);break;case"int32":m=n_(f,n.bufferSync(a),i,h,c,u,l,p,n.data.get(o.dataId).values[0],d);break;case"string":m=n_(f,n.bufferSync(a),i,h,c,u,l,p,Gd.decodeString(n.data.get(o.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}};const T_={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=Gd.parseAxisParam(o,s.shape)[0],l=py.prepareSplitSize(s,a,i),u=new Array(s.shape.length).fill(0),c=s.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const r=qE({inputs:{x:s},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,r}))}},E_=XT((e=>Math.sqrt(e))),$_={kernelName:"Sqrt",backendName:"cpu",kernelFunc:DT("Sqrt",(e=>Math.sqrt(e)))},C_={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;RT(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},A_=VT(((e,t)=>{const n=e-t;return n*n})),__={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:lE("SquaredDifference",A_)},R_={kernelName:"Step",backendName:"cpu",kernelFunc:DT("Step",((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}))};function D_(e,t,n,r){const s=og(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+r[e];s.set(t.get(...o),...a)}return s}const F_={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r;RT(s,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Ug.sliceInfo(s.shape,a,o,i,l,u,c,p,h);let k;if(m)k=fE({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){Gd.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=Ug.computeOutShape(b,x,w),t=qE({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=fE({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=D_(d,n.bufferSync(s),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class O_{constructor(e,t,n,r,s,a){this.separator=Gd.encodeString(e),this.nGramWidths=t,this.leftPad=Gd.encodeString(n),this.rightPad=Gd.encodeString(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let o=0;o<s;++o){const i=this.getPadWidth(a),l=Math.max(0,i-o),u=Math.max(0,i-(s-(o+1))),c=a-(l+u),p=t+(l>0?0:o-i);let h=0;h+=l*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=u*this.rightPad.length;h+=(l+u+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=Gd.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,a);this.createNGrams(e,r,o,s,l,a),s+=l})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,l=1;this.createNGrams(e,r,o,s,l,i)}}return[o,a]}}function M_(e,t,n,r,s,a,o,i){return new O_(n,r,s,a,o,i).compute(e,t)}const L_={kernelName:"StringNGrams",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.data.get(c.dataId).values,d=n.data.get(p.dataId).values,[f,m]=M_(h,d,s,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};function z_(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function B_(e,t,n){const r=e.length,s=[];let a=0,o=0;const i=new Array(r);for(let l=0;l<r;++l){const r=s.length;z_(e[l],t,n,s);const u=s.length-r;i[l]=u,a+=u,o=Math.max(o,u)}const l=Gd.getArrayFromDType("int32",2*a),u=new Array(a),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=s[p],++p;return[l,u,c]}const P_={kernelName:"StringSplit",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,p]=B_(i,l,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};function V_(e,t){const n=Gd.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=Gd.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const W_={kernelName:"StringToHashBucketFast",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=V_(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",o)}},U_={kernelName:"Tan",backendName:"cpu",kernelFunc:DT("Tan",(e=>Math.tan(e)))},G_=DT("Tanh",(e=>Math.tanh(e)));function H_(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=og(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const q_=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function j_(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(a-s/2);j_(e,t,Math.max(n,Math.floor(t-a*i/s+l)),Math.min(r,Math.floor(t+(s-a)*i/s+l)))}const s=e[t];let a=n,o=r;for(Gd.swap(e,n,t),q_(e[r],s)>0&&Gd.swap(e,n,r);a<o;){for(Gd.swap(e,a,o),a++,o--;q_(e[a],s)<0;)a+=1;for(;q_(e[o],s)>0;)o-=1}0===q_(e[n],s)?Gd.swap(e,n,o):(o+=1,Gd.swap(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function K_(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],l=Gd.getTypedArrayFromDType(n,o*r),u=Gd.getTypedArrayFromDType("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(j_(o,r),o=o.slice(0,r)),s&&o.sort(q_);const c=t*r,p=l.subarray(c,c+r),h=u.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[og(c,n,l),og(c,"int32",u)]}function X_(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Gd.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Gd.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Gd.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function Y_(e,t,n,r,s,a,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*r+i*s+l*a+u]:c}function Z_(e,t,n,r,s,a,o,i,l,u,c){return Y_(e,t,n,r,s,a,o,Math.round(i),Math.round(l),u,c)}function J_(e,t,n,r,s,a,o,i,l,u,c){const p=Math.floor(i),h=Math.floor(l),d=p+1,f=h+1;return(d-i)*((f-l)*Y_(e,t,n,r,s,a,o,p,h,u,c)+(l-h)*Y_(e,t,n,r,s,a,o,p,f,u,c))+(i-p)*((f-l)*Y_(e,t,n,r,s,a,o,d,h,u,c)+(l-h)*Y_(e,t,n,r,s,a,o,d,f,u,c))}function Q_(e,t,n,r){const s=Gd.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const o={},i=new Int32Array(n[s]),l=new vf(a,r,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,u.push(t)}}const p=a.slice();p[1]=Object.keys(o).length;const h=new vf(p,r);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)h.set(l.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const eR=[bE,wE,kE,vE,dE,NE,EE,$E,CE,AE,_E,RE,DE,FE,OE,PE,VE,WE,UE,yE,GE,KE,ZE,JE,iE,e$,t$,tE,n$,i$,u$,c$,p$,h$,d$,f$,m$,g$,y$,b$,x$,w$,k$,N$,S$,I$,T$,E$,$$,C$,M$,MT,L$,P$,j$,Y$,J$,eC,cC,hC,dC,mC,gC,yC,bC,wC,vC,SC,TC,zT,EC,a$,$C,CC,AC,PT,RC,FC,MC,zC,BC,PC,VC,WC,UC,GC,jC,XC,YC,ZC,JC,QC,tA,nA,rA,aA,oA,iA,cA,D$,hA,fA,gA,bA,wA,kA,SA,TA,EA,$A,GT,AA,OA,LA,UA,HA,sE,nC,qA,qT,KT,mE,jA,KA,XA,YA,ZA,JA,QA,t_,r_,i_,l_,p_,JT,h_,d_,f_,jE,uA,g_,y_,x_,k_,N_,S_,I_,T_,$_,C_,__,R_,F_,L_,P_,W_,oC,O$,U_,{kernelName:"Tanh",backendName:"cpu",kernelFunc:G_},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;RT(s,"tile");const o=H_(n.bufferSync(s),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r;RT(s,"topk");const i=n.data.get(s.dataId).values,[l,u]=K_(i,s.shape,s.dtype,a,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:"Transform",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,p,h,d]=s.shape,[f,m]=null!=u?u:[p,h],g=[c,f,m,d],y=Gd.computeStrides(s.shape),b=y[0],x=y[1],w=y[2],k=Gd.computeStrides(g),v=k[0],N=k[1],S=k[2],I=Gd.getTypedArrayFromDType(s.dtype,Gd.sizeFromShape(g));I.fill(l);const T=r.data.get(s.dataId).values,E=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?E:E.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<d;++s){let a;const u=t[6]*r+t[7]*n+1;if(0===u)continue;const c=(t[0]*r+t[1]*n+t[2])/u,d=(t[3]*r+t[4]*n+t[5])/u,f=X_(c,h,i),m=X_(d,p,i);switch(o){case"nearest":a=Z_(T,p,h,b,x,w,e,m,f,s,l);break;case"bilinear":a=J_(T,p,h,b,x,w,e,m,f,s,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}I[e*v+n*N+r*S+s]=a}return r.makeTensorInfo(g,s.dtype,I)}return{dataId:r.write(I,g,s.dtype),shape:s.shape,dtype:s.dtype}}},TE,{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;RT(a,"unique");const o=r.data.get(a.dataId).values,{outputValues:i,outputShape:l,indices:u}=Q_(o,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s.shape.length,i=s.shape[a],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==a&&(l[u++]=s.shape[e]);const c=new Array(o).fill(0),p=s.shape.slice();p[a]=1;const h=new Array(i);for(let e=0;e<h.length;e++){c[a]=e;const t=qE({inputs:{x:s},backend:n,attrs:{begin:c,size:p}});h[e]=fE({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return h}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r;RT(s,"unsortedSegmentSum");const i=[],l=[],u=s.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=Z$({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=Gd.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=B$({inputs:{a:r,b:c},backend:n}),o=oE({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=R$({inputs:{a:o,b:s},backend:n}),p=F$({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(p),l.push(r),l.push(a),l.push(o),l.push(u),l.push(p)}const p=IA({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},NA];for(const e of eR)Vd(e);const tR=wx.whereImpl;class nR extends Ch{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new $h(this,_x())}nextDataId(){return nR.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,$d().get("IS_NODE")&&py.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Gd.isString(n[0])){const s=n.map((e=>Gd.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return py.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Gd.decodeString(e)));return og(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return og(e.shape,e.dtype,t)}makeOutput(e,t,n){return _x().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Gd.now();e();return{kernelMs:Gd.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){RT([e],"where");const t=this.readSync(e.dataId);return tR(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}nR.nextDataId=0;function rR(){let e,t,n,r,s,a,o,i,l,u;return 2===$d().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",o="out vec4 outputColor;",i=$d().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function sR(e,t,n="index"){const r=Gd.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function aR(e,t,n="index"){const r=Gd.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / outShapeStrides[${s}]`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function oR(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${r[s]}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}function iR(e){const t=Gd.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Mx("cpu",(()=>new nR),1);const lR="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:uR}=py;function cR(e,t,n){const r=[];if(e.forEach((e=>{const t=Gd.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=kR(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?hR(e,r):pR(e,r);const a=e.shapeInfo.logicalShape,o=t.logicalShape;a.length<=o.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=uR(e.shapeInfo.logicalShape,t.logicalShape),l=wR(o),u=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+u]} = 0;`)).join("\n");let h="";h=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+u]}`)).join(", ");let d="return outputValue;";const f=1===Gd.sizeFromShape(e.shapeInfo.logicalShape),m=1===Gd.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&Gd.arraysEqual(o,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=wR(l),c=uR(e.shapeInfo.logicalShape,t.logicalShape),p=l-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\n");let f="";f=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", ");return`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      return get${r}(${f});\n    }\n  `}(e,t));return s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=rR(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${dR}\n    ${fR}\n    ${mR}\n  `}(i);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return yR();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Gd.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let o=a,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return yR();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(Gd.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${aR(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=sR(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${aR(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=sR(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=sR(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=sR(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=gR);return[p,l,c,s,u,a,n.userCode].join("\n")}function pR(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=bR(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${xR(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],o=s[1];if(1===o&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=bR(n);if(1===o)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&Gd.arraysEqual(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=Gd.squeezeShape(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${pR(vR(e,l),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${NR(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${xR(e)}\n      }\n    `;const u=a[0],c=a[1],p=bR(r);if(1===c)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;return t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=Gd.squeezeShape(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${pR(vR(e,u),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${NR(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${xR(e)}\n      }\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===o&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=bR(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:l,keptDims:u}=Gd.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${pR(vR(e,l),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${NR(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${xR(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=bR(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:l,keptDims:u}=Gd.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${pR(vR(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${NR(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${s})) +\n          depth3;\n        ${xR(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=bR(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=Gd.squeezeShape(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${pR(vR(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${NR(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${xR(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=bR(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function hR(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=rR();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=rR();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],l=rR();if(null!=a&&Gd.arraysEqual(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${hR(vR(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${NR(a,r)});\n        }\n      `}const i=rR();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2),p=c*Math.ceil(n[1]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${p}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=rR();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],p=Math.ceil(a[o-1]/2);let h=p*Math.ceil(a[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=a[o-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const dR="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fR="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mR="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",gR="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function yR(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function bR(e){return`offset${e}`}function xR(e){const t=e.name,n=Gd.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function wR(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function kR(e,t,n){const{newShape:r,keptDims:s}=Gd.squeezeShape(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):r,l=!e&&a>1&&!Gd.arraysEqual(t,n)&&r.length<a||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:s}}function vR(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function NR(e,t){return t.map((t=>e[t])).join(", ")}const SR={},IR={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function TR(e,t){SR[e]=t}function ER(e,t){if(!(e in SR)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete SR[e]}),!1),$d().getBool("SOFTWARE_WEBGL_ENABLED")&&(IR.failIfMajorPerformanceCaveat=!1);return 1===e?n.getContext("webgl",IR)||n.getContext("experimental-webgl",IR):n.getContext("webgl2",IR)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;SR[e]=n}const n=SR[e];return null==n||n.isContextLost()?(delete SR[e],ER(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),SR[e])}var $R,CR,AR,_R,RR,DR;function FR(e,t){return[t,e]}function OR(e){const t=Gd.sizeFromShape(e),n=Math.ceil(t/4);return Gd.sizeToSquarishShape(n)}function MR(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function LR(e,t){const n=e;let r,s,a,o,i,l,u,c,p,h;return 2===$d().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,l=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function zR(e,t){const n=t();return $d().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}(CR=$R||($R={}))[CR.DENSE=0]="DENSE",CR[CR.SHARED_BATCH=1]="SHARED_BATCH",(_R=AR||(AR={}))[_R.RENDER=0]="RENDER",_R[_R.UPLOAD=1]="UPLOAD",_R[_R.PIXELS=2]="PIXELS",_R[_R.DOWNLOAD=3]="DOWNLOAD",(DR=RR||(RR={}))[DR.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",DR[DR.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",DR[DR.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",DR[DR.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",DR[DR.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function BR(e){return!!($d().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function PR(e,t){return YR(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function VR(e,t){const n=YR(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(zR(e,(()=>e.shaderSource(n,t))),zR(e,(()=>e.compileShader(n))),$d().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw UR(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const WR=/ERROR: [0-9]+:([0-9]+):/g;function UR(e,t){const n=WR.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,o=s.map(((e,t)=>Gd.rightPad((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,r-1),u=o.slice(r-1,r),c=o.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Gd.rightPad(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function GR(e,t){if(zR(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function HR(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(zR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),zR(e,(()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o))),zR(e,(()=>e.enableVertexAttribArray(i))),!0)}function qR(e,t,n,r){zR(e,(()=>function(e,t,n){ZR(e,n),zR(e,(()=>e.activeTexture(e.TEXTURE0+n))),zR(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),zR(e,(()=>e.uniform1i(n,r)))}function jR(e,t,n){zR(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),zR(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function KR(e,t){zR(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),zR(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function XR(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function YR(e,t,n){const r=zR(e,(()=>t()));if(null==r)throw new Error(n);return r}function ZR(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function JR(e,t=2){return Gd.sizeFromShape(e.slice(0,e.length-t))}function QR(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function eD(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[JR(e),...QR(e)]),t}function tD(e){return e%2==0}function nD(e,t){if(e=e.slice(-2),t=t.slice(-2),Gd.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(tD(n)&&tD(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&tD(e[0])&&tD(t[0])}let rD,sD;function aD(e){if(null==rD){const t=ER(e);rD=t.getParameter(t.MAX_TEXTURE_SIZE)}return rD}function oD(e){if(null==sD){const t=ER(e);sD=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sD)}function iD(e){if(0===e)return 0;let t;const n=ER(e);return t=lD(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:lD(n,"EXT_disjoint_timer_query")?1:0,t}function lD(e,t){return null!=e.getExtension(t)}function uD(e){try{if(null!=ER(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function cD(e){if(0===e)return!1;const t=ER(e);if(1===e){if(!lD(t,"OES_texture_float"))return!1}else if(!lD(t,"EXT_color_buffer_float"))return!1;return hD(t)}function pD(e){if(0===e)return!1;const t=ER(e);if(1!==e){if(lD(t,"EXT_color_buffer_float"))return hD(t);const e="EXT_color_buffer_half_float";if(lD(t,e)){const n=t.getExtension(e);return function(e,t){const n=LR(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!lD(t,"OES_texture_float"))return!1;if(!lD(t,"WEBGL_color_buffer_float"))return!1;return hD(t)}function hD(e){const t=LR(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function dD(e){if(2!==e)return!1;return null!=ER(e).fenceSync}function fD(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Gd.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function mD(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=cR(s,o,t),l=VR(e.gl,i),u=e.createProgram(l);return $d().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o},gD(e,t,u))}function gD(e,t,n){const r={},s={},a={},o=[];let i,l,u,c=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===$d().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const h=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];r[i]=e.getUniformLocation(n,i,h),r[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,h),t.enableShapeUniforms&&(s[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,h),a[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,h))}return t.enableShapeUniforms&&(i=e.getUniformLocation(n,"outShape",h),u=e.getUniformLocation(n,"outShapeStrides",h),l=e.getUniformLocation(n,"outTexShape",h)),t.customUniforms&&t.customUniforms.forEach(((t,r)=>{o[r]=e.getUniformLocation(n,t.name,h)})),{uniformLocations:r,customUniformLocations:o,infLoc:c,nanLoc:p,inShapesLocations:s,inTexShapesLocations:a,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}}function yD(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!Gd.arraysEqual(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!Gd.arraysEqual(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function bD(e){return $d().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class xD{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=py.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=bD(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function wD(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function kD(e,t){return 1===t?[e]:wD(e,t)}function vD(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}class ND{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=py.assertAndGetBroadcastShape(t,n);const s=this.outputShape.length;this.enableShapeUniforms=bD(s);let a="";if(r)if(0===s||1===Gd.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${wR(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=kD("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function SD(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const ID={kernelName:"Identity",backendName:"webgl",kernelFunc:SD};function TD(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(a.dataId),i=SD({inputs:{x:r},backend:n}),l=SD({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:l},a}const ED={kernelName:"Complex",backendName:"webgl",kernelFunc:TD},$D="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const CD={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,o=n.makeTensorInfo([],"float32",Gd.createScalarValue(a,"float32")),i=$d().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND($D,s.shape,o.shape):new xD("return (a < 0.) ? b * a : a;",s.shape,o.shape),l=n.runWebGLProgram(i,[s,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},AD="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const _D={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=$d().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND(AD,r.shape,s.shape):new xD("return (a < 0.) ? b * a : a;",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}};class RD{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class DD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function FD({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:o}=s,i=a,l=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=$d().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new DD(o.shape,t):new RD(o.shape,e),i.runWebGLProgram(u,[o],l)}}function OD({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(r&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:r.dataId,dtype:r.dtype,shape:u.shape},o=new xD(e,l.shape,u.shape);return c.runWebGLProgram(o,[s,a],Lf(n.dtype,r.dtype))})),a=TD({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const p=a||Lf(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=s){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?py.fromUint8ToStringArray(e):e,r="string"===l.dtype?py.fromUint8ToStringArray(t):t,[a,o]=s(l.shape,u.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=a,i}let h;return h=$d().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new ND(t,l.shape,u.shape,n):new xD(e,l.shape,u.shape),c.runWebGLProgram(h,[l,u],p)}}function MD(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?AD:"return (a < 0.) ? b * a : a;";if("leakyrelu"===e)return t?$D:"return (a < 0.) ? b * a : a;";if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class LD{constructor(e,t,n,r=!1,s=!1,a=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=bD(this.outputShape.length);const u=r?e[1]:e[2],c=Math.ceil(u/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const zD="return areal * breal - aimag * bimag;",BD="return areal * bimag + aimag * breal;";class PD{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=py.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var VD={};t(VD,"simpleAbsImpl",(()=>xE)),t(VD,"addImpl",(()=>cE)),t(VD,"bincountImpl",(()=>XE)),t(VD,"bincountReduceImpl",(()=>YE)),t(VD,"castImpl",(()=>aE)),t(VD,"ceilImpl",(()=>QE)),t(VD,"concatImpl",(()=>r$)),t(VD,"equalImpl",(()=>z$)),t(VD,"expImpl",(()=>K$)),t(VD,"expm1Impl",(()=>Q$)),t(VD,"floorImpl",(()=>fC)),t(VD,"gatherNdImpl",(()=>xC)),t(VD,"gatherV2Impl",(()=>kC)),t(VD,"greaterImpl",(()=>NC)),t(VD,"greaterEqualImpl",(()=>IC)),t(VD,"lessImpl",(()=>_C)),t(VD,"lessEqualImpl",(()=>DC)),t(VD,"linSpaceImpl",(()=>OC)),t(VD,"logImpl",(()=>LC)),t(VD,"maxImpl",(()=>HC)),t(VD,"maximumImpl",(()=>KC)),t(VD,"minimumImpl",(()=>sA)),t(VD,"multiplyImpl",(()=>A$)),t(VD,"negImpl",(()=>pA)),t(VD,"notEqualImpl",(()=>xA)),t(VD,"prodImpl",(()=>CA)),t(VD,"raggedGatherImpl",(()=>FA)),t(VD,"raggedRangeImpl",(()=>MA)),t(VD,"raggedTensorToTensorImpl",(()=>WA)),t(VD,"rangeImpl",(()=>GA)),t(VD,"rsqrtImpl",(()=>e_)),t(VD,"scatterImpl",(()=>n_)),t(VD,"sigmoidImpl",(()=>YT)),t(VD,"sliceImpl",(()=>HE)),t(VD,"sparseFillEmptyRowsImpl",(()=>b_)),t(VD,"sparseReshapeImpl",(()=>w_)),t(VD,"sparseSegmentReductionImpl",(()=>v_)),t(VD,"sqrtImpl",(()=>E_)),t(VD,"squaredDifferenceImpl",(()=>A_)),t(VD,"stridedSliceImpl",(()=>D_)),t(VD,"stringNGramsImpl",(()=>M_)),t(VD,"stringSplitImpl",(()=>B_)),t(VD,"stringToHashBucketFastImpl",(()=>V_)),t(VD,"subImpl",(()=>rC)),t(VD,"tileImpl",(()=>H_)),t(VD,"topKImpl",(()=>K_)),t(VD,"transposeImpl",(()=>SE)),t(VD,"uniqueImpl",(()=>Q_));const{addImpl:WD,bincountImpl:UD,bincountReduceImpl:GD,castImpl:HD,ceilImpl:qD,concatImpl:jD,equalImpl:KD,expImpl:XD,expm1Impl:YD,floorImpl:ZD,gatherNdImpl:JD,gatherV2Impl:QD,greaterImpl:eF,greaterEqualImpl:tF,lessImpl:nF,lessEqualImpl:rF,linSpaceImpl:sF,logImpl:aF,maxImpl:oF,maximumImpl:iF,minimumImpl:lF,multiplyImpl:uF,negImpl:cF,notEqualImpl:pF,prodImpl:hF,raggedGatherImpl:dF,raggedRangeImpl:fF,raggedTensorToTensorImpl:mF,rangeImpl:gF,rsqrtImpl:yF,scatterImpl:bF,sigmoidImpl:xF,simpleAbsImpl:wF,sliceImpl:kF,sparseFillEmptyRowsImpl:vF,sparseReshapeImpl:NF,sparseSegmentReductionImpl:SF,sqrtImpl:IF,stridedSliceImpl:TF,stringNGramsImpl:EF,stringSplitImpl:$F,stringToHashBucketFastImpl:CF,subImpl:AF,tileImpl:_F,topKImpl:RF,transposeImpl:DF,uniqueImpl:FF}=VD;function OF(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=py.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new PD(zD,r.shape,s.shape),o=new PD(BD,r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],l=n.runWebGLProgram(a,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=TD({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[o,i]=uF(r.shape,s.shape,e.values,t.values,a),l=n.makeTensorInfo(i,a);return n.texData.get(l.dataId).values=o,l}let o;return o=$d().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND("return a * b;",r.shape,s.shape):new xD("return a * b;",r.shape,s.shape),n.runWebGLProgram(o,[r,s],a)}const MF={kernelName:"Multiply",backendName:"webgl",kernelFunc:OF};class LF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?oR(["r","c","d"],"inputShape"):sR(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iR(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function zF(e,t,n){const r=[JR(e.shape),...QR(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[JR(t),...QR(t)],o=new LF(a,r),i=[r],l=n.runWebGLProgram(o,[s],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}function BF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=n,i=Gd.sizeFromShape(s.shape),l=Gd.inferFromImplicitShape(a,i),u=Gd.sizeFromShape(l);Gd.assert(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(s.dataId);return!c.isPacked||nD(s.shape,l)||null!==c.texture&&nD(c.shape,l)?(o.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype}):zF(s,l,o)}const PF={kernelName:"Reshape",backendName:"webgl",kernelFunc:BF};class VF{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${Gd.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";s%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class WF{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${l});\n      }\n    `}}function UF(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=py.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:l,outSize:u}=s[o];let c,p;c="mean"===n?0===o?new VF({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new VF({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new WF({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),p=a,a=r.runWebGLProgram(c,[a],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return a}class GF{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=wR(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class HF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=wR(this.rank),s=wD("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function qF(e,t,n){const r=$d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new HF(e.shape,t):new GF(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function jF(e,t,n,r){const s=t,a=e.shape.length,o=Gd.parseAxisParam(s,e.shape);let i=o;const l=py.getAxesPermutation(i,a),u=null!=l;let c=e;u&&(c=qF(e,l,r),i=py.getInnerMostAxes(i.length,a)),py.assertAxesAreInnerMostDims("sum",i,a);const[p,h]=py.computeOutAndReduceShapes(c.shape,i);let d=p;n&&(d=py.expandShapeToKeepDim(p,o));const f=Gd.sizeFromShape(h),m=BF({inputs:{x:c},attrs:{shape:[Gd.sizeFromShape(e.shape)/f,f]},backend:r}),g=UF(m,zf(e.dtype),"sum",r),y=BF({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),u&&r.disposeIntermediateTensorInfo(c),y}function KF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;return jF(s,a,o,n)}const XF={kernelName:"Sum",backendName:"webgl",kernelFunc:KF};function YF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,o=n,i=s.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=s.shape[a[e]];let u;if(o.shouldExecuteOnCPU([s])){const e=o.texData.get(s.dataId).values,t=DF(e,s.shape,s.dtype,a,l);u=o.makeTensorInfo(l,s.dtype);o.texData.get(u.dataId).values=t}else u=qF(s,a,o);return u}const ZF={kernelName:"Transpose",backendName:"webgl",kernelFunc:YF};function JF({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,p=n?e.shape[u-2]:e.shape[u-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=Gd.sizeFromShape(m),b=Gd.sizeFromShape(g),x=_g.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);Gd.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],k=r?[b,f,h]:[b,h,f],v=BF({inputs:{x:e},backend:s,attrs:{shape:w}}),N=BF({inputs:{x:t},backend:s,attrs:{shape:k}}),S=[v,N],I=Math.max(y,b),T=n?v.shape[1]:v.shape[2],E=null!=a,$=null!=o,C="leakyrelu"===l,A=null!=l?MD(l,!0):null;let _;if((1===d||1===f)&&T>1e3&&!1===(E||$||C||null!=A)){let e=v,t=N;n&&(e=YF({inputs:{x:v},backend:s,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=YF({inputs:{x:N},backend:s,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let o=e;1!==f&&(o=BF({inputs:{x:e},backend:s,attrs:{shape:[I,T,1]}}),S.push(o));const i=1===f?2:1;let l=t;a&&(l=BF({inputs:{x:t},backend:s,attrs:{shape:[I,1,T]}}),S.push(l));const u=OF({inputs:{a:o,b:l},backend:s});_=KF({inputs:{x:u},backend:s,attrs:{axis:i,keepDims:!0}}),S.push(u)}else{const l=Lf(e.dtype,t.dtype),u=new LD(w,k,[I,d,f],n,r,E,A,$,C),c=[v,N];if(null!=a&&c.push(a),$&&c.push(o),C){const e=s.makeTensorInfo([],"float32",Gd.createScalarValue(i,"float32"));c.push(e),S.push(e)}_=s.runWebGLProgram(u,c,l)}const R=BF({inputs:{x:_},backend:s,attrs:{shape:x}});S.push(_);for(const e of S)s.disposeIntermediateTensorInfo(e);return R}const QF={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;return JF({a:s,b:a,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}};const eO={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=wF(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=$d().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new DD(r.shape,"return abs(x);"):new RD(r.shape,"return abs(x);"),n.runWebGLProgram(s,[r],r.dtype)}},tO={kernelName:"Acos",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},nO={kernelName:"Acosh",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},rO={kernelName:"Add",backendName:"webgl",kernelFunc:OD({opSnippet:"return a + b;",packedOpSnippet:"return a + b;",supportsComplex:!0,cpuKernelImpl:WD})};class sO{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class aO{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const oO={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return SD({inputs:{x:s[0]},backend:r});if(s.length>$d().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>Lf(e,t))),o=s.map((e=>e.shape)),i=$d().getBool("WEBGL_PACK")?new aO(s[0].shape,o):new sO(s[0].shape,o);return r.runWebGLProgram(i,s,a)}};const iO={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=Gd.parseAxisParam(a,s.shape);let u=l;const c=py.getAxesPermutation(u,i);let p=s;null!=c&&(p=YF({inputs:{x:s},backend:n,attrs:{perm:c}}),u=py.getInnerMostAxes(u.length,i)),py.assertAxesAreInnerMostDims("all",u,i);const[h,d]=py.computeOutAndReduceShapes(p.shape,u),f=BF({inputs:{x:p},backend:n,attrs:{shape:[-1,Gd.sizeFromShape(d)]}}),m=UF(f,f.dtype,"all",n);let g;if(o){g=BF({inputs:{x:m},backend:n,attrs:{shape:py.expandShapeToKeepDim(h,l)}})}else g=BF({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};const lO={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=Gd.parseAxisParam(a,s.shape);let u=l;const c=py.getAxesPermutation(u,i);let p=s;null!=c&&(p=YF({inputs:{x:s},backend:n,attrs:{perm:c}}),u=py.getInnerMostAxes(u.length,i)),py.assertAxesAreInnerMostDims("any",u,i);const[h,d]=py.computeOutAndReduceShapes(p.shape,u),f=BF({inputs:{x:p},backend:n,attrs:{shape:[-1,Gd.sizeFromShape(d)]}}),m=UF(f,f.dtype,"any",n);let g;if(o){g=BF({inputs:{x:m},backend:n,attrs:{shape:py.expandShapeToKeepDim(h,l)}})}else g=BF({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};class uO{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class cO{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Gd.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,l=wR(i),u=kD("coords",i);let c,p;if(1===a){p=i+1;const e=wR(p);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else p=i,c=`\n        ${l} sourceLocR = coords;\n        ++${u[i-1]};\n        ${l} sourceLocG = coords;\n        ++${u[i-2]};\n        ${l} sourceLocA = coords;\n        --${u[i-1]};\n        ${l} sourceLocB = coords;\n        --${u[i-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),d="."+h[p-1],f=h.map((e=>"int "+e)),m=kD("sourceLocR",p-1).concat("inIdx.r"),g=kD("sourceLocG",p-1).concat("inIdx.g"),y=kD("sourceLocB",p-1).concat("inIdx.b"),b=kD("sourceLocA",p-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function pO(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const o=py.computeOptimalWindowSize(a),i={windowSize:o,inSize:a,batchSize:s,outSize:Math.ceil(a/o)},l=new uO(i,n,null==r),u=[t];null!=r&&u.push(r);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const p=pO(e,t,n,c);return e.disposeIntermediateTensorInfo(c),p}function hO(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=s[s.length-1],o=py.computeOptimalWindowSize(a),i=new cO(s,o,n,null==r),l=null==r?[t]:[t,r],u=e.runWebGLProgram(i,l,"int32");if(u.shape.length===t.shape.length){const r=hO(e,t,n,u);return e.disposeIntermediateTensorInfo(u),r}return u}function dO(e,t,n,r){const s=[n];if(py.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!$d().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=py.computeOutAndReduceShapes(o.shape,s),u=Gd.sizeFromShape(l),c=BF({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const p=pO(e,c,r);n.push(p);const h=BF({inputs:{x:p},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return hO(e,t,r)}const fO={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=Gd.parseAxisParam(a,s.shape);const i=py.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=YF({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=py.getInnerMostAxes(o.length,l.shape.length)),py.assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const c=dO(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const mO={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=Gd.parseAxisParam(a,s.shape);const i=py.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=YF({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=py.getInnerMostAxes(o.length,l.shape.length)),py.assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const c=dO(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},gO={kernelName:"Asin",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},yO={kernelName:"Asinh",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},bO={kernelName:"Atan",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},xO={kernelName:"Atan2",backendName:"webgl",kernelFunc:OD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})},wO={kernelName:"Atanh",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class kO{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class vO{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const NO={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;fD(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Gd.assert(py.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=py.computePool2DInfo(s.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&Gd.arraysEqual(u.inShape,u.outShape))return SD({inputs:{x:s},backend:n});const c=new kO(u,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}};const SO={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r,c=py.computePool3DInfo(s.shape,a,o,[1,1,1],i,l,u),p=new vO(c,"avg",!1);return n.runWebGLProgram(p,[s],"float32")}};class IO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class TO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const EO={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=py.computePool3DInfo(o.shape,i,l,[1,1,1],u,c),h=new TO(p);return n.runWebGLProgram(h,[s],o.dtype)}};const $O={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;fD([s,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=py.computePool2DInfo(o.shape,i,l,1,u),p=new IO(c);return n.runWebGLProgram(p,[s],o.dtype)}};const CO={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;return JF({a:s,b:a,transposeA:o,transposeB:i,backend:n})}};class AO{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],py.assertAndGetBroadcastShape(e,t),py.assertAndGetBroadcastShape(e,n);let o="0.0";null!=r&&(py.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(py.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class _O{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],py.assertAndGetBroadcastShape(e,t),py.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=r&&(py.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(py.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const RO={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:o,scale:i}=e;Gd.assert(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Gd.assert(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Gd.assert(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[r,s,a];let c=null;null!=o&&(c=o.shape,u.push(o));let p=null;null!=i&&(p=i.shape,u.push(i));const h=$d().getBool("WEBGL_PACK_NORMALIZATION")?new _O(r.shape,s.shape,a.shape,c,p,l):new AO(r.shape,s.shape,a.shape,c,p,l);return t.runWebGLProgram(h,u,u[0].dtype)}};class DO{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=wR(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return FO.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${FO[t]} = start[${t}] + coords.${FO[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const FO=["x","y","z","w","u","v"];class OO{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=wR(this.rank),n=kD("coords",this.rank),r=kD("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function MO(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r,[i,l]=Ug.parseSliceParams(s,a,o);if(Ug.assertParamsValid(s,i,l),0===Gd.sizeFromShape(l))return n.makeTensorInfo(l,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=kF(e.values,i,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,t)}const{isPacked:u}=n.texData.get(s.dataId),c=Ug.isSliceContinous(s.shape,i,l);if(u||!c){const e=$d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new OO(l):new DO(l),t=[i];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),o=r.texData.get(a.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=Ug.computeFlatOffset(t,Gd.computeStrides(e.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||e.dataId};const l=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,l+1),a}(s,i,l,n)}const LO={kernelName:"Slice",backendName:"webgl",kernelFunc:MO},zO={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;Gd.assert(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=py.getReshaped(s.shape,a,i),u=py.getPermuted(l.length,a.length),c=py.getReshapedPermuted(s.shape,a,i),p=py.getSliceBeginCoords(o,a.length),h=py.getSliceSize(c,o,a.length),d=[],f=BF({inputs:{x:s},backend:n,attrs:{shape:l}}),m=YF({inputs:{x:f},backend:n,attrs:{perm:u}}),g=BF({inputs:{x:m},backend:n,attrs:{shape:c}}),y=MO({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const BO={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=n.readSync(s.dataId),l=n.readSync(a.dataId),u=UD(i,l,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,u)}};const PO={kernelName:"BroadcastArgs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),o=n.readSync(s.dataId),i=py.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},VO=OD({opSnippet:"return float(a != b);",cpuKernelImpl:pF,dtype:"bool"}),WO={kernelName:"NotEqual",backendName:"webgl",kernelFunc:VO};function UO(e){const{inputs:t,backend:n}=e,{input:r}=t;return SD({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const GO={kernelName:"Real",backendName:"webgl",kernelFunc:UO};function HO(e,t){const n=new RD(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const qO={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===a.dtype)return SD({inputs:{x:a},backend:r});const t=Hx(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=TD({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=UO({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!Gd.hasEncodingLoss(a.dtype,o)){const e=SD({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(r.shouldExecuteOnCPU([a])){const e=r.texData.get(a.dataId).values,[t,n,s]=HD(e,a.shape,a.dtype,o);return r.makeTensorInfo(t,n,s)}if("int32"===o)return HO(a,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",Gd.getTypedArrayFromDType("bool",1)),t=VO({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},jO={kernelName:"Ceil",backendName:"webgl",kernelFunc:FD({opSnippet:"return ceil(x);",packedOpSnippet:"return ceil(x);",cpuKernelImpl:qD})};class KO{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class XO{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const YO={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:o}=r;let i;i=$d().getBool("WEBGL_PACK_CLIP")?new XO(s.shape):new KO(s.shape);const l=[[a],[o]];return n.runWebGLProgram(i,[s],s.dtype,l)}};class ZO{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function JO(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const QO={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new ZO(r.shape),o=[JO(r,s.complexTensorInfos.real),JO(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class eM{constructor(e){this.outputShape=[],this.outputShape=py.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class tM{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=py.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=wR(r),a=kD("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let p=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${nM(o,l,t)}),\n            vec2(${nM(u,l,t)}));\n        }`}const h=i.length,d=i[i.length-1];p+=`\n        return getChannel(\n          getT${h}(${nM(o,l,d)}),\n          vec2(${nM(u,l,d)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function nM(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function rM(e){const{inputs:t,backend:n}=e,{input:r}=t;return SD({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const sM={kernelName:"Imag",backendName:"webgl",kernelFunc:rM};function aM(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>UO({inputs:{input:e},backend:n}))),s=e.map((e=>rM({inputs:{input:e},backend:n}))),a=aM(r,t,n),o=aM(s,t,n),i=TD({inputs:{real:a,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=Gd.sizeFromShape(e.shape.slice(t));return BF({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=py.computeOutShape(s.map((e=>e.shape)),1),i=1===s[0].shape[0],l=jD(a,o,r,i),u=py.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,r,l);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=$d().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>a){const r=[];for(let s=0;s<e.length;s+=a){const o=e.slice(s,s+a);r.push(aM(o,t,n))}const s=aM(r,t,n);for(const e of r)n.disposeIntermediateTensorInfo(e);return s}if($d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new tM(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const{tensors2D:o,outShape:i}=function(e,t,n){const r=py.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>BF({inputs:{x:e},attrs:{shape:[-1,Gd.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),l=new eM(o.map((e=>e.shape))),u=n.runWebGLProgram(l,o,r);o.forEach((e=>n.disposeIntermediateTensorInfo(e)));const c=BF({inputs:{x:u},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(u),c}function oM(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=Gd.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));py.assertParamsConsistent(o,a);const i=py.computeOutShape(t.map((e=>e.shape)),a);if(0===Gd.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter((e=>Gd.sizeFromShape(e.shape)>0));return 1===l.length?SD({inputs:{x:l[0]},backend:n}):aM(l,a,n)}const iM={kernelName:"Concat",backendName:"webgl",kernelFunc:oM};class lM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class uM{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bD(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(p+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<u&&(a%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,p+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=a%2==0?Gd.nearestLargerEven(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,p+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):p+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(a%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(p+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(p+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(p+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let h="",d="";n&&(h=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:s?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${h}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class pM{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length);const{dataFormat:n}=t,r=rR(),s="channelsLast"===n,a=s?1:2,o=s?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${r.output} = result;\n      }\n    `}}function hM(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function dM({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const l=e.shape,u=r.texData.get(e.dataId),c=n.inChannels,p=l[0]*l[1]*l[2],h=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=hM(a.shape,d);null!=e&&(a=BF({inputs:{x:a},backend:r,attrs:{shape:e}}),m.push(a))}if(null!=s){const e=hM(s.shape,d);null!=e&&(s=BF({inputs:{x:s},backend:r,attrs:{shape:e}}),m.push(s))}if(!((1===p||1===h)&&c>1e3)&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&Gd.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Gd.assert(nD(u.shape,p.shape),(()=>`packed reshape ${u.shape} to ${p.shape} isn't free`));const d=BF({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=JF({a:p,b:d,backend:r,transposeA:false,transposeB:false,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),y=r.texData.get(g.dataId);Gd.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=h,y.shape=n.outShape,f=SD({inputs:{x:g},backend:r}),f.shape=n.outShape,m.push(g)}else{const l=n.outHeight*n.outWidth,u=BF({inputs:{x:e},backend:r,attrs:{shape:d?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=BF({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=JF({a:d?u:c,b:d?c:u,transposeA:!d,transposeB:false,backend:r,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o});f=BF({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(p)}for(const e of m)r.disposeIntermediateTensorInfo(e);return f}function fM({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=h*p,y=[n.batchSize,m,g],b=[];if(null!=a){const e=hM(a.shape,f);null!=e&&(a=BF({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}if(null!=s){const e=hM(s.shape,f);null!=e&&(s=BF({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}const x=BF({inputs:{x:t},backend:r,attrs:{shape:[1,m,Gd.sizeFromShape(t.shape)/m]}});b.push(x);const w=new pM(y,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],v=r.runWebGLProgram(w,[e],"float32",k),N=BF({inputs:{x:v},backend:r,attrs:{shape:y}});b.push(v),b.push(N);const S=null!=s,I=null!=a,T="leakyrelu"===i,E=i?MD(i,!0):null,$=new LD(f?N.shape:x.shape,f?x.shape:N.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,E,I,T),C=f?[N,x]:[x,N];if(s&&C.push(s),I&&C.push(a),T){const e=r.makeTensorInfo([],"float32",Gd.createScalarValue(o,"float32"));C.push(e),b.push(e)}const A=r.runWebGLProgram($,C,"float32"),_=BF({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});b.push(A);for(const e of b)r.disposeIntermediateTensorInfo(e);return _}const mM={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r,p=py.convertConv2DDataFormat(l),h=py.computeConv2DInfo(s.shape,a.shape,o,u,i,c,!1,p);let d;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===p&&$d().getBool("WEBGL_EXP_CONV")){const e=new cM(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];d=n.runWebGLProgram(e,[s,a],"float32",t)}else if($d().getBool("WEBGL_CONV_IM2COL"))d=fM({x:s,filter:a,convInfo:h,backend:n});else{const e=new lM(h);d=n.runWebGLProgram(e,[s,a],"float32")}else d=dM({x:s,filter:a,convInfo:h,backend:n});const f=BF({inputs:{x:d},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class gM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yM{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xM{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const wM={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r,p=py.convertConv2DDataFormat(l),h=py.computeConv2DInfo(s.shape,c,o,1,i,u,!1,p),d=new gM(h);return n.runWebGLProgram(d,[s,a],"float32")}};const kM={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r,p=py.convertConv2DDataFormat(u),h=py.computeConv2DInfo(o,a.shape,i,1,l,c,!1,p),d=new yM(h);return n.runWebGLProgram(d,[s,a],"float32")}};const vM={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r,u=py.computeConv3DInfo(s.shape,a.shape,o,l,i),c=new uM(u);return n.runWebGLProgram(c,[s,a],"float32")}};const NM={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:l}=r,u=py.computeConv3DInfo(s.shape,l,o,1,i),c=new bM(u);return n.runWebGLProgram(c,[s,a],"float32")}};const SM={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:l}=r,u=py.computeConv3DInfo(l,a.shape,i,1,o),c=new xM(u);return n.runWebGLProgram(c,[s,a],"float32")}},IM={kernelName:"Cos",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},TM={kernelName:"Cosh",backendName:"webgl",kernelFunc:FD({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class EM{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,l]=e,[u]=t,[c,p]=n;this.outputShape=[u,c,p,l];const h="bilinear"===r?1:0,[d,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const $M={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,c=new EM(s.shape,a.shape,i,l,u);return n.runWebGLProgram(c,[s,a,o],"float32")}};var CM,AM;(AM=CM||(CM={})).Prod="*",AM.Sum="+";class _M{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=this.op===CM.Prod?"1.0":"0.0",o=n?a:`getX(${RM(s,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=r?"end != "+(i-1):"end != 0",u=r?"end + 1":"end - 1"):(l=r?`end + pow2 < ${i}`:"end >= pow2",u=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${wR(s)} coords = getOutputCoords();\n        int end = ${DM(s,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${DM(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${RM(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function RM(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function DM(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function FM(e,t,n,r,s,a){const o=t.shape.length,i=py.getAxesPermutation([r],o);let l=t;null!=i&&(l=YF({inputs:{x:t},backend:n,attrs:{perm:i}}));const u=py.getInnerMostAxes(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=l.shape[u];let p=SD({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const r=new _M(e,l.shape,!1,a),s=[[t]],o=p;p=n.runWebGLProgram(r,[p],p.dtype,s),n.disposeIntermediateTensorInfo(o)}if(s){const t=new _M(e,l.shape,s,a),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=i){const e=YF({inputs:{x:p},backend:n,attrs:{perm:py.getUndoAxesPermutation(i)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(l),e}return p}const OM={kernelName:"Cumprod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return FM(CM.Prod,s,n,a,o,i)}};const MM={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return FM(CM.Sum,s,n,a,o,i)}};const LM={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=UD(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=GD(e,t,o,i);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class zM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const BM={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r,i=s.shape[0],l=("NHWC"===o?s.shape[1]:s.shape[2])*a,u=("NHWC"===o?s.shape[2]:s.shape[3])*a,c=("NHWC"===o?s.shape[3]:s.shape[1])/(a*a),p=new zM("NHWC"===o?[i,l,u,c]:[i,c,l,u],a,o);return n.runWebGLProgram(p,[s],s.dtype)}};class PM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bD(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class VM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bD(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,p=c;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*l};\n          `,1===i){if(t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?Gd.nearestLargerEven(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,h+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let d="",f="";n&&(d=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const WM={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;let c=l;null==c&&(c=[1,1]),Gd.assert(py.eitherStridesOrDilationsAreOne(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const p=py.computeConv2DInfo(s.shape,a.shape,o,c,i,u,!0);let h;h=$d().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new VM(p):new PM(p);const d=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[s,a],"float32",d)}};class UM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class GM{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const HM={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r,p=py.computeConv2DInfo(s.shape,c,o,i,l,u,!0),h=new UM(p);return n.runWebGLProgram(h,[s,a],"float32")}};const qM={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r,p=py.computeConv2DInfo(c,a.shape,o,i,l,u,!0),h=new GM(p);return n.runWebGLProgram(h,[s,a],"float32")}};class jM{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const KM={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=Gd.sizeFromShape(r.shape),o=BF({inputs:{x:r},backend:n,attrs:{shape:[a]}}),i=new jM(a),l=n.runWebGLProgram(i,[o],o.dtype),u=BF({inputs:{x:l},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class XM{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const YM={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r,u=py.computeDilation2DInfo(s.shape,a.shape,o,i,"NHWC",l);let c;const p=new XM(u);c=n.runWebGLProgram(p,[s,a],"float32");const h=BF({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),h}};const ZM={kernelName:"Einsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:l}=py.decodeEinsumEquation(s,a.length);py.checkEinsumDimSizes(o.length,l,a);const{path:u,steps:c}=py.getEinsumComputePath(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=py.getEinsumPermutation(d,l[t]);let s;py.isIdentityPermutation(e)?s=a[t]:(s=YF({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Gd.arraysEqual(s.shape,o)||(s=BF({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=OF({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=KF({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},JM={kernelName:"Elu",backendName:"webgl",kernelFunc:FD({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},QM={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=$d().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new xD("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},eL={kernelName:"Equal",backendName:"webgl",kernelFunc:OD({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:KD})},tL={kernelName:"Erf",backendName:"webgl",kernelFunc:FD({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${py.ERF_P};\n  float a1 = ${py.ERF_A1};\n  float a2 = ${py.ERF_A2};\n  float a3 = ${py.ERF_A3};\n  float a4 = ${py.ERF_A4};\n  float a5 = ${py.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},nL=FD({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:XD,dtype:"float32"}),rL={kernelName:"Exp",backendName:"webgl",kernelFunc:nL};function sL(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let l=s;return s<0&&(Gd.assert(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+s+1),i.splice(l,0,1),BF({inputs:{x:a},backend:r,attrs:{shape:i}})}const aL={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:sL},oL={kernelName:"Expm1",backendName:"webgl",kernelFunc:FD({opSnippet:"return exp(x) - 1.0;",packedOpSnippet:"return exp(x) - 1.0;",cpuKernelImpl:YD})};class iL{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function lL(e,t,n){const r=n.texData.get(e.dataId),s=Gd.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],o=BF({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),i=o.shape,l=new iL("real",i,t),u=new iL("imag",i,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(l,c,"float32"),h=n.runWebGLProgram(u,c,"float32"),d=TD({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const f=BF({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(d),f}const uL={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return lL(r,!1,n)}};class cL{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function pL(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||Gd.inferDtype(s),"string"===a){const e=Gd.getArrayFromDType(a,Gd.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new cL(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const hL={kernelName:"Fill",backendName:"webgl",kernelFunc:pL};class dL{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const fL={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new dL(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},mL={kernelName:"Floor",backendName:"webgl",kernelFunc:FD({opSnippet:"return floor(x);",packedOpSnippet:"return floor(x);",cpuKernelImpl:ZD})},gL={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:OD({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class yL{constructor(e){this.variableNames=["A"];const t=rR(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class bL{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=rR(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const xL={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[l,u]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[u,l],p=[u,l,a];if(i||o){const e=$d().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=wL&&e===kL||(kL=e,wL=document.createElement("canvas").getContext("2d",{willReadFrequently:kL})),wL.canvas.width=l,wL.canvas.height=u,wL.drawImage(s,0,0,l,u),s=wL.canvas}const h=n.makeTensorInfo(c,"int32");n.texData.get(h.dataId).usage=AR.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),s);const d=$d().getBool("WEBGL_PACK")?new bL(p):new yL(p),f=n.runWebGLProgram(d,[h],"int32");return n.disposeData(h.dataId),f}};let wL,kL=$d().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const vL={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=py.convertConv2DDataFormat(c),g=py.computeConv2DInfo(s.shape,a.shape,l,p,u,h,!1,m);let y;const b=[],x=null!=o,w=null!=i,k="leakyrelu"===d,v=()=>{const e=[s,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=BF({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,c)),w&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",Gd.createScalarValue(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&$d().getBool("WEBGL_EXP_CONV")){const e=d?MD(d,!0):null,t=new cM(g,x,e,w,k),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=v();y=n.runWebGLProgram(t,s,"float32",r)}else if($d().getBool("WEBGL_CONV_IM2COL"))y=fM({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=d?MD(d,!1):null,t=new lM(g,x,e,w,k),r=v();y=n.runWebGLProgram(t,r,"float32")}else y=dM({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const N=BF({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};const NL={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:h,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),Gd.assert(py.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=py.computeConv2DInfo(s.shape,a.shape,l,m,u,p,!0),y=$d().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=h?MD(h,y):null,x=[s,a],w=null!=o,k=null!=i,v="leakyrelu"===h;if(w&&x.push(o),k&&x.push(i),v){const e=n.makeTensorInfo([],"float32",Gd.createScalarValue(d,"float32"));x.push(e),f.push(e)}let N;N=y?new VM(g,w,b,k,v):new PM(g,w,b,k,v);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],I=n.runWebGLProgram(N,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class SL{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=wR(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const IL={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,o=a[a.length-1],i=Gd.sizeFromShape(r.shape),[l,u,c,p]=py.prepareAndValidate(r,s),h=BF({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),d=BF({inputs:{x:r},backend:n,attrs:{shape:[Gd.sizeFromShape(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=JD(e,t,r.dtype,u,o,c,p,r.shape,i);return n.makeTensorInfo(l,r.dtype,a.values)}const f=new SL(o,p,[u,c],r.shape),m=n.runWebGLProgram(f,[d,h],d.dtype),g=BF({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class TL{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=wR(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function EL(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r,l=Gd.parseAxisParam(o,s.shape)[0];if($d().get("DEBUG")){const e=n.readSync(a.dataId),t=s.shape[l];for(let n=0;n<e.length;++n){const r=e[n];Gd.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const u=py.segment_util.collectGatherOpShapeInfo(s,a,l,i),c=Gd.sizeFromShape(a.shape),p=[],h=BF({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=BF({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(h),p.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),r=QD(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,r.dtype,r.values)}const m=new TL(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);p.push(g);const y=BF({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const $L={kernelName:"GatherV2",backendName:"webgl",kernelFunc:EL},CL={kernelName:"Greater",backendName:"webgl",kernelFunc:OD({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:eF,dtype:"bool"})},AL={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:OD({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:tF})};const _L={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return lL(r,!0,n)}},RL={kernelName:"IsFinite",backendName:"webgl",kernelFunc:FD({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},DL={kernelName:"IsInf",backendName:"webgl",kernelFunc:FD({opSnippet:"return float(isinf(x));",dtype:"bool"})},FL={kernelName:"IsNan",backendName:"webgl",kernelFunc:FD({opSnippet:"return float(isnan(x));",dtype:"bool"})},OL={kernelName:"Less",backendName:"webgl",kernelFunc:OD({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:nF,dtype:"bool"})},ML={kernelName:"LessEqual",backendName:"webgl",kernelFunc:OD({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:rF,dtype:"bool"})};const LL={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=sF(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},zL={kernelName:"Log",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:aF})},BL={kernelName:"Log1p",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"})},PL={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:OD({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},VL={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:FD({opSnippet:"return float(!(x >= 1.0));"})},WL={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:OD({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class UL{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class GL{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const HL={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=r,u=$d().getBool("WEBGL_PACK_NORMALIZATION")?new GL(s.shape,a,o,i,l):new UL(s.shape,a,o,i,l);return n.runWebGLProgram(u,[s],s.dtype)}};class qL{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const jL={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r,p=new qL(s.shape,i,l,u,c);return n.runWebGLProgram(p,[s,a,o],s.dtype)}};function KL(e,t,n,r){const s=Gd.sizeFromShape(t),a=BF({inputs:{x:e},attrs:{shape:[Gd.sizeFromShape(e.shape)/s,s]},backend:r}),o=UF(a,e.dtype,"max",r),i=BF({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}function XL(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=s.shape.length,l=Gd.parseAxisParam(a,s.shape);let u=l;const c=py.getAxesPermutation(u,i),p=null!=c,h=n.shouldExecuteOnCPU([s]);let d=s;if(p){if(h){const e=n.texData.get(d.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=DF(e,s.shape,s.dtype,c,t);d=n.makeTensorInfo(t,s.dtype);n.texData.get(d.dataId).values=r}else d=qF(s,c,n);u=py.getInnerMostAxes(u.length,i)}py.assertAxesAreInnerMostDims("max",u,i);const[f,m]=py.computeOutAndReduceShapes(d.shape,u);let g,y=f;if(o&&(y=py.expandShapeToKeepDim(f,l)),h){const e=n.texData.get(d.dataId).values,t=oF(e,Gd.sizeFromShape(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype);n.texData.get(g.dataId).values=t}else g=KL(d,m,y,n);return p&&n.disposeIntermediateTensorInfo(d),g}const YL={kernelName:"Max",backendName:"webgl",kernelFunc:XL},ZL={kernelName:"Maximum",backendName:"webgl",kernelFunc:OD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:iF})};const JL={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;fD(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Gd.assert(py.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=py.computePool2DInfo(s.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&Gd.arraysEqual(u.inShape,u.outShape))return SD({inputs:{x:s},backend:n});const c=new kO(u,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}};const QL={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=r,c=py.computePool3DInfo(s.shape,a,o,[1,1,1],i,u,l),p=new vO(c,"max",!1);return n.runWebGLProgram(p,[s],s.dtype)}};class ez{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=s-1-e.padInfo.top,i=a-1-e.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tz{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=l-1-e.padInfo.top,h=u-1-e.padInfo.left,d=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const nz={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=py.computePool3DInfo(o.shape,i,l,[1,1,1],u,c),h=new vO(p,"max",!0),d=n.runWebGLProgram(h,[o],o.dtype),f=new tz(p),m=n.runWebGLProgram(f,[s,d],o.dtype);return n.disposeIntermediateTensorInfo(d),m}};const rz={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;fD([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=py.computePool2DInfo(i.shape,l,u,1,c,p),d=new kO(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new ez(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};function sz(e,t,n,r){let s=new kO(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");s=new kO(n,"max",!0,!0,t);return[a,r.runWebGLProgram(s,[e],"float32")]}const az={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;Gd.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const u=[1,1];Gd.assert(py.eitherStridesOrDilationsAreOne(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=py.computePool2DInfo(r.shape,s,a,u,o),[p,h]=sz(r,i,c,l);return[p,h]}};function oz(e,t,n,r){const s=Gd.sizeFromShape(t),a=BF({inputs:{x:e},attrs:{shape:[Gd.sizeFromShape(e.shape)/s,s]},backend:r}),o=UF(a,"float32","mean",r),i=BF({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}const iz={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,o=n,i=r.shape.length,l=Gd.parseAxisParam(a,r.shape);let u=l;const c=py.getAxesPermutation(u,i),p=null!=c,h=o.shouldExecuteOnCPU([r]),d=[];let f=r;if(p){if(h){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=DF(e,r.shape,r.dtype,c,t);f=o.makeTensorInfo(t,r.dtype);o.texData.get(f.dataId).values=n}else f=qF(r,c,o);d.push(f),u=py.getInnerMostAxes(u.length,i)}py.assertAxesAreInnerMostDims("sum",u,i);const[m,g]=py.computeOutAndReduceShapes(f.shape,u);let y=m;s&&(y=py.expandShapeToKeepDim(m,l));const b=oz(f,g,y,o);for(const e of d)o.disposeIntermediateTensorInfo(e);return b}};const lz={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=Gd.parseAxisParam(a,s.shape);let u=l;const c=py.getAxesPermutation(u,i);let p=s;null!=c&&(p=YF({inputs:{x:s},backend:n,attrs:{perm:c}}),u=py.getInnerMostAxes(u.length,s.shape.length)),py.assertAxesAreInnerMostDims("min",u,i);const[h,d]=py.computeOutAndReduceShapes(p.shape,u),f=BF({inputs:{x:p},backend:n,attrs:{shape:[-1,Gd.sizeFromShape(d)]}}),m=UF(f,f.dtype,"min",n);let g;if(o){g=BF({inputs:{x:m},backend:n,attrs:{shape:py.expandShapeToKeepDim(h,l)}})}else g=BF({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},uz={kernelName:"Minimum",backendName:"webgl",kernelFunc:OD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:lF})};class cz{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=wR(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class pz{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=wR(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=kD("rc",r),l=kD("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const hz={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,o=$d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new pz(r.shape,s,a):new cz(r.shape,s,a);return t.runWebGLProgram(o,[r],r.dtype)}},dz={kernelName:"Mod",backendName:"webgl",kernelFunc:OD({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})};class fz{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const mz=OD({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),gz={kernelName:"RealDiv",backendName:"webgl",kernelFunc:mz},yz=OD({opSnippet:"return a - b;",packedOpSnippet:"return a - b;",supportsComplex:!0,cpuKernelImpl:AF}),bz={kernelName:"Sub",backendName:"webgl",kernelFunc:yz};function xz(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=Gd.parseAxisParam([a],s.shape),i=XL({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=py.expandShapeToKeepDim(i.shape,o),u=BF({inputs:{x:i},backend:n,attrs:{shape:l}}),c=yz({inputs:{a:s,b:u},backend:n}),p=nL({inputs:{x:c},backend:n}),h=KF({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),d=BF({inputs:{x:h},backend:n,attrs:{shape:l}}),f=mz({inputs:{a:p,b:d},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),f}const wz={kernelName:"Softmax",backendName:"webgl",kernelFunc:xz};const kz={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r,l=i?s:xz({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new fz(u,c,a),h=[[o]],d=n.runWebGLProgram(p,[l],"int32",h);return i||n.disposeIntermediateTensorInfo(l),d}};const vz={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=cF(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=$d().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new DD(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new RD(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(s,[r],r.dtype)}},Nz=wx.nonMaxSuppressionV3Impl;const Sz={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){py.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r,u=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:p}=Nz(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Iz=wx.nonMaxSuppressionV4Impl;const Tz={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){py.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),{selectedIndices:h,validOutputs:d}=Iz(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},Ez=wx.nonMaxSuppressionV5Impl;const $z={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){py.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=Ez(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class Cz{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const Az={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:l}=r,u=Gd.sizeFromShape(s.shape),c=new Cz(u,o,i,l),p=BF({inputs:{x:s},backend:n,attrs:{shape:[u]}}),h=n.runWebGLProgram(c,[p],a);n.disposeIntermediateTensorInfo(p);const d=BF({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,o]}});return n.disposeIntermediateTensorInfo(h),d}};function _z(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=UO({inputs:{input:r},backend:n}),t=_z({inputs:{x:e},backend:n}),s=rM({inputs:{input:r},backend:n}),a=_z({inputs:{x:s},backend:n}),o=TD({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return pL({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const Rz={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:_z};const Dz={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=UO({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=rM({inputs:{input:s},backend:r}),o=_z({inputs:{x:a},backend:r}),i=TD({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return pL({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const Fz={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return sL({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{Gd.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Gd.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=oM({inputs:t.map((e=>{const t=sL({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class Oz{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=wR(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Mz{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=wR(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=kD("rc",r),l=kD("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p=[`${s} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${u}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const Lz=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;if(0===Gd.sizeFromShape(s.shape)){return pL({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+s.shape[t]+e[1])),value:o,dtype:s.dtype}})}const i=$d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Mz(s.shape,a,o):new Oz(s.shape,a,o),l=[[o]];return n.runWebGLProgram(i,[s],s.dtype,l)},zz={kernelName:"PadV2",backendName:"webgl",kernelFunc:Lz},Bz={kernelName:"Pow",backendName:"webgl",kernelFunc:OD({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})};const Pz={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=[],u=Gd.parseAxisParam(a,s.shape);let c=u;const p=py.getAxesPermutation(c,i);let h,d=s;if(null!=p&&(d=YF({inputs:{x:s},backend:n,attrs:{perm:p}}),c=py.getInnerMostAxes(c.length,i),l.push(d)),py.assertAxesAreInnerMostDims("prod",c,i),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:s}=hF(d.shape,d.dtype,e,c);h=n.makeTensorInfo(r,s,t)}else{const[e,t]=py.computeOutAndReduceShapes(d.shape,c),r=Gd.sizeFromShape(t),a=BF({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),o=UF(a,zf(s.dtype),"prod",n);h=BF({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(a),l.push(o)}if(o){l.push(h);const e=py.expandShapeToKeepDim(h.shape,u);h=BF({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}};const Vz={kernelName:"RaggedGather",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,l=s.map((e=>n.readSync(e.dataId))),u=s.map((e=>e.shape)),c=n.readSync(a.dataId),p=n.readSync(o.dataId),[h,d,f]=dF(l,u,c,a.shape,a.dtype,p,o.shape,i),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};const Wz={kernelName:"RaggedRange",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=fF(o,r.shape,r.dtype,i,s.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],r.dtype,c)]}};const Uz={kernelName:"RaggedTensorToTensor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=r,u=n.readSync(s.dataId),c=n.readSync(a.dataId),p=n.readSync(o.dataId),h=i.map((e=>n.readSync(e.dataId))),d=i.map((e=>e.shape)),[f,m]=mF(u,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,l);return n.makeTensorInfo(f,a.dtype,m)}},Gz=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:o}=n,i=gF(r,s,a,o);return t.makeTensorInfo([i.length],o,i)},Hz={kernelName:"Range",backendName:"webgl",kernelFunc:Gz},qz={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:FD({opSnippet:"return 1.0 / x;"})},jz={kernelName:"Relu",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},Kz={kernelName:"Relu6",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class Xz{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Yz{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Zz={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[l,u]=i,c=$d().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Yz(s.shape,l,u,a,o):new Xz(s.shape,l,u,a,o);return n.runWebGLProgram(c,[s],"float32")}};class Jz{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Qz={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new Jz(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class eB{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class tB{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const nB={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[l,u]=i,c=$d().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new tB(s.shape,l,u,a,o):new eB(s.shape,l,u,a,o);return n.runWebGLProgram(c,[s],s.dtype)}};class rB{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const sB={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new rB(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class aB{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=wR(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class oB{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=kD("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=wR(n);function i(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const iB={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,o=s.shape.length,i=Gd.parseAxisParam(a,s.shape);if(0===o)return SD({inputs:{x:s},backend:n});const l=$d().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new oB(s.shape,i):new aB(s.shape,i);return n.runWebGLProgram(l,[s],s.dtype)}};class lB{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const uB={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,l=new lB(r.shape,a),[u,c]=py.getImageCenter(o,r.shape[1],r.shape[2]),p=[[u,c,Math.sin(s),Math.cos(s)]];return i.runWebGLProgram(l,[r],r.dtype,p)}},cB={kernelName:"Round",backendName:"webgl",kernelFunc:FD({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},pB={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:FD({opSnippet:"return inversesqrt(x);",cpuKernelImpl:yF})};class hB{constructor(e,t,n,r,s,a,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const i=wR(s.length),l=wR(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const dB={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=py.calculateShapes(a,s,o),h=[p/u,u];if(0===p)return n.makeTensorInfo(o,s.dtype);const d=BF({inputs:{x:s},backend:n,attrs:{shape:[l,i]}}),f=BF({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new hB(l,i,d.shape.length,f.shape.length,c,h),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=BF({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class fB{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===$d().getNumber("WEBGL_VERSION")?"while (left < right) {":s,o="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const mB={kernelName:"SearchSorted",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=new fB(s.shape[0],s.shape[1],a.shape[1],o),l=[[s.shape[1]]];return n.runWebGLProgram(i,[s,a],"int32",l)}};class gB{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=o.join()}const a=wR(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const yB={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,o=new gB(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[r,s,a],Lf(s.dtype,a.dtype))}},bB={kernelName:"Selu",backendName:"webgl",kernelFunc:FD({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${py.SELU_SCALEALPHA};\n  float scale = ${py.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},xB={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:xF})},wB={kernelName:"Sign",backendName:"webgl",kernelFunc:FD({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},kB={kernelName:"Sin",backendName:"webgl",kernelFunc:FD({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},vB={kernelName:"Sinh",backendName:"webgl",kernelFunc:FD({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},NB={kernelName:"Softplus",backendName:"webgl",kernelFunc:FD({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},SB={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;Gd.assert(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const u=[],c=Lz({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),p=py.getReshaped(c.shape,a,i,!1),h=py.getPermuted(p.length,a.length,!1),d=py.getReshapedPermuted(c.shape,a,i,!1),f=BF({inputs:{x:c},backend:n,attrs:{shape:p}}),m=YF({inputs:{x:f},backend:n,attrs:{perm:h}}),g=BF({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const IB={kernelName:"SparseFillEmptyRows",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),l=n.readSync(s.dataId),u=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[p,h,d,f,m]=vF(i,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const TB={kernelName:"SparseReshape",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(s.dataId)),i=n.readSync(r.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,p]=NF(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};const EB={kernelName:"SparseSegmentMean",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=SF(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}};const $B={kernelName:"SparseSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=SF(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}};const CB={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:h}=py.calculateShapes(a,s,i);if("string"===a.dtype){const e=n.bufferSync(s),t=n.bufferSync(a),r=Gd.decodeString(n.readSync(o.dataId)[0]),d=bF(e,t,i,h,c,u,l,p,r,false);return n.makeTensorInfo(i,d.dtype,d.values)}const d=new hB(u,l,s.shape.length,a.shape.length,p,[h,1],false),f=n.runWebGLProgram(d,[a,s,o],a.dtype),m=BF({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}};const AB={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=Gd.parseAxisParam(o,s.shape)[0],l=py.prepareSplitSize(s,a,i),u=s.shape.length,c=new Array(u).fill(0),p=s.shape.slice();return l.map((e=>{const t=[...p];t[i]=e;const r=MO({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},_B={kernelName:"Sqrt",backendName:"webgl",kernelFunc:FD({opSnippet:"return sqrt(x);",packedOpSnippet:"return sqrt(x);",cpuKernelImpl:IF})},RB={kernelName:"Square",backendName:"webgl",kernelFunc:FD({opSnippet:"return x * x;"})},DB={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:OD({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})};const FB={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new RD(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class OB{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=wR(n.length),a=wR(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const MB={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Ug.sliceInfo(s.shape,a,o,i,l,u,c,p,h);let k;if(m)k=BF({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){Gd.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=Ug.computeOutShape(b,x,w),t=MO({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=BF({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=og(s.shape,s.dtype,e),r=TF(d,t,w,b);k=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new OB(b,w,d);k=n.runWebGLProgram(e,[s],s.dtype)}}const v=BF({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}};const LB={kernelName:"StringNGrams",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.readSync(c.dataId),d=n.readSync(p.dataId),[f,m]=EF(h,d,s,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};const zB={kernelName:"StringSplit",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),l=n.readSync(o.dataId)[0],[u,c,p]=$F(i,l,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};const BB={kernelName:"StringToHashBucketFast",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=CF(o,s);return n.makeTensorInfo(a.shape,"int32",i)}},PB={kernelName:"Tan",backendName:"webgl",kernelFunc:FD({opSnippet:"return tan(x);"})},VB={kernelName:"Tanh",backendName:"webgl",kernelFunc:FD({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class WB{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=wR(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function UB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>Gd.decodeString(e))):e,r=og(s.shape,s.dtype,t),o=_F(r,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new WB(s.shape,a);return n.runWebGLProgram(o,[s],s.dtype)}const GB={kernelName:"Tile",backendName:"webgl",kernelFunc:UB};class HB{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class qB{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function jB(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function KB(e){let t=1;for(;t<e;)t*=2;return t}const XB={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r,i=$d().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=$d().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=s.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([s])||c<i||a>l){const e=n.readSync(s.dataId),[t,r]=RF(e,u,s.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,s.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[s,pL({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const p=n.texData.get(s.dataId),h=null!==p&&p.isPacked,d=h?n.unpackTensor(s):s,f=Gd.sizeFromShape(u)/c,m=BF({inputs:{x:d},attrs:{shape:[f,c]},backend:n});h&&jB(n,d);const g=KB(a),y=KB(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const s=x(),a=new HB(r),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,s,"int32",o),jB(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new qB([f,e/2]),s=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(r,t,"int32",s),jB(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let k=b;b=MO({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),jB(n,k);let v=EL({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});jB(n,m);const N=u.slice(0,-1);N.push(a),k=b,b=BF({inputs:{x:b},attrs:{shape:N},backend:n}),jB(n,k);const S=v;return v=BF({inputs:{x:v},attrs:{shape:N},backend:n}),jB(n,S),[v,b]}};class YB{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const ZB={kernelName:"Transform",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=r,[c,p,h,d]=s.shape,[f,m]=null!=u?u:[p,h],g=new YB(p,h,o,i,l,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}};const JB={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;fD(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(a.dataId),{outputValues:i,outputShape:l,indices:u}=FF(o,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}};const QB={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s,i=o.shape.length,l=s.shape[a],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(u[c++]=o.shape[e]);const p=[],h=new Array(i).fill(0),d=o.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){h[a]=e;const t=MO({inputs:{x:o},backend:n,attrs:{begin:h,size:d}}),r=BF({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class eP{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,o=a*Math.ceil(s/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const tP=[QF,eO,tO,nO,rO,oO,iO,lO,fO,mO,gO,yO,bO,xO,wO,NO,SO,EO,$O,CO,RO,zO,BO,PO,qO,jO,YO,ED,QO,iM,mM,wM,kM,vM,NM,SM,IM,TM,$M,OM,MM,LM,BM,WM,HM,qM,KM,YM,ZM,JM,QM,eL,tL,rL,aL,oL,uL,hL,fL,mL,gL,xL,vL,NL,IL,$L,CL,AL,ID,_L,sM,RL,DL,FL,CD,OL,ML,LL,zL,BL,PL,VL,WL,HL,jL,YL,ZL,JL,QL,nz,rz,az,iz,lz,uz,hz,dz,kz,MF,vz,Sz,Tz,$z,WO,Az,Dz,Fz,zz,Bz,_D,Pz,Vz,Wz,Uz,Hz,GO,gz,qz,jz,Kz,PF,Zz,Qz,nB,sB,iB,uB,cB,pB,dB,mB,yB,bB,xB,wB,kB,vB,LO,wz,NB,SB,IB,TB,EB,$B,CB,AB,_B,RB,DB,FB,MB,LB,zB,BB,bz,XF,PB,VB,GB,XB,ZB,ZF,JB,QB,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r,i=s.shape.length,l=[];let u=0;const c=py.getAxesPermutation([u],i);let p=s;null!=c&&(p=YF({inputs:{x:s},backend:n,attrs:{perm:c}}),l.push(p),u=py.getInnerMostAxes(1,i)[0]);const h=py.segment_util.computeOutShape(p.shape,u,o),d=Gd.sizeFromShape([p.shape[u]]),f=BF({inputs:{x:p},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=zf(s.dtype),g=(e,t,r,s,a)=>{const o=e.shape[0],i=e.shape[1],u=py.segment_util.segOpComputeOptimalWindowSize(i,a),c=new eP({windowSize:u,inSize:i,batchSize:o,numSegments:a},t),p=n.compileAndRun(c,[e,r],s);if(l.push(p),p.shape[1]===a)return p;const h=Gz({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=UB({inputs:{x:h},backend:n,attrs:{reps:[i/u]}});l.push(h),l.push(d);return g(p,t,d,s,a)},y=BF({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:h}});let b=y;if(null!=c){l.push(y);const e=py.getUndoAxesPermutation(c);b=YF({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},Rz];for(const e of tP)Vd(e);const nP=$d();nP.registerFlag("HAS_WEBGL",(()=>nP.getNumber("WEBGL_VERSION")>0)),nP.registerFlag("WEBGL_VERSION",(()=>uD(2)?2:uD(1)?1:0)),nP.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),nP.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===nP.get("WEBGL_VERSION"))),nP.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),nP.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),nP.registerFlag("WEBGL_PACK",(()=>nP.getBool("HAS_WEBGL"))),nP.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_PACK_CLIP",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_PACK_REDUCE",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_LAZILY_UNPACK",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_CONV_IM2COL",(()=>nP.getBool("WEBGL_PACK"))),nP.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>aD(nP.getNumber("WEBGL_VERSION")))),nP.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>oD(nP.getNumber("WEBGL_VERSION")))),nP.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=nP.getNumber("WEBGL_VERSION");return 0===e?0:iD(e)})),nP.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>nP.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Yf.isMobile())),nP.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>cD(nP.getNumber("WEBGL_VERSION")))),nP.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!nP.getBool("WEBGL_FORCE_F16_TEXTURES")&&nP.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),nP.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>pD(nP.getNumber("WEBGL_VERSION")))),nP.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>dD(nP.getNumber("WEBGL_VERSION")))),nP.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>nP.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),nP.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),nP.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Yf.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),nP.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),nP.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),nP.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),nP.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),nP.registerFlag("WEBGL_EXP_CONV",(()=>!1)),nP.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>nP.getBool("IS_TEST"))),nP.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),nP.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),nP.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));class rP{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=$R.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=rR();this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?aR(["r","c","d"],e):sR(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class sP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=$R.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=rR();this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?aR(["r","c","d"],e):sR(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class aP{constructor(e){this.variableNames=["A"],this.outTexUsage=AR.DOWNLOAD;const t=rR();this.outputShape=e,this.userCode=`\n      ${lR}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class oP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=AR.DOWNLOAD;const t=rR();this.outputShape=e,this.userCode=`\n      ${lR}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const iP={R:0,G:1,B:2,A:3};class lP{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=rR();this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${iP[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iR(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class uP{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=rR();this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iR(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function cP(e){const t=rR();return function(e,t){const n=YR(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(zR(e,(()=>e.shaderSource(n,t))),zR(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function pP(e){return function(e,t){const n=YR(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return zR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),zR(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function hP(e){return function(e,t){const n=YR(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return zR(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),zR(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function dP(e,t,n,r,s,a){!function(e,t){const n=$d().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return YR(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return zR(e,(()=>e.bindTexture(i,o))),zR(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),zR(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),zR(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),zR(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===$d().getNumber("WEBGL_VERSION")?zR(e,(()=>e.texImage2D(i,0,r,t,n,0,s,a,null))):zR(e,(()=>e.texStorage2D(i,1,r,t,n))),zR(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function fP(e){return e.internalFormatFloat}function mP(e){return e.internalFormatHalfFloat}function gP(e){return e.downloadTextureFormat}function yP(e){return e.internalFormatPackedFloat}function bP(e){return e.internalFormatPackedHalfFloat}function xP(e,t,n,r,s,a,o,i){const l=e,u=new Float32Array(function(e,t){const[n,r]=MR(e,t);return n*r*4}(a,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class wP{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=$d().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,TR(t,e)):this.gl=ER(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===$d().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=PR(this.gl,e),lD(this.gl,t))this.textureHalfFloatExtension=PR(this.gl,t);else if($d().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),lD(this.gl,r))this.colorBufferHalfFloatExtension=PR(this.gl,r);else if($d().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",lD(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!lD(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=pP(this.gl),this.indexBuffer=hP(this.gl),this.framebuffer=function(e){return YR(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=LR(this.gl,this.textureHalfFloatExtension)}get debug(){return $d().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;zR(e,(()=>e.finish())),zR(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),zR(e,(()=>e.deleteFramebuffer(this.framebuffer))),zR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),zR(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),zR(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=FR(t,n);return dP(e,s,a,fP(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=FR(t,n);return dP(e,s,a,mP(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=FR(t,n);return dP(e,s,a,gP(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){zR(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===$d().getNumber("WEBGL_VERSION")?zR(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):zR(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===$d().getNumber("WEBGL_VERSION")?zR(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):zR(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),zR(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let o,i,l;zR(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,l=a.internalFormatPackedFloat),o.set(s),2===$d().getNumber("WEBGL_VERSION")?zR(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):zR(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,i,o))),zR(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=MR(t,n);return dP(e,s,a,bP(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=MR(t,n);return dP(e,s,a,yP(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(KR(this.gl,this.framebuffer),this.outputTexture=null),zR(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=FR(t,n),o=new Uint8Array(t*n*4);return zR(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return xP(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();zR(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return zR(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),zR(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),zR(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if($d().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else $d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,$d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return zR(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=cP(t));const n=function(e){return YR(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return zR(t,(()=>t.attachShader(n,this.vertexShader))),zR(t,(()=>t.attachShader(n,e))),function(e,t){if(zR(e,(()=>e.linkProgram(t))),!$d().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&GR(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return zR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),HR(e,t,"clipSpacePos",n,3,20,0)&&HR(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&zR(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&GR(this.gl,this.program),zR(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return YR(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),zR(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),qR(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=MR(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&GR(this.gl,this.program),XR(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),zR(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),zR(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=PR(this.gl,2===$d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===$d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===$d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Gd.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,$d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,$d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in $d().platform&&(n=$d().platform.setTimeoutCustom.bind($d().platform)),Gd.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),jR(this.gl,e,this.framebuffer),this.debug&&XR(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(jR(this.gl,this.outputTexture,this.framebuffer),this.debug&&XR(this.gl)):KR(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;jR(r,e,this.framebuffer),this.debug&&XR(r),this.outputTexture=e,zR(r,(()=>r.viewport(0,0,t,n))),zR(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),zR(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class kP{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=bD(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=kD("rc",this.rank),t=wR(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class vP{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=SP(t,n),s=IP(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=NP(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let o;return r===RR.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===RR.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===RR.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===RR.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===RR.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=SP(n,r),a=IP(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const o=NP(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=$d().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function NP(e,t,n,r,s){const a=function(e,t){switch(e){case RR.PACKED_2X2_FLOAT32:return yP(t);case RR.PACKED_2X2_FLOAT16:return bP(t);case RR.UNPACKED_FLOAT32:return fP(t);case RR.UNPACKED_FLOAT16:return mP(t);case RR.PACKED_4X1_UNSIGNED_BYTE:return gP(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(s){const[t,n]=MR(e[0],e[1]);o=t*n}else{const[t,n]=FR(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function SP(e,t){if(e===AR.UPLOAD)return RR.PACKED_2X2_FLOAT32;if(e===AR.RENDER||null==e)return function(e){return $d().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?RR.PACKED_2X2_FLOAT32:RR.UNPACKED_FLOAT32:e?RR.PACKED_2X2_FLOAT16:RR.UNPACKED_FLOAT16}(t);if(e===AR.DOWNLOAD||e===AR.PIXELS)return RR.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function IP(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class TP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=bD(this.outputShape.length);const t=e.length,n=kD("rc",t),r=wR(t),s=vD(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const EP=wx.whereImpl,$P={};const CP=$d().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class AP extends Ch{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!$d().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof wP)t=e;else{const n=ER($d().getNumber("WEBGL_VERSION"),e);t=new wP(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=ER($d().getNumber("WEBGL_VERSION"));t=new wP(e),this.binaryCache=((n=$d().getNumber("WEBGL_VERSION"))in $P||($P[n]={}),$P[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new vP(this.gpgpu),this.numMBBeforeWarning=null==$d().global.screen?1024:$d().global.screen.height*$d().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new $h(this,_x())}nextDataId(){return AP.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,r,s,a){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[r,s]},i.texShape=[r,s];const l=eD(t),u=new lP(l,!1,a),c=this.runWebGLProgram(u,[o],n,[[r,s]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if(($d().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||$d().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:AR.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,s){if($d().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:AR.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new DD(o,"return x;"):new RD(o,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Gd.now()),"complex64"===r){const e=this.readSync(s.real.dataId),t=this.readSync(s.imag.dataId);c=py.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Gd.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=s){let t;t=i?new DD(r,"return x;"):new RD(r,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if($d().getBool("DEBUG")&&!$d().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===$d().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&$d().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...OR(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];u=py.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=Gd.sizeFromShape(r);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;zR(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,u),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&_x().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new DD(s,"return x;"):new RD(s,"return x;");const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:o}],o),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=_x().makeTensorFromTensorInfo(u),p=this.texData.get(u.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Gd.decodeString(e)));return og(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return og(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!BR(n)){if($d().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=Gd.sizeFromShape(t);if($d().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...OR(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=$d().getBool("WEBGL_PACK")&&!0===r,o=a?eD(t):t,i=a?new oP(o):new aP(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return $d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=Gd.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=Gd.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if($d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);o.kernelMs=Gd.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return $d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Gd.now(),endMs:null}}endTimer(e){return $d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Gd.now(),e)}async getQueryTime(e){if($d().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=CP){return $d().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Gd.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){py.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return EP(e.shape,t)}packedUnaryOp(e,t,n){const r=new DD(e.shape,t),s=this.compileAndRun(r,[e],n);return _x().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=wF(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if($d().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"return abs(x);",e.dtype);const t=new RD(e.shape,"return abs(x);"),n=this.compileAndRun(t,[e]);return _x().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Gd.isString(n[0])){const s=n.map((e=>Gd.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return _x().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new TP(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new kP(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[JR(e.shape),...QR(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[JR(t),...QR(t)],a=new LF(s,n),o=[n],i=this.runWebGLProgram(a,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;if(null!=t){const e=Gd.sizeFromShape(s),n=t[0]*t[1]*4;Gd.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=eD(s);let i;i=r?new sP(o):new rP(o);const l=[null!=t?t:OR(o)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===$R.DENSE){const t=null!=a?a:OR(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===Gd.sizeFromShape(o.shape))return i.values=Gd.getTypedArrayFromDType(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Gd.sizeFromShape(t.shape)<=$d().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!nD(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=kR(e.packedInputs,t.shape,a);let u="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=Gd.computeStrides(i);p=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&Gd.arraysEqual(t.shape,a),f=1===Gd.sizeFromShape(t.shape),m=py.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&Gd.arraysEqual(a,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${g}_${o?l:""}_${i.length}_${f}_${m}_${d}_${u}_${c}_${p}_${y}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${$d().getNumber("WEBGL_VERSION")}`,a}(e,u,c),h=this.getAndSaveBinary(p,(()=>mD(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),$d().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(yD(t.inShapeInfos,n),yD([t.outShapeInfo],[r]));const a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===$d().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],o=t.uniformLocations[`offset${s}`],i=t.inShapesLocations[`${s}Shape`],l=t.inTexShapesLocations[`${s}TexShape`];if(i){const{uniformShape:r}=kR(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(i,new Int32Array(r));break;case 2:e.gl.uniform2iv(i,new Int32Array(r));break;case 3:e.gl.uniform3iv(i,new Int32Array(r));break;case 4:e.gl.uniform4iv(i,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(Gd.sizeFromShape(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,r)}));const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=Gd.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s&&t.program.customUniforms.forEach(((n,r)=>{const a=t.customUniformLocations[r],o=s[r];if("float"===n.type)e.gl.uniform1fv(a,o);else if("vec2"===n.type)e.gl.uniform2fv(a,o);else if("vec3"===n.type)e.gl.uniform3fv(a,o);else if("vec4"===n.type)e.gl.uniform4fv(a,o);else if("int"===n.type)e.gl.uniform1iv(a,o);else if("ivec2"===n.type)e.gl.uniform2iv(a,o);else if("ivec3"===n.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,o)}})),e.executeProgram()}(this.gpgpu,h,u,c,r),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=$d().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Gd.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!$d().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!$d().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Dx((()=>{if(!$d().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=$d().getBool("DEBUG");$d().set("DEBUG",!1);const t=this.abs(Zx(1e-8)).dataSync()[0];if($d().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Gd.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=$d().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=$d().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&$d().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Gd.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Gd.squeezeShape(e);e=t.newShape}let s=Gd.sizeFromShape(e),a=null;e.length<=1&&s<=n?a=[1,s]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>r&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=JR(e);let n=2,r=2;e.length&&([n,r]=QR(e)),s=t*(n/2)*(r/2),a=Gd.sizeToSquarishShape(s).map((e=>2*e))}else a=Gd.sizeToSquarishShape(s);return a}(n,i),t.texShape=c),null!=s){const e=eD(n);let a,o=c[1],p=c[0];const h=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&h||([o,p]=MR(c[0],c[1])),a=i?new uP(e,h):new lP(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?AR.PIXELS:AR.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);const g=[[p,o]],y=!0,b=this.runWebGLProgram(a,[f],r,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,$d().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=Gd.now()-u)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*Gd.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await PS(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw UR(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,inShapesLocations:a,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=gD(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.inShapesLocations=a,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromTexture(e,t,n){const{texture:r,height:s,width:a,channels:o}=e,i=_x().backend;if(!i.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=i.writeTexture(r,t,n,s,a,o);return _x().makeTensorFromDataId(l,t,n,i)}}AP.nextDataId=0;Yf.isBrowser()&&Mx("webgl",(()=>new AP),2);class _P extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_P.prototype)}}class RP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,RP.prototype)}}class DP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,DP.prototype)}}class FP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,FP.prototype)}}class OP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,OP.prototype)}}class MP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,MP.prototype)}}class LP{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function zP(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function BP(e,t){if(!e)throw new OP(t)}function PP(e,t){let n=0;for(const r of e)r===t&&n++;return n}function VP(e){return 1===e.length?e[0]:e}function WP(e){return Array.isArray(e)?e:[e]}function UP(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function GP(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let HP={};function qP(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function jP(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>jP(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?jP(t):e[n]=t.value)}}}function KP(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in HP)a=HP[s];else if(a=t[s],null==a)throw new DP(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new DP(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,l;if(o in n?[i,l]=n[o]:o in HP?[i,l]=HP.className:o in t&&([i,l]=t[o]),null==i)throw new DP(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(HP))e[t]=HP[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},HP);for(const e of Object.keys(n))HP[e]=n[e];jP(a.config);const r=l(i,a.config,n,s);return HP=Object.assign({},t),r}{const e=Object.assign({},HP);for(const e of Object.keys(n))HP[e]=n[e];const t=new i(a.config);return HP=Object.assign({},e),t}}}function XP(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function YP(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function ZP(e){if(null==e)throw new DP(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function JP(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new DP(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function QP(e,t,n=0,r=1/0){return BP(n>=0),BP(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function eV(e,t){Array.isArray(e)?(Gd.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>eV(e,`element ${n+1} of ${t}`)))):Gd.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${tV(e)}.`))}function tV(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>tV(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function nV(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let rV=0;function sV(){return rV++}const aV={};function oV(e=""){return e in aV||(aV[e]=0),aV[e]+=1,e+aV[e].toString()}const iV=["channelsFirst","channelsLast"],lV=["nearest","bilinear"],uV=["valid","same","causal"],cV=["max","avg"],pV=["sum","mul","concat","ave"],hV=new Map;function dV(e){JP(iV,"DataFormat",e)}function fV(e){JP(uV,"PaddingMode",e)}function mV(e){JP(cV,"PoolMode",e)}const gV=[];function yV(e,t){gV.push(e);try{const e=t();return gV.pop(),e}catch(e){throw gV.pop(),e}}function bV(e){if(!kV(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===gV.length?"":gV.join("/")+"/")+e}function xV(e){if(!kV(e))throw new Error("Not a valid tensor name: '"+e+"'");hV.has(e)||hV.set(e,0);const t=hV.get(e);if(hV.set(e,hV.get(e)+1),t>0){const n=`${e}_${t}`;return hV.set(n,1),n}return e}const wV=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function kV(e){return!!e.match(wV)}function vV(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function NV(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function SV(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function IV(e,t){if(t<e)throw new DP(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}let TV;function EV(){return null==TV&&(TV=Kf.backend.epsilon()),TV}function $V(e,t){return ig(e,t)}function CV(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Qy(e,n)}function AV(e,t,n){return Dx((()=>{switch(e.rank){case 1:return GN(e,t,n);case 2:return HN(e,[t,0],[n,e.shape[1]]);case 3:return qN(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return jN(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Ux(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Ux(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new DP(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function _V(e,t,n){return Dx((()=>{switch(e.rank){case 1:return GN(e,t,n);case 2:return HN(e,[0,t],[e.shape[0],n]);case 3:return qN(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return jN(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new DP(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function RV(e,t,n,r){return Dx((()=>{switch(e.rank){case 1:return GN(e,t,n);case 2:switch(r){case 1:return AV(e,t,n);case 2:return _V(e,t,n);default:throw new DP(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return AV(e,t,n);case 2:return qN(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return _V(e,t,n);default:throw new DP(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return AV(e,t,n);case 2:return jN(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return jN(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return _V(e,t,n);default:throw new DP(`The axis is not within the rank of the tensor ${r}`)}default:throw new DP(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function DV(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Px(e,t)}function FV(e,t){switch(e.rank){case 1:return dv([e,t]);case 2:return fv([e,t],0);case 3:return mv([e,t],0);case 4:return gv([e,t],0);default:throw new DP(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function OV(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new DP(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Nw(e,t)}function MV(e,t=0,n=1,r,s){return CN(e,t,n,r,s)}function LV(e,t,n,r){if(e.rank<2||t.rank<2)throw new FP(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new FP(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const s=!1,a=!1;return Qx.matMul({a:e,b:t,transposeA:s,transposeB:a,bias:r?PV(e.rank,r,"channelsLast"):null,activation:n})}{const s=e.shape.slice(),a=s.pop();e=Qy(e,[-1,a]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Qy(dk(t,c),[l,-1]);const p=[...s,...u],h=!1,d=!1;return Qy(Qx.matMul({a:e,b:t,transposeA:h,transposeB:d,bias:r?PV(e.rank,r,"channelsLast"):null,activation:n}),p)}}function zV(e,t,n){return Dx((()=>(t=Array.isArray(t)?hw(t,"int32"):ig(t,"int32"),zv(e,t,n))))}function BV(e){return Xy(e,e)}function PV(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new DP(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?Qy(t,[1,r[0],1,1,1]):Qy(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?Qy(t,[1,1,1,1,r[0]]):Qy(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?Qy(t,[1,r[0],1,1]):Qy(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?Qy(t,[1,1,1,r[0]]):Qy(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?Qy(t,[1,r[0],1]):Qy(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?Qy(t,[1,1,r[0]]):Qy(t,[1].concat(r))}else if(e<3)return t;throw new DP(`Unsupported input rank by biasAdd: ${t.rank}`)}function VV(e,t,n){return Dx((()=>(null==n&&(n="channelsLast"),dV(n),ew(e,PV(e.rank,t,n)))))}function WV(e,t,n,r){return Dx((()=>xS(e,t,n,r)))}function UV(e,t,n=!1){return n?e():t()}const GV=["fanIn","fanOut","fanAvg"],HV=["normal","uniform","truncatedNormal"];class qV extends iy.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class jV extends qV{apply(e,t){return Hx(e,t)}}jV.className="Zeros",iy.registerClass(jV);class KV extends qV{apply(e,t){return xk(e,t)}}KV.className="Ones",iy.registerClass(KV);class XV extends qV{constructor(e){if(super(),"object"!=typeof e)throw new DP(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new DP(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Dx((()=>Xy(Zx(this.value),xk(e,t))))}getConfig(){return{value:this.value}}}XV.className="Constant",iy.registerClass(XV);class YV extends qV{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return _N(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}YV.className="RandomUniform",iy.registerClass(YV);class ZV extends qV{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new FP(`randomNormal does not support dType ${t}.`);return MV(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ZV.className="RandomNormal",iy.registerClass(ZV);class JV extends qV{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new FP(`truncatedNormal does not support dType ${t}.`);return tS(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}JV.className="TruncatedNormal",iy.registerClass(JV);class QV extends qV{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Dx((()=>{if(2!==e.length||e[0]!==e[1])throw new DP("Identity matrix initializer can only be used for 2D square matrices.");return Xy(this.gain,ck(e[0]))}))}getConfig(){return{gain:this.gain}}}QV.className="Identity",iy.registerClass(QV);class eW extends qV{constructor(e){if(super(),e.scale<0)throw new DP(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,JP(GV,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){JP(HV,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(dV(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=vV(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=vV(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=vV(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new FP(`${this.getClassName()} does not support dType ${t}.`);return tS(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return _N(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}eW.className="VarianceScaling",iy.registerClass(eW);class tW extends eW{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return eW.className}}tW.className="GlorotUniform",iy.registerClass(tW);class nW extends eW{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return eW.className}}nW.className="GlorotNormal",iy.registerClass(nW);class rW extends eW{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return eW.className}}rW.className="HeNormal",iy.registerClass(rW);class sW extends eW{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return eW.className}}sW.className="HeUniform",iy.registerClass(sW);class aW extends eW{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return eW.className}}aW.className="LeCunNormal",iy.registerClass(aW);class oW extends eW{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return eW.className}}oW.className="LeCunNormal",iy.registerClass(oW);class iW extends qV{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new FP("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Dx((()=>{if(e.length<2)throw new FP("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=MV(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=IS.gramSchmidt(t);return e[0]>e[1]&&(n=dk(n)),Xy(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}iW.className="Orthogonal",iy.registerClass(iW);const lW={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function uW(e,t={}){return KP(e,iy.SerializationMap.getMap().classNameMap,t,"initializer")}function cW(e){return qP(e)}function pW(e){if("string"==typeof e){const t=e in lW?lW[e]:e;if("GlorotNormal"===t)return new nW;if("GlorotUniform"===t)return new tW;if("HeNormal"===t)return new rW;if("HeUniform"===t)return new sW;if("LeCunNormal"===t)return new aW;if("LeCunUniform"===t)return new oW;{const e={};return e.className=t,e.config={},uW(e)}}return e instanceof qV?e:uW(e)}function hW(e){return Array.isArray(e)&&Array.isArray(e[0])}function dW(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function fW(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new DP(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function mW(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new DP(`Expected exactly 1 Shape; got ${e.length}`)}return e}function gW(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class yW{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=sV(),n=null==n?"Variable":n,this.originalName=bV(n),this.name=xV(this.originalName),this.trainable_=r,this.constraint=s,this.val=aS(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function bW(e){return e.map((e=>e.read()))}function xW(e){e.forEach((e=>{e[0].write(e[1])}))}class wW{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class kW{constructor(e,t,n,r,s,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=o,this.id=sV(),null!=a&&(this.originalName=bV(a),this.name=xV(this.originalName)),this.rank=t.length}}let vW=0;class NW{constructor(e,t){this.callArgs=t,this.id=vW++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let SW=0;class IW extends iy.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=SW++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=UP(e)+"_"+oV(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new RP(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new DP(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return VP(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return VP(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new _P(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new _P(`Layer ${this.name} is not connected, no input to return.`);return VP(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new _P(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new _P(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return VP(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=WP(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=WP(this.inputSpec);if(e.length!==t.length)throw new DP(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new DP(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new DP(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new DP(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new DP(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],o=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(o))throw new DP(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new DP(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=WP(e);let r=!0;for(const e of n)if(!(e instanceof kW)){r=!1;break}let s=!0;for(const e of n)if(e instanceof kW){s=!1;break}if(r===s)throw new DP("Arguments to apply() must be all SymbolicTensors or all Tensors");return yV(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of WP(e))t.push(n.shape);this.build(VP(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=WP(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=VP(a),null!=this.activityRegularizer)throw new FP("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=WP(e);const t=[];for(const n of e)t.push(n.shape);return VP(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new kW(a,n,this,WP(e),t,this.name,r))):new kW(a,r,this,WP(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new FP("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new _P(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new _P(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new RP(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return gW(this.weights)}build(e){this.built=!0}getWeights(e=!1){return bW(e?this.trainableWeights:this.weights)}setWeights(e){Dx((()=>{const t=this.weights;if(t.length!==e.length)throw new DP(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=bW(t);for(let s=0;s<r.length;++s){const a=r[s],o=t[s],i=e[s];if(!Gd.arraysEqual(a.shape,i.shape))throw new DP(`Layer weight shape ${a.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}xW(n)}))}addWeight(e,t,n,r,s,a,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new DP(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=i?i():pW("zeros"));const l=r.apply(t,n),u=new yW(l,n,e,a,o);return l.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=WP(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,o=null){const i=WP(e);t=WP(t),n=WP(n),r=WP(r),s=dW(s),a=dW(a);const l=[],u=[],c=[];for(const e of i)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new NW({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function TW(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=TW(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class EW extends IW{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:oV("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new DP("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new DP("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new DP("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new kW(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new NW({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new DP(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function $W(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new DP("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new EW({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}EW.className="InputLayer",iy.registerClass(EW);class CW{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof CW)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new DP(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return ig(t,e.dtype)}catch(n){throw new DP(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof kW){if(null==this.id2Value[e.id])throw new DP(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new DP(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof kW){if(null==this.id2Value[e.id])throw new DP(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new DP(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Fx(this.id2Mask)}}const AW=new LP,_W=new LP;function RW(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],i=o.map((e=>e.name)),l=[],u=t.names();for(const e of i)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let p,h=AW.get(c);if(null==h){const e=function(e,t){Gd.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=FW(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:o}=FW(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in o)null==r[e]&&(r[e]=new Set),o[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:DW(r)}}(o,t);h=e.sorted,p=e.recipientCounts,AW.put(c,h),_W.put(c,p)}p={},s||Object.assign(p,_W.get(c));const d=new CW(t);for(let e=0;e<h.length;++e){if(null!=r){const e=Rx().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=h[e],o=a.sourceLayer;if(o instanceof EW)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);u.push(n),c.push(r),null!=r&&(m=!0),s||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=WP(o.apply(u,n));let y=null;o.supportsMasking&&(y=o.computeMask(u,c));const b=OW(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}s||Fx(f)}return d.disposeMasks(),a?l:l[0]}function DW(e){const t={};for(const n in e)t[n]=e[n].size;return t}function FW(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],o=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&o.pop();else{o.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function OW(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function MW(e,t){return Dx((()=>rk(nb(Xy(e,e),t,!0))))}$d().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=AW&&AW.setMaxEntries(e),null!=_W&&_W.setMaxEntries(e)}));class LW extends iy.Serializable{getConfig(){return{}}}class zW extends LW{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Dx((()=>{const t=MW(e,this.axis),n=hv(t,0,this.maxValue);return Xy(e,Bw(n,ew(EV(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}zW.className="MaxNorm",iy.registerClass(zW);class BW extends LW{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Dx((()=>Bw(e,ew(EV(),MW(e,this.axis)))))}getConfig(){return{axis:this.axis}}}BW.className="UnitNorm",iy.registerClass(BW);class PW extends LW{apply(e){return Zy(e)}}PW.className="NonNeg",iy.registerClass(PW);class VW extends LW{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Dx((()=>{const t=MW(e,this.axis),n=ew(Xy(this.rate,hv(t,this.minValue,this.maxValue)),Xy(1-this.rate,t));return Xy(e,Bw(n,ew(EV(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}VW.className="MinMaxNorm",iy.registerClass(VW);const WW={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function UW(e){return qP(e)}function GW(e,t={}){return KP(e,iy.SerializationMap.getMap().classNameMap,t,"constraint")}function HW(e){if(null==e)return null;if("string"==typeof e){return GW({className:e in WW?WW[e]:e,config:{}})}return e instanceof LW?e:GW(e)}async function qW(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];Fx(r)}}function jW(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var KW,XW;(XW=KW||(KW={}))[XW.SILENT=0]="SILENT",XW[XW.VERBOSE=1]="VERBOSE";class YW{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class ZW{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class JW extends YW{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=Dx((()=>ew(this.totals[e],Xy(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Dx((()=>{const n=Xy(Bw(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Ox(t[e])})))}}class QW extends YW{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const o=s[a];e.push(o.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class eU extends YW{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||PS,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Gd.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,s=null!=n?n():Gd.now();return(...a)=>{const o=null!=n?n():Gd.now();return o-s<t||(s=o,r=e(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await qW(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await qW(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await qW(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await qW(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await qW(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Gd.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await qW(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await qW(e),await this.trainEnd(e))}}function tU(e,t){if(null==e&&(e={}),e instanceof YW)return[e];if(Array.isArray(e)&&e[0]instanceof YW)return e;return WP(e).map((e=>new eU(e,t)))}class nU{constructor(){}static registerCallbackConstructor(e,t){Gd.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),nU.checkForDuplicate(t),null==nU.constructors[e]&&(nU.constructors[e]=[]),nU.constructors[e].push(t)}static checkForDuplicate(e){for(const t in nU.constructors){nU.constructors[+t].forEach((t=>{if(t===e)throw new DP("Duplicate callback constructor.")}))}}static clear(){nU.constructors={}}static createCallbacks(e){const t=[];for(const n in nU.constructors){const r=+n;e>=r&&t.push(...nU.constructors[r])}return t.map((e=>new e))}}function rU(e,t,n,r,s,a,o,i,l){const u=new QW,c=[new JW,...nU.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const p=new ZW(c);return p.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:p,history:u}}function sU(e,t={},n=!1){return KP(e,iy.SerializationMap.getMap().classNameMap,t,"layer",n)}function aU(e,t){return Dx((()=>{"float32"!==e.dtype&&(e=ig(e,"float32"));const n=nb(BV(e),t,!0),r=yw(n.shape,EV()),s=rk(rN(n,r));return Bw(e,s)}))}function oU(e,t){return Dx((()=>yk(BV(Pw(t,e)),-1)))}function iU(e,t){return Dx((()=>yk(Qw(Pw(t,e)),-1)))}function lU(e,t){return Dx((()=>{const n=Pw(e,t),r=hv(Qw(e),EV(),Number.MAX_VALUE),s=Qw(Bw(n,r));return Xy(100,yk(s,-1))}))}function uU(e,t){return Dx((()=>{const n=hv(t,EV(),Number.MAX_VALUE),r=Tk(ew(1,n)),s=hv(e,EV(),Number.MAX_VALUE),a=Tk(ew(1,s));return yk(BV(Pw(r,a)),-1)}))}function cU(e,t,n=!1){return Dx((()=>{if(n)t=KN(t);else{const e=nb(t,t.shape.length-1,!0);t=Bw(t,e)}return t=hv(t,EV(),1-EV()),pk(nb(Xy(ig(e,"float32"),Tk(t)),t.shape.length-1))}))}function pU(e,t,n=!1){return Dx((()=>{const r=ig(Lv(function(e){const t=[vV(e.shape)];return Qy(e,t)}(e)),"int32"),s=(t=hv(t,EV(),1-EV())).shape;return cU(Qy(cN(r,s[s.length-1]),s),t,n)}))}function hU(e,t){return Dx((()=>{let n;return n=hv(t,EV(),1-EV()),n=Tk(Bw(n,Pw(1,n))),yk(function(e,t){if(!Gd.arraysEqual(e.shape,t.shape))throw new DP(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Dx((()=>{const n=Zy(t),r=pk(Qw(t));return ew(Pw(n,Xy(t,e)),_k(Ak(r)))}))}(e,n),-1)}))}function dU(e,t){return Dx((()=>{const n=hv(e,EV(),1),r=hv(t,EV(),1);return nb(Xy(e,Tk(Bw(n,r))),-1)}))}function fU(e,t){return Dx((()=>{const n=aU(e,-1),r=aU(t,-1),s=Xy(n,r);return pk(nb(s,-1))}))}nU.constructors={};const mU={meanSquaredError:oU,meanAbsoluteError:iU,meanAbsolutePercentageError:lU,meanSquaredLogarithmicError:uU,squaredHinge:function(e,t){return Dx((()=>{const n=rN(0,Pw(1,Xy(e,t)));return yk(BV(n),-1)}))},hinge:function(e,t){return Dx((()=>{const n=rN(0,Pw(1,Xy(e,t)));return yk(n,-1)}))},categoricalHinge:function(e,t){return Dx((()=>{const n=nb(Xy(e,t),-1),r=ek(Xy(Pw(1,e),t),-1);return rN(0,ew(1,Pw(r,n)))}))},logcosh:function(e,t){return Dx((()=>{const n=Math.log(2),r=Pw(t,e),s=Pw(ew(r,Hv(Xy(-2,r))),n);return yk(s,-1)}))},categoricalCrossentropy:cU,sparseCategoricalCrossentropy:pU,binaryCrossentropy:hU,kullbackLeiblerDivergence:dU,poisson:function(e,t){return Dx((()=>{const n=Tk(ew(EV(),t));return yk(Pw(t,Xy(e,n)),-1)}))},cosineProximity:fU};function gU(e){if("string"==typeof e){if(e in mU)return mU[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new DP(t)}return e}function yU(e,t){return Dx((()=>{const n=Xy(.5,pN(t)),r=$V(Lw(t,n),e.dtype);return yk(Av(e,r),-1)}))}function bU(e,t){return Dx((()=>$V(Av(jk(e,-1),jk(t,-1)),"float32")))}function xU(e,t){return Dx((()=>ig(nb(Kw(Av(e,1),Av(t,1))),"float32")))}function wU(e,t){return Dx((()=>{const n=xU(e,t),r=function(e,t){return Dx((()=>ig(nb(Kw(Av(e,0),Av(t,1))),"float32")))}(e,t),s=ew(n,r);return ig(Uw(Lw(s,0),Bw(n,s),0),"float32")}))}function kU(e,t){return hU(e,t)}function vU(e,t){return e.rank===t.rank&&(e=ik(e,[e.rank-1])),(t=jk(t,-1)).dtype!==e.dtype&&(t=ig(t,e.dtype)),ig(Av(e,t),"float32")}const NU=cU,SU=pU,IU={binaryAccuracy:yU,categoricalAccuracy:bU,precision:wU,categoricalCrossentropy:NU,sparseCategoricalCrossentropy:SU,mse:oU,MSE:oU,mae:iU,MAE:iU,mape:lU,MAPE:lU,cosine:fU};function TU(e){if("string"==typeof e&&e in IU)return IU[e];if("string"!=typeof e&&null!=e)return e;throw new DP(`Unknown metric ${e}`)}function EU(e){if(BP(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(mU))if(mU[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(IU))if(IU[n]===e){t=n;break}return void 0!==t?t:e.name}}function $U(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!CU(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function CU(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!CU(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!CU(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function AU(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}r("_".repeat(t)),_U(a,n,r),r("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)s?RU(i[e],n,r):DU(i[e],n,o,r),r((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?gW(e.collectedTrainableWeights):gW(e.trainableWeights);return t}(e),u=gW(e.nonTrainableWeights);r(`Total params: ${l+u}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${u}`),r("_".repeat(t))}function _U(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function RU(e,t,n){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}_U([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function DU(e,t,n,r){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const o=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];o.push(`${n}[${r}][${s}]`)}const i=e.name,l=e.getClassName(),u=0===o.length?"":o[0];_U([`${i} (${l})`,a,s,e.countParams().toString(),u],t,r);for(let e=1;e<o.length;++e)_U(["","","","",o[e]],t,r)}function FU(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function OU(e,t){if(null===e)return null;if("string"==typeof e)return GP(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];FU(t,s,r)?n.push(r):n.push(OU(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=GP(n);t[e]=OU(r,e)}}return t}}function MU(e,t){if(null==e)return null;if("string"==typeof e)return UP(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];FU(t,s,r)?n.push(r):n.push(MU(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],s=UP(n);t[s]="name"!==n&&"className"!==n||"string"!=typeof r?MU(r,n):r}return t}}
/** @license See the LICENSE file. */class LU extends IW{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=oV(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],YP(this.inputs).length!==this.inputs.length)throw new DP(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);YP(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;BP(0===n,"input layer has >1 nodes"),BP(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof EW))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},o=[],i=(e,t,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=e.sourceLayer,s=e.nodeIndex,l=e.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new RP(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(LU.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const r=u.inputTensors[e],s=u.inboundLayers[e],a=u.nodeIndices[e],o=u.tensorIndices[e];i(r,t,n,s,a,o)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);o.push(u)},l=[],u=[];for(const e of this.outputs)i(e,l,u);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const o=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,o),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],o=e.nodeIndices[r],i=s.inboundNodes[o],l=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,l),n[i.id]=i}}const p={};for(const e in t){const r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}const h={};for(const e in r){const t=r[e];t in h||(h[t]=[]),h[t].push(s[e])}let d=Object.keys(h).map((e=>parseInt(e,10))).sort(XP);this.layers=[];for(const e of d){const t=h[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof LU&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,d=Object.keys(p).map((e=>parseInt(e,10))).sort(XP);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of p[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new RP(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new RP(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new NW({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new DP("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new DP(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new DP(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new DP(`${e.length} of ${r} weights are not set: ${e}`)}xW(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 4.0.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=MU(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Dx((()=>{e=WP(e);const n=new CW;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return RW(this.outputs,n,t)}))}computeMask(e,t){return Dx((()=>{let n;return e=WP(e),n=null==t?zP(null,e.length):WP(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=dW(e);if(t.length!==this.inputLayers.length)throw new DP(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(XP);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${s.name}_${a}_${o}`];r.push(i)}const s=dW(t.computeOutputShape(VP(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n[`${t.name}_${a}_${e}`]=s[e]}}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];BP(t in n),s.push(n[t])}return VP(s)}runInternalGraph(e,t){null==t&&(t=zP(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],o=t[r];n[s.id]=[a,o]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(XP);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,o,i,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),i=WP(t.call(e,u)),l=WP(t.computeMask(e,n)),r=[e],o=[n]}else r=a.map((e=>e[0])),o=a.map((e=>e[1])),null==u.mask&&(u.mask=o),i=WP(t.call(r,u)),l=WP(t.computeMask(r,o));if(t.activityRegularizer)throw new FP("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=i[e],a=l[e];n[t.id]=[r,a]}}}}const s=[],a=[],o=[];for(const e of this.outputs){BP(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];o.push(t.shape),s.push(t),a.push(r)}return[s,a,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof LU?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=LU.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new DP(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new DP("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new DP(`No such layer: ${e}`)}calculateLosses(){return Dx((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=LU.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=LU.nodeKey(e,n);let o={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],i=r.tensorIndices[n];let l=t[LU.nodeKey(s,a)];null==l&&(l=0),e.push([s.name,l,i,o])}a.push(e)}}}const o={};o.name=e.name,o.className=r,o.config=s,o.inboundNodes=a,n.push(o)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=LU.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];r.push([n.name,o,i])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=LU.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];s.push([n.name,o,i])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function i(e,t){const n=[];let r;for(const a of t){const i=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(i in s))return void o(e,t);const c=s[i];if(c.inboundNodes.length<=l)return void o(e,t);const p=c.inboundNodes[l];n.push(p.outputTensors[u])}n.length>0&&e.apply(VP(n),r)}function l(e){const n=e.name,a=sU(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new DP(`Corrupted configuration, expected array for nodeData: ${e}`);o(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!ZP(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)i(t,n)}}const p=[],h=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];BP(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];BP(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}return new e({inputs:p,outputs:h,name:u})}get stateful(){if(this._stateful)throw new DP("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Dx((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function zU(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function BU(e,t){return zU(e,t,"classWeight")}async function PU(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Dx((()=>{if(1===e.shape.length)return lg(e);if(2===e.shape.length){if(e.shape[1]>1){return jk(e,1)}if(1===e.shape[1])return Qy(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());Fx(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),hw(s,"float32")}return null}function VU(e,t){return Xy(e,t)}function WU(e,t){let n,r;const s=t;n=s.xs,r=s.ys,Gd.assert(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=UU("input",e.inputNames,n),o=UU("output",e.outputNames,r),i=a[0].shape[0];Gd.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Gd.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Gd.assert(a[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)Gd.assert(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:a,ys:o}}function UU(e,t,n){if(n instanceof Ef)return[n];if(Array.isArray(n))return Gd.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new DP(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function GU(e,t,n){const r=null!=n.batchesPerEpoch;if(Gd.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Gd.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Gd.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Gd.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Gd.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,o;if(s)if(HU(n.validationData))Gd.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new FP("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,o=e.ys}const i=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=tU(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:h,history:d}=rU(c,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,s,u);h.setModel(e),e.history=d,await h.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await h.onEpochBegin(f);let c=0,p=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=WU(e,t.value),a={};a.batch=p,a.size=r[0].shape[0],await h.onBatchBegin(p,a);const o=[];if(null!=n.classWeight){const t=BU(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await PU(s[e],null,t[e]))}const u=r.concat(s).concat(o),d=i(u);Fx(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,Ox(n)}await h.onBatchEnd(p,a),jW(a),p++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=HU(n.validationData)?WP(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):WP(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await h.onEpochEnd(f,u),f++,e.stopTraining_)break}return await h.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function HU(e){return"function"==typeof e.iterator}async function qU(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new FP("Verbose mode is not implemented yet.");Gd.assert(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,l=0;for(;!r||l<n.batches;){const t=await o.next();if(a=Dx((()=>{if(t.value){const{xs:n,ys:r}=WU(e,t.value),o=n.concat(r),u=Dx((()=>s(o)));if(Fx(o),0===l)for(let e=0;e<u.length;++e)a.push(Zx(0));const c=o[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=Dx((()=>ew(a[e],Xy(c,t)))),l>0&&Fx(n)}Fx(u),i+=c,++l}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=Bw(a[e],i),Fx(t)}return VP(a)}function jU(e){Gd.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function KU(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>AV(e,t,n-t))):AV(e,t,n-t)}function XU(e,t){return Dx((()=>null==e?null:Array.isArray(e)?e.map((e=>XU(e,t))):zV(e,"int32"===t.dtype?t:ig(t,"int32"))))}function YU(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}async function ZU(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,o,i,l,u,c,p,h;e.isTraining=!0;try{const d=null==r.batchSize?32:r.batchSize;jU(d);const f=!1,m=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,f,d);s=m[0],a=m[1],h=m[2];let g,y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2!==r.validationData.length)throw 3===r.validationData.length?new FP("validationData including sample weights is not supported yet."):new DP(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);l=r.validationData[0],u=r.validationData[1];const t=!0,n=await e.standardizeUserData(l,u,null,null,t,d);c=n[0],p=n[1],g=c.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];c=KU(s,e,t),o=s,s=KU(s,0,e),p=KU(a,e,t),i=a,a=KU(a,0,e),g=c.concat(p)}else null!=r.validationSteps&&(y=!0);const b=s.concat(a).concat(h);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const N=tU(r.callbacks,r.yieldEvery),S=await async function(e,t,n,r,s,a,o,i,l,u,c,p,h,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==h&&(h=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new DP("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=IV(0,g)),null==o&&(o=1);const{callbackList:b,history:x}=rU(i,o,a,h,g,d,s,m,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let o=h;o<a;++o){await b.onEpochBegin(o);const a={};if(null!=d)throw new FP("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new FP("batch shuffling is not implemneted yet");c&&Gd.shuffle(y);const o=hw(y),i=YU(g,s);for(let c=0;c<i.length;++c){const p={};if(await b.onBatchBegin(c,p),Dx((()=>{const h=i[c][0],d=i[c][1],f=AV(o,h,d-h);p.batch=c,p.size=d-h;const g=XU(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];p[t]=n,Ox(n)}if(c===i.length-1&&m){const t=e.testLoop(l,u,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];Ox(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,p),jW(p),e.stopTraining_)break}o.dispose()}if(await b.onEpochEnd(o,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,r.epochs,r.verbose,N,k,g,r.shuffle,v,r.initialEpoch,null,null);return S}finally{e.isTraining=!1,QU(s,t),QU(a,n),QU(o,t),QU(i,n),QU(c,l),QU(p,u),null!=h&&Fx(h)}}function JU(e){const t=[];e instanceof Ef&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(CV(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function QU(e,t){if(null==e)return;const n=[];if(t instanceof Ef)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof Ef)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function eG(e){return Array.isArray(e)}function tG(e){return!function(e){return e instanceof Ef}(e)&&!eG(e)}function nG(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(eG(e)&&e.length>0)t=!0;else if(tG(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new DP(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(tG(e)){a=[];for(const n of t){if(null==e[n])throw new DP(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(eG(e)){if(e.length!==t.length)throw new DP(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new DP(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=JU(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new DP(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const a=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&a!==i)throw new DP(`${s} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${s} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function rG(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new DP(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new DP(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new DP(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const i=o.shape[a],l=n[e][a];if(null!=l&&l!==i)throw new DP(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class sG extends LU{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new DP("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");AU(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>zS.adagrad(.01),Adadelta:()=>zS.adadelta(1,.95,EV()),Adam:()=>zS.adam(.001,.9,.999,EV()),Adamax:()=>zS.adamax(.002,.9,.999,EV(),0),RMSProp:()=>zS.rmsprop(.001,.9,0,EV()),SGD:()=>zS.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new DP(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof CS))throw new DP("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new DP(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>gU(e)))}else{const n=gU(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new DP(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(gU(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],yV("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};yV("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,a;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===hU?-1!==["accuracy","acc"].indexOf(o)?r=yU:-1!==["crossentropy","ce"].indexOf(o)&&(r=kU):this.lossFunctions[e]===pU?-1!==["accuracy","acc"].indexOf(o)?r=vU:-1!==["crossentropy","ce"].indexOf(o)&&(r=SU):-1!==["accuracy","acc"].indexOf(o)?r=bU:-1!==["crossentropy","ce"].indexOf(o)&&(r=NU),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),a=r,n=""+s}else{const e=TU(o);a=e,n=""+EU(o)}let t;yV(n,(()=>{t=a})),s(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;jU(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const o=this.testFunction;return VP(this.testLoop(o,a,r,n.verbose,n.steps))}finally{QU(s[0],e),QU(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),qU(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new DP(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new DP(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new DP("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new CW;if(e instanceof Ef&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new DP(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new DP(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const o=RW(s,a);return n?o:o[0]}retrieveSymbolicTensors(e){const t=zP(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const o=a.indexOf(e[r]);if(-1!==o&&(t[r]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new DP(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Dx((()=>{const r=this.checkNumSamples(e);if(n)throw new FP("Verbose predictLoop() is not implemented yet.");const s=YU(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t){Dx((()=>{const n=s[t][0],r=s[t][1],a=KU(e,n,r),o=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)o.push({key:this.inputs[e],value:a[e]});else o.push({key:this.inputs[0],value:a});const i=new CW(o);return RW(this.outputs,i)})).forEach(((e,t)=>a[t].push(e)))}return VP(a.map((e=>Px(e,0))))}))}predict(e,t={}){const n=JU(e);rG(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return jU(r),this.predictLoop(n,r)}finally{QU(n,e)}}predictOnBatch(e){rG(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new RP("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===pU?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=YP(e.map((e=>e.shape[0])));r.sort();const s=YP(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new DP(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new DP(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!Gd.arraysEqual(r,s))throw new DP(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=nG(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=nG(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[oU,hU,cU];for(let s=0;s<e.length;++s){const a=e[s],o=t[s],i=n[s];if(null!=o){if(o===cU&&1===a.shape[a.shape.length-1])throw new DP(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const e=a.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new DP(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new DP(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[o,i]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const e=BU(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await PU(i[t],null,e[t]))}return[o,i,l]}testLoop(e,t,n,r=0,s){return Dx((()=>{const a=this.checkNumSamples(t,n,s,"steps"),o=[];if(r>0)throw new FP("Verbose mode is not implemented yet.");if(null!=s)throw new FP("steps mode in testLoop() is not implemented yet");{const r=YU(a,n),s=hw(IV(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],i=r[n][1],l=AV(s,a,i-a),u=XU(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)o.push(Zx(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=ew(o[e],Xy(i-a,t))}}for(let e=0;e<o.length;++e)o[e]=Bw(o[e],a)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;if(PP(e,r)>1){s+=`_${PP(e.slice(0,n),r)}`}t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new CW(e),i=RW(this.outputs,o,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],i[e]);null!=s[e]&&(n=VU(n,s[e]));const a=yk(n);t.push(a),l=0===e?n:ew(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=yk(t(r[s],i[s]))}Ox(n),a.push(n)}return l=yk(l),this.calculateLosses().forEach((e=>{l=ew(l,e)})),l}),!0,o)].concat(a)}}makeTestFunction(){this.testFunction=e=>Dx((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const o=new CW(a),i=RW(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=yk(r(s[e],i[e]));n=0===e?a:ew(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=yk(n(s[r],i[r]));t.push(a)}return t}))}async fit(e,t,n={}){return ZU(this,e,t,n)}async fitDataset(e,t){return GU(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),o=[];for(const e of a){const t=await e.data();o.push(t[0])}return Fx(a),QU(n[0],e),QU(n[1],t),VP(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Rx().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Rx().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=UP(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>UP(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=UP(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[UP(EU(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>UP(EU(e))));{const e={};for(const t in this.metrics)e[t]=UP(EU(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=sU(OU(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=GP(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>GP(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=GP(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>GP(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=GP(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=cg.getSaveHandlers(e);if(0===t.length)throw new DP(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new DP(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new DP("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await cg.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.0.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await cg.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=cg.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;$U(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){$U(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}sG.className="Model",iy.registerClass(sG);class aG extends sG{}aG.className="Functional",iy.registerClass(aG);class oG extends sG{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:oV("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new DP(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof oG||e instanceof sG;let n;if(t){if(n=e,1!==n.outputs.length)throw new DP("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new DP("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new DP("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=$W({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new DP(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new DP("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=TW(this.outputs[0])}this.inboundNodes=[],new NW({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:zP(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(mW(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new sG({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new RP("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new RP("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new RP("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new RP("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new DP("Legacy serialization format not supported yet.");s=t}else Gd.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const o=new e(a);if(!(o instanceof oG))throw new FP(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of s){const t=sU(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new DP("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new DP("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}oG.className="Sequential",iy.registerClass(oG);class iG extends iy.Serializable{getConfig(){return{}}}class lG extends iG{apply(e,t=1){return function(e,t=1){if(1!==t)throw new FP(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return jy(e)}(e,t)}}lG.className="elu",iy.registerClass(lG);class uG extends iG{apply(e){return zN(e)}}uG.className="selu",iy.registerClass(uG);class cG extends iG{apply(e){return Zy(e)}}cG.className="relu",iy.registerClass(cG);class pG extends iG{apply(e){return Dx((()=>Sk(6,Zy(e))))}}pG.className="relu6",iy.registerClass(pG);class hG extends iG{apply(e){return e}}hG.className="linear",iy.registerClass(hG);class dG extends iG{apply(e){return eb(e)}}dG.className="sigmoid",iy.registerClass(dG);class fG extends iG{apply(e){return function(e){return Dx((()=>{const t=ew(.5,Xy(.2,e));return hv(t,0,1)}))}(e)}}fG.className="hardSigmoid",iy.registerClass(fG);class mG extends iG{apply(e){return Hv(e)}}mG.className="softplus",iy.registerClass(mG);class gG extends iG{apply(e){return function(e){return Dx((()=>Bw(e,ew(Qw(e),1))))}(e)}}gG.className="softsign",iy.registerClass(gG);class yG extends iG{apply(e){return nv(e)}}yG.className="tanh",iy.registerClass(yG);class bG extends iG{apply(e,t=-1){return KN(e,t)}}bG.className="softmax",iy.registerClass(bG);class xG extends iG{apply(e,t=-1){return jv(e,t)}}xG.className="logSoftmax",iy.registerClass(xG);class wG extends iG{apply(e,t=1){return Dx((()=>Xy(eb(Xy(e,t)),e)))}}wG.className="swish",iy.registerClass(wG);class kG extends iG{apply(e){return Dx((()=>Xy(e,nv(Hv(e)))))}}function vG(e){return e.getClassName()}function NG(e,t={}){return KP(e,iy.SerializationMap.getMap().classNameMap,t,"activation")}function SG(e){if(null==e){const e={className:"linear",config:{}};return NG(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},NG(t)}return e instanceof iG?e:NG(e)}function IG(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}kG.className="mish",iy.registerClass(kG);class TG extends iy.Serializable{}class EG extends TG{constructor(e){super(),IG(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Dx((()=>{let t=Hx([1]);return this.hasL1&&(t=ew(t,nb(Xy(this.l1,Qw(e))))),this.hasL2&&(t=ew(t,nb(Xy(this.l2,BV(e))))),Qy(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}EG.className="L1L2",iy.registerClass(EG);const $G={l1l2:"L1L2"};function CG(e){return qP(e)}function AG(e,t={}){return KP(e,iy.SerializationMap.getMap().classNameMap,t,"regularizer")}function _G(e){if(null==e)return null;if("string"==typeof e){return AG({className:e in $G?$G[e]:e,config:{}})}return e instanceof TG?e:AG(e)}class RG extends IW{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=fW(e);let n=Zy(e);return null!=this.maxValue&&(n=hv(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}RG.className="ReLU",iy.registerClass(RG);class DG extends IW{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=fW(e);return Ky(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}DG.className="LeakyReLU",iy.registerClass(DG);class FG extends IW{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=pW(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=_G(e.alphaRegularizer),this.alphaConstraint=HW(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new DP(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=mW(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new wW({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=fW(e),Yy(e,this.alpha.read())}getConfig(){const e={alphaInitializer:cW(this.alphaInitializer),alphaRegularizer:CG(this.alphaRegularizer),alphaConstraint:UW(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}FG.className="PReLU",iy.registerClass(FG);class OG extends IW{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new FP(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=fW(e);return jy(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}OG.className="ELU",iy.registerClass(OG);class MG extends IW{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=fW(e);return Xy(n,ig(Lw(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}MG.className="ThresholdedReLU",iy.registerClass(MG);class LG extends IW{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new bG).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=fW(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function zG(e,t,n){if("number"==typeof e)return zP(e,t);if(e.length!==t)throw new DP(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new DP(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function BG(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function PG(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+SV([n-t,0]);else{if("same"!==r)throw new DP(`Unsupport padding mode: ${r}.`);e*=t}return e}function VG(e,t){return Dx((()=>(dV(t),"channelsFirst"===t?dk(e,[0,2,3,1]):e)))}function WG(e,t){return Dx((()=>(dV(t),"channelsFirst"===t?dk(e,[0,2,3,4,1]):e)))}function UG(e,t,n,r=1,s="valid",a,o=1){return Dx((()=>{if(null==a&&(a="channelsLast"),dV(a),3!==e.shape.length)throw new DP(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new DP(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new DP(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=dk(e,[0,2,1])),"causal"===s)throw new FP("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=yv(e,t,r,"same"===s?"same":"valid","NWC",o);return null!=n&&(i=VV(i,n)),i}))}function GG(e,t,n,r=[1,1],s="valid",a,o,i=null){return Dx((()=>{if(null==a&&(a="channelsLast"),dV(a),3!==e.rank&&4!==e.rank)throw new DP(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new DP(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=VG(e,a);if("causal"===s)throw new FP("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Qx.conv2d({x:l,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===a&&(l=dk(l,[0,3,1,2])),l}))}function HG(e,t,n,r=[1,1,1],s="valid",a,o){return Dx((()=>{if(null==a&&(a="channelsLast"),dV(a),4!==e.rank&&5!==e.rank)throw new DP(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new DP(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=WG(e,a);if("causal"===s)throw new FP("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=xv(i,t,r,"same"===s?"same":"valid","NDHWC",o),null!=n&&(i=VV(i,n)),"channelsFirst"===a&&(i=dk(i,[0,4,1,2,3])),i}))}LG.className="Softmax",iy.registerClass(LG);class qG extends IW{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",qG.verifyArgs(t),this.rank=e,eV(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new FP(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=zG(t.kernelSize,e,"kernelSize"),this.strides=zG(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,fV(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,dV(this.dataFormat),this.activation=SG(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=pW(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=HW(t.biasConstraint),this.biasRegularizer=_G(t.biasRegularizer),this.activityRegularizer=_G(t.activityRegularizer),this.dilationRate=zG(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new DP(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new DP(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new DP(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(BP("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!QP(e.kernelSize,"number",1,3))throw new DP(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:vG(this.activation),useBias:this.useBias,biasInitializer:cW(this.biasInitializer),biasRegularizer:CG(this.biasRegularizer),activityRegularizer:CG(this.activityRegularizer),biasConstraint:UW(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class jG extends qG{constructor(e,t){super(e,t),this.kernel=null,jG.verifyArgs(t),this.filters=t.filters,eV(this.filters,"filters"),this.kernelInitializer=pW(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=HW(t.kernelConstraint),this.kernelRegularizer=_G(t.kernelRegularizer)}build(e){e=mW(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new DP(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Dx((()=>{let t;e=fW(e);const n=null==this.bias?null:this.bias.read(),r=nV(this.activation.getClassName());if(null!=r&&2===this.rank)t=GG(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=UG(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=GG(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new FP("convolutions greater than 3D are not implemented yet.");t=HG(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=mW(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=BG(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:cW(this.kernelInitializer),kernelRegularizer:CG(this.kernelRegularizer),kernelConstraint:UW(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new DP(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class KG extends jG{constructor(e){super(2,e),KG.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!QP(e.kernelSize,"number",1,2))throw new DP(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}KG.className="Conv2D",iy.registerClass(KG);class XG extends jG{constructor(e){super(3,e),XG.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new DP(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}XG.className="Conv3D",iy.registerClass(XG);class YG extends KG{constructor(e){if(super(e),this.inputSpec=[new wW({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new DP(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=mW(e)).length)throw new DP("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new DP("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new wW({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Dx((()=>{let t=fW(e);if(4!==t.shape.length)throw new DP(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const o=n[s],i=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],p=this.strides[1],h=[r,PG(o,c,l,this.padding),PG(i,p,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=dk(t,[0,2,3,1]));let d=bv(t,this.kernel.read(),h,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=dk(d,[0,3,1,2])),null!=this.bias&&(d=VV(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=mW(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[r]=PG(t[r],i,a,this.padding),t[s]=PG(t[s],l,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}YG.className="Conv2DTranspose",iy.registerClass(YG);class ZG extends XG{constructor(e){if(super(e),this.inputSpec=[new wW({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new DP(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=mW(e)).length)throw new DP("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new DP("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new wW({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Dx((()=>{let t=fW(e);if(5!==t.shape.length)throw new DP(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,o;"channelsFirst"===this.dataFormat?(o=2,s=3,a=4):(o=1,s=2,a=3);const i=n[o],l=n[s],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,PG(i,d,c,this.padding),PG(l,f,p,this.padding),PG(u,m,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=dk(t,[0,2,3,4,1]));let y=kv(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=dk(y,[0,4,1,2,3])),null!==this.bias&&(y=VV(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=mW(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const o=this.kernelSize[0],i=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],p=this.strides[2];return t[n]=this.filters,t[r]=PG(t[r],u,o,this.padding),t[s]=PG(t[s],c,i,this.padding),t[a]=PG(t[a],p,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}ZG.className="Conv3DTranspose",iy.registerClass(ZG);class JG extends jG{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new DP("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new DP("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new DP(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=pW(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=_G(t.depthwiseRegularizer),this.depthwiseConstraint=HW(t.depthwiseConstraint),this.pointwiseInitializer=pW(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=_G(t.pointwiseRegularizer),this.pointwiseConstraint=HW(t.pointwiseConstraint)}build(e){if((e=mW(e)).length<this.rank+2)throw new DP(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new DP(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new wW({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Dx((()=>{let t;if(e=fW(e),1===this.rank)throw new FP("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=dk(e,[0,2,3,1])),t=BN(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=VV(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=dk(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=cW(this.depthwiseInitializer),e.pointwiseInitializer=cW(this.pointwiseInitializer),e.depthwiseRegularizer=CG(this.depthwiseRegularizer),e.pointwiseRegularizer=CG(this.pointwiseRegularizer),e.depthwiseConstraint=UW(this.depthwiseConstraint),e.pointwiseConstraint=UW(this.pointwiseConstraint),e}}JG.className="SeparableConv";class QG extends JG{constructor(e){super(2,e)}}QG.className="SeparableConv2D",iy.registerClass(QG);class eH extends jG{constructor(e){super(1,e),eH.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!QP(e.kernelSize,"number",1,1))throw new DP(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}eH.className="Conv1D",iy.registerClass(eH);class tH extends IW{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Dx((()=>{if(e=fW(e),"channelsLast"===this.dataFormat){const t=RV(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return RV(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=RV(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return RV(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}tH.className="Cropping2D",iy.registerClass(tH);class nH extends IW{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,JP(lV,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Dx((()=>{let t=fW(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=dk(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?SS.resizeNearestNeighbor(t,[e,r]):SS.resizeBilinear(t,[e,r]);return dk(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?SS.resizeNearestNeighbor(t,[e,r]):SS.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}nH.className="UpSampling2D",iy.registerClass(nH);class rH extends qG{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=pW(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=HW(e.depthwiseConstraint),this.depthwiseRegularizer=_G(e.depthwiseRegularizer)}build(e){if((e=mW(e)).length<4)throw new DP(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new DP(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Dx((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Dx((()=>{null==s&&(s="channelsLast"),dV(s);let o=VG(e,s);if(4!==e.rank)throw new DP(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new DP(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=aw(o,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(o=dk(o,[0,3,1,2])),o}))}(e=fW(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=VV(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=mW(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=BG(t,this.kernelSize[0],this.padding,this.strides[0]),a=BG(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=cW(this.depthwiseInitializer),e.depthwiseRegularizer=CG(this.depthwiseRegularizer),e.depthwiseConstraint=UW(this.depthwiseRegularizer),e}}rH.className="DepthwiseConv2D",iy.registerClass(rH);var sH={};function aH(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new DP("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function oH(e,t,n,r=!1,s,a,o=!1,i=!1){return Dx((()=>{const l=t.shape.length;if(l<3)throw new DP(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(IV(2,l));if(t=dk(t,u),null!=a)throw new FP("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=ig(ig(s,"bool"),"float32")).rank===l-1&&(s=uk(s,-1)),s=dk(s,u)),r&&(t=Yx(t,0),null!=s&&(s=Yx(s,0)));const c=[];let p,h=n;const d=t.shape[0],f=Yw(t);let m,g;null!=s&&(m=Yw(s));for(let t=0;t<d;++t){const n=f[t],r=Dx((()=>e(n,h)));if(null==s)p=r[0],h=r[1];else{const e=Dx((()=>{const e=m[t],n=Pw(pN(e),e);return{output:ew(Xy(r[0],e),Xy(h[0],n)),newStates:h.map(((t,s)=>ew(Xy(r[1][s],e),Xy(t,n))))}}));p=e.output,h=e.newStates}i&&c.push(p)}if(i){g=Xw(c,1)}return[p,g,h]}))}t(sH,"ConvLSTM2DCell",(()=>xH),(e=>xH=e)),t(sH,"ConvLSTM2D",(()=>wH),(e=>wH=e));class iH extends IW{constructor(e){let t;if(super(e),null==e.cell)throw new DP("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new mH({cells:e.cell}):e.cell,null==t.stateSize)throw new DP("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new wW({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return IV(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){hW(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Dx((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new FP("Constants support is not implemented in RNN yet.");hW(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new wW({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Gd.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new DP(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new wW({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Dx((()=>{if(!this.stateful)throw new _P("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new DP("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Hx([n,e]))):this.states_=[Hx([n,this.cell.stateSize])];else if(null==e)Fx(this.states_),null!=this.keptStates&&(Fx(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Hx([n,e]))):this.states_[0]=Hx([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new DP(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Fx(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!Gd.arraysEqual(r.shape,a))throw new DP(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>Ox(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=aH(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],o=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new wW({shape:e.shape}));o=o.concat(this.stateSpec)}null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof kW){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return Dx((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=fW(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new DP(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},i=oH(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=i[0],u=i[1],c=i[2];this.stateful&&this.resetStates(c,r);const p=this.returnSequences?u:l;return this.returnState?[p].concat(c):p}))}getInitialState(e){return Dx((()=>{let t=Hx(e.shape);return t=nb(t,[1,2]),t=CV(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?OV(t,[1,e]):t)):this.cell.stateSize>1?[OV(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===iH.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const r=sU(t.cell,n);return new e(Object.assign(t,{cell:r}))}}iH.className="RNN",iy.registerClass(iH);class lH extends IW{}class uH extends lH{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,eV(this.units,"units"),this.activation=SG(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=pW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=pW(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=pW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=_G(e.kernelRegularizer),this.recurrentRegularizer=_G(e.recurrentRegularizer),this.biasRegularizer=_G(e.biasRegularizer),this.kernelConstraint=HW(e.kernelConstraint),this.recurrentConstraint=HW(e.recurrentConstraint),this.biasConstraint=HW(e.biasConstraint),this.dropout=NV([1,SV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=NV([1,SV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=mW(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Dx((()=>{if(2!==e.length)throw new DP(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gH({ones:()=>pN(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gH({ones:()=>pN(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;s=LV(null!=a?Xy(e,a):e,this.kernel.read()),null!=this.bias&&(s=VV(s,this.bias.read())),null!=o&&(n=Xy(n,o));let i=ew(s,LV(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:vG(this.activation),useBias:this.useBias,kernelInitializer:cW(this.kernelInitializer),recurrentInitializer:cW(this.recurrentInitializer),biasInitializer:cW(this.biasInitializer),kernelRegularizer:CG(this.kernelRegularizer),recurrentRegularizer:CG(this.recurrentRegularizer),biasRegularizer:CG(this.biasRegularizer),activityRegularizer:CG(this.activityRegularizer),kernelConstraint:UW(this.kernelConstraint),recurrentConstraint:UW(this.recurrentConstraint),biasConstraint:UW(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}uH.className="SimpleRNNCell",iy.registerClass(uH);class cH extends iH{constructor(e){e.cell=new uH(e),super(e)}call(e,t){return Dx((()=>{null!=this.cell.dropoutMask&&(Fx(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Fx(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}cH.className="SimpleRNN",iy.registerClass(cH);class pH extends lH{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new DP("GRUCell does not support reset_after parameter set to true.");this.units=e.units,eV(this.units,"units"),this.activation=SG(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=SG(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=pW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=pW(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=pW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=_G(e.kernelRegularizer),this.recurrentRegularizer=_G(e.recurrentRegularizer),this.biasRegularizer=_G(e.biasRegularizer),this.kernelConstraint=HW(e.kernelConstraint),this.recurrentConstraint=HW(e.recurrentConstraint),this.biasConstraint=HW(e.biasConstraint),this.dropout=NV([1,SV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=NV([1,SV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=mW(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Dx((()=>{if(2!==e.length)throw new DP(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gH({ones:()=>pN(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gH({ones:()=>pN(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let o,i,l;0<this.dropout&&this.dropout<1&&(e=Xy(e,s[0]));let u=LV(e,this.kernel.read());this.useBias&&(u=VV(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Xy(r,a[0]));const c=this.recurrentKernel.read(),[p,h]=Gx(c,[2*this.units,this.units],c.rank-1),d=LV(r,p),[f,m,g]=Gx(u,3,u.rank-1),[y,b]=Gx(d,2,d.rank-1);o=this.recurrentActivation.apply(ew(f,y)),i=this.recurrentActivation.apply(ew(m,b));const x=LV(Xy(i,r),h);l=this.activation.apply(ew(g,x));const w=ew(Xy(o,r),Xy(ew(1,pk(o)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:vG(this.activation),recurrentActivation:vG(this.recurrentActivation),useBias:this.useBias,kernelInitializer:cW(this.kernelInitializer),recurrentInitializer:cW(this.recurrentInitializer),biasInitializer:cW(this.biasInitializer),kernelRegularizer:CG(this.kernelRegularizer),recurrentRegularizer:CG(this.recurrentRegularizer),biasRegularizer:CG(this.biasRegularizer),activityRegularizer:CG(this.activityRegularizer),kernelConstraint:UW(this.kernelConstraint),recurrentConstraint:UW(this.recurrentConstraint),biasConstraint:UW(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}pH.className="GRUCell",iy.registerClass(pH);class hH extends iH{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new pH(e),super(e)}call(e,t){return Dx((()=>{null!=this.cell.dropoutMask&&(Fx(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Fx(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}hH.className="GRU",iy.registerClass(hH);class dH extends lH{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,eV(this.units,"units"),this.activation=SG(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=SG(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=pW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=pW(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=pW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=_G(e.kernelRegularizer),this.recurrentRegularizer=_G(e.recurrentRegularizer),this.biasRegularizer=_G(e.biasRegularizer),this.kernelConstraint=HW(e.kernelConstraint),this.recurrentConstraint=HW(e.recurrentConstraint),this.biasConstraint=HW(e.biasConstraint),this.dropout=NV([1,SV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=NV([1,SV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=mW(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends qV{apply(t,r){const s=e.apply([n]),a=(new KV).apply([n]),o=e.apply([2*n]);return FV(FV(s,a),o)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Dx((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new DP(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gH({ones:()=>pN(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gH({ones:()=>pN(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;let i,l,u,c;0<this.dropout&&this.dropout<1&&(e=Xy(e,a[0]));let p=LV(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Xy(r,o[0])),p=ew(p,LV(r,this.recurrentKernel.read())),this.useBias&&(p=VV(p,this.bias.read()));const[h,d,f,m]=Gx(p,4,p.rank-1);i=this.recurrentActivation.apply(h),l=this.recurrentActivation.apply(d),u=ew(Xy(l,s),Xy(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Xy(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:vG(this.activation),recurrentActivation:vG(this.recurrentActivation),useBias:this.useBias,kernelInitializer:cW(this.kernelInitializer),recurrentInitializer:cW(this.recurrentInitializer),biasInitializer:cW(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:CG(this.kernelRegularizer),recurrentRegularizer:CG(this.recurrentRegularizer),biasRegularizer:CG(this.biasRegularizer),activityRegularizer:CG(this.activityRegularizer),kernelConstraint:UW(this.kernelConstraint),recurrentConstraint:UW(this.recurrentConstraint),biasConstraint:UW(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}dH.className="LSTMCell",iy.registerClass(dH);class fH extends iH{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new dH(e),super(e)}call(e,t){return Dx((()=>{null!=this.cell.dropoutMask&&(Fx(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Fx(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}fH.className="LSTM",iy.registerClass(fH);class mH extends lH{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Dx((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=r[o],a=0===o?[e[0]].concat(n):[a[0]].concat(n),a=i.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;hW(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{yV(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(sU(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return bW(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}xW(t)}}function gH(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,o=()=>null!=a?a(t(),n):WV(t(),n),i=()=>UV(o,t,r);if(!s||s<=1)return Ox(i().clone());return Array(s).fill(void 0).map(i).map((e=>Ox(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */mH.className="StackedRNNCells",iy.registerClass(mH);var yH=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class bH extends iH{constructor(e){if(e.unroll)throw new FP("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new FP("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new wW({ndim:5})]}call(e,t){return Dx((()=>{if(null!=this.cell.dropoutMask&&(Fx(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Fx(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new DP("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Dx((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=Hx([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){Dx((()=>{if(!this.stateful)throw new _P("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new DP("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Hx(s))):this.states_=[Hx(s)];else if(null==e)Fx(this.states_),null!=this.keptStates&&(Fx(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Hx(s))):this.states_[0]=Hx(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new DP(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Fx(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!Gd.arraysEqual(n.shape,r))throw new DP(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Ox(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,l=e[i?3:2],u=e[i?4:3],c=BG(l,r[0],s,a[0],o[0]),p=BG(u,r[1],s,a[1],o[1]);return[...e.slice(0,2),...i?[n,c,p]:[c,p,n]]}}bH.className="ConvRNN2D";class xH extends dH{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,eV(this.filters,"filters"),this.kernelSize=zG(n,2,"kernelSize"),this.kernelSize.forEach((e=>eV(e,"kernelSize"))),this.strides=zG(r||1,2,"strides"),this.strides.forEach((e=>eV(e,"strides"))),this.padding=s||"valid",fV(this.padding),this.dataFormat=a||"channelsLast",dV(this.dataFormat),this.dilationRate=zG(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>eV(e,"dilationRate")))}build(e){var t;e=mW(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new DP(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends qV{apply(e,t){return DV([n.apply([r]),xk([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Dx((()=>{if(3!==e.length)throw new DP(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gH({ones:()=>pN(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?Xy(t[n],e):e;let l=i(r,o,0),u=i(r,o,1),c=i(r,o,2),p=i(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gH({ones:()=>pN(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const h=this.recurrentDropoutMask;let d=i(s,h,0),f=i(s,h,1),m=i(s,h,2),g=i(s,h,3);const[y,b,x,w]=Gx(this.kernel.read(),4,3),[k,v,N,S]=this.useBias?Gx(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),p=this.inputConv(p,w,S,this.padding);const[I,T,E,$]=Gx(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,I),f=this.recurrentConv(f,T),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const C=this.recurrentActivation.apply(ew(l,d)),A=this.recurrentActivation.apply(ew(u,f)),_=ew(Xy(A,a),Xy(C,this.activation.apply(ew(c,m)))),R=Xy(this.recurrentActivation.apply(ew(p,g)),this.activation.apply(_));return[R,R,_]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=yH(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),r)}inputConv(e,t,n,r){const s=tw(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?VV(s,n,this.dataFormat):s}recurrentConv(e,t){return tw(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}xH.className="ConvLSTM2DCell",iy.registerClass(xH);class wH extends bH{constructor(e){const t=new xH(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}wH.className="ConvLSTM2D",iy.registerClass(wH);class kH extends IW{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);const n=fW(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return UV((()=>WV(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}kH.className="Dropout",iy.registerClass(kH);class vH extends kH{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}vH.className="SpatialDropout1D",iy.registerClass(vH);class NH extends IW{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,eV(this.units,"units"),this.activation=SG(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=pW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=pW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=HW(e.kernelConstraint),this.biasConstraint=HW(e.biasConstraint),this.kernelRegularizer=_G(e.kernelRegularizer),this.biasRegularizer=_G(e.biasRegularizer),this.activityRegularizer=_G(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=mW(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=mW(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);const n=fW(e),r=nV(this.activation.getClassName());let s;return null!=r?s=LV(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=LV(n,this.kernel.read()),null!=this.bias&&(s=VV(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:vG(this.activation),useBias:this.useBias,kernelInitializer:cW(this.kernelInitializer),biasInitializer:cW(this.biasInitializer),kernelRegularizer:CG(this.kernelRegularizer),biasRegularizer:CG(this.biasRegularizer),activityRegularizer:CG(this.activityRegularizer),kernelConstraint:UW(this.kernelConstraint),biasConstraint:UW(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}NH.className="Dense",iy.registerClass(NH);class SH extends IW{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=mW(e);for(const t of e.slice(1))if(null==t)throw new DP(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],vV(e,1)]}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);let n=fW(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=dk(n,e)}return function(e){if(e.rank<=1)throw new DP(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],vV(e.shape,1)];return Qy(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}SH.className="Flatten",iy.registerClass(SH);class IH extends IW{constructor(e){super(e),this.supportsMasking=!0,this.activation=SG(e.activation)}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);const n=fW(e);return this.activation.apply(n)}))}getConfig(){const e={activation:vG(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}IH.className="Activation",iy.registerClass(IH);class TH extends IW{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Dx((()=>{return e=fW(e),t=e,n=this.n,Dx((()=>{if(2!==t.shape.length)throw new DP(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return OV(CV(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}TH.className="RepeatVector",iy.registerClass(TH);class EH extends IW{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new DP("Can only specifiy one unknown dimension.");a=e}else s*=t}const o=vV(e);if(null!==a){if(0===s||o%s!=0)throw new DP(n);r[a]=o/s}else if(o!==s)throw new DP(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);const n=fW(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return Qy(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}EH.className="Reshape",iy.registerClass(EH);class $H extends IW{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=IV(1,e.dims.length+1);if(!Gd.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new wW({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=mW(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return dk(fW(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}$H.className="Permute",iy.registerClass($H);class CH extends IW{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=fW(e);return qk(bk(n,this.maskValue),-1)}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);const n=fW(e),r=qk(bk(n,this.maskValue),-1,!0);return Xy(n,ig(r,n.dtype))}))}}CH.className="Masking",iy.registerClass(CH);class AH extends IW{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(WP(e.inputLength))}this.inputDim=e.inputDim,eV(this.inputDim,"inputDim"),this.outputDim=e.outputDim,eV(this.outputDim,"outputDim"),this.embeddingsInitializer=pW(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=_G(e.embeddingsRegularizer),this.activityRegularizer=_G(e.activityRegularizer),this.embeddingsConstraint=HW(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Dx((()=>this.maskZero?(e=fW(e),bk(e,qx(e))):null))}computeOutputShape(e){if(e=mW(e),null==this.inputLength)return[...e,this.outputDim];const t=WP(this.inputLength);if(t.length!==e.length-1)throw new DP(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new DP(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);let n=fW(e);"int32"!==n.dtype&&(n=$V(n,"int32"));const r=zV(this.embeddings.read(),Qy(n,[n.size]));return Qy(r,mW(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:cW(this.embeddingsInitializer),embeddingsRegularizer:CG(this.embeddingsRegularizer),activityRegularizer:CG(this.activityRegularizer),embeddingsConstraint:UW(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}AH.className="Embedding",iy.registerClass(AH);class _H extends IW{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new FP}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new DP("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[mW(e)]),e.length<2)throw new DP(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=YP(t),t.length>1)throw new DP(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===YP(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Dx((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=SV(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=CV(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let o=Qy(r,[s].concat(vV(e.slice(1))));o=dk(o,[1,0]),o=Qy(o,a),t.push(o),n=!0}else if(e>1){const s=IV(1,e).concat([0]);t.push(dk(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=Qy(dk(Qy(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(IV(0,s-1));r=dk(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=YP(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Dx((()=>{if(null==t)return null;if(!Array.isArray(t))throw new DP("`mask` should be an Array");if(!Array.isArray(e))throw new DP("`inputs` should be an Array");if(t.length!==e.length)throw new DP(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:uk(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Kw(n,t[e]);return n}))}}class RH extends _H{constructor(e){super(e)}mergeFunction(e){return Dx((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ew(t,e[n]);return t}))}}RH.className="Add",iy.registerClass(RH);class DH extends _H{constructor(e){super(e)}mergeFunction(e){return Dx((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Xy(t,e[n]);return t}))}}DH.className="Multiply",iy.registerClass(DH);class FH extends _H{constructor(e){super(e)}mergeFunction(e){return Dx((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ew(t,e[n]);return Xy(1/e.length,t)}))}}FH.className="Average",iy.registerClass(FH);class OH extends _H{constructor(e){super(e)}mergeFunction(e){return Dx((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=rN(t,e[n]);return t}))}}OH.className="Maximum",iy.registerClass(OH);class MH extends _H{constructor(e){super(e)}mergeFunction(e){return Dx((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Sk(t,e[n]);return t}))}}MH.className="Minimum",iy.registerClass(MH);class LH extends _H{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new DP("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(Gd.arraysEqual(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new DP("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Dx((()=>DV(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new DP("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new DP("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new DP("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new DP(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Dx((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(ig(pN(e[n]),"bool")):t[n].rank<e[n].rank?r.push(uk(t[n],-1)):r.push(t[n]);const s=Px(r,this.axis);return Hk(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function zH(e,t){for(;e<0;)e+=t;return e}LH.className="Concatenate",iy.registerClass(LH);class BH extends _H{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Gd.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new FP("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new DP(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new DP(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>zH(t,e[n].shape.length))):[zH(this.axes,n.shape.length),zH(this.axes,r.shape.length)],this.normalize&&(n=aU(n,t[0]),r=aU(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new FP("batchDot is not implemented for tensors of 4D or higher rank yet");if(Gd.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Gd.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new FP("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Dx((()=>{let n,o;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=Qy(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=Qy(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?nb(Xy(e,t),a[0]):nb(Xy(dk(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;o=uw(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);o=ik(o,t)}return 1===o.shape.length&&(o=uk(o,1)),o}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[zH(this.axes,e.length),zH(this.axes,t.length)],n}computeOutputShape(e){Gd.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new FP("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}BH.className="Dot",iy.registerClass(BH);class PH extends IW{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);const n=fW(e);return UV((()=>ew(MV(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}PH.className="GaussianNoise",iy.registerClass(PH);class VH extends IW{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Dx((()=>{this.invokeCallHook(e,t);const n=fW(e);if(this.rate>0&&this.rate<1){return UV((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Xy(n,MV(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}VH.className="GaussianDropout",iy.registerClass(VH);class WH extends IW{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||fW(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Dx((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return UV((()=>{const t=fW(e),r=-1.7580993408473766;let s=jw(_N(n),this.rate);s=$V(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-a*r*this.rate,i=ew(Xy(t,s),Xy(ew(s,-1),r));return ew(Xy(i,a),o)}),(()=>fW(e)),t.training||!1)}return e}))}}function UH(e,t,n,r,s,a=.001){let o;if(2===e.rank)o=iv(e,t,n,r,s,a);else if(3===e.rank)o=lv(e,t,n,r,s,a);else{if(4!==e.rank)throw new FP(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=uv(e,t,n,r,s,a)}return o}function GH(e,t,n,r,s=.001){return Gd.arraysEqual(r.slice().sort(),IV(0,e.rank-1))?function(e,t,n,r,s=.001){return Dx((()=>{const a=iN(e,r),o=a.mean,i=a.variance;return[UH(e,o,i,n,t,s),o,i]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return Dx((()=>{const a=iN(e,r),o=a.mean,i=a.variance,l=[];for(const t of IV(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=Qy(o,l),c=Qy(i,l),p=null==t?null:Qy(t,l),h=null==n?null:Qy(n,l);return[UH(e,u,c,h,p,s),o,i]}))}(e,t,n,r,s)}WH.className="AlphaDropout",iy.registerClass(WH);class HH extends IW{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=pW(e.betaInitializer||"zeros"),this.gammaInitializer=pW(e.gammaInitializer||"ones"),this.movingMeanInitializer=pW(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=pW(e.movingVarianceInitializer||"ones"),this.betaConstraint=HW(e.betaConstraint),this.gammaConstraint=HW(e.gammaConstraint),this.betaRegularizer=_G(e.betaRegularizer),this.gammaRegularizer=_G(e.gammaRegularizer)}build(e){e=mW(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new DP(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new wW({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Dx((()=>{const n=null!=t.training&&t.training,r=fW(e),s=r.shape,a=s.length,o=IV(0,a),i=this.axis>=0?this.axis:this.axis+a;o.splice(i,1);const l=zP(1,a);l[i]=s[i];const u=o.slice();u.sort();const c=!Gd.arraysEqual(u,IV(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Qy(this.movingMean.read(),l),t=Qy(this.movingVariance.read(),l),n=this.center?Qy(this.beta.read(),l):null,s=this.scale?Qy(this.gamma.read(),l):null;return UH(r,e,t,n,s,this.epsilon)}return UH(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,h,d]=GH(r,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{Dx((()=>{const r=1-n,s=e.read(),a=Xy(Pw(s,t),r);e.write(Pw(s,a))}))};return(()=>{f(this.movingMean,h,this.momentum),f(this.movingVariance,d,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:cW(this.betaInitializer),gammaInitializer:cW(this.gammaInitializer),movingMeanInitializer:cW(this.movingMeanInitializer),movingVarianceInitializer:cW(this.movingVarianceInitializer),betaRegularizer:CG(this.betaRegularizer),gammaRegularizer:CG(this.gammaRegularizer),betaConstraint:UW(this.betaConstraint),gammaConstraint:UW(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}HH.className="BatchNormalization",iy.registerClass(HH);class qH extends IW{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=pW(e.betaInitializer||"zeros"),this.gammaInitializer=pW(e.gammaInitializer||"ones"),this.betaRegularizer=_G(e.betaRegularizer),this.gammaRegularizer=_G(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=mW(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==YP(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=fW(e),r=n.shape,s=r.length;return Dx((()=>{let{mean:e,variance:t}=iN(n,this.axis,!0);const a=zP(1,s);for(const e of this.axis)a[e]=r[e];const o=e=>null!=e&&e.shape.length!==s?Qy(e,a):e;let i=this.scale?o(this.gamma.read()):null,l=this.center?o(this.beta.read()):null;const u=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(u.push(r[e]),c.push(1)):(u.push(1),c.push(r[e]));return e=Nw(e,u),t=Nw(t,u),null!=i&&(i=Nw(i,c)),null!=l&&(l=Nw(l,c)),UH(n,e,t,l,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:cW(this.betaInitializer),gammaInitializer:cW(this.gammaInitializer),betaRegularizer:CG(this.betaRegularizer),gammaRegularizer:CG(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}qH.className="LayerNormalization",iy.registerClass(qH);class jH extends IW{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new DP(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new DP(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new DP(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new wW({ndim:4})]}computeOutputShape(e){let t,n;return e=mW(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Dx((()=>{return t=fW(e),n=this.padding,r=this.dataFormat,Dx((()=>{if(4!==t.rank)throw new DP(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new DP("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new DP(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],dN(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function KH(e,t,n,r,s,a){return Dx((()=>{let o;dV(s),mV(a),fV(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=VG(e,s);const i="same"===r?"same":"valid";return o="max"===a?eN(e,t,n,i):ev(e,t,n,i),"channelsFirst"===s&&(o=dk(o,[0,3,1,2])),o}))}function XH(e,t,n,r,s,a){return Dx((()=>{let o;dV(s),mV(a),fV(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=WG(e,s);const i="same"===r?"same":"valid";return o="max"===a?tN(e,t,n,i):tv(e,t,n,i),"channelsFirst"===s&&(o=dk(o,[0,4,1,2,3])),o}))}jH.className="ZeroPadding2D",iy.registerClass(jH);class YH extends IW{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new DP(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(eV(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new DP(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}eV(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,fV(this.padding),this.inputSpec=[new wW({ndim:3})]}computeOutputShape(e){const t=BG((e=mW(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Dx((()=>{this.invokeCallHook(e,t),e=CV(fW(e),2);const n=this.poolingFunction(fW(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ik(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class ZH extends YH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return dV(s),fV(r),KH(e,t,n,r,s,"max")}}ZH.className="MaxPooling1D",iy.registerClass(ZH);class JH extends YH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return dV(s),fV(r),KH(e,t,n,r,s,"avg")}}JH.className="AveragePooling1D",iy.registerClass(JH);class QH extends IW{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new DP(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];eV(this.poolSize,"poolSize"),eV(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),fV(this.padding),this.inputSpec=[new wW({ndim:4})]}computeOutputShape(e){e=mW(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=BG(t,this.poolSize[0],this.padding,this.strides[0]),n=BG(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Dx((()=>(this.invokeCallHook(e,t),this.poolingFunction(fW(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class eq extends QH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return dV(s),fV(r),KH(e,t,n,r,s,"max")}}eq.className="MaxPooling2D",iy.registerClass(eq);class tq extends QH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return dV(s),fV(r),KH(e,t,n,r,s,"avg")}}tq.className="AveragePooling2D",iy.registerClass(tq);class nq extends IW{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new DP(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];eV(this.poolSize,"poolSize"),eV(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),fV(this.padding),this.inputSpec=[new wW({ndim:5})]}computeOutputShape(e){e=mW(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=BG(t,this.poolSize[0],this.padding,this.strides[0]),n=BG(n,this.poolSize[1],this.padding,this.strides[1]),r=BG(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Dx((()=>(this.invokeCallHook(e,t),this.poolingFunction(fW(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class rq extends nq{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return dV(s),fV(r),XH(e,t,n,r,s,"max")}}rq.className="MaxPooling3D",iy.registerClass(rq);class sq extends nq{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return dV(s),fV(r),XH(e,t,n,r,s,"avg")}}sq.className="AveragePooling3D",iy.registerClass(sq);class aq extends IW{constructor(e){super(e),this.inputSpec=[new wW({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new FP}}class oq extends aq{constructor(e){super(e||{})}call(e,t){return Dx((()=>{const t=fW(e);return yk(t,1)}))}}oq.className="GlobalAveragePooling1D",iy.registerClass(oq);class iq extends aq{constructor(e){super(e||{})}call(e,t){return Dx((()=>{const t=fW(e);return ek(t,1)}))}}iq.className="GlobalMaxPooling1D",iy.registerClass(iq);class lq extends IW{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),this.inputSpec=[new wW({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new FP}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class uq extends lq{call(e,t){return Dx((()=>{const t=fW(e);return"channelsLast"===this.dataFormat?yk(t,[1,2]):yk(t,[2,3])}))}}uq.className="GlobalAveragePooling2D",iy.registerClass(uq);class cq extends lq{call(e,t){return Dx((()=>{const t=fW(e);return"channelsLast"===this.dataFormat?ek(t,[1,2]):ek(t,[2,3])}))}}cq.className="GlobalMaxPooling2D",iy.registerClass(cq);class pq extends IW{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=sU(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class hq extends pq{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=mW(e)).length<3)throw new DP(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=mW(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Dx((()=>oH(((e,n)=>[fW(this.layer.call(e,t)),[]]),e=fW(e),[],!1,null,null,!1,!0)[1]))}}hq.className="TimeDistributed",iy.registerClass(hq);class dq extends pq{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=sU(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=sU(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,JP(pV,"BidirectionalMergeMode",s),e.weights)throw new FP("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):VP(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=aH(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new DP("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new wW({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),o.push(...r)}if(null!=r)throw new FP("Support for constants in Bidirectional layers is not implemented yet.");const i=a[0]instanceof kW;for(const e of a)if(e instanceof kW!==i)throw new DP("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return Dx((()=>{const n=t.initialState;let r,s,a,o;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Yx(s,1)),"concat"===this.mergeMode?o=DV([r,s]):"sum"===this.mergeMode?o=ew(r,s):"ave"===this.mergeMode?o=Xy(.5,ew(r,s)):"mul"===this.mergeMode?o=Xy(r,s):null==this.mergeMode&&(o=[r,s]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){yV(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),yV(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=sU(t.layer);if(delete t.layer,null!=t.numConstants)throw new FP("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}dq.className="Bidirectional",iy.registerClass(dq);class fq extends IW{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Dx((()=>("float32"!==(e=fW(e)).dtype&&(e=$V(e,"float32")),ew(Xy(e,this.scale),this.offset))))}}fq.className="Rescaling",iy.registerClass(fq);const mq=new Set(["bilinear","nearest"]);class gq extends IW{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!mq.has(e.interpolation))throw new DP(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=mW(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Dx((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return SS.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return SS.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...mq]} are supported`)}))}}gq.className="Resizing",iy.registerClass(gq);class yq extends IW{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=mW(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return Dx((()=>{let n;if("int32"!==(e=fW(e)).dtype&&(e=$V(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new DP(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=fW(t.countWeights)}const r=ek(e),s=tk(e),a=Lw(this.numTokens,r).bufferSync().get(0),o=jw(s,0).bufferSync().get(0);if(!a||!o)throw new DP(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,r){let s=fW(e);if("int32"!==s.dtype&&(s=$V(s,"int32")),"int"===t)return s;const a=s.shape;if(0===s.rank&&(s=uk(s,-1)),"oneHot"===t&&1!==s.shape[s.shape.length-1]&&(s=uk(s,-1)),s.rank>2)throw new DP(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${s.rank}.`);const o=["multiHot","oneHot"].includes(t);let i;if(i=Tv(s,void 0!==r&&"count"===t?r:[],n,o),"tfIdf"!==t)return i;if(r)return Xy(i,r);throw new DP("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}yq.className="CategoryEncoding",iy.registerClass(yq);var bq,xq;$d().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(bq||(bq={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(xq||(xq={}));var wq={};t(wq,"json",(()=>kq));const kq=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var vq={};t(vq,"json",(()=>Nq));const Nq=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Sq={};t(Sq,"json",(()=>Iq));const Iq=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var Tq={};t(Tq,"json",(()=>Eq));const Eq=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var $q={};t($q,"json",(()=>Cq));const Cq=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var Aq={};t(Aq,"json",(()=>_q));const _q=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Rq={};t(Rq,"json",(()=>Dq));const Dq=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var Fq={};t(Fq,"json",(()=>Oq));const Oq=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var Mq={};t(Mq,"json",(()=>Lq));const Lq=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var zq={};t(zq,"json",(()=>Bq));const Bq=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var Pq={};t(Pq,"json",(()=>Vq));const Vq=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Wq={};t(Wq,"json",(()=>Uq));const Uq=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var Gq={};t(Gq,"json",(()=>Hq));const Hq=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var qq={};t(qq,"json",(()=>jq));const jq=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var Kq={};t(Kq,"json",(()=>Xq));const Xq=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var Yq={};t(Yq,"json",(()=>Zq));const Zq=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var Jq={};t(Jq,"json",(()=>Qq));const Qq=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var ej={};t(ej,"json",(()=>tj));const tj=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var nj={};t(nj,"json",(()=>rj));const rj=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var sj={};n(sj,Bx);i=class{constructor(e,t=.5){this.list_sentences=e,this.threshold=t,this.analyzing_text=!1,this.groups=[]}setSentences(e){this.list_sentences=e}getSentences(){return this.sentences}setThreshold(e){this.threshold}getThreshold(){return this.threshold}getGroups(){return this.groups}get_embeddings(e){(function(e){return xh(this,void 0,void 0,(function(){var t;return wh(this,(function(n){switch(n.label){case 0:return[4,(t=new Eh).load(e)];case 1:return n.sent(),[2,t]}}))}))})().then((t=>{t.embed(this.list_sentences).then((t=>{e(t)}))}))}dot(e,t){var n=Object.prototype.hasOwnProperty,r=0;for(var s in e)n.call(e,s)&&n.call(t,s)&&(r+=e[s]*t[s]);return r}similarity(e,t){var n=Math.sqrt(this.dot(e,e)),r=Math.sqrt(this.dot(t,t));return!(!n||!r)&&this.dot(e,t)/(n*r)}cosine_similarity_matrix(e){let t=[];for(let n=0;n<e.length;n++){let r=[];for(let e=0;e<n;e++)r.push(t[e][n]);r.push(1);for(let t=n+1;t<e.length;t++)r.push(this.similarity(e[n],e[t]));t.push(r)}return t}async form_groups(e,t){let n={},r=[];for(let t=0;t<e.length;t++){var s=e[t];for(let a=t;a<s.length;a++)if(t!=a){if(e[t][a]>this.threshold){let e;t in n?e=n[t]:(e=r.length,n[t]=e),a in n||(n[a]=e),r.length<=e&&r.push([]),r[e].push(t),r[e].push(a)}}}let a=[];for(var o in r)a.push(Array.from(new Set(r[o])));return console.log(a),await t.createChromeGroups(r),await t.updateLogData(r.length,this.threshold),a}async get_similarity(e){this.get_embeddings(async function(t){let n=this.cosine_similarity_matrix(t.arraySync()),r=this.form_groups(n,e);this.groups=r,window.close()}.bind(this))}optimizeGroups(){}},document.getElementById("autoGroupBtn").addEventListener("click",(async function(){!function(){let e=document.getElementById("onOpen"),t=document.getElementById("onLoading");e.setAttribute("style","display: none"),t.setAttribute("style","display: block; width: 100%; height: 100%")}();let e=new o;await e.queryTabs();let t=e.getAllTabs(),n=document.getElementById("threshold").value;(isNaN(n)||n>1||n<0)&&(n=.5),console.log(n),new i(t,n).get_similarity(e)}));
//# sourceMappingURL=popup.732df20f.js.map
