var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var r={},s={},a=e.parcelRequire3f73;null==a&&((a=function(e){if(e in r)return r[e].exports;if(e in s){var t=s[e];delete s[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){s[e]=t},e.parcelRequire3f73=a),a.register("kjyEk",(function(e,t){})),a.register("cmoHh",(function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new r(e),a=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("euRi5",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("hDsEw",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("3J2Zm",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("6Px8M",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("lDm0S",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));class o{refCount(e){return i("refCount")}incRef(e){return i("incRef")}timerAvailable(){return!0}time(e){return i("time")}read(e){return i("read")}readSync(e){return i("readSync")}readToGPU(e,t){return i("readToGPU")}numDataIds(){return i("numDataIds")}disposeData(e,t){return i("disposeData")}write(e,t,n){return i("write")}move(e,t,n,r,s){return i("move")}memory(){return i("memory")}floatPrecision(){return i("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return i("dispose")}}function i(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var u={};function l(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,d(e,t,n)}function c(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,d(e,n,r),d(t,n,r)}function p(e,t,n){return Math.max(e,Math.min(t,n))}function h(e){return e%2==0?e:e+1}function d(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function f(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function m(e,t){const n=Math.random();return t*n+(1-n)*e}function g(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function y(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function b(e,t,n=""){y(N(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function x(e){y(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function w(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||z(e)&&!n)for(let r=0;r<e.length;++r)w(e[r],t,n);else t.push(e);return t}function k(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function v(e){return 0===e.length}function N(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function S(e){return e%1==0}function I(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function T(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function E(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return l(t),t}function $(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function C(e,t=(e=>0),n,r=setTimeout){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const u=t(o);null!=n&&o>=n?a():r(i,u)};i()}))}function A(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function R(e,t){const n=t.length;return y((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),y(e.every((e=>S(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function _(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:R(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function D(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function F(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function O(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function M(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function L(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function z(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function B(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function P(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function V(e){return"string"==typeof e||e instanceof String}function W(e){return"boolean"==typeof e}function U(e){return"number"==typeof e}function G(e){return Array.isArray(e)?G(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":U(e)?"float32":V(e)?"string":W(e)?"bool":"float32"}function H(e){return!!(e&&e.constructor&&e.call&&e.apply)}function q(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function j(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function K(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=K(e+t*i,o,n,r)}return s}function X(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return K(0,e,t,n)}function Y(e,t){const n=Z(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Z(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function J(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return X(e,new Float32Array(n));if("int32"===t)return X(e,new Int32Array(n));if("bool"===t)return X(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Q(e){e.forEach((t=>{y(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ee(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function te(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function ne(e){return e&&e.then&&"function"==typeof e.then}t(u,"shuffle",(()=>l)),t(u,"swap",(()=>d)),t(u,"shuffleCombo",(()=>c)),t(u,"clamp",(()=>p)),t(u,"nearestLargerEven",(()=>h)),t(u,"sum",(()=>f)),t(u,"randUniform",(()=>m)),t(u,"distSquared",(()=>g)),t(u,"assert",(()=>y)),t(u,"assertShapesMatch",(()=>b)),t(u,"arraysEqual",(()=>N)),t(u,"assertNonNull",(()=>x)),t(u,"flatten",(()=>w)),t(u,"isTypedArray",(()=>z)),t(u,"sizeFromShape",(()=>k)),t(u,"isScalarShape",(()=>v)),t(u,"isInt",(()=>S)),t(u,"tanh",(()=>I)),t(u,"sizeToSquarishShape",(()=>T)),t(u,"createShuffledIndices",(()=>E)),t(u,"rightPad",(()=>$)),t(u,"repeatedTry",(()=>C)),t(u,"inferFromImplicitShape",(()=>A)),t(u,"parseAxisParam",(()=>R)),t(u,"squeezeShape",(()=>_)),t(u,"getTypedArrayFromDType",(()=>D)),t(u,"getArrayFromDType",(()=>F)),t(u,"checkConversionForErrors",(()=>O)),t(u,"isValidDtype",(()=>M)),t(u,"hasEncodingLoss",(()=>L)),t(u,"bytesPerElement",(()=>B)),t(u,"bytesFromStringArray",(()=>P)),t(u,"isString",(()=>V)),t(u,"isBoolean",(()=>W)),t(u,"isNumber",(()=>U)),t(u,"inferDtype",(()=>G)),t(u,"isFunction",(()=>H)),t(u,"nearestDivisor",(()=>q)),t(u,"computeStrides",(()=>j)),t(u,"toNestedArray",(()=>X)),t(u,"makeOnesTypedArray",(()=>Y)),t(u,"makeZerosTypedArray",(()=>Z)),t(u,"makeZerosNestedTypedArray",(()=>J)),t(u,"assertNonNegativeIntegerDimensions",(()=>Q)),t(u,"locToIndex",(()=>ee)),t(u,"indexToLoc",(()=>te)),t(u,"isPromise",(()=>ne));class re{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=se,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(ae().getBool("IS_TEST")||ae().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];ae().getBool("IS_TEST")||ae().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(ne(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function se(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function ae(){return oe}let oe=null;var ie,ue,le={},ce=le={};function pe(){throw new Error("setTimeout has not been defined")}function he(){throw new Error("clearTimeout has not been defined")}function de(e){if(ie===setTimeout)return setTimeout(e,0);if((ie===pe||!ie)&&setTimeout)return ie=setTimeout,setTimeout(e,0);try{return ie(e,0)}catch(t){try{return ie.call(null,e,0)}catch(t){return ie.call(this,e,0)}}}!function(){try{ie="function"==typeof setTimeout?setTimeout:pe}catch(e){ie=pe}try{ue="function"==typeof clearTimeout?clearTimeout:he}catch(e){ue=he}}();var fe,me=[],ge=!1,ye=-1;function be(){ge&&fe&&(ge=!1,fe.length?me=fe.concat(me):ye=-1,me.length&&xe())}function xe(){if(!ge){var e=de(be);ge=!0;for(var t=me.length;t;){for(fe=me,me=[];++ye<t;)fe&&fe[ye].run();ye=-1,t=me.length}fe=null,ge=!1,function(e){if(ue===clearTimeout)return clearTimeout(e);if((ue===he||!ue)&&clearTimeout)return ue=clearTimeout,clearTimeout(e);try{ue(e)}catch(t){try{return ue.call(null,e)}catch(t){return ue.call(this,e)}}}(e)}}function we(e,t){this.fun=e,this.array=t}function ke(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let ve;function Ne(){if(null==ve){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==le)t=le;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}ve=t}return ve}function Se(e,t){const n=function(){const e=Ne();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}ce.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];me.push(new we(e,t)),1!==me.length||ge||de(xe)},we.prototype.run=function(){this.fun.apply(null,this.array)},ce.title="browser",ce.browser=!0,ce.env={},ce.argv=[],ce.version="",ce.versions={},ce.on=ke,ce.addListener=ke,ce.once=ke,ce.off=ke,ce.removeListener=ke,ce.removeAllListeners=ke,ce.emit=ke,ce.prependListener=ke,ce.prependOnceListener=ke,ce.listeners=function(e){return[]},ce.binding=function(e){throw new Error("process.binding is not supported")},ce.cwd=function(){return"/"},ce.chdir=function(e){throw new Error("process.chdir is not supported")},ce.umask=function(){return 0};function Ie(...e){ae().getBool("IS_TEST")||ae().getBool("PROD")||console.warn(...e)}const Te=Se("kernelRegistry",(()=>new Map)),Ee=Se("gradRegistry",(()=>new Map));function $e(e,t){const n=Re(e,t);return Te.get(n)}function Ce(e){return Ee.get(e)}function Ae(e){const t=Te.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function Re(e,t){return`${t}_${e}`}var _e={};t(_e,"createScalarValue",(()=>bt)),t(_e,"encodeString",(()=>vt)),t(_e,"toTypedArray",(()=>xt)),t(_e,"now",(()=>wt)),t(_e,"fetch",(()=>kt)),t(_e,"decodeString",(()=>Nt));var De={};t(De,"hexToLong",(()=>ot)),t(De,"fingerPrint64",(()=>yt));var Fe;Fe=Me;var Oe=null;try{Oe=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Me(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function Le(e){return!0===(e&&e.__isLong__)}Me.prototype.__isLong__,Object.defineProperty(Me.prototype,"__isLong__",{value:!0}),Me.isLong=Le;var ze={},Be={};function Pe(e,t){var n,r,s;return t?(s=0<=(e>>>=0)&&e<256)&&(r=Be[e])?r:(n=We(e,(0|e)<0?-1:0,!0),s&&(Be[e]=n),n):(s=-128<=(e|=0)&&e<128)&&(r=ze[e])?r:(n=We(e,e<0?-1:0,!1),s&&(ze[e]=n),n)}function Ve(e,t){if(isNaN(e))return t?Ze:Ye;if(t){if(e<0)return Ze;if(e>=je)return nt}else{if(e<=-Ke)return rt;if(e+1>=Ke)return tt}return e<0?Ve(-e,t).neg():We(e%qe|0,e/qe|0,t)}function We(e,t,n){return new Me(e,t,n)}Me.fromInt=Pe,Me.fromNumber=Ve,Me.fromBits=We;var Ue=Math.pow;function Ge(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Ye;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return Ge(e.substring(1),t,n).neg();for(var s=Ve(Ue(n,8)),a=Ye,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),u=parseInt(e.substring(o,o+i),n);if(i<8){var l=Ve(Ue(n,i));a=a.mul(l).add(Ve(u))}else a=(a=a.mul(s)).add(Ve(u))}return a.unsigned=t,a}function He(e,t){return"number"==typeof e?Ve(e,t):"string"==typeof e?Ge(e,t):We(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}Me.fromString=Ge,Me.fromValue=He;var qe=4294967296,je=qe*qe,Ke=je/2,Xe=Pe(16777216),Ye=Pe(0);Me.ZERO=Ye;var Ze=Pe(0,!0);Me.UZERO=Ze;var Je=Pe(1);Me.ONE=Je;var Qe=Pe(1,!0);Me.UONE=Qe;var et=Pe(-1);Me.NEG_ONE=et;var tt=We(-1,2147483647,!1);Me.MAX_VALUE=tt;var nt=We(-1,-1,!0);Me.MAX_UNSIGNED_VALUE=nt;var rt=We(0,-2147483648,!1);Me.MIN_VALUE=rt;var st=Me.prototype;st.toInt=function(){return this.unsigned?this.low>>>0:this.low},st.toNumber=function(){return this.unsigned?(this.high>>>0)*qe+(this.low>>>0):this.high*qe+(this.low>>>0)},st.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(rt)){var t=Ve(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=Ve(Ue(e,6),this.unsigned),a=this,o="";;){var i=a.div(s),u=(a.sub(i.mul(s)).toInt()>>>0).toString(e);if((a=i).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},st.getHighBits=function(){return this.high},st.getHighBitsUnsigned=function(){return this.high>>>0},st.getLowBits=function(){return this.low},st.getLowBitsUnsigned=function(){return this.low>>>0},st.getNumBitsAbs=function(){if(this.isNegative())return this.eq(rt)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},st.isZero=function(){return 0===this.high&&0===this.low},st.eqz=st.isZero,st.isNegative=function(){return!this.unsigned&&this.high<0},st.isPositive=function(){return this.unsigned||this.high>=0},st.isOdd=function(){return 1==(1&this.low)},st.isEven=function(){return 0==(1&this.low)},st.equals=function(e){return Le(e)||(e=He(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},st.eq=st.equals,st.notEquals=function(e){return!this.eq(e)},st.neq=st.notEquals,st.ne=st.notEquals,st.lessThan=function(e){return this.comp(e)<0},st.lt=st.lessThan,st.lessThanOrEqual=function(e){return this.comp(e)<=0},st.lte=st.lessThanOrEqual,st.le=st.lessThanOrEqual,st.greaterThan=function(e){return this.comp(e)>0},st.gt=st.greaterThan,st.greaterThanOrEqual=function(e){return this.comp(e)>=0},st.gte=st.greaterThanOrEqual,st.ge=st.greaterThanOrEqual,st.compare=function(e){if(Le(e)||(e=He(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},st.comp=st.compare,st.negate=function(){return!this.unsigned&&this.eq(rt)?rt:this.not().add(Je)},st.neg=st.negate,st.add=function(e){Le(e)||(e=He(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=0,l=0,c=0,p=0;return c+=(p+=s+(65535&e.low))>>>16,l+=(c+=r+i)>>>16,u+=(l+=n+o)>>>16,u+=t+a,We((c&=65535)<<16|(p&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},st.subtract=function(e){return Le(e)||(e=He(e)),this.add(e.neg())},st.sub=st.subtract,st.multiply=function(e){if(this.isZero())return Ye;if(Le(e)||(e=He(e)),Oe)return We(Oe.mul(this.low,this.high,e.low,e.high),Oe.get_high(),this.unsigned);if(e.isZero())return Ye;if(this.eq(rt))return e.isOdd()?rt:Ye;if(e.eq(rt))return this.isOdd()?rt:Ye;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(Xe)&&e.lt(Xe))return Ve(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=65535&e.low,l=0,c=0,p=0,h=0;return p+=(h+=s*u)>>>16,c+=(p+=r*u)>>>16,p&=65535,c+=(p+=s*i)>>>16,l+=(c+=n*u)>>>16,c&=65535,l+=(c+=r*i)>>>16,c&=65535,l+=(c+=s*o)>>>16,l+=t*u+n*i+r*o+s*a,We((p&=65535)<<16|(h&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},st.mul=st.multiply,st.divide=function(e){if(Le(e)||(e=He(e)),e.isZero())throw Error("division by zero");var t,n,r;if(Oe)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?We((this.unsigned?Oe.div_u:Oe.div_s)(this.low,this.high,e.low,e.high),Oe.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Ze:Ye;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Ze;if(e.gt(this.shru(1)))return Qe;r=Ze}else{if(this.eq(rt))return e.eq(Je)||e.eq(et)?rt:e.eq(rt)?Je:(t=this.shr(1).div(e).shl(1)).eq(Ye)?e.isNegative()?Je:et:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(rt))return this.unsigned?Ze:Ye;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=Ye}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),a=s<=48?1:Ue(2,s-48),o=Ve(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=Ve(t-=a,this.unsigned)).mul(e);o.isZero()&&(o=Je),r=r.add(o),n=n.sub(i)}return r},st.div=st.divide,st.modulo=function(e){return Le(e)||(e=He(e)),Oe?We((this.unsigned?Oe.rem_u:Oe.rem_s)(this.low,this.high,e.low,e.high),Oe.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},st.mod=st.modulo,st.rem=st.modulo,st.not=function(){return We(~this.low,~this.high,this.unsigned)},st.and=function(e){return Le(e)||(e=He(e)),We(this.low&e.low,this.high&e.high,this.unsigned)},st.or=function(e){return Le(e)||(e=He(e)),We(this.low|e.low,this.high|e.high,this.unsigned)},st.xor=function(e){return Le(e)||(e=He(e)),We(this.low^e.low,this.high^e.high,this.unsigned)},st.shiftLeft=function(e){return Le(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?We(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):We(0,this.low<<e-32,this.unsigned)},st.shl=st.shiftLeft,st.shiftRight=function(e){return Le(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?We(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):We(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},st.shr=st.shiftRight,st.shiftRightUnsigned=function(e){if(Le(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?We(this.low>>>e|t<<32-e,t>>>e,this.unsigned):We(32===e?t:t>>>e-32,0,this.unsigned)},st.shru=st.shiftRightUnsigned,st.shr_u=st.shiftRightUnsigned,st.toSigned=function(){return this.unsigned?We(this.low,this.high,!1):this},st.toUnsigned=function(){return this.unsigned?this:We(this.low,this.high,!0)},st.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},st.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},st.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},Me.fromBytes=function(e,t,n){return n?Me.fromBytesLE(e,t):Me.fromBytesBE(e,t)},Me.fromBytesLE=function(e,t){return new Me(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Me.fromBytesBE=function(e,t){return new Me(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const at=Fe.default||Fe;function ot(e){return at.fromString(e,!0,16)}const it=ot("c3a5c85c97cb3127"),ut=ot("b492b66fbe98f273"),lt=ot("9ae16a3b2f90404f");function ct(e){return e.xor(e.shru(47))}function pt(e,t,n){const r=e.slice(t,t+n);return at.fromBytes(Array.from(r),!0,!0)}function ht(e,t){return pt(e,t,8)}function dt(e,t){return pt(e,t,4)}function ft(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function mt(e,t,n=ot("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function gt(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=ft(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(ft(s,44)),[s.add(r),a.add(o)]}(ht(e,t),ht(e,t+8),ht(e,t+16),ht(e,t+24),n,r)}function yt(e,t=e.length){const n=at.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=lt.add(2*t),r=ht(e,0).add(lt),s=ht(e,t-8);return mt(ft(s,37).mul(n).add(r),ft(r,25).add(s).mul(n),n)}if(t>=4){const n=lt.add(2*t);return mt(dt(e,0).shl(3).add(t),dt(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return ct(lt.mul(n).xor(it.mul(r))).mul(lt)}return lt}(e,t):function(e,t=e.length){const n=lt.add(2*t),r=ht(e,0).mul(ut),s=ht(e,8),a=ht(e,t-8).mul(n),o=ht(e,t-16).mul(lt);return mt(ft(r.add(s),43).add(ft(a,30)).add(o),r.add(ft(s.add(lt),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=lt.add(2*t),r=ht(e,0).mul(lt),s=ht(e,8),a=ht(e,t-8).mul(n),o=ht(e,t-16).mul(lt),i=ft(r.add(s),43).add(ft(a,30)).add(o),u=mt(i,r.add(ft(s.add(lt),18)).add(a),n),l=ht(e,16).mul(n),c=ht(e,24),p=i.add(ht(e,t-32)).mul(n),h=u.add(ht(e,t-24)).mul(n);return mt(ft(l.add(c),43).add(ft(p,30)).add(h),l.add(ft(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(ut).add(113),a=ct(s.mul(lt).add(113)).mul(lt),o=[at.UZERO,at.UZERO],i=[at.UZERO,at.UZERO];r=r.mul(lt).add(ht(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=ft(r.add(s).add(o[0]).add(ht(e,u+8)),37).mul(ut),s=ft(s.add(o[1]).add(ht(e,u+48)),42).mul(ut),r=r.xor(i[1]),s=s.add(o[0]).add(ht(e,u+40)),a=ft(a.add(i[0]),33).mul(ut),o=gt(e,u,o[1].mul(ut),r.add(i[0])),i=gt(e,u+32,a.add(i[1]),s.add(ht(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const p=ut.add(a.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=ft(r.add(s).add(o[0]).add(ht(e,u+8)),37).mul(p),s=ft(s.add(o[1]).add(ht(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(ht(e,u+40))),a=ft(a.add(i[0]),33).mul(p),o=gt(e,u,o[1].mul(p),r.add(i[0])),i=gt(e,u+32,a.add(i[1]),s.add(ht(e,u+16))),[a,r]=[r,a],mt(mt(o[0],i[0],p).add(ct(s).mul(it)).add(a),mt(o[1],i[1],p).add(r),p)}function bt(e,t){return"string"===t?vt(e):xt([e],t)}function xt(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=w(e)),ae().getBool("DEBUG")&&O(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function wt(){return ae().platform.now()}function kt(e,t){return ae().platform.fetch(e,t)}function vt(e,t="utf-8"){return t=t||"utf-8",ae().platform.encode(e,t)}function Nt(e,t="utf-8"){return t=t||"utf-8",ae().platform.decode(e,t)}n(_e,u),n(_e,De);class St{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Tt)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=wt();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:wt()-o})}if(ae().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{It(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function It(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Tt{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?$(`${r}ms`,9):r.error,i=$(e,25),u=t.rank,l=t.size,c=$(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Et(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function $t(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!N(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function Ct(e,t,n,r){const s=j(t),a=function(e,t,n,r){const s=k(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?Dt(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],At(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=_t(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function At(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:V(e)?`'${e}'`:"bool"===n?Rt(e):parseFloat(e.toFixed(7)).toString(),$(r,t)}function Rt(e){return 0===e?"false":"true"}function _t(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[At(Dt(e)[0],0,n)]}return"bool"===n?[Rt(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Dt(r),a=Dt(a)),["["+r.map(((e,t)=>At(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>At(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Dt(e):Array.from(e)).map(((e,t)=>At(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(..._t(e.slice(r,a),l,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(..._t(e.slice(r,a),l,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(..._t(e.slice(r,a),l,n,c,s,t===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function Dt(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Ft{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=k(e),null!=n){const e=n.length;y(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||F(t,this.size),this.strides=j(e)}set(e,...t){0===t.length&&(t=[0]),y(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ot().makeTensor(this.values,this.shape,this.dtype)}}let Ot=null,Mt=null,Lt=null;class zt{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=k(e),this.strides=j(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Mt.buffer(this.shape,this.dtype,e)}bufferSync(){return Mt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return X(this.shape,e,"complex64"===this.dtype)}arraySync(){return X(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Ot().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Nt(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Ot().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Ot().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Nt(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ot().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ot().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Mt.print(this,e)}clone(){return this.throwIfDisposed(),Mt.clone(this)}toString(e=!1){return Ct(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Mt.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Ot().makeVariable(this,e,t,n)}}Object.defineProperty(zt,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Se("Tensor",(()=>zt));class Bt extends zt{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!N(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ot().disposeTensor(this),this.dataId=e.dataId,Ot().incRef(this,null)}dispose(){Ot().disposeVariable(this),this.isDisposedInternal=!0}}var Pt,Vt,Wt,Ut,Gt,Ht,qt,jt,Kt,Xt;Object.defineProperty(Bt,Symbol.hasInstance,{value:e=>e instanceof zt&&null!=e.assign&&e.assign instanceof Function}),(Vt=Pt||(Pt={})).R0="R0",Vt.R1="R1",Vt.R2="R2",Vt.R3="R3",Vt.R4="R4",Vt.R5="R5",Vt.R6="R6",(Ut=Wt||(Wt={})).float32="float32",Ut.int32="int32",Ut.bool="int32",Ut.complex64="complex64",(Ht=Gt||(Gt={})).float32="float32",Ht.int32="int32",Ht.bool="bool",Ht.complex64="complex64",(jt=qt||(qt={})).float32="float32",jt.int32="float32",jt.bool="float32",jt.complex64="complex64",(Xt=Kt||(Kt={})).float32="complex64",Xt.int32="complex64",Xt.bool="complex64",Xt.complex64="complex64";const Yt={float32:qt,int32:Wt,bool:Gt,complex64:Kt};function Zt(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Yt[e][t]}function Jt(e,t){if(e.dtype===t.dtype)return[e,t];const n=Zt(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Qt(e){const t=[];return en(e,t,new Set),t}function en(e,t,n){if(null==e)return;if(e instanceof zt)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),en(r,t,n))}}function tn(e){return null!=e.kernelName}class nn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class rn{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new nn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Ie(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new St(this.backendInstance),!0}setupRegisteredKernels(){Ae(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Ae(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof o||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Ie(`Initialization of backend ${e} failed`),Ie(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return Ie(`Initialization of backend ${e} failed`),Ie(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return rn.nextTensorId++}nextVariableId(){return rn.nextVariableId++}clone(e){const t=an.runKernel("Identity",{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return an.runKernel("Cast",t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=$e(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=tn(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(tn(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=$e(t,this.backendName);y(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,p=tn(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(u,l,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Ce(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(y(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&V(e[0])&&(s=e.map((e=>vt(e))));const a=r.write(s,t,n),o=new zt(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=P(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new zt(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Bt(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*B(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Bt||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*B(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=Ce(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Z(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Qt(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(y(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));y(s instanceof zt,(()=>"The result y returned by f() must be a tensor."));const a=Et(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Y(k(e),"float32");return an.makeTensor(t,e,"float32")}(s.shape):n,$t(e,a,(e=>this.tidy(e)),on);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return y(H(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;y(t.every((e=>e instanceof zt)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),y(n.value instanceof zt,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),y(H(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];y(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),y(a.every((e=>e instanceof zt)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=wt(),n=await this.backend.time(e);return n.wallMs=wt()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new nn;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function sn(){const e=Ne();if(null==e._tfengine){const t=new re(e);e._tfengine=new rn(t)}var t;return t=e._tfengine.ENV,oe=t,Ot=()=>e._tfengine,e._tfengine}rn.nextTensorId=0,rn.nextVariableId=0;const an=sn();function on(e,t){const n={a:e,b:t};return an.runKernel("Add",n)}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const un=ae();function ln(e,t){let n=e;if(z(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||z(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&ae().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&cn(e,r,[]),r}function cn(e,t,n){if(n=n||[],!Array.isArray(e)&&!z(e))return void y(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));y(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),y(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)cn(e[t],r,n.concat(t))}function pn(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function hn(e,t,n,r="numeric"){if(e instanceof zt)return pn(r,e.dtype,t,n),e;let s=G(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),pn(r,s,t,n),null==e||!z(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=ln(e,s);z(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?xt(e,s):w(e,[],!0);return an.makeTensor(o,a,s)}function dn(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>hn(e,`${t}[${s}]`,n,r)))}un.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),un.registerFlag("IS_BROWSER",(()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope)),un.registerFlag("IS_NODE",(()=>void 0!==le&&void 0!==le.versions&&void 0!==le.versions.node)),un.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),un.registerFlag("PROD",(()=>!1)),un.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>un.getBool("DEBUG"))),un.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),un.registerFlag("IS_TEST",(()=>!1)),un.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),un.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),un.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),un.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),un.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));function fn(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{an.startScope(n);try{const t=r(...e);return ne(t)&&console.error("Cannot return a Promise inside of tidy."),an.endScope(t),t}catch(e){throw an.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const mn=fn({complex_:function(e,t){const n=hn(e,"real","complex"),r=hn(t,"imag","complex");b(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return an.runKernel("Complex",s)}});function gn(e,t,n,r){if(null==r&&(r=G(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!z(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Q(t);const e=k(t),r=k(n);y(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==k(t.slice(e));y(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return z(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?xt(e,r):w(e,[],!0),an.makeTensor(e,t,r)}function yn(e,t,n){return gn(e,t,ln(e,n),n)}const bn={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var xn,wn,kn;wn=function(e){var t,n,r=An(e),s=r[0],a=r[1],o=new Tn(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),i=0,u=a>0?s-4:s;for(n=0;n<u;n+=4)t=In[e.charCodeAt(n)]<<18|In[e.charCodeAt(n+1)]<<12|In[e.charCodeAt(n+2)]<<6|In[e.charCodeAt(n+3)],o[i++]=t>>16&255,o[i++]=t>>8&255,o[i++]=255&t;2===a&&(t=In[e.charCodeAt(n)]<<2|In[e.charCodeAt(n+1)]>>4,o[i++]=255&t);1===a&&(t=In[e.charCodeAt(n)]<<10|In[e.charCodeAt(n+1)]<<4|In[e.charCodeAt(n+2)]>>2,o[i++]=t>>8&255,o[i++]=255&t);return o},kn=function(e){for(var t,n=e.length,r=n%3,s=[],a=16383,o=0,i=n-r;o<i;o+=a)s.push(Rn(e,o,o+a>i?i:o+a));1===r?(t=e[n-1],s.push(Sn[t>>2]+Sn[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],s.push(Sn[t>>10]+Sn[t>>4&63]+Sn[t<<2&63]+"="));return s.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var vn,Nn,Sn=[],In=[],Tn="undefined"!=typeof Uint8Array?Uint8Array:Array,En="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",$n=0,Cn=En.length;$n<Cn;++$n)Sn[$n]=En[$n],In[En.charCodeAt($n)]=$n;function An(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function Rn(e,t,n){for(var r,s,a=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(Sn[(s=r)>>18&63]+Sn[s>>12&63]+Sn[s>>6&63]+Sn[63&s]);return a.join("")}In["-".charCodeAt(0)]=62,In["_".charCodeAt(0)]=63,vn=function(e,t,n,r,s){var a,o,i=8*s-r-1,u=(1<<i)-1,l=u>>1,c=-7,p=n?s-1:0,h=n?-1:1,d=e[t+p];for(p+=h,a=d&(1<<-c)-1,d>>=-c,c+=i;c>0;a=256*a+e[t+p],p+=h,c-=8);for(o=a&(1<<-c)-1,a>>=-c,c+=r;c>0;o=256*o+e[t+p],p+=h,c-=8);if(0===a)a=1-l;else{if(a===u)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,r),a-=l}return(d?-1:1)*o*Math.pow(2,a-r)},Nn=function(e,t,n,r,s,a){var o,i,u,l=8*a-s-1,c=(1<<l)-1,p=c>>1,h=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),(t+=o+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(o++,u/=2),o+p>=c?(i=0,o=c):o+p>=1?(i=(t*u-1)*Math.pow(2,s),o+=p):(i=t*Math.pow(2,p-1)*Math.pow(2,s),o=0));s>=8;e[n+d]=255&i,d+=f,i/=256,s-=8);for(o=o<<s|i,l+=s;l>0;e[n+d]=255&o,d+=f,o/=256,l-=8);e[n+d-f]|=128*m};const _n="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;xn=Fn;function Dn(e){if(e>2147483647)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,Fn.prototype),t}function Fn(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return Ln(e)}return On(e,t,n)}function On(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!Fn.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|Vn(e,t);let r=Dn(n);const s=r.write(e,t);s!==n&&(r=r.slice(0,s));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(wr(e,Uint8Array)){const t=new Uint8Array(e);return Bn(t.buffer,t.byteOffset,t.byteLength)}return zn(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(wr(e,ArrayBuffer)||e&&wr(e.buffer,ArrayBuffer))return Bn(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(wr(e,SharedArrayBuffer)||e&&wr(e.buffer,SharedArrayBuffer)))return Bn(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return Fn.from(r,t,n);const s=function(e){if(Fn.isBuffer(e)){const t=0|Pn(e.length),n=Dn(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||kr(e.length)?Dn(0):zn(e);if("Buffer"===e.type&&Array.isArray(e.data))return zn(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return Fn.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function Mn(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function Ln(e){return Mn(e),Dn(e<0?0:0|Pn(e))}function zn(e){const t=e.length<0?0:0|Pn(e.length),n=Dn(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function Bn(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,Fn.prototype),r}function Pn(e){if(e>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647..toString(16)+" bytes");return 0|e}function Vn(e,t){if(Fn.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||wr(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return yr(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return br(e).length;default:if(s)return r?-1:yr(e).length;t=(""+t).toLowerCase(),s=!0}}function Wn(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return tr(this,t,n);case"utf8":case"utf-8":return Jn(this,t,n);case"ascii":return Qn(this,t,n);case"latin1":case"binary":return er(this,t,n);case"base64":return Zn(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return nr(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function Un(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function Gn(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),kr(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=Fn.from(t,r)),Fn.isBuffer(t))return 0===t.length?-1:Hn(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):Hn(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function Hn(e,t,n,r,s){let a,o=1,i=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,i/=2,u/=2,n/=2}function l(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s){let r=-1;for(a=n;a<i;a++)if(l(e,a)===l(t,-1===r?0:a-r)){if(-1===r&&(r=a),a-r+1===u)return r*o}else-1!==r&&(a-=a-r),r=-1}else for(n+u>i&&(n=i-u),a=n;a>=0;a--){let n=!0;for(let r=0;r<u;r++)if(l(e,a+r)!==l(t,r)){n=!1;break}if(n)return a}return-1}function qn(e,t,n,r){n=Number(n)||0;const s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;const a=t.length;let o;for(r>a/2&&(r=a/2),o=0;o<r;++o){const r=parseInt(t.substr(2*o,2),16);if(kr(r))return o;e[n+o]=r}return o}function jn(e,t,n,r){return xr(yr(t,e.length-n),e,n,r)}function Kn(e,t,n,r){return xr(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function Xn(e,t,n,r){return xr(br(t),e,n,r)}function Yn(e,t,n,r){return xr(function(e,t){let n,r,s;const a=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,s=n%256,a.push(s),a.push(r);return a}(t,e.length-n),e,n,r)}function Zn(e,t,n){return 0===t&&n===e.length?kn(e):kn(e.slice(t,n))}function Jn(e,t,n){n=Math.min(e.length,n);const r=[];let s=t;for(;s<n;){const t=e[s];let a=null,o=t>239?4:t>223?3:t>191?2:1;if(s+o<=n){let n,r,i,u;switch(o){case 1:t<128&&(a=t);break;case 2:n=e[s+1],128==(192&n)&&(u=(31&t)<<6|63&n,u>127&&(a=u));break;case 3:n=e[s+1],r=e[s+2],128==(192&n)&&128==(192&r)&&(u=(15&t)<<12|(63&n)<<6|63&r,u>2047&&(u<55296||u>57343)&&(a=u));break;case 4:n=e[s+1],r=e[s+2],i=e[s+3],128==(192&n)&&128==(192&r)&&128==(192&i)&&(u=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&i,u>65535&&u<1114112&&(a=u))}}null===a?(a=65533,o=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),s+=o}return function(e){const t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}Fn.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),Fn.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Fn.prototype,"parent",{enumerable:!0,get:function(){if(Fn.isBuffer(this))return this.buffer}}),Object.defineProperty(Fn.prototype,"offset",{enumerable:!0,get:function(){if(Fn.isBuffer(this))return this.byteOffset}}),Fn.poolSize=8192,Fn.from=function(e,t,n){return On(e,t,n)},Object.setPrototypeOf(Fn.prototype,Uint8Array.prototype),Object.setPrototypeOf(Fn,Uint8Array),Fn.alloc=function(e,t,n){return function(e,t,n){return Mn(e),e<=0?Dn(e):void 0!==t?"string"==typeof n?Dn(e).fill(t,n):Dn(e).fill(t):Dn(e)}(e,t,n)},Fn.allocUnsafe=function(e){return Ln(e)},Fn.allocUnsafeSlow=function(e){return Ln(e)},Fn.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==Fn.prototype},Fn.compare=function(e,t){if(wr(e,Uint8Array)&&(e=Fn.from(e,e.offset,e.byteLength)),wr(t,Uint8Array)&&(t=Fn.from(t,t.offset,t.byteLength)),!Fn.isBuffer(e)||!Fn.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let s=0,a=Math.min(n,r);s<a;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},Fn.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Fn.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Fn.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=Fn.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(wr(t,Uint8Array))s+t.length>r.length?(Fn.isBuffer(t)||(t=Fn.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else{if(!Fn.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,s)}s+=t.length}return r},Fn.byteLength=Vn,Fn.prototype._isBuffer=!0,Fn.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)Un(this,t,t+1);return this},Fn.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)Un(this,t,t+3),Un(this,t+1,t+2);return this},Fn.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)Un(this,t,t+7),Un(this,t+1,t+6),Un(this,t+2,t+5),Un(this,t+3,t+4);return this},Fn.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?Jn(this,0,e):Wn.apply(this,arguments)},Fn.prototype.toLocaleString=Fn.prototype.toString,Fn.prototype.equals=function(e){if(!Fn.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Fn.compare(this,e)},Fn.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},_n&&(Fn.prototype[_n]=Fn.prototype.inspect),Fn.prototype.compare=function(e,t,n,r,s){if(wr(e,Uint8Array)&&(e=Fn.from(e,e.offset,e.byteLength)),!Fn.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(s>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0);const i=Math.min(a,o),u=this.slice(r,s),l=e.slice(t,n);for(let e=0;e<i;++e)if(u[e]!==l[e]){a=u[e],o=l[e];break}return a<o?-1:o<a?1:0},Fn.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Fn.prototype.indexOf=function(e,t,n){return Gn(this,e,t,n,!0)},Fn.prototype.lastIndexOf=function(e,t,n){return Gn(this,e,t,n,!1)},Fn.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let a=!1;for(;;)switch(r){case"hex":return qn(this,e,t,n);case"utf8":case"utf-8":return jn(this,e,t,n);case"ascii":case"latin1":case"binary":return Kn(this,e,t,n);case"base64":return Xn(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Yn(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},Fn.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function Qn(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function er(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function tr(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let s="";for(let r=t;r<n;++r)s+=vr[e[r]];return s}function nr(e,t,n){const r=e.slice(t,n);let s="";for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}function rr(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function sr(e,t,n,r,s,a){if(!Fn.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function ar(e,t,n,r,s){dr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,n}function or(e,t,n,r,s){dr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=o,o>>=8,e[n+2]=o,o>>=8,e[n+1]=o,o>>=8,e[n]=o,n+8}function ir(e,t,n,r,s,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function ur(e,t,n,r,s){return t=+t,n>>>=0,s||ir(e,0,n,4),Nn(e,t,n,r,23,4),n+4}function lr(e,t,n,r,s){return t=+t,n>>>=0,s||ir(e,0,n,8),Nn(e,t,n,r,52,8),n+8}Fn.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,Fn.prototype),r},Fn.prototype.readUintLE=Fn.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||rr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return r},Fn.prototype.readUintBE=Fn.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||rr(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},Fn.prototype.readUint8=Fn.prototype.readUInt8=function(e,t){return e>>>=0,t||rr(e,1,this.length),this[e]},Fn.prototype.readUint16LE=Fn.prototype.readUInt16LE=function(e,t){return e>>>=0,t||rr(e,2,this.length),this[e]|this[e+1]<<8},Fn.prototype.readUint16BE=Fn.prototype.readUInt16BE=function(e,t){return e>>>=0,t||rr(e,2,this.length),this[e]<<8|this[e+1]},Fn.prototype.readUint32LE=Fn.prototype.readUInt32LE=function(e,t){return e>>>=0,t||rr(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Fn.prototype.readUint32BE=Fn.prototype.readUInt32BE=function(e,t){return e>>>=0,t||rr(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Fn.prototype.readBigUInt64LE=Nr((function(e){fr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||mr(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(s)<<BigInt(32))})),Fn.prototype.readBigUInt64BE=Nr((function(e){fr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||mr(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(s)})),Fn.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||rr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},Fn.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||rr(e,t,this.length);let r=t,s=1,a=this[e+--r];for(;r>0&&(s*=256);)a+=this[e+--r]*s;return s*=128,a>=s&&(a-=Math.pow(2,8*t)),a},Fn.prototype.readInt8=function(e,t){return e>>>=0,t||rr(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Fn.prototype.readInt16LE=function(e,t){e>>>=0,t||rr(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Fn.prototype.readInt16BE=function(e,t){e>>>=0,t||rr(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Fn.prototype.readInt32LE=function(e,t){return e>>>=0,t||rr(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Fn.prototype.readInt32BE=function(e,t){return e>>>=0,t||rr(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Fn.prototype.readBigInt64LE=Nr((function(e){fr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||mr(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),Fn.prototype.readBigInt64BE=Nr((function(e){fr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||mr(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),Fn.prototype.readFloatLE=function(e,t){return e>>>=0,t||rr(e,4,this.length),vn(this,e,!0,23,4)},Fn.prototype.readFloatBE=function(e,t){return e>>>=0,t||rr(e,4,this.length),vn(this,e,!1,23,4)},Fn.prototype.readDoubleLE=function(e,t){return e>>>=0,t||rr(e,8,this.length),vn(this,e,!0,52,8)},Fn.prototype.readDoubleBE=function(e,t){return e>>>=0,t||rr(e,8,this.length),vn(this,e,!1,52,8)},Fn.prototype.writeUintLE=Fn.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){sr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=1,a=0;for(this[t]=255&e;++a<n&&(s*=256);)this[t+a]=e/s&255;return t+n},Fn.prototype.writeUintBE=Fn.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){sr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=n-1,a=1;for(this[t+s]=255&e;--s>=0&&(a*=256);)this[t+s]=e/a&255;return t+n},Fn.prototype.writeUint8=Fn.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,1,255,0),this[t]=255&e,t+1},Fn.prototype.writeUint16LE=Fn.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Fn.prototype.writeUint16BE=Fn.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Fn.prototype.writeUint32LE=Fn.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Fn.prototype.writeUint32BE=Fn.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Fn.prototype.writeBigUInt64LE=Nr((function(e,t=0){return ar(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Fn.prototype.writeBigUInt64BE=Nr((function(e,t=0){return or(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Fn.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);sr(this,e,t,n,r-1,-r)}let s=0,a=1,o=0;for(this[t]=255&e;++s<n&&(a*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},Fn.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);sr(this,e,t,n,r-1,-r)}let s=n-1,a=1,o=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},Fn.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Fn.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Fn.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Fn.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Fn.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||sr(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Fn.prototype.writeBigInt64LE=Nr((function(e,t=0){return ar(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Fn.prototype.writeBigInt64BE=Nr((function(e,t=0){return or(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Fn.prototype.writeFloatLE=function(e,t,n){return ur(this,e,t,!0,n)},Fn.prototype.writeFloatBE=function(e,t,n){return ur(this,e,t,!1,n)},Fn.prototype.writeDoubleLE=function(e,t,n){return lr(this,e,t,!0,n)},Fn.prototype.writeDoubleBE=function(e,t,n){return lr(this,e,t,!1,n)},Fn.prototype.copy=function(e,t,n,r){if(!Fn.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},Fn.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Fn.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const a=Fn.isBuffer(e)?e:Fn.from(e,r),o=a.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=a[s%o]}return this};const cr={};function pr(e,t,n){cr[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function hr(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function dr(e,t,n,r,s,a){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let s;throw s=a>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(a+1)}${r}`:`>= -(2${r} ** ${8*(a+1)-1}${r}) and < 2 ** ${8*(a+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new cr.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){fr(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||mr(t,e.length-(n+1))}(r,s,a)}function fr(e,t){if("number"!=typeof e)throw new cr.ERR_INVALID_ARG_TYPE(t,"number",e)}function mr(e,t,n){if(Math.floor(e)!==e)throw fr(e,n),new cr.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new cr.ERR_BUFFER_OUT_OF_BOUNDS;throw new cr.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}pr("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),pr("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),pr("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=hr(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=hr(s)),s+="n"),r+=` It must be ${t}. Received ${s}`,r}),RangeError);const gr=/[^+/0-9A-Za-z-_]/g;function yr(e,t){let n;t=t||1/0;const r=e.length;let s=null;const a=[];for(let o=0;o<r;++o){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function br(e){return wn(function(e){if((e=(e=e.split("=")[0]).trim().replace(gr,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function xr(e,t,n,r){let s;for(s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function wr(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function kr(e){return e!=e}const vr=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let s=0;s<16;++s)t[r+s]=e[n]+e[s]}return t}();function Nr(e){return"undefined"==typeof BigInt?Sr:e}function Sr(){throw new Error("BigInt not supported")}var Ir=xn;async function Tr(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:$r(await Promise.all(r)),specs:n}}function Er(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=k(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=bn[n.dtype],c=e.slice(s,s+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Pr()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=k(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=bn[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=yn(e,i,"float32"),o=yn(r,i,"float32");n[t]=mn(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=yn(l,i,o))}return n}function $r(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Cr=void 0!==Ir&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ar(e){return Cr?Ir.byteLength(e):new Blob([e]).size}function Rr(e){if(Cr)return Ir.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function _r(e){if(Cr){const t=Ir.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function Dr(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Fr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Or(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Mr(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function Lr(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Mr(e,n,r)}function zr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ar(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ar(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Br(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Pr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class Vr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Vr.instance&&(Vr.instance=new Vr),Vr.instance}static registerSaveRouter(e){Vr.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Vr.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Vr.getHandlers(e,"save")}static getLoadHandlers(e,t){return Vr.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Vr.getInstance().loadRouters:Vr.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Wr=e=>Vr.registerSaveRouter(e),Ur=e=>Vr.registerLoadRouter(e),Gr=e=>Vr.getSaveHandlers(e),Hr=(e,t)=>Vr.getLoadHandlers(e,t);function qr(){if(!ae().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function jr(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class Kr{constructor(e){if(this.indexedDB=qr(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>jr(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=zr(t),a=s.transaction("model_info_store","readwrite");let o=a.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction("models_store","readwrite");const i=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}Kr.URL_SCHEME="indexeddb://";const Xr=e=>{return ae().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Kr.URL_SCHEME)?(t=e.slice(Kr.URL_SCHEME.length),new Kr(t)):null;var t};Vr.registerSaveRouter(Xr),Vr.registerLoadRouter(Xr);class Yr{constructor(){this.indexedDB=qr()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>jr(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Kr.URL_SCHEME)?t.slice(Kr.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>jr(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),o=a.objectStore("model_info_store"),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const Zr="tensorflowjs_models",Jr="info",Qr="model_topology",es="weight_specs",ts="weight_data",ns="model_metadata";function rs(e){return{info:[Zr,e,Jr].join("/"),topology:[Zr,e,Qr].join("/"),weightSpecs:[Zr,e,es].join("/"),weightData:[Zr,e,ts].join("/"),modelMetadata:[Zr,e,ns].join("/")}}function ss(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function as(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class os{constructor(e){if(!ae().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=rs(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=zr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Rr(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw ss(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=_r(a),t}}os.URL_SCHEME="localstorage://";const is=e=>{return ae().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(os.URL_SCHEME)?(t=e.slice(os.URL_SCHEME.length),new os(t)):null;var t};Vr.registerSaveRouter(is),Vr.registerLoadRouter(is);class us{constructor(){y(ae().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),y("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Zr+"/",n="/"+Jr;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[as(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=rs(e=(t=e).startsWith(os.URL_SCHEME)?t.slice(os.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return ss(n),r}}class ls{constructor(){this.managers={}}static getInstance(){return null==ls.instance&&(ls.instance=new ls),ls.instance}static registerManager(e,t){y(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),y(e.length>0,(()=>"scheme must not be an empty string."));const n=ls.getInstance();y(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=ls.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(ls.getInstance().managers)}}function cs(e){if(-1===e.indexOf("://"))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ls.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function ps(e,t,n=!1){y(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Vr.getLoadHandlers(e);y(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),y(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Vr.getSaveHandlers(t);y(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),y(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=cs(e).scheme,u=cs(e).path,l=i===cs(e).scheme,c=await s.load();n&&l&&await ls.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await ls.getManager(i).removeModel(u),p.modelArtifactsInfo}async function hs(){const e=ls.getSchemes(),t={};for(const n of e){const e=await ls.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t}async function ds(e){const t=cs(e);return ls.getManager(t.scheme).removeModel(t.path)}async function fs(e,t){return ps(e,t,!1)}async function ms(e,t){return ps(e,t,!0)}class gs{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&ae().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(ae().get("IS_BROWSER")){ae().setPlatform("browser",new gs);try{ls.registerManager(os.URL_SCHEME,new us)}catch(e){}try{ls.registerManager(Kr.URL_SCHEME,new Yr)}catch(e){}}const ys=()=>a("kjyEk");let bs;function xs(e,t="float32",n){return t=t||"float32",Q(e),new Ft(e,t,n)}ae().get("IS_NODE")&&!ae().get("IS_BROWSER")&&ae().setPlatform("node",new class{constructor(){this.util=a("kjyEk"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=ae().global.fetch?ae().global.fetch(e,t):(null==bs&&(bs=ys()),bs(e,t))}now(){const e=le.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const ws=fn({cast_:function(e,t){const n=hn(e,"x","cast");if(!M(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return an.runKernel("Cast",r,s)}});const ks=fn({clone_:function(e){const t={x:hn(e,"x","clone","string_or_numeric")};return an.runKernel("Identity",t)}});function vs(e,t=!1){console.log(e.toString(t))}sn();Mt={buffer:xs,cast:ws,clone:ks,print:vs};var Ns={};t(Ns,"copyModel",(()=>fs)),t(Ns,"listModels",(()=>hs)),t(Ns,"moveModel",(()=>ms)),t(Ns,"removeModel",(()=>ds)),t(Ns,"browserFiles",(()=>Es)),t(Ns,"browserHTTPRequest",(()=>Ms)),t(Ns,"concatenateArrayBuffers",(()=>Dr)),t(Ns,"decodeWeights",(()=>Er)),t(Ns,"encodeWeights",(()=>Tr)),t(Ns,"fromMemory",(()=>Ps)),t(Ns,"fromMemorySync",(()=>Vs)),t(Ns,"getLoadHandlers",(()=>Hr)),t(Ns,"getModelArtifactsForJSON",(()=>Lr)),t(Ns,"getModelArtifactsForJSONSync",(()=>Mr)),t(Ns,"getModelArtifactsInfoForJSON",(()=>zr)),t(Ns,"getSaveHandlers",(()=>Gr)),t(Ns,"getWeightSpecs",(()=>Br)),t(Ns,"http",(()=>Os)),t(Ns,"isHTTPScheme",(()=>Ds)),t(Ns,"loadWeights",(()=>As)),t(Ns,"registerLoadRouter",(()=>Ur)),t(Ns,"registerSaveRouter",(()=>Wr)),t(Ns,"weightsLoaderFactory",(()=>Rs)),t(Ns,"withSaveHandler",(()=>Ws)),t(Ns,"withSaveHandlerSync",(()=>Us));function Ss(e){return new Promise((e=>setTimeout(e))).then(e)}class Is{constructor(e){if(!ae().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Is.URL_SCHEME)&&(e=e.slice(Is.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Or(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Ss((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ss((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:zr(e)}}}}Is.URL_SCHEME="downloads://";class Ts{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Lr(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,Dr(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Fr(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Fr(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Es(e){return new Ts(e)}function $s(e,t,n,r){!function(e){y(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){y(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),y(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),y(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function Cs(e,t){null==t&&(t={});const n=null==t.fetchFunc?ae().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await $s(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await $s(s,t.onProgress,.5,1)}async function As(e,t="",n,r){return Rs((e=>Cs(e,{requestInit:r})))(e,t,n)}function Rs(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=bn[u]*k(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=Er(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Vr.registerSaveRouter((e=>ae().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Is.URL_SCHEME)?function(e="model"){return new Is(e)}(e.slice(Is.URL_SCHEME.length)):null));class _s{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(y("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=ae().platform.fetch,y(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&y(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Or(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:zr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Lr(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Br(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,Dr(await Cs(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ds(e){return null!=e.match(_s.URL_SCHEME_REGEX)}_s.URL_SCHEME_REGEX=/^https?:\/\//;const Fs=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ds(e))):Ds(e),n)return Os(e,t)}return null};function Os(e,t){return new _s(e,t)}function Ms(e,t){return Os(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */Vr.registerSaveRouter(Fs),Vr.registerLoadRouter(Fs);class Ls{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class zs{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Bs{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ps(e,t,n,r){const s=arguments;return new Bs(Vs(...s))}function Vs(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Ls(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ls({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ls({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Ws(e){return new zs(e)}function Us(e){return new zs(e)}var Gs={};t(Gs,"spectral",(()=>kc)),t(Gs,"signal",(()=>vc)),t(Gs,"image",(()=>Nc)),t(Gs,"linalg",(()=>Sc)),t(Gs,"losses",(()=>Ic)),t(Gs,"sparse",(()=>Tc)),t(Gs,"string",(()=>Ec)),t(Gs,"abs",(()=>zo)),t(Gs,"acos",(()=>Ri)),t(Gs,"acosh",(()=>_i)),t(Gs,"add",(()=>ua)),t(Gs,"addN",(()=>Di)),t(Gs,"all",(()=>Fi)),t(Gs,"any",(()=>Oi)),t(Gs,"argMax",(()=>Mi)),t(Gs,"argMin",(()=>Li)),t(Gs,"asin",(()=>zi)),t(Gs,"asinh",(()=>Bi)),t(Gs,"atan",(()=>Pi)),t(Gs,"atan2",(()=>Vi)),t(Gs,"atanh",(()=>Wi)),t(Gs,"avgPool",(()=>Ui)),t(Gs,"avgPool3d",(()=>Gi)),t(Gs,"basicLSTMCell",(()=>qi)),t(Gs,"batchToSpaceND",(()=>ji)),t(Gs,"batchNorm",(()=>Xi)),t(Gs,"batchNorm2d",(()=>Yi)),t(Gs,"batchNorm3d",(()=>Zi)),t(Gs,"batchNorm4d",(()=>Ji)),t(Gs,"bincount",(()=>wo)),t(Gs,"broadcastArgs",(()=>Qi)),t(Gs,"broadcastTo",(()=>Eo)),t(Gs,"buffer",(()=>xs)),t(Gs,"cast",(()=>ws)),t(Gs,"ceil",(()=>eu)),t(Gs,"clipByValue",(()=>tu)),t(Gs,"clone",(()=>ks)),t(Gs,"complex",(()=>mn)),t(Gs,"concat",(()=>Hs)),t(Gs,"concat1d",(()=>nu)),t(Gs,"concat2d",(()=>ru)),t(Gs,"concat3d",(()=>su)),t(Gs,"concat4d",(()=>au)),t(Gs,"conv1d",(()=>ou)),t(Gs,"conv2d",(()=>ba)),t(Gs,"conv2dTranspose",(()=>iu)),t(Gs,"conv3d",(()=>uu)),t(Gs,"conv3dTranspose",(()=>cu)),t(Gs,"cos",(()=>pu)),t(Gs,"cosh",(()=>hu)),t(Gs,"cumprod",(()=>du)),t(Gs,"cumsum",(()=>fu)),t(Gs,"denseBincount",(()=>mu)),t(Gs,"depthToSpace",(()=>gu)),t(Gs,"depthwiseConv2d",(()=>Fa)),t(Gs,"diag",(()=>yu)),t(Gs,"dilation2d",(()=>bu)),t(Gs,"div",(()=>So)),t(Gs,"divNoNan",(()=>wu)),t(Gs,"dot",(()=>ku)),t(Gs,"einsum",(()=>vu)),t(Gs,"elu",(()=>ka)),t(Gs,"equal",(()=>xu)),t(Gs,"erf",(()=>Nu)),t(Gs,"euclideanNorm",(()=>Su)),t(Gs,"exp",(()=>xi)),t(Gs,"expandDims",(()=>Zo)),t(Gs,"expm1",(()=>Iu)),t(Gs,"eye",(()=>Jo)),t(Gs,"fill",(()=>qa)),t(Gs,"floor",(()=>Tu)),t(Gs,"floorDiv",(()=>No)),t(Gs,"gather",(()=>Eu)),t(Gs,"greater",(()=>vo)),t(Gs,"greaterEqual",(()=>_o)),t(Gs,"imag",(()=>qs)),t(Gs,"isFinite",(()=>$u)),t(Gs,"isInf",(()=>Cu)),t(Gs,"isNaN",(()=>Au)),t(Gs,"leakyRelu",(()=>va)),t(Gs,"less",(()=>Ru)),t(Gs,"lessEqual",(()=>ko)),t(Gs,"linspace",(()=>_u)),t(Gs,"localResponseNormalization",(()=>Du)),t(Gs,"log",(()=>mi)),t(Gs,"log1p",(()=>wi)),t(Gs,"logSigmoid",(()=>Ou)),t(Gs,"logSoftmax",(()=>Mu)),t(Gs,"logSumExp",(()=>vi)),t(Gs,"logicalAnd",(()=>Do)),t(Gs,"logicalNot",(()=>Lu)),t(Gs,"logicalOr",(()=>zu)),t(Gs,"logicalXor",(()=>Bu)),t(Gs,"lowerBound",(()=>Wu)),t(Gs,"matMul",(()=>za)),t(Gs,"max",(()=>Po)),t(Gs,"maxPool",(()=>Uu)),t(Gs,"maxPool3d",(()=>Gu)),t(Gs,"maxPoolWithArgmax",(()=>Hu)),t(Gs,"maximum",(()=>qu)),t(Gs,"mean",(()=>oi)),t(Gs,"meshgrid",(()=>ju)),t(Gs,"min",(()=>Vo)),t(Gs,"minimum",(()=>di)),t(Gs,"mirrorPad",(()=>Ku)),t(Gs,"mod",(()=>Xu)),t(Gs,"moments",(()=>Yu)),t(Gs,"mul",(()=>na)),t(Gs,"multiRNNCell",(()=>Zu)),t(Gs,"multinomial",(()=>Ju)),t(Gs,"neg",(()=>Qo)),t(Gs,"notEqual",(()=>ii)),t(Gs,"oneHot",(()=>Qu)),t(Gs,"ones",(()=>ui)),t(Gs,"onesLike",(()=>el)),t(Gs,"outerProduct",(()=>tl)),t(Gs,"pad",(()=>nl)),t(Gs,"pad1d",(()=>rl)),t(Gs,"pad2d",(()=>sl)),t(Gs,"pad3d",(()=>al)),t(Gs,"pad4d",(()=>ol)),t(Gs,"pool",(()=>ul)),t(Gs,"pow",(()=>Wo)),t(Gs,"prelu",(()=>Na)),t(Gs,"print",(()=>vs)),t(Gs,"prod",(()=>ll)),t(Gs,"raggedGather",(()=>cl)),t(Gs,"raggedTensorToTensor",(()=>pl)),t(Gs,"rand",(()=>hl)),t(Gs,"randomGamma",(()=>Sl)),t(Gs,"randomNormal",(()=>Il)),t(Gs,"randomStandardNormal",(()=>Tl)),t(Gs,"randomUniform",(()=>El)),t(Gs,"range",(()=>Co)),t(Gs,"real",(()=>js)),t(Gs,"reciprocal",(()=>$l)),t(Gs,"relu",(()=>Sa)),t(Gs,"relu6",(()=>Ia)),t(Gs,"reshape",(()=>Ks)),t(Gs,"reverse",(()=>ra)),t(Gs,"reverse1d",(()=>Cl)),t(Gs,"reverse2d",(()=>Al)),t(Gs,"reverse3d",(()=>Rl)),t(Gs,"reverse4d",(()=>_l)),t(Gs,"round",(()=>To)),t(Gs,"rsqrt",(()=>Dl)),t(Gs,"scalar",(()=>sa)),t(Gs,"selu",(()=>Fl)),t(Gs,"separableConv2d",(()=>Ol)),t(Gs,"setdiff1dAsync",(()=>Ml)),t(Gs,"sigmoid",(()=>Ta)),t(Gs,"sign",(()=>Ll)),t(Gs,"sin",(()=>zl)),t(Gs,"sinh",(()=>Bl)),t(Gs,"slice",(()=>Xs)),t(Gs,"slice1d",(()=>Pl)),t(Gs,"slice2d",(()=>Vl)),t(Gs,"slice3d",(()=>Wl)),t(Gs,"slice4d",(()=>Ul)),t(Gs,"softmax",(()=>Gl)),t(Gs,"softplus",(()=>Fu)),t(Gs,"spaceToBatchND",(()=>il)),t(Gs,"fft",(()=>Qs)),t(Gs,"ifft",(()=>ta)),t(Gs,"irfft",(()=>aa)),t(Gs,"rfft",(()=>ea)),t(Gs,"split",(()=>Ys)),t(Gs,"sqrt",(()=>Uo)),t(Gs,"square",(()=>Go)),t(Gs,"squaredDifference",(()=>yi)),t(Gs,"squeeze",(()=>jo)),t(Gs,"stack",(()=>Fo)),t(Gs,"step",(()=>Ea)),t(Gs,"stridedSlice",(()=>Hl)),t(Gs,"sub",(()=>Io)),t(Gs,"sum",(()=>$a)),t(Gs,"tan",(()=>ql)),t(Gs,"tanh",(()=>Hi)),t(Gs,"tensor",(()=>yn)),t(Gs,"tensor1d",(()=>Va)),t(Gs,"tensor2d",(()=>ja)),t(Gs,"tensor3d",(()=>jl)),t(Gs,"tensor4d",(()=>Kl)),t(Gs,"tensor5d",(()=>Xl)),t(Gs,"tensor6d",(()=>Yl)),t(Gs,"tile",(()=>Ja)),t(Gs,"topk",(()=>Zl)),t(Gs,"truncatedNormal",(()=>Jl)),t(Gs,"unique",(()=>Ql)),t(Gs,"unsortedSegmentSum",(()=>ec)),t(Gs,"unstack",(()=>Oo)),t(Gs,"upperBound",(()=>tc)),t(Gs,"variable",(()=>nc)),t(Gs,"where",(()=>$o)),t(Gs,"whereAsync",(()=>sc)),t(Gs,"zeros",(()=>Zs)),t(Gs,"zerosLike",(()=>Js)),t(Gs,"op",(()=>fn)),t(Gs,"OP_SCOPE_SUFFIX",(()=>"__op")),t(Gs,"fused",(()=>oa));const Hs=fn({concat_:function(e,t=0){y(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=dn(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return ks(n[0]);const r=n,s={axis:t};return an.runKernel("Concat",r,s)}});const qs=fn({imag_:function(e){const t={input:hn(e,"input","imag")};return an.runKernel("Imag",t)}});const js=fn({real_:function(e){const t={input:hn(e,"input","real")};return an.runKernel("Real",t)}});const Ks=fn({reshape_:function(e,t){const n={x:hn(e,"x","reshape","string_or_numeric")},r={shape:t};return an.runKernel("Reshape",n,r)}});const Xs=fn({slice_:function(e,t,n){const r=hn(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return an.runKernel("Slice",s,a)}});const Ys=fn({split_:function(e,t,n=0){const r={x:hn(e,"x","split")},s={numOrSizeSplits:t,axis:n};return an.runKernel("SplitV",r,s)}});function Zs(e,t="float32"){if("complex64"===t){const t=Zs(e,"float32"),n=Zs(e,"float32");return mn(t,n)}const n=Z(k(e),t);return an.makeTensor(n,e,t)}const Js=fn({zerosLike_:function(e){const t={x:hn(e,"x","zerosLike")};return an.runKernel("ZerosLike",t)}});const Qs=fn({fft_:function(e){y("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return an.runKernel("FFT",t)}});const ea=fn({rfft_:function(e,t){y("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=Xs(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=Hs([e,Zs(r)],e.shape.length-1),n=t}else s=e;const a=Js(s),o=Ks(mn(s,a),[r,n]),i=Qs(o),u=Math.floor(n/2)+1,l=js(i),c=qs(i),p=Ys(l,[u,n-u],l.shape.length-1),h=Ys(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,Ks(mn(p[0],h[0]),d)}});const ta=fn({ifft_:function(e){y("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return an.runKernel("IFFT",t)}});const na=fn({mul_:function(e,t){let n=hn(e,"a","mul"),r=hn(t,"b","mul");[n,r]=Jt(n,r);const s={a:n,b:r};return an.runKernel("Multiply",s)}});const ra=fn({reverse_:function(e,t){const n={x:hn(e,"x","reverse")},r={dims:t};return an.runKernel("Reverse",n,r)}});function sa(e,t){if((z(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&z(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return gn(e,[],[],t)}const aa=fn({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Ks(e,[n,t]);r=ta(s)}else{const s=[n,2*(t-1)],a=Ks(js(e),[n,t]),o=Ks(qs(e),[n,t]),i=ra(Xs(a,[0,1],[n,t-2]),1),u=na(ra(Xs(o,[0,1],[n,t-2]),1),sa(-1)),l=Hs([a,i],1),c=Hs([o,u],1),p=Ks(mn(l,c),[s[0],s[1]]);r=ta(p)}if(r=js(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Ks(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var oa={};function ia(e){return an.customGrad(e)}t(oa,"conv2d",(()=>Da)),t(oa,"depthwiseConv2d",(()=>La)),t(oa,"matMul",(()=>Ba));const ua=fn({add_:function(e,t){let n=hn(e,"a","add"),r=hn(t,"b","add");[n,r]=Jt(n,r);const s={a:n,b:r};return an.runKernel("Add",s)}});function la(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}function ca(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[h,d,,f]=t,[m,g]=ha(n),[y,b]=ha(r),x=da(h,y),w=da(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=pa(e,t,n));const a=e[0],o=e[1],i=fa((a-t+2*r)/n+1,s),u=fa((o-t+2*r)/n+1,s);return[i,u]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);l={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=fa((t-a+h+d)/r+1,i),p=fa((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[u,S,v,N]:"channelsLast"===i&&(I=[u,v,N,S]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function pa(e,t,n,r=1){const s=da(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function ha(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function da(e,t){return t<=1?e:e+(e-1)*(t-1)}function fa(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function ma(e){const[t,n,r]=ha(e);return 1===t&&1===n&&1===r}function ga(e,t){return ma(e)||ma(t)}function ya(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)y(S(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{y(S(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const ba=fn({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=hn(e,"x","conv2d","float32"),u=hn(t,"filter","conv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Ks(i,[1,i.shape[0],i.shape[1],i.shape[2]])),y(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),y(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),ya("conv2d",r,o);const p="NHWC"===s?l.shape[3]:l.shape[1];y(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),y(ga(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=an.runKernel("Conv2D",h,d);return c?Ks(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const xa=fn({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=Ks(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Ks(t,[1,t.shape[0],t.shape[1],t.shape[2]])),y(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),y(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),y(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];y(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),y(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),ya("conv2dDerFilter",s,o);const p={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return an.runKernel("Conv2DBackpropFilter",p,h)}});const wa=fn({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){y(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=Ks(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),y(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),y(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),y(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];y(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),y(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),ya("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=an.runKernel("Conv2DBackpropInput",h,d);return l?Ks(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ka=fn({elu_:function(e){const t={x:hn(e,"x","elu","float32")};return an.runKernel("Elu",t)}});const va=fn({leakyRelu_:function(e,t=.2){const n={x:hn(e,"x","leakyRelu")},r={alpha:t};return an.runKernel("LeakyRelu",n,r)}});const Na=fn({prelu_:function(e,t){const n={x:hn(e,"x","prelu"),alpha:hn(t,"alpha","prelu")};return an.runKernel("Prelu",n)}});const Sa=fn({relu_:function(e){const t={x:hn(e,"x","relu")};return an.runKernel("Relu",t)}});const Ia=fn({relu6_:function(e){const t={x:hn(e,"x","relu6")};return an.runKernel("Relu6",t)}});const Ta=fn({sigmoid_:function(e){const t={x:hn(e,"x","sigmoid","float32")};return an.runKernel("Sigmoid",t)}});const Ea=fn({step_:function(e,t=0){const n={x:hn(e,"x","step")},r={alpha:t};return an.runKernel("Step",n,r)}});const $a=fn({sum_:function(e,t=null,n=!1){let r=hn(e,"x","sum");"bool"===r.dtype&&(r=ws(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return an.runKernel("Sum",s,a)}});function Ca(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return na(e,Ea(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Aa(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(e.shape,t.shape);return r.length>0&&(n=$a(n,r)),Ks(n,e.shape)}function Ra(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Sa(e);if("elu"===t)return ka(e);if("relu6"===t)return Ia(e);if("prelu"===t)return Na(e,n);if("leakyrelu"===t)return va(e,r);if("sigmoid"===t)return Ta(e);throw new Error(`Unknown fused activation ${t}.`)}const _a=(e,t)=>!(e>0)||"linear"===t;const Da=fn({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===_a(an.state.gradientDepth,u)){y("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=ba(e,t,n,r,s,a,o);return null!=i&&(p=ua(p,i)),Ra(p,u,l,c)}const p=hn(e,"x","conv2d","float32"),h=hn(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Ks(p,[1,p.shape[0],p.shape[1],p.shape[2]])),y(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),y(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),ya("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];y(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),y(ga(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=ca(d.shape,h.shape,n,a,r,o);let b,x;if(null!=i&&(b=hn(i,"bias","fused conv2d"),[b]=Jt(b,p),"NHWC"===s?la(g.outShape,b.shape):(y(b.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`)),y(0===b.shape.length||b.shape[0]===g.outChannels||1===b.shape[0],(()=>`Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(y(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)y(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{la(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}x=hn(l,"prelu weights","fused conv2d")}const w=(e,t)=>{y("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,l,c]=t,p=Ca(e,l,u);y(ma(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[wa(i.shape,p,o,n,r),xa(i,p,o.shape,n,r)];if(null!=c){const e=Aa(c,p);h.push(e)}return h},k={x:d,filter:h,bias:b,preluActivationWeights:x},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=ia(((e,t,n)=>{let r=an.runKernel("FusedConv2D",k,v);return n([t,e,r]),f&&(r=Ks(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}));return e(d,h)}{const e=ia(((e,t,n,r)=>{let s=an.runKernel("FusedConv2D",k,v);return r([t,e,s,n]),f&&(s=Ks(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}));return e(d,h,b)}}});const Fa=fn({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=hn(e,"x","depthwiseConv2d","float32"),u=hn(t,"filter","depthwiseConv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Ks(i,[1,i.shape[0],i.shape[1],i.shape[2]])),y(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),y(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const p="NHWC"===s?l.shape[3]:l.shape[1];y(p===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${u.shape[2]}.`)),ya("depthwiseConv2d",r,o);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=an.runKernel("DepthwiseConv2dNative",h,d);return c?Ks(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Oa=fn({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=Ks(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Ks(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return an.runKernel("DepthwiseConv2dNativeBackpropFilter",l,c)}});const Ma=fn({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=Ks(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=an.runKernel("DepthwiseConv2dNativeBackpropInput",l,c);return u?Ks(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const La=fn({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===_a(an.state.gradientDepth,u)){let p=Fa(e,t,n,r,s,a,o);return null!=i&&(p=ua(p,i)),Ra(p,u,l,c)}const p=hn(e,"x","depthwiseConv2d","float32"),h=hn(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Ks(p,[1,p.shape[0],p.shape[1],p.shape[2]])),y(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),y(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),y(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),y(ga(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ya("fused depthwiseConv2d",r,o);const m=ca(d.shape,h.shape,n,a,r,o,!0);let g,b;null!=i&&(g=hn(i,"bias","fused conv2d"),[g]=Jt(g,p),la(m.outShape,g.shape)),null!=l&&(b=hn(l,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{y(ma(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,l,c]=t,p=Ca(e,l,u),h=Ma(i.shape,p,s,n,r,a,o),d=Oa(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,Aa(g,p)]}return[h,d]},w={x:d,filter:h,bias:g,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=ia(((e,t,n)=>{let r=an.runKernel("FusedDepthwiseConv2D",w,k);return n([t,e,r]),f&&(r=Ks(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=ia(((e,t,n,r)=>{let s=an.runKernel("FusedDepthwiseConv2D",w,k);return r([t,e,s,n]),f&&(s=Ks(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,g)}}});const za=fn({matMul_:function(e,t,n=!1,r=!1){let s=hn(e,"a","matMul"),a=hn(t,"b","matMul");[s,a]=Jt(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return an.runKernel("BatchMatMul",o,i)}});const Ba=fn({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===_a(an.state.gradientDepth,a)){let u=za(e,t,n,r);return null!=s&&(u=ua(u,s)),Ra(u,a,o,i)}let u=hn(e,"a","fused matMul"),l=hn(t,"b","fused matMul");[u,l]=Jt(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],p=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=k(f),b=k(m);y(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const x=la(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,d]),w=Ks(u,n?[g,c,h]:[g,h,c]),v=Ks(l,r?[b,d,p]:[b,p,d]);let N,S;null!=s&&(N=hn(s,"bias","fused matMul"),[N]=Jt(N,u),la(x,N.shape)),null!=o&&(S=hn(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,u,l]=t,c=Ca(Ks(e,u.shape),u,a);let p,h;if(n||r?!n&&r?(p=za(c,i,!1,!1),h=za(c,o,!0,!1)):n&&!r?(p=za(i,c,!1,!0),h=za(o,c,!1,!1)):(p=za(i,c,!0,!0),h=za(c,o,!0,!0)):(p=za(c,i,!1,!0),h=za(o,c,!0,!1)),null!=s){return[p,h,Aa(l,c)]}return[p,h]},T={a:w,b:v,bias:N,preluActivationWeights:S},E={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=ia(((e,t,n)=>{const r=an.runKernel("_FusedMatMul",T,E);return n([e,t,r]),{value:Ks(r,x),gradFunc:I}}));return e(w,v)}{const e=ia(((e,t,n,r)=>{const s=an.runKernel("_FusedMatMul",T,E);return r([e,t,s,n]),{value:Ks(s,x),gradFunc:I}}));return e(w,v,N)}}});var Pa={};function Va(e,t){x(e);const n=ln(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return gn(e,null,n,t)}function Wa(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Ua(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return Va(s,"float32")}t(Pa,"enclosingPowerOfTwo",(()=>Wa)),t(Pa,"cosineWindow",(()=>Ua));const Ga=fn({hammingWindow_:function(e){return Ua(e,.54,.46)}});const Ha=fn({hannWindow_:function(e){return Ua(e,.5,.5)}});function qa(e,t,n){const r={shape:e,value:t,dtype:n};return an.runKernel("Fill",{},r)}function ja(e,t,n){if(x(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=ln(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return gn(e,t,r,n)}const Ka=fn({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(Xs(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=Hs([Xs(e,a,t-r),qa([r],s)]);o.push(i),a+=n}return 0===o.length?ja([],[0,t]):Ks(Hs(o),[o.length,t])}});const Xa=fn({stft_:function(e,t,n,r,s=Ha){null==r&&(r=Wa(t));const a=Ka(e,t,n),o=na(a,s(t));return ea(o,r)}});const Ya=fn({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=hn(e,"image","cropAndResize"),i=hn(t,"boxes","cropAndResize","float32"),u=hn(n,"boxInd","cropAndResize","int32"),l=i.shape[0];y(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),y(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),y(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),y(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),y(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),y("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return an.runKernel("CropAndResize",c,p)}});const Za=fn({flipLeftRight_:function(e){const t=hn(e,"image","flipLeftRight","float32");y(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return an.runKernel("FlipLeftRight",n,{})}});const Ja=fn({tile_:function(e,t){const n=hn(e,"x","tile","string_or_numeric");y(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return an.runKernel("Tile",r,s)}});const Qa=fn({grayscaleToRGB_:function(e){const t=hn(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];y(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),y(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,Ja(t,s)}});const eo=fn({rotateWithOffset_:function(e,t,n=0,r=.5){const s=hn(e,"image","rotateWithOffset","float32");y(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return an.runKernel("RotateWithOffset",a,o)}});function to(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),y(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),y(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),y(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),y(1===t.rank,(()=>"scores must be a 1D tensor")),y(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),y(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const no=fn({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=hn(e,"boxes","nonMaxSuppression","float32"),o=hn(t,"scores","nonMaxSuppression","float32"),i=to(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return an.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function ro(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||so)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function so(e,t){return e>t?1:e<t?-1:0}function ao(e,t,n,r,s){return uo(e,t,n,r,s,0)}function oo(e,t,n,r,s,a){return uo(e,t,n,r,s,0,!1,a,!0)}function io(e,t,n,r,s,a){return uo(e,t,n,r,s,a,!0)}function uo(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(po);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=lo(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*co(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&ro(l,t,po))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),u&&(m.validOutputs=d),m}function lo(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),f=(p-l)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(u,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function co(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function po(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const ho=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=hn(e,"boxes","nonMaxSuppressionAsync"),o=hn(t,"scores","nonMaxSuppressionAsync"),i=to(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=ao(l,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),Va(p,"int32")};const fo=fn({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=hn(e,"boxes","nonMaxSuppression"),i=hn(t,"scores","nonMaxSuppression"),u=to(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=an.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const mo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=hn(e,"boxes","nonMaxSuppressionAsync"),i=hn(t,"scores","nonMaxSuppressionAsync"),u=to(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:h,selectedScores:d}=io(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Va(h,"int32"),selectedScores:Va(d)}};const go=fn({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=hn(e,"boxes","nonMaxSuppression"),i=hn(t,"scores","nonMaxSuppression"),u=to(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=an.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const yo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=hn(e,"boxes","nonMaxSuppressionAsync"),i=hn(t,"scores","nonMaxSuppressionAsync"),u=to(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=oo(h,d,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Va(f,"int32"),validOutputs:sa(m,"int32")}};const bo=fn({resizeBilinear_:function(e,t,n=!1,r=!1){const s=hn(e,"images","resizeBilinear");y(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),y(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),y(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Ks(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=an.runKernel("ResizeBilinear",i,u);return o?Ks(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const xo=fn({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=hn(e,"images","resizeNearestNeighbor");y(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),y(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),y("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),y(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Ks(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=an.runKernel("ResizeNearestNeighbor",i,u);return o?Ks(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const wo=fn({bincount_:function(e,t,n){const r=hn(e,"x","bincount"),s=hn(t,"weights","bincount");y("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),y(n>=0,(()=>`size must be non-negative, but got ${n}.`)),y(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return an.runKernel("Bincount",a,o)}});const ko=fn({lessEqual_:function(e,t){let n=hn(e,"a","lessEqual","string_or_numeric"),r=hn(t,"b","lessEqual","string_or_numeric");[n,r]=Jt(n,r),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("LessEqual",s)}});const vo=fn({greater_:function(e,t){let n=hn(e,"a","greater","string_or_numeric"),r=hn(t,"b","greater","string_or_numeric");[n,r]=Jt(n,r),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("Greater",s)}});const No=fn({floorDiv_:function(e,t){let n=hn(e,"a","floorDiv"),r=hn(t,"b","floorDiv");[n,r]=Jt(n,r);const s={a:n,b:r};return an.runKernel("FloorDiv",s)}});const So=fn({div_:function(e,t){let n=hn(e,"a","div"),r=hn(t,"b","div");if([n,r]=Jt(n,r),"int32"===n.dtype&&"int32"===r.dtype)return No(n,r);const s={a:n,b:r};return an.runKernel("RealDiv",s,{})}});const Io=fn({sub_:function(e,t){let n=hn(e,"a","sub"),r=hn(t,"b","sub");[n,r]=Jt(n,r);const s={a:n,b:r};return an.runKernel("Sub",s)}});const To=fn({round_:function(e){const t={x:hn(e,"x","round")};return an.runKernel("Round",t)}});const Eo=fn({broadcastTo_:function(e,t){let n=hn(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Ks(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return ks(n);const o={x:n},i={reps:a};return an.runKernel("Tile",o,i)}});const $o=fn({where_:function(e,t,n){const r=hn(t,"a","where"),s=hn(n,"b","where"),a=hn(e,"condition","where","bool"),o=la(la(a.shape,r.shape),s.shape),i={condition:Eo(a,o),t:Eo(r,o),e:Eo(s,o)};return an.runKernel("Select",i)}});function Co(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return an.runKernel("Range",{},s)}const Ao=fn({threshold_:function(e,t="binary",n=!1,r=.5){const s=hn(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,c=na(Va([r]),255);if(y(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),y(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),y("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),y("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=Ys(s,[1,1,1],-1);const e=na(o,.2989),t=na(i,.587),n=na(u,.114);l=ua(ua(e,t),n)}else l=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,u=Va([-1]),l=Va([0]),c=Va([0]);for(let p=0;p<e.size-1;p++){n=Xs(e,0,p+1),r=Xs(e,p+1),o=So($a(n),t),i=So($a(r),t);const h=$a(na(n,Co(0,n.size)));s=So(h,$a(n));const d=qa(r.shape,n.size),f=ua(Co(0,r.size),d),m=na(r,f);a=So($a(m),$a(r));const g=Io(s,a),y=Io(s,a),b=na(o,i);c=na(na(b,g),y);const x=vo(c,l);l=$o(x,c,l),u=$o(x,Va([p]),u)}return u}(wo(ws(To(l),"int32"),yn([]),256),a)}const p=n?ko(l,c):vo(l,c);return ws(na(p,255),"int32")}});const Ro=fn({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=hn(e,"image","transform","float32"),i=hn(t,"transforms","transform","float32");y(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),y(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),y(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return an.runKernel("Transform",u,l)}});const _o=fn({greaterEqual_:function(e,t){let n=hn(e,"a","greaterEqual","string_or_numeric"),r=hn(t,"b","greaterEqual","string_or_numeric");[n,r]=Jt(n,r),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("GreaterEqual",s)}});const Do=fn({logicalAnd_:function(e,t){const n=hn(e,"a","logicalAnd","bool"),r=hn(t,"b","logicalAnd","bool");la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("LogicalAnd",s)}});const Fo=fn({stack_:function(e,t=0){const n=dn(e,"tensors","stack","string_or_numeric");y(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&y(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return an.runKernel("Pack",r,s)}});const Oo=fn({unstack_:function(e,t=0){const n=hn(e,"x","unstack","string_or_numeric");y(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return an.runKernel("Unpack",r,s)}});const Mo=fn({bandPart_:function(e,t,n){y(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),y(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=hn(e,"a","bandPart");y(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Ks(Co(0,a,1,"int32"),[-1,1]),u=Co(0,o,1,"int32"),l=Io(i,u),c=Do(ko(l,sa(+t,"int32")),_o(l,sa(-n,"int32"))),p=Zs([a,o],r.dtype);return Ks(Fo(Oo(Ks(r,[-1,a,o])).map((e=>$o(c,e,p)))),s)}});var Lo={};t(Lo,"norm",(()=>qo));const zo=fn({abs_:function(e){const t=hn(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return an.runKernel("ComplexAbs",e)}{const e={x:t};return an.runKernel("Abs",e)}}});function Bo(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}(e,t.map((e=>1)),t)}const Po=fn({max_:function(e,t=null,n=!1){const r={x:hn(e,"x","max")},s={reductionIndices:t,keepDims:n};return an.runKernel("Max",r,s)}});const Vo=fn({min_:function(e,t=null,n=!1){const r={x:hn(e,"x","min")},s={axis:t,keepDims:n};return an.runKernel("Min",r,s)}});const Wo=fn({pow_:function(e,t){let n=hn(e,"base","pow"),r=hn(t,"exp","pow");[n,r]=Jt(n,r);const s={a:n,b:r};return an.runKernel("Pow",s)}});const Uo=fn({sqrt_:function(e){const t={x:hn(e,"x","sqrt","float32")};return an.runKernel("Sqrt",t)}});const Go=fn({square_:function(e){const t=hn(e,"x","square");return an.runKernel("Square",{x:t},{})}});function Ho(e,t,n=null){if(0===e.rank)return zo(e);if(1!==e.rank&&null===n)return Ho(Ks(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return $a(zo(e),n);if(t===1/0)return Po(zo(e),n);if(t===-1/0)return Vo(zo(e),n);if("euclidean"===t||2===t)return Uo($a(Wo(zo(e),sa(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Po($a(zo(e),n[0]),n[1]-1);if(t===1/0)return Po($a(zo(e),n[1]),n[0]);if(t===-1/0)return Vo($a(zo(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Uo($a(Go(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const qo=fn({norm_:function(e,t="euclidean",n=null,r=!1){const s=Ho(e=hn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=R(n,e.shape);a=Bo(s.shape,t)}return Ks(s,a)}});const jo=fn({squeeze_:function(e,t){const n=hn(e,"x","squeeze","string_or_numeric");return Ks(n,_(n.shape,t).newShape)}});const Ko=fn({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,y(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)y(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Ys(e,e.shape[0],0).map((e=>jo(e,[0])));y(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(an.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=na($a(na(n[r],e)),n[r]);e=Io(e,t)}return So(e,qo(e,"euclidean"))})));return t?Fo(n,0):n}});function Xo(e,t){return an.tidy(e,t)}function Yo(e){return an.keep(e)}Lt=function(e){ae().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const Zo=fn({expandDims_:function(e,t=0){const n=hn(e,"x","expandDims","string_or_numeric");y(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return an.runKernel("ExpandDims",r,s)}});const Jo=fn({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=xs([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=Ks(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Ja(Zo(o,0),[n[0],1,1]);if(2===n.length)return Ja(Zo(Zo(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Ja(Zo(Zo(Zo(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Qo=fn({neg_:function(e){const t={x:hn(e,"x","neg")};return an.runKernel("Neg",t)}});var ei={};t(ei,"transpose",(()=>ti));const ti=fn({transpose_:function(e,t,n){const r=hn(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),y(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{y(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?Xo((()=>{let e=js(r),t=qs(r);return e=an.runKernel("Transpose",{x:e},a),t=an.runKernel("Transpose",{x:t},a),n&&(t=Qo(t)),mn(e,t)})):an.runKernel("Transpose",s,a)}});function ni(e,t=!1){return an.tidy((()=>{y(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=Jo(n),a=ks(e);const o=ja([[1]],[1,1]);let i=ks(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=an.tidy((()=>{const t=Xs(a,[e,e],[n-e,1]),u=qo(t),l=Xs(a,[e,e],[1,1]),c=$o(vo(l,0),ja([[-1]]),ja([[1]])),p=Io(l,na(c,u)),h=So(t,p);i=1===h.shape[0]?ks(o):Hs([o,Xs(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=Qo(So(za(c,p),u)),f=Xs(a,[e,0],[n-e,r]),m=na(d,i),g=ti(i);if(0===e)a=Io(f,za(m,za(g,f)));else{const t=Io(f,za(m,za(g,f)));a=Hs([Xs(a,[0,0],[e,r]),t],0)}const y=ti(m),b=Xs(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Io(b,za(za(b,i),y));else{const t=Io(b,za(za(b,i),y));s=Hs([Xs(s,[0,0],[n,e]),t],1)}return[i,a,s]})),Qt([t,u,l]).forEach((e=>e.dispose()))}return!t&&n>r&&(s=Xs(s,[0,0],[n,r]),a=Xs(a,[0,0],[r,r])),[s,a]}))}const ri=fn({qr_:function(e,t=!1){if(y(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return ni(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Oo(Ks(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=ni(e,t);s.push(n),a.push(r)}));return[Ks(Fo(s,0),e.shape),Ks(Fo(a,0),e.shape)]}}});var si,ai;(ai=si||(si={}))[ai.NONE=0]="NONE",ai[ai.MEAN=1]="MEAN",ai[ai.SUM=2]="SUM",ai[ai.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const oi=fn({mean_:function(e,t=null,n=!1){const r={x:hn(e,"x","mean")},s={axis:t,keepDims:n};return an.runKernel("Mean",r,s)}});const ii=fn({notEqual_:function(e,t){let n=hn(e,"a","notEqual","string_or_numeric"),r=hn(t,"b","notEqual","string_or_numeric");[n,r]=Jt(n,r),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("NotEqual",s)}});function ui(e,t="float32"){if("complex64"===t){const t=ui(e,"float32"),n=Zs(e,"float32");return mn(t,n)}const n=Y(k(e),t);return an.makeTensor(n,e,t)}const li=fn({computeWeightedLoss_:function(e,t,n=si.SUM_BY_NONZERO_WEIGHTS){const r=hn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=hn(t,"weights","computeWeightedLoss"));const a=null==s?r:na(r,s);if(n===si.NONE)return a;if(n===si.SUM)return $a(a);if(n===si.MEAN){if(null==s)return oi(a);{const e=r.size/s.size,t=So($a(a),$a(s));return e>1?So(t,sa(e)):t}}if(n===si.SUM_BY_NONZERO_WEIGHTS){if(null==s)return So($a(a),sa(r.size));{const e=na(s,ui(r.shape)),t=ws($a(ii(e,sa(0))),"float32");return So($a(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const ci=fn({absoluteDifference_:function(e,t,n,r=si.SUM_BY_NONZERO_WEIGHTS){const s=hn(e,"labels","absoluteDifference"),a=hn(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=hn(n,"weights","absoluteDifference")),b(s.shape,a.shape,"Error in absoluteDifference: ");const i=zo(Io(s,a));return li(i,o,r)}});const pi=fn({cosineDistance_:function(e,t,n,r,s=si.SUM_BY_NONZERO_WEIGHTS){const a=hn(e,"labels","cosineDistance"),o=hn(t,"predictions","cosineDistance");let i=null;null!=r&&(i=hn(r,"weights","cosineDistance")),b(a.shape,o.shape,"Error in cosineDistance: ");const u=sa(1),l=Io(u,$a(na(a,o),n,!0));return li(l,i,s)}});const hi=fn({hingeLoss_:function(e,t,n,r=si.SUM_BY_NONZERO_WEIGHTS){let s=hn(e,"labels","hingeLoss");const a=hn(t,"predictions","hingeLoss");let o=null;null!=n&&(o=hn(n,"weights","hingeLoss")),b(s.shape,a.shape,"Error in hingeLoss: ");const i=sa(1);s=Io(na(sa(2),s),i);const u=Sa(Io(i,na(s,a)));return li(u,o,r)}});const di=fn({minimum_:function(e,t){let n=hn(e,"a","minimum"),r=hn(t,"b","minimum");[n,r]=Jt(n,r),"bool"===n.dtype&&(n=ws(n,"int32"),r=ws(r,"int32")),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("Minimum",s)}});const fi=fn({huberLoss_:function(e,t,n,r=1,s=si.SUM_BY_NONZERO_WEIGHTS){const a=hn(e,"labels","huberLoss"),o=hn(t,"predictions","huberLoss");let i=null;null!=n&&(i=hn(n,"weights","huberLoss")),b(a.shape,o.shape,"Error in huberLoss: ");const u=sa(r),l=zo(Io(o,a)),c=di(l,u),p=Io(l,c),h=ua(na(sa(.5),Go(c)),na(u,p));return li(h,i,s)}});const mi=fn({log_:function(e){const t={x:hn(e,"x","log","float32")};return an.runKernel("Log",t)}});const gi=fn({logLoss_:function(e,t,n,r=1e-7,s=si.SUM_BY_NONZERO_WEIGHTS){const a=hn(e,"labels","logLoss"),o=hn(t,"predictions","logLoss");let i=null;null!=n&&(i=hn(n,"weights","logLoss")),b(a.shape,o.shape,"Error in logLoss: ");const u=sa(1),l=sa(r),c=Qo(na(a,mi(ua(o,l)))),p=na(Io(u,a),mi(ua(Io(u,o),l))),h=Io(c,p);return li(h,i,s)}});const yi=fn({squaredDifference_:function(e,t){let n=hn(e,"a","squaredDifference"),r=hn(t,"b","squaredDifference");[n,r]=Jt(n,r),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("SquaredDifference",s,{})}});const bi=fn({meanSquaredError_:function(e,t,n,r=si.SUM_BY_NONZERO_WEIGHTS){const s=hn(e,"labels","meanSquaredError"),a=hn(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=hn(n,"weights","meanSquaredError")),b(s.shape,a.shape,"Error in meanSquaredError: ");const i=yi(s,a);return li(i,o,r)}});const xi=fn({exp_:function(e){const t={x:hn(e,"x","exp")};return an.runKernel("Exp",t)}});const wi=fn({log1p_:function(e){const t={x:hn(e,"x","log1p")};return an.runKernel("Log1p",t)}});const ki=fn({sigmoidCrossEntropy_:function(e,t,n,r=0,s=si.SUM_BY_NONZERO_WEIGHTS){let a=hn(e,"multiClassLabels","sigmoidCrossEntropy");const o=hn(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=hn(n,"weights","sigmoidCrossEntropy")),b(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=sa(r),t=sa(1),n=sa(.5);a=ua(na(a,Io(t,e)),na(n,e))}const u=function(e,t){const n=hn(e,"labels","sigmoidCrossEntropyWithLogits"),r=hn(t,"logits","sigmoidCrossEntropyWithLogits");b(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Sa(r),a=na(r,n),o=wi(xi(Qo(zo(r))));return ua(Io(s,a),o)}(a,o);return li(u,i,s)}});const vi=fn({logSumExp_:function(e,t=null,n=!1){const r=hn(e,"x","logSumExp"),s=R(t,r.shape),a=Po(r,s,!0),o=Io(r,a),i=xi(o),u=$a(i,s),l=mi(u),c=ua(Ks(a,l.shape),l);if(n){const e=Bo(c.shape,s);return Ks(c,e)}return c}});const Ni=fn({softmaxCrossEntropy_:function(e,t,n,r=0,s=si.SUM_BY_NONZERO_WEIGHTS){let a=hn(e,"onehotLabels","softmaxCrossEntropy");const o=hn(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=hn(n,"weights","softmaxCrossEntropy")),b(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=sa(r),t=sa(1),n=sa(a.shape[1]);a=ua(na(a,Io(t,e)),So(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=ia(((e,t,r)=>{const s=vi(t,[n],!0),a=Io(ws(t,"float32"),s);r([e,a]);const o=Qo(na(a,e));return{value:$a(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Bo(e.shape,[n]);return[na(Ks(e,a),Io(ws(r,"float32"),xi(s))),na(Ks(e,a),Io(xi(s),ws(r,"float32")))]}}}));return r(e,t)}(a,o);return li(u,i,s)}});const Si=fn({sparseFillEmptyRows_:function(e,t,n,r){const s=hn(e,"indices","sparseFillEmptyRows","int32"),a=hn(t,"values","sparseFillEmptyRows"),o=hn(n,"denseShape","sparseFillEmptyRows","int32"),i=hn(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=an.runKernel("SparseFillEmptyRows",u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Ii=fn({sparseReshape_:function(e,t,n){const r=hn(e,"inputIndices","sparseReshape","int32"),s=hn(t,"inputShape","sparseReshape","int32"),a=hn(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=an.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Ti=fn({sparseSegmentMean_:function(e,t,n){const r=hn(e,"data","sparseSegmentMean"),s=hn(t,"indices","sparseSegmentMean","int32"),a=hn(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return an.runKernel("SparseSegmentMean",o)}});const Ei=fn({sparseSegmentSum_:function(e,t,n){const r=hn(e,"data","sparseSegmentSum"),s=hn(t,"indices","sparseSegmentSum","int32"),a=hn(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return an.runKernel("SparseSegmentSum",o)}});const $i=fn({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=hn(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=hn(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},h=an.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const Ci=fn({stringSplit_:function(e,t,n=!0){const r=hn(e,"input","stringSplit","string"),s=hn(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=an.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const Ai=fn({stringToHashBucketFast_:function(e,t){const n=hn(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return an.runKernel("StringToHashBucketFast",s,r)}});const Ri=fn({acos_:function(e){const t={x:hn(e,"x","acos")};return an.runKernel("Acos",t)}});const _i=fn({acosh_:function(e){const t={x:hn(e,"x","acosh")};return an.runKernel("Acosh",t)}});const Di=fn({addN_:function(e){y(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),y(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>hn(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!N(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return an.runKernel("AddN",r)}});const Fi=fn({all_:function(e,t=null,n=!1){const r={x:hn(e,"x","all","bool")},s={axis:t,keepDims:n};return an.runKernel("All",r,s)}});const Oi=fn({any_:function(e,t=null,n=!1){const r={x:hn(e,"x","any","bool")},s={axis:t,keepDims:n};return an.runKernel("Any",r,s)}});const Mi=fn({argMax_:function(e,t=0){const n={x:hn(e,"x","argMax")},r={axis:t};return an.runKernel("ArgMax",n,r)}});const Li=fn({argMin_:function(e,t=0){const n={x:hn(e,"x","argMin")},r={axis:t};return an.runKernel("ArgMin",n,r)}});const zi=fn({asin_:function(e){const t={x:hn(e,"x","asin")};return an.runKernel("Asin",t)}});const Bi=fn({asinh_:function(e){const t={x:hn(e,"x","asinh")};return an.runKernel("Asinh",t)}});const Pi=fn({atan_:function(e){const t={x:hn(e,"x","atan")};return an.runKernel("Atan",t)}});const Vi=fn({atan2_:function(e,t){let n=hn(e,"a","atan2"),r=hn(t,"b","atan2");[n,r]=Jt(n,r);const s={a:n,b:r};return an.runKernel("Atan2",s)}});const Wi=fn({atanh_:function(e){const t={x:hn(e,"x","atanh")};return an.runKernel("Atanh",t)}});const Ui=fn({avgPool_:function(e,t,n,r,s){const a=hn(e,"x","avgPool","float32");y(ga(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=Ks(a,[1,a.shape[0],a.shape[1],a.shape[2]])),y(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),ya("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=an.runKernel("AvgPool",u,l);return c=ws(c,a.dtype),i?Ks(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Gi=fn({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=hn(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=Ks(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),y(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),y("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),ya("avgPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=an.runKernel("AvgPool3D",l,c);return p=ws(p,i.dtype),u?Ks(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Hi=fn({tanh_:function(e){const t={x:hn(e,"x","tanh","float32")};return an.runKernel("Tanh",t)}});const qi=fn({basicLSTMCell_:function(e,t,n,r,s,a){const o=hn(e,"forgetBias","basicLSTMCell"),i=hn(t,"lstmKernel","basicLSTMCell"),u=hn(n,"lstmBias","basicLSTMCell"),l=hn(r,"data","basicLSTMCell"),c=hn(s,"c","basicLSTMCell"),p=hn(a,"h","basicLSTMCell"),h=Hs([l,p],1),d=za(h,i),f=ua(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Xs(f,[0,0],y),x=Xs(f,[0,g],y),w=Xs(f,[0,2*g],y),k=Xs(f,[0,3*g],y),v=ua(na(Ta(b),Hi(x)),na(c,Ta(ua(o,w))));return[v,na(Hi(v),Ta(k))]}});const ji=fn({batchToSpaceND_:function(e,t,n){const r=hn(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));y(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),y(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),y(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return an.runKernel("BatchToSpaceND",a,o)}});function Ki(e){let t;return t=0===e.rank||1===e.rank?Ks(e,[1,1,1,e.size]):2===e.rank?Ks(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Ks(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const Xi=fn({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=hn(e,"x","batchNorm"),i=hn(t,"mean","batchNorm"),u=hn(n,"variance","batchNorm");let l,c;null!=s&&(l=hn(s,"scale","batchNorm")),null!=r&&(c=hn(r,"offset","batchNorm")),y(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),y(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),y(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:Ki(o),scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},d=an.runKernel("FusedBatchNorm",p,h);return Ks(d,o.shape)}});const Yi=fn({batchNorm2d_:function(e,t,n,r,s,a){const o=hn(e,"x","batchNorm"),i=hn(t,"mean","batchNorm"),u=hn(n,"variance","batchNorm");let l,c;return null!=s&&(l=hn(s,"scale","batchNorm")),null!=r&&(c=hn(r,"offset","batchNorm")),y(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),y(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),y(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&y(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&y(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Xi(o,i,u,c,l,a)}});const Zi=fn({batchNorm3d_:function(e,t,n,r,s,a){const o=hn(e,"x","batchNorm"),i=hn(t,"mean","batchNorm"),u=hn(n,"variance","batchNorm");let l,c;return null!=s&&(l=hn(s,"scale","batchNorm")),null!=r&&(c=hn(r,"offset","batchNorm")),y(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),y(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),y(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&y(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&y(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Xi(o,i,u,c,l,a)}});const Ji=fn({batchNorm4d_:function(e,t,n,r,s,a){const o=hn(e,"x","batchNorm"),i=hn(t,"mean","batchNorm"),u=hn(n,"variance","batchNorm");let l,c;return null!=s&&(l=hn(s,"scale","batchNorm")),null!=r&&(c=hn(r,"offset","batchNorm")),y(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),y(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),y(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&y(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&y(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Xi(o,i,u,c,l,a)}});const Qi=fn({broadcastArgs_:function(e,t){const n=hn(e,"s0","broadcastArgs","int32"),r=hn(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return an.runKernel("BroadcastArgs",s)}});const eu=fn({ceil_:function(e){const t={x:hn(e,"x","ceil","float32")};return an.runKernel("Ceil",t)}});const tu=fn({clipByValue_:function(e,t,n){const r=hn(e,"x","clipByValue");if(y(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return qa(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return an.runKernel("ClipByValue",s,a)}});const nu=fn({concat1d_:function(e){return Hs(e,0)}});const ru=fn({concat2d_:function(e,t){return Hs(e,t)}});const su=fn({concat3d_:function(e,t){return Hs(e,t)}});const au=fn({concat4d_:function(e,t){return Hs(e,t)}});const ou=fn({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=hn(e,"x","conv1d"),u=hn(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=Ks(i,[1,i.shape[0],i.shape[1]])),y(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),y(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),ya("conv1d",r,o),y(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),y(ga(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),y("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=Ks(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=Ks(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=ba(h,p,[1,n],r,"NHWC",[1,a],o);return Ks(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const iu=fn({conv2dTranspose_:function(e,t,n,r,s,a){const o=hn(e,"x","conv2dTranspose"),i=hn(t,"filter","conv2dTranspose");return wa(n,o,i,r,s,"NHWC",a)}});const uu=fn({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=hn(e,"x","conv3d"),i=hn(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=Ks(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),y(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),y(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),y(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),y(ga(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),y("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=an.runKernel("Conv3D",c,p);return l?Ks(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const lu=fn({conv3DBackpropInput_:function(e,t,n,r,s){y(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Ks(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];y(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),y(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),y(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),y(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),y(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=an.runKernel("Conv3DBackpropInputV2",c,p);return i?Ks(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const cu=fn({conv3dTranspose_:function(e,t,n,r,s){const a=hn(e,"x","conv3dTranspose"),o=hn(t,"filter","conv3dTranspose");return lu(n,a,o,r,s)}});const pu=fn({cos_:function(e){const t={x:hn(e,"x","cos","float32")};return an.runKernel("Cos",t)}});const hu=fn({cosh_:function(e){const t={x:hn(e,"x","cosh","float32")};return an.runKernel("Cosh",t)}});const du=fn({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:hn(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return an.runKernel("Cumprod",s,a)}});const fu=fn({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:hn(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return an.runKernel("Cumsum",s,a)}});const mu=fn({denseBincount_:function(e,t,n,r=!1){const s=hn(e,"x","denseBincount"),a=hn(t,"weights","denseBincount");y("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),y(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),y(n>=0,(()=>`size must be non-negative, but got ${n}.`)),y(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return an.runKernel("DenseBincount",o,i)}});const gu=fn({depthToSpace_:function(e,t,n="NHWC"){const r=hn(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];y(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),y(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),y(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),y(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return an.runKernel("DepthToSpace",i,u)}});const yu=fn({diag_:function(e){const t={x:hn(e,"x","diag")};return an.runKernel("Diag",t)}});const bu=fn({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=hn(e,"x","dilation2d"),i=hn(t,"filter","dilation2d");y(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),y(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),y("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=Ks(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},h=an.runKernel("Dilation2D",c,p);return l?Ks(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const xu=fn({equal_:function(e,t){let n=hn(e,"a","equal","string_or_numeric"),r=hn(t,"b","equal","string_or_numeric");[n,r]=Jt(n,r),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("Equal",s)}});const wu=fn({divNoNan_:function(e,t){let n=hn(e,"a","div"),r=hn(t,"b","div");[n,r]=Jt(n,r);const s=So(n,r),a=Js(s),o=xu(r,a);return $o(o,a,s)}});const ku=fn({dot_:function(e,t){const n=hn(e,"t1","dot"),r=hn(t,"t2","dot");y(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(y(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Ks(n,[1,-1]),t=Ks(r,[-1,1]),s=za(e,t);return Ks(s,[])}if(1===n.rank&&2===r.rank){const e=Ks(n,[1,-1]),t=Ks(r,[r.shape[0],r.shape[1]]),s=za(e,t);return Ks(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Ks(r,[-1,1]),t=za(n,e);return Ks(t,[t.size])}{const e=Ks(r,[r.shape[0],r.shape[1]]);return za(n,e)}}});const vu=fn({einsum_:function(e,...t){const n=t.map(((e,t)=>hn(e,`tensors${t}`,"einsum"))),r={equation:e};return an.runKernel("Einsum",n,r)}});const Nu=fn({erf_:function(e){let t=hn(e,"x","erf");y("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=ws(t,"float32"));const n={x:t};return an.runKernel("Erf",n)}});const Su=fn({euclideanNorm_:function(e,t=null,n=!1){return qo(e,"euclidean",t,n)}});const Iu=fn({expm1_:function(e){const t={x:hn(e,"x","expm1")};return an.runKernel("Expm1",t)}});const Tu=fn({floor_:function(e){const t={x:hn(e,"x","floor","float32")};return an.runKernel("Floor",t)}});const Eu=fn({gather_:function(e,t,n=0,r=0){const s={x:hn(e,"x","gather"),indices:hn(t,"indices","gather","int32")},a={axis:n,batchDims:r};return an.runKernel("GatherV2",s,a)}});const $u=fn({isFinite_:function(e){const t={x:hn(e,"x","isFinite")};return an.runKernel("IsFinite",t)}});const Cu=fn({isInf_:function(e){const t={x:hn(e,"x","isInf")};return an.runKernel("IsInf",t)}});const Au=fn({isNaN_:function(e){const t={x:hn(e,"x","isNaN")};return an.runKernel("IsNan",t)}});const Ru=fn({less_:function(e,t){let n=hn(e,"a","less","string_or_numeric"),r=hn(t,"b","less","string_or_numeric");[n,r]=Jt(n,r),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("Less",s)}});function _u(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return an.runKernel("LinSpace",{},r)}const Du=fn({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=hn(e,"x","localResponseNormalization");y(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),y(S(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=Ks(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=an.runKernel("LRN",u,l);return i?Ks(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Fu=fn({softplus_:function(e){const t={x:hn(e,"x","softplus")};return an.runKernel("Softplus",t)}});const Ou=fn({logSigmoid_:function(e){const t=hn(e,"x","logSigmoid"),n=ia((e=>({value:Qo(Fu(Qo(e))),gradFunc:t=>na(t,Ta(Qo(e)))})));return n(t)}});const Mu=fn({logSoftmax_:function(e,t=-1){const n=hn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=ia(((e,n)=>{const r=Po(e,t,!0),s=Io(e,r),a=Io(ws(s,"float32"),mi($a(xi(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=xi(r);return Io(e,na($a(e,t,!0),s))}}}));return r(n)}});const Lu=fn({logicalNot_:function(e){const t={x:hn(e,"x","logicalNot","bool")};return an.runKernel("LogicalNot",t)}});const zu=fn({logicalOr_:function(e,t){const n=hn(e,"a","logicalOr","bool"),r=hn(t,"b","logicalOr","bool");la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("LogicalOr",s)}});const Bu=fn({logicalXor_:function(e,t){const n=hn(e,"a","logicalXor","bool"),r=hn(t,"b","logicalXor","bool");return la(n.shape,r.shape),Do(zu(e,t),Lu(Do(e,t)))}});var Pu={};t(Pu,"searchSorted",(()=>Vu));const Vu=fn({searchSorted_:function(e,t,n="left"){const r=hn(e,"sortedSequence","searchSorted"),s=hn(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=Ks(r,[-1,a]),u=Ks(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(k(u.shape)>=2147483648)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=2147483648)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},c={side:n};return an.runKernel("SearchSorted",l,c)}});function Wu(e,t){return Vu(e,t,"left")}const Uu=fn({maxPool_:function(e,t,n,r,s){const a=hn(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Ks(a,[1,a.shape[0],a.shape[1],a.shape[2]])),y(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),y(ga(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),ya("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=an.runKernel("MaxPool",u,l);return i?Ks(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Gu=fn({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=hn(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=Ks(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),y(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),y("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),ya("maxPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=an.runKernel("MaxPool3D",l,c);return u?Ks(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Hu=fn({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:hn(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=an.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const qu=fn({maximum_:function(e,t){let n=hn(e,"a","maximum"),r=hn(t,"b","maximum");[n,r]=Jt(n,r),"bool"===n.dtype&&(n=ws(n,"int32"),r=ws(r,"int32")),la(n.shape,r.shape);const s={a:n,b:r};return an.runKernel("Maximum",s)}});function ju(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=hn(e,"x","meshgrid",e instanceof zt?e.dtype:"float32");if(void 0===t)return[r];let s=hn(t,"y","meshgrid",t instanceof zt?t.dtype:"float32");const a=k(r.shape),o=k(s.shape);return"xy"===n?(r=Ks(r,[1,-1]),s=Ks(s,[-1,1]),[za(ui([o,1],r.dtype),r),za(s,ui([1,a],s.dtype))]):(r=Ks(r,[-1,1]),s=Ks(s,[1,-1]),[za(r,ui([1,o],r.dtype)),za(ui([a,1],s.dtype),s)])}const Ku=fn({mirrorPad_:function(e,t,n){y("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=hn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");y(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)y(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),y(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return an.runKernel("MirrorPad",o,a)}});const Xu=fn({mod_:function(e,t){let n=hn(e,"a","mod"),r=hn(t,"b","mod");[n,r]=Jt(n,r);const s={a:n,b:r};return an.runKernel("Mod",s)}});const Yu=fn({moments_:function(e,t=null,n=!1){const r=R(t,(e=hn(e,"x","moments")).shape),s=oi(e,r,n);let a=s.shape;n||(a=Bo(s.shape,r));const o=Go(Io(ws(e,"float32"),Ks(s,a)));return{mean:s,variance:oi(o,r,n)}}});const Zu=fn({multiRNNCell_:function(e,t,n,r){const s=hn(t,"data","multiRNNCell"),a=dn(n,"c","multiRNNCell"),o=dn(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const Ju=fn({multinomial_:function(e,t,n,r=!1){const s=hn(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Ks(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=an.runKernel("Multinomial",i,u);return 1===o?Ks(l,[l.size]):l}});const Qu=fn({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:hn(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return an.runKernel("OneHot",a,o)}});const el=fn({onesLike_:function(e){const t={x:hn(e,"x","onesLike")};return an.runKernel("OnesLike",t)}});const tl=fn({outerProduct_:function(e,t){const n=hn(e,"v1","outerProduct"),r=hn(t,"v2","outerProduct");y(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=Ks(n,[-1,1]),a=Ks(r,[1,-1]);return za(s,a)}});const nl=fn({pad_:function(e,t,n=0){const r=hn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return an.runKernel("PadV2",a,s)}});const rl=fn({pad1d_:function(e,t,n=0){return y(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),nl(e,[t],n)}});const sl=fn({pad2d_:function(e,t,n=0){return y(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),nl(e,t,n)}});const al=fn({pad3d_:function(e,t,n=0){return y(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),nl(e,t,n)}});const ol=fn({pad4d_:function(e,t,n=0){return y(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),nl(e,t,n)}});const il=fn({spaceToBatchND_:function(e,t,n){const r=hn(e,"x","spaceToBatchND");y(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),y(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),y(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return an.runKernel("SpaceToBatchND",s,a)}});const ul=fn({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=hn(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=Ks(i,[1,i.shape[0],i.shape[1],i.shape[2]])),y(ga(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=function(e,t,n,r,s,a,o="channelsLast"){const[i,u]=ha(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return ca(e,l,n,r,s,a,!1,o)}(u.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",b=d?u:il(u,p,f),x=("avg"===n?()=>Ui(b,t,a,g,o):()=>Uu(b,t,a,g,o))(),w=d?x:ji(x,p,m);return l?Ks(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const ll=fn({prod_:function(e,t=null,n=!1){let r=hn(e,"x","prod");"bool"===r.dtype&&(r=ws(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return an.runKernel("Prod",s,a)}});const cl=fn({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>hn(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:hn(t,"paramsDenseValues","raggedGather"),indices:hn(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=an.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const pl=fn({raggedTensorToTensor_:function(e,t,n,r,s){const a=hn(e,"shape","raggedTensorToTensor","int32"),o=hn(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:hn(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>hn(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return an.runKernel("RaggedTensorToTensor",i,u)}});const hl=fn({rand_:function(e,t,n){const r=k(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return an.makeTensor(s,e,n)}});var dl={},fl=a("cmoHh"),ml=a("euRi5"),gl=a("hDsEw"),yl=a("3J2Zm"),bl=a("6Px8M"),xl=a("lDm0S"),wl={};!function(e,t,n){var r,s=256,o=n.pow(s,6),i=n.pow(2,52),u=2*i,l=255;function c(a,l,c){var g=[],y=f(d((l=1==l?{entropy:!0}:l||{}).entropy?[a,m(t)]:null==a?function(){try{var n;return r&&(n=r.randomBytes)?n=n(s):(n=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(n)),m(n)}catch(n){var a=e.navigator,o=a&&a.plugins;return[+new Date,e,o,e.screen,m(t)]}}():a,3),g),b=new p(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*s,t*=s,n=b.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(l.pass||c||function(e,t,r,s){return s&&(s.S&&h(s,b),e.state=function(){return h(b,{})}),r?(n.random=e,t):e})(x,y,"global"in l?l.global:this==n,l.state)}function p(e){var t,n=e.length,r=this,a=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<s;)i[a]=a++;for(a=0;a<s;a++)i[a]=i[o=l&o+e[a%n]+(t=i[a])],i[o]=t;(r.g=function(e){for(var t,n=0,a=r.i,o=r.j,i=r.S;e--;)t=i[a=l&a+1],n=n*s+i[l&(i[a]=i[o=l&o+t])+(i[o]=t)];return r.i=a,r.j=o,n})(s)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(d(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function f(e,t){for(var n,r=e+"",s=0;s<r.length;)t[l&s]=l&(n^=19*t[l&s])+r.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),wl){wl=c;try{r=a("kjyEk")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n.seedrandom=c}("undefined"!=typeof self?self:wl,[],Math),wl.alea=fl,wl.xor128=ml,wl.xorwow=gl,wl.xorshift7=yl,wl.xor4096=bl,wl.tychei=xl,dl=wl;class kl{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=dl.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class vl{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=dl.alea(s.toString()),this.randn=new kl(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Nl{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=dl.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Sl=fn({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new vl(t,n,r,s),o=xs(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Il=fn({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new kl(t,n,r,!1,s),o=xs(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Tl=fn({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Il(e,0,1,t,n)}});const El=fn({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=xs(e,r),o=new Nl(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const $l=fn({reciprocal_:function(e){const t={x:hn(e,"x","reciprocal")};return an.runKernel("Reciprocal",t)}});const Cl=fn({reverse1d_:function(e){const t=hn(e,"x","reverse");return y(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),ra(t,0)}});const Al=fn({reverse2d_:function(e,t){const n=hn(e,"x","reverse");return y(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),ra(n,t)}});const Rl=fn({reverse3d_:function(e,t){const n=hn(e,"x","reverse");return y(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),ra(n,t)}});const _l=fn({reverse4d_:function(e,t){const n=hn(e,"x","reverse");return y(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),ra(n,t)}});const Dl=fn({rsqrt_:function(e){const t={x:hn(e,"x","rsqrt","float32")};return an.runKernel("Rsqrt",t)}});const Fl=fn({selu_:function(e){const t={x:hn(e,"x","selu")};return an.runKernel("Selu",t)}});const Ol=fn({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=hn(e,"x","separableConv2d"),u=hn(t,"depthwiseFilter","separableConv2d"),l=hn(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Ks(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");y(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),y(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),y(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),y(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),y(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const h=u.shape[2],d=u.shape[3];y(l.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${l.shape[2]}.`));const f=Fa(c,u,r,s,o,a),m=ba(f,l,1,"valid",o);return p?Ks(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ml=async function(e,t){const n=hn(e,"x","setdiff1d"),r=hn(t,"y","setdiff1d");y(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),y(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),y(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new Ft([i],n.dtype),l=new Ft([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const Ll=fn({sign_:function(e){const t={x:hn(e,"x","sign")};return an.runKernel("Sign",t)}});const zl=fn({sin_:function(e){const t={x:hn(e,"x","sin","float32")};return an.runKernel("Sin",t)}});const Bl=fn({sinh_:function(e){const t={x:hn(e,"x","sinh")};return an.runKernel("Sinh",t)}});const Pl=fn({slice1d_:function(e,t,n){const r=hn(e,"x","slice1d");return y(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Xs(r,[t],[n])}});const Vl=fn({slice2d_:function(e,t,n){const r=hn(e,"x","slice2d");return y(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Xs(r,t,n)}});const Wl=fn({slice3d_:function(e,t,n){const r=hn(e,"x","slice3d");return y(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Xs(r,t,n)}});const Ul=fn({slice4d_:function(e,t,n){const r=hn(e,"x","slice4d");return y(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Xs(r,t,n)}});const Gl=fn({softmax_:function(e,t=-1){const n=hn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return an.runKernel("Softmax",r,s)}});const Hl=fn({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const l={x:hn(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return an.runKernel("StridedSlice",l,c)}});const ql=fn({tan_:function(e){const t={x:hn(e,"x","tan","float32")};return an.runKernel("Tan",t)}});function jl(e,t,n){if(x(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=ln(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return gn(e,t,r,n)}function Kl(e,t,n){if(x(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=ln(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return gn(e,t,r,n)}function Xl(e,t,n){if(x(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=ln(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return gn(e,t,r,n)}function Yl(e,t,n){if(x(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=ln(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return gn(e,t=t||r,r,n)}const Zl=fn({topk_:function(e,t=1,n=!0){const r=hn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=an.runKernel("TopK",a,o);return{values:i,indices:u}}});const Jl=fn({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new kl(t,n,r,!0,s),o=xs(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Ql=fn({unique_:function(e,t=0){const n=hn(e,"x","unique","string_or_numeric");y(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=an.runKernel("Unique",r,s);return{values:a,indices:o}}});const ec=fn({unsortedSegmentSum_:function(e,t,n){const r=hn(e,"x","unsortedSegmentSum"),s=hn(t,"segmentIds","unsortedSegmentSum","int32");y(S(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return an.runKernel("UnsortedSegmentSum",a,o)}});function tc(e,t){return Vu(e,t,"right")}function nc(e,t=!0,n,r){return an.makeVariable(e,t,n,r)}function rc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=xs(e,"int32"),s=xs([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const sc=async function(e){const t=hn(e,"condition","whereAsync","bool"),n=await t.data(),r=rc(t.shape,n);return e!==t&&t.dispose(),r};var ac={};t(ac,"booleanMaskAsync",(()=>oc));const oc=async function(e,t,n){const r=hn(e,"tensor","boolMask"),s=hn(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;y(o>0,(()=>"mask cannot be scalar")),b(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=Ks(r,l),p=Ks(s,[-1]),h=await sc(p),d=jo(h,[1]),f=Eu(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var ic={};t(ic,"movingAverage",(()=>uc));const uc=fn({movingAverage_:function(e,t,n,r,s=!0){const a=hn(e,"v","movingAverage"),o=hn(t,"x","movingAverage"),i=hn(n,"decay","movingAverage");var u,l;l=o,y((u=a).dtype===l.dtype,(()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`)),y(N(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const c=sa(1),p=Io(c,i);let h=na(Io(o,a),p);if(s){y(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=hn(r,"step","movingAverage");h=So(h,Io(c,Wo(i,e)))}return ua(a,h)}});var lc={};function cc(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}(n,t,e)}t(lc,"scatterND",(()=>pc));const pc=fn({scatterND_:function(e,t,n){const r=hn(e,"indices","scatterND","int32"),s=hn(t,"updates","scatterND");cc(s,r,n);const a={indices:r,updates:s},o={shape:n};return an.runKernel("ScatterNd",a,o)}});var hc={};t(hc,"sparseToDense",(()=>dc));const dc=fn({sparseToDense_:function(e,t,n,r=0){const s=hn(e,"sparseIndices","sparseToDense","int32"),a=hn(t,"sparseValues","sparseToDense","string_or_numeric"),o=hn(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return an.runKernel("SparseToDense",i,u)}});var fc={};t(fc,"gatherND",(()=>mc));const mc=fn({gatherND_:function(e,t){const n=hn(t,"indices","gatherND","int32"),r={params:hn(e,"x","gatherND","string_or_numeric"),indices:n};return an.runKernel("GatherNd",r)}});var gc={};function yc(e,t){if(null==t)return e.shape.slice();if(N(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(gc,"dropout",(()=>bc));const bc=fn({dropout_:function(e,t,n,r){const s=hn(e,"x","dropout");if(y("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),y(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof zt?s.clone():s;const a=yc(s,n),o=1-t,i=So(Tu(ua(El(a,0,1,"float32",r),o)),o);return na(s,i)}});var xc={};t(xc,"inTopKAsync",(()=>wc));const wc=async function(e,t,n=1){const r=hn(e,"predictions","inTopK"),s=hn(t,"targets","inTopK");y(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),y(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),b(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];y(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=D("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),yn(c,s.shape,"bool")},kc={fft:Qs,ifft:ta,rfft:ea,irfft:aa},vc={hammingWindow:Ga,hannWindow:Ha,frame:Ka,stft:Xa},Nc={flipLeftRight:Za,grayscaleToRGB:Qa,resizeNearestNeighbor:xo,resizeBilinear:bo,rotateWithOffset:eo,cropAndResize:Ya,nonMaxSuppression:no,nonMaxSuppressionAsync:ho,nonMaxSuppressionWithScore:fo,nonMaxSuppressionWithScoreAsync:mo,nonMaxSuppressionPadded:go,nonMaxSuppressionPaddedAsync:yo,threshold:Ao,transform:Ro},Sc={bandPart:Mo,gramSchmidt:Ko,qr:ri},Ic={absoluteDifference:ci,computeWeightedLoss:li,cosineDistance:pi,hingeLoss:hi,huberLoss:fi,logLoss:gi,meanSquaredError:bi,sigmoidCrossEntropy:ki,softmaxCrossEntropy:Ni},Tc={sparseFillEmptyRows:Si,sparseReshape:Ii,sparseSegmentMean:Ti,sparseSegmentSum:Ei},Ec={stringNGrams:$i,stringSplit:Ci,stringToHashBucketFast:Ai};n(Gs,ac),n(Gs,ei),n(Gs,Lo),n(Gs,ic),n(Gs,lc),n(Gs,Pu),n(Gs,hc),n(Gs,fc),n(Gs,gc),n(Gs,Pa),n(Gs,xc);var $c,Cc,Ac;ae().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),(Cc=$c||($c={}))[Cc.DT_INVALID=0]="DT_INVALID",Cc[Cc.DT_FLOAT=1]="DT_FLOAT",Cc[Cc.DT_DOUBLE=2]="DT_DOUBLE",Cc[Cc.DT_INT32=3]="DT_INT32",Cc[Cc.DT_UINT8=4]="DT_UINT8",Cc[Cc.DT_INT16=5]="DT_INT16",Cc[Cc.DT_INT8=6]="DT_INT8",Cc[Cc.DT_STRING=7]="DT_STRING",Cc[Cc.DT_COMPLEX64=8]="DT_COMPLEX64",Cc[Cc.DT_INT64=9]="DT_INT64",Cc[Cc.DT_BOOL=10]="DT_BOOL",Cc[Cc.DT_QINT8=11]="DT_QINT8",Cc[Cc.DT_QUINT8=12]="DT_QUINT8",Cc[Cc.DT_QINT32=13]="DT_QINT32",Cc[Cc.DT_BFLOAT16=14]="DT_BFLOAT16",Cc[Cc.DT_QINT16=15]="DT_QINT16",Cc[Cc.DT_QUINT16=16]="DT_QUINT16",Cc[Cc.DT_UINT16=17]="DT_UINT16",Cc[Cc.DT_COMPLEX128=18]="DT_COMPLEX128",Cc[Cc.DT_HALF=19]="DT_HALF",Cc[Cc.DT_RESOURCE=20]="DT_RESOURCE",Cc[Cc.DT_VARIANT=21]="DT_VARIANT",Cc[Cc.DT_UINT32=22]="DT_UINT32",Cc[Cc.DT_UINT64=23]="DT_UINT64",Cc[Cc.DT_FLOAT_REF=101]="DT_FLOAT_REF",Cc[Cc.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",Cc[Cc.DT_INT32_REF=103]="DT_INT32_REF",Cc[Cc.DT_UINT8_REF=104]="DT_UINT8_REF",Cc[Cc.DT_INT16_REF=105]="DT_INT16_REF",Cc[Cc.DT_INT8_REF=106]="DT_INT8_REF",Cc[Cc.DT_STRING_REF=107]="DT_STRING_REF",Cc[Cc.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",Cc[Cc.DT_INT64_REF=109]="DT_INT64_REF",Cc[Cc.DT_BOOL_REF=110]="DT_BOOL_REF",Cc[Cc.DT_QINT8_REF=111]="DT_QINT8_REF",Cc[Cc.DT_QUINT8_REF=112]="DT_QUINT8_REF",Cc[Cc.DT_QINT32_REF=113]="DT_QINT32_REF",Cc[Cc.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",Cc[Cc.DT_QINT16_REF=115]="DT_QINT16_REF",Cc[Cc.DT_QUINT16_REF=116]="DT_QUINT16_REF",Cc[Cc.DT_UINT16_REF=117]="DT_UINT16_REF",Cc[Cc.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",Cc[Cc.DT_HALF_REF=119]="DT_HALF_REF",Cc[Cc.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",Cc[Cc.DT_VARIANT_REF=121]="DT_VARIANT_REF",Cc[Cc.DT_UINT32_REF=122]="DT_UINT32_REF",Cc[Cc.DT_UINT64_REF=123]="DT_UINT64_REF",function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Ac||(Ac={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rc={};function _c(e){return Rc[e]}function Dc(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Fc(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,o).map((e=>Fc(e,n,r,s)))}const i=Fc(t.inputNames.slice(e)[0],n,r,s),u=i.dataSync();return"number"===a.type?u[0]:_e.toNestedArray(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function Fc(e,t,n,r){const[s,a]=zc(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[Lc(s,e)]));return void 0!==o?t[Lc(s,o)][a]:void 0}function Oc(e,t,n){return t[Lc(e,n.currentContextId)]}function Mc(e,t){const[n,r,s]=zc(e);return[Lc(n,t&&t.currentContextId),r,s]}function Lc(e,t){return t?`${e}-${t}`:e}function zc(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function Bc(e,t,n){let r=Dc("pad",e,t,n);if("explicit"===r){r=Dc("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function Pc(e){return e.kept?e:ks(e)}var Vc={};t(Vc,"json",(()=>Wc));const Wc=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Uc={};t(Uc,"json",(()=>Gc));const Gc=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Hc={};t(Hc,"json",(()=>qc));const qc=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var jc={};t(jc,"json",(()=>Kc));const Kc=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var Xc={};t(Xc,"json",(()=>Yc));const Yc=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var Zc={};t(Zc,"json",(()=>Jc));const Jc=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Qc={};t(Qc,"json",(()=>ep));const ep=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var tp={};t(tp,"json",(()=>np));const np=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var rp={};t(rp,"json",(()=>sp));const sp=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var ap={};t(ap,"json",(()=>op));const op=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var ip={};t(ip,"json",(()=>up));const up=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var lp={};t(lp,"json",(()=>cp));const cp=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var pp={};t(pp,"json",(()=>hp));const hp=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var dp={};t(dp,"json",(()=>fp));const fp=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var mp={};t(mp,"json",(()=>gp));const gp=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var yp={};t(yp,"json",(()=>bp));const bp=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var xp={};t(xp,"json",(()=>wp));const wp=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var kp={};t(kp,"json",(()=>vp));const vp=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var Np={};t(Np,"json",(()=>Sp));const Sp=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Ip=xn;class Tp{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Vc,Uc,Hc,jc,Xc,Zc,Qc,tp,rp,ap,ip,lp,pp,dp,mp,yp,xp,kp,Np].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=Mc(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=Mc(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=Mc(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=_c(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=$p(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=$p(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=zp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=zp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Ap(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Ap(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Lp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Lp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Cp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Cp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Pp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Pp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=Mp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Mp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Bp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Bp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Dp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Dp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Fp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Fp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=_p(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=_p(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=Mc(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Rp(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=Mc(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=Mc(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Ep(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=ae().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==Ip)return new Ip(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function $p(e,t,n,r=!1){const s=e[t];return null!=s?Ep(s.s,r):n}function Cp(e,t,n){const r=e[t];return r?r.b:n}function Ap(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Rp(e){switch("string"==typeof e&&(e=$c[e]),e){case $c.DT_FLOAT:case $c.DT_HALF:return"float32";case $c.DT_INT32:case $c.DT_INT64:case $c.DT_INT8:case $c.DT_UINT8:return"int32";case $c.DT_BOOL:return"bool";case $c.DT_DOUBLE:return"float32";case $c.DT_STRING:return"string";default:return null}}function _p(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Dp(e,t,n){const r=e[t];return r&&r.type?Rp(r.type):n}function Fp(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Rp(e))):n}function Op(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Mp(e,t,n){const r=e[t];return r&&r.shape?Op(r.shape):n}function Lp(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function zp(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>Ep(e,r))):n}function Bp(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>Op(e))):n}function Pp(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class Vp{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Fc(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Fc(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Ap(this.node.rawAttrs,e,t);if(null!=n.s)return $p(this.node.rawAttrs,e,t);if(null!=n.b)return Cp(this.node.rawAttrs,e,t);if(null!=n.shape)return Mp(this.node.rawAttrs,e,t);if(null!=n.type)return Dp(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Lp(this.node.rawAttrs,e,t);if(null!=n.list.s)return zp(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Bp(this.node.rawAttrs,e,t);if(null!=n.list.b)return Pp(this.node.rawAttrs,e,t);if(null!=n.list.type)return Fp(this.node.rawAttrs,e,t)}return t}}var Wp={};n(Wp,Gs);function Up(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){_e.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];_e.assert(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Gp(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Hp(e,t,n){let r=qp(e,n);const s=!Gp(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=qp(e.shape,r)})),!Gp(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function qp(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class jp{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=sa(0),Yo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Up(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Yo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return yn([],[0].concat(this.elementShape));const n=this.readMany(e);return Up(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Fo(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return yn([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Up(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Hs(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Oo(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];Xo((()=>{t=Ks(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=Ks(Xs(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class Kp{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Up(t,e.shape,"TensorList shape mismatch: "),Yo(e)})),this.idTensor=sa(0),this.maxNumElements=r,Yo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Kp([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Up(e,this.elementShape,"TensorList shape mismatch: ");const r=Hp(this.elementShape,this.tensors,e);return Xo((()=>{const e=this.tensors.map((e=>Ks(e,r)));return Fo(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Hp(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,Up(r.shape,e,"TensorList shape mismatch: "),Ks(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Up(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Yo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Kp([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Up(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=Hp(this.elementShape,this.tensors,t);return Ks(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Up(this.elementShape,t.shape,"TensorList shape mismatch: "),Yo(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Up(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=Hp(this.elementShape,this.tensors,n);return 0===e.length?yn([],[0].concat(r)):Xo((()=>{const t=e.map((e=>Ks(this.tensors[e],r)));return Fo(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Up(this.elementShape,t,"TensorList shape mismatch: ");const n=Hp(this.elementShape,this.tensors,t);return 0===this.size()?yn([],[0].concat(n)):Xo((()=>{const e=this.tensors.map((e=>Ks(e,n)));return Hs(e,0)}))}}function Xp(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Up(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Oo(e);return new Kp(s,t,r)}function Yp(e,t,n,r){return new Kp([],e,t,r)}function Zp(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Kp([],n,e.dtype,r),o=Oo(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}function Jp(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=qp(e.shape.slice(1),n),o=0===r?0:e.size/r,i=Xo((()=>{const n=[];e=Ks(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,t[r],o];n[r]=Ks(Xs(e,i,u),a)}return e.dispose(),n})),u=new Kp([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}const Qp=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Dc("thenBranch",e,t,n),s=Dc("elseBranch",e,t,n),a=Dc("cond",e,t,n),o=Dc("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Dc("body",e,t,n),s=Dc("cond",e,t,n),a=Dc("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[Pc(Dc("pred",e,t,n))];case"Switch":{const r=Dc("pred",e,t,n);let s=Dc("data",e,t,n);return s.kept||(s=Pc(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==Fc(e,t,n)));if(r){return[Pc(Fc(r,t,n))]}return}case"Enter":{const r=Dc("frameName",e,t,n),s=Dc("tensor",e,t,n);return n.enterFrame(r),[Pc(s)]}case"Exit":{const r=Dc("tensor",e,t,n);return n.exitFrame(),[Pc(r)]}case"NextIteration":{const r=Dc("tensor",e,t,n);return n.nextIteration(),[Pc(r)]}case"TensorArrayV3":{const r=Dc("size",e,t,n),s=Dc("dtype",e,t,n),a=Dc("elementShape",e,t,n),o=Dc("dynamicSize",e,t,n),i=Dc("clearAfterRead",e,t,n),u=Dc("identicalElementShapes",e,t,n),l=Dc("name",e,t,n),c=new jp(l,s,r,a,u,o,i);return n.addTensorArray(c),[c.idTensor,sa(1)]}case"TensorArrayWriteV3":{const r=Dc("tensorArrayId",e,t,n),s=Dc("index",e,t,n),a=Dc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=Dc("tensorArrayId",e,t,n),s=Dc("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Dc("tensorArrayId",e,t,n),s=Dc("indices",e,t,n),a=Dc("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Dc("tensorArrayId",e,t,n),s=Dc("indices",e,t,n),a=Dc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=Dc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=Dc("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Dc("tensorArrayId",e,t,n),s=Dc("tensor",e,t,n),a=Dc("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=Dc("tensorArrayId",e,t,n);return[sa(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Dc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Dc("tensorListId",e,t,n),s=Dc("index",e,t,n),a=Dc("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=Dc("tensorListId",e,t,n),s=Dc("index",e,t,n),a=Dc("elementShape",e,t,n),o=Dc("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Dc("indices",e,t,n),s=Zp(Dc("tensor",e,t,n),r,Dc("elementShape",e,t,n),Dc("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Dc("elementShape",e,t,n),s=Dc("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=Dc(a,e,t,n),i=Yp(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Dc("tensorListId",e,t,n),s=Dc("indices",e,t,n),a=Dc("elementShape",e,t,n),o=Dc("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=Dc("tensorListId",e,t,n),s=Dc("elementShape",e,t,n),a=Dc("elementDType",e,t,n),o=Dc("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=Xp(Dc("tensor",e,t,n),Dc("elementShape",e,t,n),Dc("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Dc("tensorListId",e,t,n),s=n.getTensorList(r.id),a=Dc("dtype",e,t,n),o=Dc("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=Dc("tensorListId",e,t,n),s=Dc("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Dc("tensorListId",e,t,n),s=Dc("elementShape",e,t,n),a=Dc("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Dc("tensor",e,t,n),s=Dc("elementShape",e,t,n),a=Jp(r,Dc("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=Dc("tensorListId",e,t,n);return[sa(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=Dc("tensorListId",e,t,n),s=Dc("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function eh(e,t,n){const[r,s]=Dc("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,u="fusedbatchnorm"===r,l=Dc("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=Dc("strides",e,t,n),p=Bc(e,t,n),h=Dc("dataFormat",e,t,n).toUpperCase(),d=Dc("dilations",e,t,n);let[f,m]=Dc("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:Dc("leakyreluAlpha",e,t,n)}}function th(e,t,n){return{boxes:Dc("boxes",e,t,n),scores:Dc("scores",e,t,n),maxOutputSize:Dc("maxOutputSize",e,t,n),iouThreshold:Dc("iouThreshold",e,t,n),scoreThreshold:Dc("scoreThreshold",e,t,n),softNmsSigma:Dc("softNmsSigma",e,t,n)}}class nh{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=sa(0),this.tensorMap=new Map,Yo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return sa(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Xo((()=>{const e=Oo(t),r=n.length,s=e.length;_e.assert(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];Yo(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Xo((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return Fo(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function rh(e,t,n,r,s=Xo){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(Dc("a",e,t,n),Dc("b",e,t,n))];case"AddN":return[r.addN(Dc("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(Dc("a",e,t,n),Dc("b",e,t,n))];case"Mul":return[r.mul(Dc("a",e,t,n),Dc("b",e,t,n))];case"RealDiv":case"Div":return[r.div(Dc("a",e,t,n),Dc("b",e,t,n))];case"DivNoNan":return[r.divNoNan(Dc("a",e,t,n),Dc("b",e,t,n))];case"FloorDiv":return[r.floorDiv(Dc("a",e,t,n),Dc("b",e,t,n))];case"Sub":return[r.sub(Dc("a",e,t,n),Dc("b",e,t,n))];case"Minimum":return[r.minimum(Dc("a",e,t,n),Dc("b",e,t,n))];case"Maximum":return[r.maximum(Dc("a",e,t,n),Dc("b",e,t,n))];case"Pow":return[r.pow(Dc("a",e,t,n),Dc("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(Dc("a",e,t,n),Dc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(Dc("x",e,t,n))];case"Acos":return[r.acos(Dc("x",e,t,n))];case"Acosh":return[r.acosh(Dc("x",e,t,n))];case"Asin":return[r.asin(Dc("x",e,t,n))];case"Asinh":return[r.asinh(Dc("x",e,t,n))];case"Atan":return[r.atan(Dc("x",e,t,n))];case"Atan2":return[r.atan2(Dc("x",e,t,n),Dc("y",e,t,n))];case"Atanh":return[r.atanh(Dc("x",e,t,n))];case"Ceil":return[r.ceil(Dc("x",e,t,n))];case"Complex":return[r.complex(Dc("real",e,t,n),Dc("imag",e,t,n))];case"Cos":return[r.cos(Dc("x",e,t,n))];case"Cosh":return[r.cosh(Dc("x",e,t,n))];case"Elu":return[r.elu(Dc("x",e,t,n))];case"Erf":return[r.erf(Dc("x",e,t,n))];case"Exp":return[r.exp(Dc("x",e,t,n))];case"Expm1":return[r.expm1(Dc("x",e,t,n))];case"Floor":return[r.floor(Dc("x",e,t,n))];case"Log":return[r.log(Dc("x",e,t,n))];case"Log1p":return[r.log1p(Dc("x",e,t,n))];case"Imag":return[r.imag(Dc("x",e,t,n))];case"Neg":return[r.neg(Dc("x",e,t,n))];case"Reciprocal":return[r.reciprocal(Dc("x",e,t,n))];case"Real":return[r.real(Dc("x",e,t,n))];case"Relu":return[r.relu(Dc("x",e,t,n))];case"Round":return[r.round(Dc("x",e,t,n))];case"Selu":return[r.selu(Dc("x",e,t,n))];case"Sigmoid":return[r.sigmoid(Dc("x",e,t,n))];case"Sin":return[r.sin(Dc("x",e,t,n))];case"Sign":return[r.sign(Dc("x",e,t,n))];case"Sinh":return[r.sinh(Dc("x",e,t,n))];case"Softplus":return[r.softplus(Dc("x",e,t,n))];case"Sqrt":return[r.sqrt(Dc("x",e,t,n))];case"Square":return[r.square(Dc("x",e,t,n))];case"Tanh":return[r.tanh(Dc("x",e,t,n))];case"Tan":return[r.tan(Dc("x",e,t,n))];case"ClipByValue":return[r.clipByValue(Dc("x",e,t,n),Dc("clipValueMin",e,t,n),Dc("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(Dc("x",e,t,n))];case"Rsqrt":return[r.rsqrt(Fc(e.inputNames[0],t,n))];case"Prod":return[r.prod(Dc("x",e,t,n),Dc("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(Dc("x",e,t,n),Dc("alpha",e,t,n))];case"Prelu":return[r.prelu(Dc("x",e,t,n),Dc("alpha",e,t,n))];case"IsNan":return[r.isNaN(Fc(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return Qp(e,t,n);case"convolution":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"Conv1D":{const s=Dc("stride",e,t,n),a=Dc("pad",e,t,n),o=Dc("dataFormat",e,t,n).toUpperCase(),i=Dc("dilation",e,t,n);return[r.conv1d(Dc("x",e,t,n),Dc("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=Dc("strides",e,t,n),a=Bc(e,t,n),o=Dc("dataFormat",e,t,n).toUpperCase(),i=Dc("dilations",e,t,n);return[r.conv2d(Dc("x",e,t,n),Dc("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=eh(e,t,n);return[r.fused.conv2d({x:Dc("x",e,t,n),filter:Dc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=eh(e,t,n);return[r.fused.depthwiseConv2d({x:Dc("x",e,t,n),filter:Dc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Dc("outputShape",e,t,n),a=Dc("strides",e,t,n),o=Bc(e,t,n);return[r.conv2dTranspose(Dc("x",e,t,n),Dc("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Dc("strides",e,t,n),a=Bc(e,t,n),o=Dc("dilations",e,t,n),i=Dc("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(Dc("input",e,t,n),Dc("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=Dc("strides",e,t,n),a=Dc("pad",e,t,n),o=Dc("dataFormat",e,t,n).toUpperCase(),i=Dc("dilations",e,t,n);return[r.conv3d(Dc("x",e,t,n),Dc("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Dc("strides",e,t,n),a=Dc("pad",e,t,n),o=Dc("kernelSize",e,t,n);return[r.avgPool(Dc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=Dc("strides",e,t,n),a=Dc("pad",e,t,n),o=Dc("kernelSize",e,t,n);return[r.maxPool(Dc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=Dc("strides",e,t,n),a=Dc("pad",e,t,n),o=Dc("kernelSize",e,t,n),i=Dc("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(Dc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[u,l]}case"AvgPool3D":{const s=Dc("strides",e,t,n),a=Dc("pad",e,t,n),o=Dc("kernelSize",e,t,n);return[r.avgPool3d(Dc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=Dc("strides",e,t,n),a=Dc("pad",e,t,n),o=Dc("kernelSize",e,t,n);return[r.maxPool3d(Dc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=Dc("strides",e,t,n),a=Dc("pad",e,t,n),o=Dc("dilations",e,t,n),i=s[1],u=s[2],l=o[1],c=o[2];return[r.dilation2d(Dc("x",e,t,n),Dc("filter",e,t,n),[i,u],a,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"Fill":{const s=Dc("shape",e,t,n),a=Dc("dtype",e,t,n),o=Dc("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=Dc("start",e,t,n),a=Dc("stop",e,t,n),o=Dc("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=Dc("logits",e,t,n),a=Dc("numSamples",e,t,n),o=Dc("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=Dc("indices",e,t,n),a=Dc("depth",e,t,n),o=Dc("onValue",e,t,n),i=Dc("offValue",e,t,n),u=Dc("dtype",e,t,n);return[r.oneHot(s,a,o,i,u)]}case"Ones":return[r.ones(Dc("shape",e,t,n),Dc("dtype",e,t,n))];case"OnesLike":return[r.onesLike(Dc("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(Dc("shape",e,t,n),Dc("dtype",e,t,n),Dc("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(Dc("shape",e,t,n),Dc("minval",e,t,n),Dc("maxval",e,t,n),Dc("dtype",e,t,n))];case"Range":{const s=Dc("start",e,t,n),a=Dc("stop",e,t,n),o=Dc("step",e,t,n);return[r.range(s,a,o,Dc("dtype",e,t,n))]}case"TruncatedNormal":{const s=Dc("shape",e,t,n),a=Dc("mean",e,t,n),o=Dc("stdDev",e,t,n),i=Dc("seed",e,t,n);return[r.truncatedNormal(s,a,o,Dc("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(Dc("shape",e,t,n),Dc("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(Dc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=Wp)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=th(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=th(e,t,n),l=Dc("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=th(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,u)]}case"Where":{const r=s.cast(Dc("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(Dc("x",e,t,n),Dc("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"LowerBound":{const s=Dc("sortedSequence",e,t,n),a=Dc("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=Dc("x",e,t,n),a=Dc("k",e,t,n),o=Dc("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=Dc("sortedSequence",e,t,n),a=Dc("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=Dc("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=Dc("x",e,t,n),a=Dc("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"ResizeBilinear":{const s=Dc("images",e,t,n),a=Dc("size",e,t,n),o=Dc("alignCorners",e,t,n),i=Dc("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=Dc("images",e,t,n),a=Dc("size",e,t,n),o=Dc("alignCorners",e,t,n),i=Dc("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=Dc("image",e,t,n),a=Dc("boxes",e,t,n),o=Dc("boxInd",e,t,n),i=Dc("cropSize",e,t,n),u=Dc("method",e,t,n),l=Dc("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,u,l)]}case"ImageProjectiveTransformV3":{const s=Dc("images",e,t,n),a=Dc("transforms",e,t,n),o=Dc("outputShape",e,t,n),i=Dc("fillValue",e,t,n),u=Dc("interpolation",e,t,n),l=Dc("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Dc("default",e,t,n);return[Fc(e.name,t,n)||s];case"Placeholder":return[Fc(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Pc(Dc("x",e,t,n))];case"IdentityN":return Dc("x",e,t,n).map((e=>Pc(e)));case"Shape":return[r.tensor1d(Dc("x",e,t,n).shape,"int32")];case"ShapeN":return Dc("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(Dc("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(Dc("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=Dc("x",e,t,n),o=Dc("data",e,t,n),i=Dc("message",e,t,n),u=Dc("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"Equal":return[r.equal(Dc("a",e,t,n),Dc("b",e,t,n))];case"NotEqual":return[r.notEqual(Dc("a",e,t,n),Dc("b",e,t,n))];case"Greater":return[r.greater(Dc("a",e,t,n),Dc("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(Dc("a",e,t,n),Dc("b",e,t,n))];case"Less":return[r.less(Dc("a",e,t,n),Dc("b",e,t,n))];case"LessEqual":return[r.lessEqual(Dc("a",e,t,n),Dc("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(Dc("a",e,t,n),Dc("b",e,t,n))];case"LogicalNot":return[r.logicalNot(Dc("a",e,t,n))];case"LogicalOr":return[r.logicalOr(Dc("a",e,t,n),Dc("b",e,t,n))];case"Select":case"SelectV2":return[r.where(Dc("condition",e,t,n),Dc("a",e,t,n),Dc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(Dc("a",e,t,n),Dc("b",e,t,n),Dc("transposeA",e,t,n),Dc("transposeB",e,t,n))];case"Einsum":return[r.einsum(Dc("equation",e,t,n),...Dc("tensors",e,t,n))];case"Transpose":return[r.transpose(Dc("x",e,t,n),Dc("perm",e,t,n))];case"_FusedMatMul":const[s,a]=Dc("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,u=Dc("numArgs",e,t,n),l=Dc("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=Dc("args",e,t,n);return[r.fused.matMul({a:Dc("a",e,t,n),b:Dc("b",e,t,n),transposeA:Dc("transposeA",e,t,n),transposeB:Dc("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:p,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(Dc("x",e,t,n),Dc("axis",e,t,n),Dc("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(Dc("x",e,t,n),Dc("mean",e,t,n),Dc("variance",e,t,n),Dc("offset",e,t,n),Dc("scale",e,t,n),Dc("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(Dc("x",e,t,n),Dc("radius",e,t,n),Dc("bias",e,t,n),Dc("alpha",e,t,n),Dc("beta",e,t,n))];case"Softmax":return[r.softmax(Dc("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(Dc("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(Dc("sparseIndices",e,t,n),Dc("outputShape",e,t,n),Dc("sparseValues",e,t,n),Dc("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"Max":{const s=Dc("axis",e,t,n),a=Dc("keepDims",e,t,n);return[r.max(Dc("x",e,t,n),s,a)]}case"Mean":{const s=Dc("axis",e,t,n),a=Dc("keepDims",e,t,n);return[r.mean(Dc("x",e,t,n),s,a)]}case"Min":{const s=Dc("axis",e,t,n),a=Dc("keepDims",e,t,n);return[r.min(Dc("x",e,t,n),s,a)]}case"Sum":{const s=Dc("axis",e,t,n),a=Dc("keepDims",e,t,n);return[r.sum(Dc("x",e,t,n),s,a)]}case"All":{const s=Dc("axis",e,t,n),a=Dc("keepDims",e,t,n);return[r.all(Dc("x",e,t,n),s,a)]}case"Any":{const s=Dc("axis",e,t,n),a=Dc("keepDims",e,t,n);return[r.any(Dc("x",e,t,n),s,a)]}case"ArgMax":{const s=Dc("axis",e,t,n);return[r.argMax(Dc("x",e,t,n),s)]}case"ArgMin":{const s=Dc("axis",e,t,n);return[r.argMin(Dc("x",e,t,n),s)]}case"Prod":{const s=Dc("axis",e,t,n),a=Dc("keepDims",e,t,n);return[r.prod(Dc("x",e,t,n),s,a)]}case"Cumprod":{const s=Dc("axis",e,t,n),a=Dc("exclusive",e,t,n),o=Dc("reverse",e,t,n);return[r.cumprod(Dc("x",e,t,n),s,a,o)]}case"Cumsum":{const s=Dc("axis",e,t,n),a=Dc("exclusive",e,t,n),o=Dc("reverse",e,t,n);return[r.cumsum(Dc("x",e,t,n),s,a,o)]}case"Bincount":const s=Dc("x",e,t,n),a=Dc("weights",e,t,n),o=Dc("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=Dc("x",e,t,n),a=Dc("weights",e,t,n),o=Dc("size",e,t,n),i=Dc("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Dc("n",e,t,n),a=Dc("axis",e,t,n);let o=Dc("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=Dc("x",e,t,n),a=Dc("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=Dc("axis",e,t,n),a=Dc("batchDims",e,t,n),o=Dc("x",e,t,n),i=Dc("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=Dc("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=Dc("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=Dc("axis",e,t,n),a=Dc("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=Dc("begin",e,t,n),a=Dc("size",e,t,n);return[r.slice(Dc("x",e,t,n),s,a)]}case"StridedSlice":{const s=Dc("begin",e,t,n),a=Dc("end",e,t,n),o=Dc("strides",e,t,n),i=Dc("beginMask",e,t,n),u=Dc("endMask",e,t,n),l=Dc("ellipsisMask",e,t,n),c=Dc("newAxisMask",e,t,n),p=Dc("shrinkAxisMask",e,t,n),h=Dc("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,u,l,c,p)]}case"Pack":return Xo((()=>{const s=Dc("axis",e,t,n),a=Dc("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,u=a.map((e=>{const t=_e.arraysEqual(e.shape,o);if(!t&&!_e.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(u,s)]}));case"Unpack":{const s=Dc("axis",e,t,n),a=Dc("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=Dc("reps",e,t,n);return[r.tile(Dc("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Dc("axis",e,t,n),a=Dc("numOrSizeSplits",e,t,n),o=Dc("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=Dc("indices",e,t,n),a=Dc("values",e,t,n),o=Dc("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=Dc("x",e,t,n),a=Dc("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=Dc("sparseIndices",e,t,n),a=Dc("outputShape",e,t,n),o=Dc("sparseValues",e,t,n),i=Dc("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(Dc("indices",e,t,n),Dc("values",e,t,n),Dc("denseShape",e,t,n),Dc("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(Dc("inputIndices",e,t,n),Dc("inputShape",e,t,n),Dc("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(Dc("data",e,t,n),Dc("indices",e,t,n),Dc("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(Dc("data",e,t,n),Dc("indices",e,t,n),Dc("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"FFT":return[r.fft(Dc("x",e,t,n))];case"IFFT":return[r.ifft(Dc("x",e,t,n))];case"RFFT":return[r.rfft(Dc("x",e,t,n))];case"IRFFT":return[r.irfft(Dc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(Dc("data",e,t,n),Dc("dataSplits",e,t,n),Dc("separator",e,t,n),Dc("nGramWidths",e,t,n),Dc("leftPad",e,t,n),Dc("rightPad",e,t,n),Dc("padWidth",e,t,n),Dc("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(Dc("input",e,t,n),Dc("delimiter",e,t,n),Dc("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(Dc("input",e,t,n),Dc("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=Wp)=>{switch(e.op){case"Cast":return[r.cast(Dc("x",e,t,n),Dc("dtype",e,t,n))];case"ExpandDims":{const s=Dc("axis",e,t,n);return[r.expandDims(Dc("x",e,t,n),s)]}case"Squeeze":{const s=Dc("axis",e,t,n);return[r.squeeze(Dc("x",e,t,n),s)]}case"Reshape":return[r.reshape(Dc("x",e,t,n),Dc("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(Dc("x",e,t,n),Dc("padding",e,t,n),Dc("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(Dc("x",e,t,n),Dc("padding",e,t,n),Dc("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Dc("blockShape",e,t,n),a=Dc("paddings",e,t,n);return[r.spaceToBatchND(Dc("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=Dc("blockShape",e,t,n),a=Dc("crops",e,t,n);return[r.batchToSpaceND(Dc("x",e,t,n),s,a)]}case"DepthToSpace":{const s=Dc("blockSize",e,t,n),a=Dc("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(Dc("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(Dc("x",e,t,n),Dc("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(Dc("s0",e,t,n),Dc("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=Dc("keyDType",e,t,n),a=Dc("valueDType",e,t,n),o=new nh(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Dc("tableHandle",e,t,n,r),a=Dc("keys",e,t,n),o=Dc("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Dc("tableHandle",e,t,n,r),a=Dc("keys",e,t,n),o=Dc("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=Dc("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=_c(e.op);if(a&&a.customExecutor)return a.customExecutor(new Vp(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return _e.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class sh{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function ah(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>zc(e)[0]));let c=[];null!=r&&(c=r.map((e=>zc(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(ch(e)||ph(e)||hh(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),p.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}function oh(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((e=>zc(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&a.push(e)}));const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&a.push(e)}))}return l}const ih=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],uh=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],lh=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function ch(e){return ih.indexOf(e.op)>=0}function ph(e){return uh.indexOf(e.op)>=0}function hh(e){return lh.indexOf(e.op)>=0}class dh{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new dh(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=ah(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return oh(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[zc(e)[0]])),s=t.map((e=>zc(e)[0]));let a=s.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const u={},l={};return Xo((()=>{const n=new sh(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=zc(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=rh(t,r,n,this._resourceManager);if(_e.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map((e=>Fc(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=Oc(e.name,n,r);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=Mc(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=ae().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new sh(this.weightMap,r,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const o=t.map((e=>Fc(e,this.tensorsMap,a))),i=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[zc(e)[0]])),o=n.map((e=>zc(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:p}=ah(e,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=zc(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;h.length>0;){const e=this.processStack(a,h,t,d,g,m,o,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!ch(e)&&!Fc(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return d}processStack(e,t,n,r,s,a,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Dc("isConstant",e.node,r,n)&&([c]=Mc(e.node.name,n)),null==r[e.node.name]){const p=rh(e.node,r,n,this._resourceManager);c||([c]=Mc(e.node.name,n));const h=n.currentContext;_e.isPromise(p)?l.push(p.then((l=>(r[c]=l,n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u),l)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=Mc(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Fc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Fc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=zc(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));_e.assert(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&_e.assert(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=zc(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=zc(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class fh{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class mh{constructor(e,t={},n=Ns){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new fh}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return _e.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new dh(Tp.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Tp.Instance.transformGraph(e.modelInitializer);this.initializer=new dh(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof zt?[n]:n).forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(e){if(!(e instanceof zt||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function gh(e,t={},n=Ns){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}model.json?tfjs-format=file`}
/** @license See the LICENSE file. */(e));const r=new mh(e,t,n);return await r.load(),r}function yh(e,t,n,r){return new(n||(n=Promise))((function(s,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function i(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function bh(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}var xh=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var s=r[n];t.push(s)}return t},wh=function(){this.parent=null,this.children={},this.end=!1,this.word=[[],0,0]},kh=function(){function e(){this.root=new wh}return e.prototype.insert=function(e,t,n){for(var r=this.root,s=xh(e),a=0;a<s.length;a++)r.children[s[a]]||(r.children[s[a]]=new wh,r.children[s[a]].parent=r,r.children[s[a]].word[0]=r.word[0].concat(s[a])),r=r.children[s[a]],a===s.length-1&&(r.end=!0,r.word[1]=t,r.word[2]=n)},e.prototype.commonPrefixSearch=function(e){for(var t=[],n=this.root.children[e[0]],r=0;r<e.length&&n;r++)n.end&&t.push(n.word),n=n.children[e[r+1]];return t.length||t.push([[e[0]],0,0]),t},e}();var vh=function(){function e(e,t){void 0===t&&(t=6),this.vocabulary=e,this.reservedSymbolsCount=t,this.trie=new kh;for(var n=this.reservedSymbolsCount;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n)}return e.prototype.encode=function(e){var t=[],n=[],r=[];e=function(e){var t=e.normalize("NFKC");return t.length>0?"▁"+t.replace(/ /g,"▁"):t}(e);for(var s=xh(e),a=0;a<=s.length;a++)t.push({}),n.push(0),r.push(0);for(a=0;a<s.length;a++)for(var o=this.trie.commonPrefixSearch(s.slice(a)),i=0;i<o.length;i++){var u=o[i],l={key:u[0],score:u[1],index:u[2]};null==t[a+(c=u[0].length)][a]&&(t[a+c][a]=[]),t[a+c][a].push(l)}for(var c=0;c<=s.length;c++)for(var p in t[c]){var h=t[c][p];for(i=0;i<h.length;i++){var d=h[i],f=d.score+r[c-d.key.length];(0===r[c]||f>=r[c])&&(r[c]=f,n[c]=h[i].index)}}for(var m=[],g=n.length-1;g>0;)m.push(n[g]),g-=this.vocabulary[n[g]][0].length;var y=[],b=!1;for(a=0;a<m.length;a++){var x=m[a];b&&0===x||y.push(x),b=0===x}return y.reverse()},e}();function Nh(e){return yh(this,void 0,void 0,(function(){return bh(this,(function(t){switch(t.label){case 0:return[4,_e.fetch(e)];case 1:return[2,t.sent().json()]}}))}))}var Sh=[0,1,2];!function(){function e(){}e.prototype.loadModel=function(){return yh(this,void 0,void 0,(function(){return bh(this,(function(e){return[2,gh("https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1",{fromTFHub:!0})]}))}))},e.prototype.load=function(){return yh(this,void 0,void 0,(function(){var e,t,n;return bh(this,(function(r){switch(r.label){case 0:return[4,Promise.all([this.loadModel(),Nh("https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1/vocab.json?tfjs-format=file")])];case 1:return e=r.sent(),t=e[0],n=e[1],this.model=t,this.tokenizer=new vh(n,3),[2]}}))}))},e.prototype.embed=function(e){var t=this,n=Xo((function(){var n=t.tokenizeStrings(e.queries,192),r=t.tokenizeStrings(e.responses,192);if(null!=e.contexts&&e.contexts.length!==e.responses.length)throw new Error("The length of response strings and context strings need to match.");var s=e.contexts||[];null==e.contexts&&(s.length=e.responses.length,s.fill(""));var a=t.tokenizeStrings(s,192),o={};return o.input_inp_text=n,o.input_res_text=r,o.input_res_context=a,t.model.execute(o,["Final/EncodeQuery/mul","Final/EncodeResult/mul"])}));return{queryEmbedding:n[0],responseEmbedding:n[1]}},e.prototype.tokenizeStrings=function(e,t){var n=this;return ja(e.map((function(e){return n.shiftTokens(n.tokenizer.encode(e),192)})),[e.length,192],"int32")},e.prototype.shiftTokens=function(e,t){e.unshift(1);for(var n=0;n<t;n++)n>=e.length?e[n]=2:Sh.includes(e[n])||(e[n]+=3);return e.slice(0,t)}}();var Ih=function(){function e(){}return e.prototype.loadModel=function(e){return yh(this,void 0,void 0,(function(){return bh(this,(function(t){return[2,e?gh(e):gh("https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1",{fromTFHub:!0})]}))}))},e.prototype.load=function(e){return void 0===e&&(e={}),yh(this,void 0,void 0,(function(){var t,n,r;return bh(this,(function(s){switch(s.label){case 0:return[4,Promise.all([this.loadModel(e.modelUrl),Nh(e.vocabUrl||"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/vocab.json")])];case 1:return t=s.sent(),n=t[0],r=t[1],this.model=n,this.tokenizer=new vh(r),[2]}}))}))},e.prototype.embed=function(e){return yh(this,void 0,void 0,(function(){var t,n,r,s,a,o,i,u,l=this;return bh(this,(function(c){switch(c.label){case 0:for("string"==typeof e&&(e=[e]),t=e.map((function(e){return l.tokenizer.encode(e)})),n=t.map((function(e,t){return e.map((function(e,n){return[t,n]}))})),r=[],s=0;s<n.length;s++)r=r.concat(n[s]);return a=ja(r,[r.length,2],"int32"),o=Va(_e.flatten(t),"int32"),i={indices:a,values:o},[4,this.model.executeAsync(i)];case 1:return u=c.sent(),a.dispose(),o.dispose(),[2,u]}}))}))},e}();class Th{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class Eh{refCount(e){return $h("refCount")}incRef(e){return $h("incRef")}timerAvailable(){return!0}time(e){return $h("time")}read(e){return $h("read")}readSync(e){return $h("readSync")}readToGPU(e,t){return $h("readToGPU")}numDataIds(){return $h("numDataIds")}disposeData(e,t){return $h("disposeData")}write(e,t,n){return $h("write")}move(e,t,n,r,s){return $h("move")}createTensorFromTexture(e,t,n){return $h("createTensorFromTexture")}memory(){return $h("memory")}floatPrecision(){return $h("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return $h("dispose")}}function $h(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var Ch={};function Ah(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,Fh(e,t,n)}function Rh(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,Fh(e,n,r),Fh(t,n,r)}function _h(e,t,n){return Math.max(e,Math.min(t,n))}function Dh(e){return e%2==0?e:e+1}function Fh(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function Oh(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function Mh(e,t){const n=Math.random();return t*n+(1-n)*e}function Lh(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function zh(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function Bh(e,t,n=""){zh(Gh(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function Ph(e){zh(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function Vh(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||ad(e)&&!n)for(let r=0;r<e.length;++r)Vh(e[r],t,n);else t.push(e);return t}function Wh(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function Uh(e){return 0===e.length}function Gh(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function Hh(e){return e%1==0}function qh(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function jh(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function Kh(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return Ah(t),t}function Xh(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function Yh(e,t=(e=>0),n,r){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const u=t(o);null!=n&&o>=n?a():null!=r?r(i,u):setTimeout(i,u)};i()}))}function Zh(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function Jh(e,t){const n=t.length;return zh((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),zh(e.every((e=>Hh(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function Qh(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:Jh(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function ed(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function td(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function nd(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function rd(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function sd(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function ad(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function od(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function id(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function ud(e){return"string"==typeof e||e instanceof String}function ld(e){return"boolean"==typeof e}function cd(e){return"number"==typeof e}function pd(e){return Array.isArray(e)?pd(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":cd(e)?"float32":ud(e)?"string":ld(e)?"bool":"float32"}function hd(e){return!!(e&&e.constructor&&e.call&&e.apply)}function dd(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function fd(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function md(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=md(e+t*i,o,n,r)}return s}function gd(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return md(0,e,t,n)}function yd(e,t){const n=bd(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function bd(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function xd(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return gd(e,new Float32Array(n));if("int32"===t)return gd(e,new Int32Array(n));if("bool"===t)return gd(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function wd(e){e.forEach((t=>{zh(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function kd(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function vd(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Nd(e){return e&&e.then&&"function"==typeof e.then}t(Ch,"shuffle",(()=>Ah)),t(Ch,"swap",(()=>Fh)),t(Ch,"shuffleCombo",(()=>Rh)),t(Ch,"clamp",(()=>_h)),t(Ch,"nearestLargerEven",(()=>Dh)),t(Ch,"sum",(()=>Oh)),t(Ch,"randUniform",(()=>Mh)),t(Ch,"distSquared",(()=>Lh)),t(Ch,"assert",(()=>zh)),t(Ch,"assertShapesMatch",(()=>Bh)),t(Ch,"arraysEqual",(()=>Gh)),t(Ch,"assertNonNull",(()=>Ph)),t(Ch,"flatten",(()=>Vh)),t(Ch,"isTypedArray",(()=>ad)),t(Ch,"sizeFromShape",(()=>Wh)),t(Ch,"isScalarShape",(()=>Uh)),t(Ch,"isInt",(()=>Hh)),t(Ch,"tanh",(()=>qh)),t(Ch,"sizeToSquarishShape",(()=>jh)),t(Ch,"createShuffledIndices",(()=>Kh)),t(Ch,"rightPad",(()=>Xh)),t(Ch,"repeatedTry",(()=>Yh)),t(Ch,"inferFromImplicitShape",(()=>Zh)),t(Ch,"parseAxisParam",(()=>Jh)),t(Ch,"squeezeShape",(()=>Qh)),t(Ch,"getTypedArrayFromDType",(()=>ed)),t(Ch,"getArrayFromDType",(()=>td)),t(Ch,"checkConversionForErrors",(()=>nd)),t(Ch,"isValidDtype",(()=>rd)),t(Ch,"hasEncodingLoss",(()=>sd)),t(Ch,"bytesPerElement",(()=>od)),t(Ch,"bytesFromStringArray",(()=>id)),t(Ch,"isString",(()=>ud)),t(Ch,"isBoolean",(()=>ld)),t(Ch,"isNumber",(()=>cd)),t(Ch,"inferDtype",(()=>pd)),t(Ch,"isFunction",(()=>hd)),t(Ch,"nearestDivisor",(()=>dd)),t(Ch,"computeStrides",(()=>fd)),t(Ch,"toNestedArray",(()=>gd)),t(Ch,"makeOnesTypedArray",(()=>yd)),t(Ch,"makeZerosTypedArray",(()=>bd)),t(Ch,"makeZerosNestedTypedArray",(()=>xd)),t(Ch,"assertNonNegativeIntegerDimensions",(()=>wd)),t(Ch,"locToIndex",(()=>kd)),t(Ch,"indexToLoc",(()=>vd)),t(Ch,"isPromise",(()=>Nd));class Sd{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Id,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(Td().getBool("IS_TEST")||Td().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];Td().getBool("IS_TEST")||Td().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Nd(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function Id(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function Td(){return $d}let Ed,$d=null;function Cd(){if(null==Ed){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==le)t=le;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Ed=t}return Ed}function Ad(e,t){const n=function(){const e=Cd();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}var Rd={};function _d(...e){Td().getBool("IS_TEST")||Td().getBool("PROD")||console.warn(...e)}function Dd(...e){Td().getBool("IS_TEST")||Td().getBool("PROD")||console.log(...e)}t(Rd,"warn",(()=>_d)),t(Rd,"log",(()=>Dd));const Fd=Ad("kernelRegistry",(()=>new Map)),Od=Ad("gradRegistry",(()=>new Map));function Md(e,t){const n=Vd(e,t);return Fd.get(n)}function Ld(e){return Od.get(e)}function zd(e){const t=Fd.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function Bd(e){const{kernelName:t,backendName:n}=e,r=Vd(t,n);Fd.has(r)&&_d(`The kernel '${t}' for backend '${n}' is already registered`),Fd.set(r,e)}function Pd(e){const{kernelName:t}=e;Od.has(t)&&Td().getBool("DEBUG")&&_d(`Overriding the gradient for '${t}'`),Od.set(t,e)}function Vd(e,t){return`${t}_${e}`}var Wd={};t(Wd,"createScalarValue",(()=>rf)),t(Wd,"encodeString",(()=>uf)),t(Wd,"toTypedArray",(()=>sf)),t(Wd,"now",(()=>af)),t(Wd,"fetch",(()=>of)),t(Wd,"decodeString",(()=>lf));var Ud={};t(Ud,"hexToLong",(()=>Hd)),t(Ud,"fingerPrint64",(()=>nf));const Gd=Fe.default||Fe;function Hd(e){return Gd.fromString(e,!0,16)}const qd=Hd("c3a5c85c97cb3127"),jd=Hd("b492b66fbe98f273"),Kd=Hd("9ae16a3b2f90404f");function Xd(e){return e.xor(e.shru(47))}function Yd(e,t,n){const r=e.slice(t,t+n);return Gd.fromBytes(Array.from(r),!0,!0)}function Zd(e,t){return Yd(e,t,8)}function Jd(e,t){return Yd(e,t,4)}function Qd(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function ef(e,t,n=Hd("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function tf(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=Qd(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(Qd(s,44)),[s.add(r),a.add(o)]}(Zd(e,t),Zd(e,t+8),Zd(e,t+16),Zd(e,t+24),n,r)}function nf(e,t=e.length){const n=Gd.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Kd.add(2*t),r=Zd(e,0).add(Kd),s=Zd(e,t-8);return ef(Qd(s,37).mul(n).add(r),Qd(r,25).add(s).mul(n),n)}if(t>=4){const n=Kd.add(2*t);return ef(Jd(e,0).shl(3).add(t),Jd(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return Xd(Kd.mul(n).xor(qd.mul(r))).mul(Kd)}return Kd}(e,t):function(e,t=e.length){const n=Kd.add(2*t),r=Zd(e,0).mul(jd),s=Zd(e,8),a=Zd(e,t-8).mul(n),o=Zd(e,t-16).mul(Kd);return ef(Qd(r.add(s),43).add(Qd(a,30)).add(o),r.add(Qd(s.add(Kd),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Kd.add(2*t),r=Zd(e,0).mul(Kd),s=Zd(e,8),a=Zd(e,t-8).mul(n),o=Zd(e,t-16).mul(Kd),i=Qd(r.add(s),43).add(Qd(a,30)).add(o),u=ef(i,r.add(Qd(s.add(Kd),18)).add(a),n),l=Zd(e,16).mul(n),c=Zd(e,24),p=i.add(Zd(e,t-32)).mul(n),h=u.add(Zd(e,t-24)).mul(n);return ef(Qd(l.add(c),43).add(Qd(p,30)).add(h),l.add(Qd(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(jd).add(113),a=Xd(s.mul(Kd).add(113)).mul(Kd),o=[Gd.UZERO,Gd.UZERO],i=[Gd.UZERO,Gd.UZERO];r=r.mul(Kd).add(Zd(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=Qd(r.add(s).add(o[0]).add(Zd(e,u+8)),37).mul(jd),s=Qd(s.add(o[1]).add(Zd(e,u+48)),42).mul(jd),r=r.xor(i[1]),s=s.add(o[0]).add(Zd(e,u+40)),a=Qd(a.add(i[0]),33).mul(jd),o=tf(e,u,o[1].mul(jd),r.add(i[0])),i=tf(e,u+32,a.add(i[1]),s.add(Zd(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const p=jd.add(a.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=Qd(r.add(s).add(o[0]).add(Zd(e,u+8)),37).mul(p),s=Qd(s.add(o[1]).add(Zd(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(Zd(e,u+40))),a=Qd(a.add(i[0]),33).mul(p),o=tf(e,u,o[1].mul(p),r.add(i[0])),i=tf(e,u+32,a.add(i[1]),s.add(Zd(e,u+16))),[a,r]=[r,a],ef(ef(o[0],i[0],p).add(Xd(s).mul(qd)).add(a),ef(o[1],i[1],p).add(r),p)}function rf(e,t){return"string"===t?uf(e):sf([e],t)}function sf(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Vh(e)),Td().getBool("DEBUG")&&nd(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function af(){return Td().platform.now()}function of(e,t){return Td().platform.fetch(e,t)}function uf(e,t="utf-8"){return t=t||"utf-8",Td().platform.encode(e,t)}function lf(e,t="utf-8"){return t=t||"utf-8",Td().platform.decode(e,t)}n(Wd,Ch),n(Wd,Ud);class cf{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new hf)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=af();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:af()-o})}if(Td().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{pf(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function pf(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class hf{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?Xh(`${r}ms`,9):r.error,i=Xh(e,25),u=t.rank,l=t.size,c=Xh(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function df(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function ff(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!Gh(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function mf(e,t,n,r){const s=fd(t),a=function(e,t,n,r){const s=Wh(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?xf(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],gf(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=bf(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function gf(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:ud(e)?`'${e}'`:"bool"===n?yf(e):parseFloat(e.toFixed(7)).toString(),Xh(r,t)}function yf(e){return 0===e?"false":"true"}function bf(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[gf(xf(e)[0],0,n)]}return"bool"===n?[yf(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=xf(r),a=xf(a)),["["+r.map(((e,t)=>gf(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>gf(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?xf(e):Array.from(e)).map(((e,t)=>gf(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...bf(e.slice(r,a),l,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...bf(e.slice(r,a),l,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...bf(e.slice(r,a),l,n,c,s,t===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function xf(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class wf{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=Wh(e),null!=n){const e=n.length;zh(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||td(t,this.size),this.strides=fd(e)}set(e,...t){0===t.length&&(t=[0]),zh(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return kf().makeTensor(this.values,this.shape,this.dtype)}}let kf=null,vf=null,Nf=null;function Sf(e){kf=e}class If{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=Wh(e),this.strides=fd(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return vf.buffer(this.shape,this.dtype,e)}bufferSync(){return vf.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return gd(this.shape,e,"complex64"===this.dtype)}arraySync(){return gd(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=kf().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>lf(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),kf().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=kf().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>lf(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await kf().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(kf().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return vf.print(this,e)}clone(){return this.throwIfDisposed(),vf.clone(this)}toString(e=!1){return mf(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),vf.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),kf().makeVariable(this,e,t,n)}}function Tf(){return Ad("Tensor",(()=>If))}Object.defineProperty(If,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Tf();class Ef extends If{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Gh(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);kf().disposeTensor(this),this.dataId=e.dataId,kf().incRef(this,null)}dispose(){kf().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Ef,Symbol.hasInstance,{value:e=>e instanceof If&&null!=e.assign&&e.assign instanceof Function});var $f,Cf,Af,Rf,_f,Df={};t(Df,"makeTypesMatch",(()=>Lf)),t(Df,"assertTypesMatch",(()=>zf)),t(Df,"isTensorInList",(()=>Bf)),t(Df,"getTensorsInContainer",(()=>Pf)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}($f||($f={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Cf||(Cf={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Af||(Af={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Rf||(Rf={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(_f||(_f={}));const Ff={float32:Rf,int32:Cf,bool:Af,complex64:_f};function Of(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Ff[e][t]}function Mf(e){return Of(e,"int32")}function Lf(e,t){if(e.dtype===t.dtype)return[e,t];const n=Of(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function zf(e,t){zh(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Bf(e,t){return t.some((t=>t.id===e.id))}function Pf(e){const t=[];return Vf(e,t,new Set),t}function Vf(e,t,n){if(null==e)return;if(e instanceof If)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),Vf(r,t,n))}}function Wf(e){return null!=e.kernelName}class Uf{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Gf{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Uf}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(_d(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new cf(this.backendInstance),!0}setupRegisteredKernels(){zd(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){zd(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof Eh||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,_d(`Initialization of backend ${e} failed`),_d(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return _d(`Initialization of backend ${e} failed`),_d(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Gf.nextTensorId++}nextVariableId(){return Gf.nextVariableId++}clone(e){const t=qf.runKernel("Identity",{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return qf.runKernel("Cast",t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Md(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Wf(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Wf(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=Md(t,this.backendName);zh(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,p=Wf(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(u,l,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Ld(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(zh(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&ud(e[0])&&(s=e.map((e=>uf(e))));const a=r.write(s,t,n),o=new If(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=id(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new If(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Ef(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*od(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Ef||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*od(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=Ld(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=bd(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Pf(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(zh(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));zh(s instanceof If,(()=>"The result y returned by f() must be a tensor."));const a=df(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=yd(Wh(e),"float32");return qf.makeTensor(t,e,"float32")}(s.shape):n,ff(e,a,(e=>this.tidy(e)),jf);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return zh(hd(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;zh(t.every((e=>e instanceof If)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),zh(n.value instanceof If,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),zh(hd(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];zh(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),zh(a.every((e=>e instanceof If)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=af(),n=await this.backend.time(e);return n.wallMs=af()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Uf;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Hf(){const e=Cd();if(null==e._tfengine){const t=new Sd(e);e._tfengine=new Gf(t)}var t;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */return t=e._tfengine.ENV,$d=t,Sf((()=>e._tfengine)),e._tfengine}Gf.nextTensorId=0,Gf.nextVariableId=0;const qf=Hf();function jf(e,t){const n={a:e,b:t};return qf.runKernel("Add",n)}var Kf={};let Xf;function Yf(e){Xf=e}function Zf(e){if(void 0!==Xf)return Xf;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Jf(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(Kf,"mockIsMobile",(()=>Yf)),t(Kf,"isMobile",(()=>Zf)),t(Kf,"isBrowser",(()=>Jf));const Qf=Td();function em(e,t){let n=e;if(ad(e))return"string"===t?[]:[e.length];if("object"==typeof e&&"texture"in e){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||ad(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Td().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&tm(e,r,[]),r}function tm(e,t,n){if(n=n||[],!Array.isArray(e)&&!ad(e))return void zh(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));zh(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),zh(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)tm(e[t],r,n.concat(t))}function nm(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function rm(e,t,n,r="numeric"){if(e instanceof If)return nm(r,e.dtype,t,n),e;let s=pd(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),nm(r,s,t,n),null==e||!ad(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=em(e,s);ad(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?sf(e,s):Vh(e,[],!0);return qf.makeTensor(o,a,s)}function sm(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>rm(e,`${t}[${s}]`,n,r)))}Qf.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Qf.registerFlag("IS_BROWSER",(()=>Jf())),Qf.registerFlag("IS_NODE",(()=>void 0!==le&&void 0!==le.versions&&void 0!==le.versions.node)),Qf.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Qf.registerFlag("PROD",(()=>!1)),Qf.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Qf.getBool("DEBUG"))),Qf.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Qf.registerFlag("IS_TEST",(()=>!1)),Qf.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Qf.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Qf.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),Qf.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Qf.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));function am(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{qf.startScope(n);try{const t=r(...e);return Nd(t)&&console.error("Cannot return a Promise inside of tidy."),qf.endScope(t),t}catch(e){throw qf.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const om=am({complex_:function(e,t){const n=rm(e,"real","complex"),r=rm(t,"imag","complex");Bh(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return qf.runKernel("Complex",s)}});function im(e,t,n,r){if(null==r&&(r=pd(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if("object"==typeof e&&"texture"in e){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from texture only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return e.channels=e.channels||"RGBA",qf.backend.createTensorFromTexture(e,t||n,r)}if(!ad(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){wd(t);const e=Wh(t),r=Wh(n);zh(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==Wh(t.slice(e));zh(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return ad(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?sf(e,r):Vh(e,[],!0),qf.makeTensor(e,t,r)}function um(e,t,n){return im(e,t,em(e,n),n)}const lm={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var cm=xn;async function pm(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:dm(await Promise.all(r)),specs:n}}function hm(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=Wh(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=lm[n.dtype],c=e.slice(s,s+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Im()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=Wh(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=lm[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=um(e,i,"float32"),o=um(r,i,"float32");n[t]=om(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=um(l,i,o))}return n}function dm(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const fm=void 0!==cm&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function mm(e){return fm?cm.byteLength(e):new Blob([e]).size}function gm(e){if(fm)return cm.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function ym(e){if(fm){const t=cm.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function bm(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function xm(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function wm(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function km(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function vm(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),km(e,n,r)}function Nm(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:mm(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:mm(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Sm(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Im(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class Tm{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Tm.instance&&(Tm.instance=new Tm),Tm.instance}static registerSaveRouter(e){Tm.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Tm.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Tm.getHandlers(e,"save")}static getLoadHandlers(e,t){return Tm.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Tm.getInstance().loadRouters:Tm.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Em=e=>Tm.registerSaveRouter(e),$m=e=>Tm.registerLoadRouter(e),Cm=e=>Tm.getSaveHandlers(e),Am=(e,t)=>Tm.getLoadHandlers(e,t);function Rm(){if(!Td().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function _m(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class Dm{constructor(e){if(this.indexedDB=Rm(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>_m(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Nm(t),a=s.transaction("model_info_store","readwrite");let o=a.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction("models_store","readwrite");const i=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}Dm.URL_SCHEME="indexeddb://";const Fm=e=>{return Td().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Dm.URL_SCHEME)?(t=e.slice(Dm.URL_SCHEME.length),new Dm(t)):null;var t};Tm.registerSaveRouter(Fm),Tm.registerLoadRouter(Fm);class Om{constructor(){this.indexedDB=Rm()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>_m(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Dm.URL_SCHEME)?t.slice(Dm.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>_m(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),o=a.objectStore("model_info_store"),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const Mm="tensorflowjs_models",Lm="info",zm="model_topology",Bm="weight_specs",Pm="weight_data",Vm="model_metadata";function Wm(e){return{info:[Mm,e,Lm].join("/"),topology:[Mm,e,zm].join("/"),weightSpecs:[Mm,e,Bm].join("/"),weightData:[Mm,e,Pm].join("/"),modelMetadata:[Mm,e,Vm].join("/")}}function Um(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Gm(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class Hm{constructor(e){if(!Td().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Wm(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Nm(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,gm(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw Um(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=ym(a),t}}Hm.URL_SCHEME="localstorage://";const qm=e=>{return Td().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Hm.URL_SCHEME)?(t=e.slice(Hm.URL_SCHEME.length),new Hm(t)):null;var t};Tm.registerSaveRouter(qm),Tm.registerLoadRouter(qm);class jm{constructor(){zh(Td().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),zh("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Mm+"/",n="/"+Lm;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[Gm(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=Wm(e=(t=e).startsWith(Hm.URL_SCHEME)?t.slice(Hm.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return Um(n),r}}class Km{constructor(){this.managers={}}static getInstance(){return null==Km.instance&&(Km.instance=new Km),Km.instance}static registerManager(e,t){zh(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),zh(e.length>0,(()=>"scheme must not be an empty string."));const n=Km.getInstance();zh(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Km.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Km.getInstance().managers)}}function Xm(e){if(-1===e.indexOf("://"))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Km.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function Ym(e,t,n=!1){zh(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Tm.getLoadHandlers(e);zh(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),zh(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Tm.getSaveHandlers(t);zh(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),zh(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=Xm(e).scheme,u=Xm(e).path,l=i===Xm(e).scheme,c=await s.load();n&&l&&await Km.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await Km.getManager(i).removeModel(u),p.modelArtifactsInfo}async function Zm(){const e=Km.getSchemes(),t={};for(const n of e){const e=await Km.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t}async function Jm(e){const t=Xm(e);return Km.getManager(t.scheme).removeModel(t.path)}async function Qm(e,t){return Ym(e,t,!1)}async function eg(e,t){return Ym(e,t,!0)}class tg{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&Td().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(Td().get("IS_BROWSER")){Td().setPlatform("browser",new tg);try{Km.registerManager(Hm.URL_SCHEME,new jm)}catch(e){}try{Km.registerManager(Dm.URL_SCHEME,new Om)}catch(e){}}const ng=()=>a("kjyEk");let rg;function sg(e,t="float32",n){return t=t||"float32",wd(e),new wf(e,t,n)}Td().get("IS_NODE")&&!Td().get("IS_BROWSER")&&Td().setPlatform("node",new class{constructor(){this.util=a("kjyEk"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Td().global.fetch?Td().global.fetch(e,t):(null==rg&&(rg=ng()),rg(e,t))}now(){const e=le.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const ag=am({cast_:function(e,t){const n=rm(e,"x","cast");if(!rd(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return qf.runKernel("Cast",r,s)}});const og=am({clone_:function(e){const t={x:rm(e,"x","clone","string_or_numeric")};return qf.runKernel("Identity",t)}});function ig(e,t=!1){console.log(e.toString(t))}Hf();!function(e){vf=e}({buffer:sg,cast:ag,clone:og,print:ig});var ug={};t(ug,"copyModel",(()=>Qm)),t(ug,"listModels",(()=>Zm)),t(ug,"moveModel",(()=>eg)),t(ug,"removeModel",(()=>Jm)),t(ug,"browserFiles",(()=>hg)),t(ug,"browserHTTPRequest",(()=>kg)),t(ug,"concatenateArrayBuffers",(()=>bm)),t(ug,"decodeWeights",(()=>hm)),t(ug,"encodeWeights",(()=>pm)),t(ug,"fromMemory",(()=>Ig)),t(ug,"fromMemorySync",(()=>Tg)),t(ug,"getLoadHandlers",(()=>Am)),t(ug,"getModelArtifactsForJSON",(()=>vm)),t(ug,"getModelArtifactsForJSONSync",(()=>km)),t(ug,"getModelArtifactsInfoForJSON",(()=>Nm)),t(ug,"getSaveHandlers",(()=>Cm)),t(ug,"getWeightSpecs",(()=>Sm)),t(ug,"http",(()=>wg)),t(ug,"isHTTPScheme",(()=>bg)),t(ug,"loadWeights",(()=>mg)),t(ug,"registerLoadRouter",(()=>$m)),t(ug,"registerSaveRouter",(()=>Em)),t(ug,"weightsLoaderFactory",(()=>gg)),t(ug,"withSaveHandler",(()=>Eg)),t(ug,"withSaveHandlerSync",(()=>$g));function lg(e){return new Promise((e=>setTimeout(e))).then(e)}class cg{constructor(e){if(!Td().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(cg.URL_SCHEME)&&(e=e.slice(cg.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=wm(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await lg((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await lg((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Nm(e)}}}}cg.URL_SCHEME="downloads://";class pg{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=vm(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,bm(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>xm(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=xm(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function hg(e){return new pg(e)}function dg(e,t,n,r){!function(e){zh(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){zh(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),zh(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),zh(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function fg(e,t){null==t&&(t={});const n=null==t.fetchFunc?Td().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await dg(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await dg(s,t.onProgress,.5,1)}async function mg(e,t="",n,r){return gg((e=>fg(e,{requestInit:r})))(e,t,n)}function gg(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=lm[u]*Wh(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=hm(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Tm.registerSaveRouter((e=>Td().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(cg.URL_SCHEME)?function(e="model"){return new cg(e)}(e.slice(cg.URL_SCHEME.length)):null));class yg{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(zh("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Td().platform.fetch,zh(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&zh(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=wm(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Nm(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return vm(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Sm(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,bm(await fg(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function bg(e){return null!=e.match(yg.URL_SCHEME_REGEX)}yg.URL_SCHEME_REGEX=/^https?:\/\//;const xg=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>bg(e))):bg(e),n)return wg(e,t)}return null};function wg(e,t){return new yg(e,t)}function kg(e,t){return wg(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */Tm.registerSaveRouter(xg),Tm.registerLoadRouter(xg);class vg{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Ng{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Sg{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ig(e,t,n,r){const s=arguments;return new Sg(Tg(...s))}function Tg(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new vg(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new vg({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new vg({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Eg(e){return new Ng(e)}function $g(e){return new Ng(e)}var Cg={};function Ag(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function Rg(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function _g(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(Cg,"getBroadcastDims",(()=>Ag)),t(Cg,"getReductionAxes",(()=>Rg)),t(Cg,"assertAndGetBroadcastShape",(()=>_g));var Dg={};function Fg(e,t,n){if(Ph(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=em(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return im(e,t,r,n)}let Og;function Mg(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=Md("FromPixels",qf.backendName)){const n={pixels:e},r={numChannels:t};return qf.runKernel("FromPixels",n,r)}const[u,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,u,l).data;else if(r||n)c=e.data;else if(a||s||i){if(null==Og)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Og=new OffscreenCanvas(1,1).getContext("2d")}else Og=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Og.canvas.width=u,Og.canvas.height=l,Og.drawImage(e,0,0,u,l),c=Og.getImageData(0,0,u,l).data}if(4===t)p=new Int32Array(c);else{const e=u*l;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return Fg(p,[l,u,t],"int32")}function Lg(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function zg(e,t=3){let n=null;if(Td().getBool("WRAP_TO_IMAGEBITMAP")&&Lg(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Mg(n,t)}async function Bg(e,t){let n=rm(e,"img","toPixels");if(!(e instanceof If)){const e=n;n=ag(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=o[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*i,t[1]=s*i,t[2]=s*i):t[r]=s*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}t(Dg,"fromPixelsAsync",(()=>zg)),t(Dg,"toPixels",(()=>Bg)),t(Dg,"fromPixels",(()=>Pg));const Pg=am({fromPixels_:Mg});var Vg={};t(Vg,"assertParamsValid",(()=>Wg)),t(Vg,"maskToAxes",(()=>Ug)),t(Vg,"computeOutShape",(()=>Gg)),t(Vg,"stridesWithElidedDims",(()=>Hg)),t(Vg,"getNormalizedAxes",(()=>Kg)),t(Vg,"startIndicesWithElidedDims",(()=>Xg)),t(Vg,"stopIndicesWithElidedDims",(()=>Yg)),t(Vg,"startForAxis",(()=>Jg)),t(Vg,"stopForAxis",(()=>Qg)),t(Vg,"stridesForAxis",(()=>Zg)),t(Vg,"isSliceContinous",(()=>ey)),t(Vg,"computeFlatOffset",(()=>ty)),t(Vg,"parseSliceParams",(()=>ny)),t(Vg,"sliceInfo",(()=>ry));function Wg(e,t,n){const r=e.shape.length;zh(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),zh(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)zh(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function Ug(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Gg(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function Hg(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function qg(e,t,n){return n<=e?n:n-(t-1)}function jg(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Kg(e,t,n,r,s,a,o,i,u){const l=e.length;let c=new Array(l),p=new Array(l),h=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=Xg(o,u,l,r,e),p=Yg(i,u,l,s,e),h=Hg(a,u,l,e)}else for(let t=0;t<l;t++)c[t]=Jg(o,r,a,e,t,u),p[t]=Qg(i,s,a,e,t,u),h[t]=Zg(a,t,u);return{begin:c,end:p,strides:h}}function Xg(e,t,n,r,s){const a=[...s],o=jg(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=qg(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function Yg(e,t,n,r,s){const a=[...s],o=jg(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=qg(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=_h(0,a[e],s[e])}return a}function Zg(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function Jg(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=_h(0,o,u-1),o}function Qg(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=i>0?_h(0,o,u):_h(-1,o,u-1),o}function ey(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function ty(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function ny(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{zh(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(zh(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function ry(e,t,n,r,s,a,o,i,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[h.beginMask&1<<t,h.endMask&1<<t],a=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=sy(h.begin[t],0,h.strides[t],r,s,a),h.end[t]=sy(h.end[t],1,h.strides[t],r,s,a);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,u=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],u=!0):n?(i=1,u=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,u=!0),u){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==h.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function sy(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var ay={};t(ay,"Serializable",(()=>oy)),t(ay,"SerializationMap",(()=>iy)),t(ay,"registerClass",(()=>uy));class oy{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class iy{constructor(){this.classNameMap={}}static getMap(){return null==iy.instance&&(iy.instance=new iy),iy.instance}static register(e){iy.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function uy(e){zh(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),zh("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),zh(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),iy.register(e)}
/** @license See the LICENSE file. */var ly={};t(ly,"fromUint8ToStringArray",(()=>gx)),t(ly,"fromStringArrayToUint8",(()=>yx)),t(ly,"slice_util",(()=>Vg)),t(ly,"upcastType",(()=>Of)),t(ly,"segment_util",(()=>cy));var cy={};t(cy,"segOpComputeOptimalWindowSize",(()=>fy)),t(cy,"computeOutShape",(()=>my)),t(cy,"collectGatherOpShapeInfo",(()=>gy));var py={};t(py,"PARALLELIZE_THRESHOLD",(()=>hy)),t(py,"computeOptimalWindowSize",(()=>dy));const hy=30;function dy(e){return e<=hy?e:dd(e,Math.floor(Math.sqrt(e)))}function fy(e,t){let n,r=!1;for(e<=hy?(n=e,r=!0):n=dd(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=dd(e,n+1);return n}function my(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function gy(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}var yy={};function by(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function xy(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function wy(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function ky(e,t){return xy(e,t.map((e=>1)),t)}function vy(e,t,n){zh(by(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Ny(e,t){if(by(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function Sy(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Iy(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(yy,"axesAreInnerMostDims",(()=>by)),t(yy,"combineLocations",(()=>xy)),t(yy,"computeOutAndReduceShapes",(()=>wy)),t(yy,"expandShapeToKeepDim",(()=>ky)),t(yy,"assertAxesAreInnerMostDims",(()=>vy)),t(yy,"getAxesPermutation",(()=>Ny)),t(yy,"getUndoAxesPermutation",(()=>Sy)),t(yy,"getInnerMostAxes",(()=>Iy));var Ty={};function Ey(e,t){const n=e[0].length;e.forEach(((e,t)=>{zh(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),zh(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)zh(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function $y(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t(Ty,"assertParamsConsistent",(()=>Ey)),t(Ty,"computeOutShape",(()=>$y));var Cy={};function Ay(e,t,n,r,s="NHWC",a){return Dy(e,[...t,e[3]],n,a,r,null,null,Wy(s))}function Ry(e,t,n,r,s,a,o="channelsLast"){const[i,u]=My(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return Dy(e,l,n,r,s,a,!1,o)}function _y(e,t,n,r,s,a,o="NDHWC"){const[i,u,l]=Ly(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,u,l,e[1],e[1]]}return Fy(e,c,n,r,s,!1,p,a)}function Dy(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[h,d,,f]=t,[m,g]=My(n),[y,b]=My(r),x=zy(h,y),w=zy(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Oy(e,t,n));const a=e[0],o=e[1],i=By((a-t+2*r)/n+1,s),u=By((o-t+2*r)/n+1,s);return[i,u]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);l={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=By((t-a+h+d)/r+1,i),p=By((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[u,S,v,N]:"channelsLast"===i&&(I=[u,v,N,S]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function Fy(e,t,n,r,s,a=!1,o="channelsLast",i){let[u,l,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=Ly(n),[w,k,v]=Ly(r),N=zy(d,w),S=zy(f,k),I=zy(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,s,a,o,i,u,l,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Oy(e,t,r));const o=e[0],i=e[1],u=e[2],l=By((o-t+2*s)/r+1,a),c=By((i-t+2*s)/r+1,a),p=By((u-t+2*s)/r+1,a);return[l,c,p,n]}([t,n,r,1],i,1,s,e,c);h=a[0],d=a[1],f=a[2]}else if("same"===e){h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+u-n,m=(f-1)*o+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,l,c,p,y,b,x,N,S,I,i),A=a?g*h:g;let R;return"channelsFirst"===o?R=[u,A,E,$,C]:"channelsLast"===o&&(R=[u,E,$,C,A]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Oy(e,t,n,r=1){const s=zy(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function My(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Ly(e){return"number"==typeof e?[e,e,e]:e}function zy(e,t){return t<=1?e:e+(e-1)*(t-1)}function By(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Py(e){const[t,n,r]=My(e);return 1===t&&1===n&&1===r}function Vy(e,t){return Py(e)||Py(t)}function Wy(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Uy(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)zh(Hh(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{zh(Hh(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(Cy,"computeDilation2DInfo",(()=>Ay)),t(Cy,"convertConv2DDataFormat",(()=>Wy)),t(Cy,"computeConv2DInfo",(()=>Dy)),t(Cy,"computePool2DInfo",(()=>Ry)),t(Cy,"computePool3DInfo",(()=>_y)),t(Cy,"computeConv3DInfo",(()=>Fy)),t(Cy,"computeDefaultPad",(()=>Oy)),t(Cy,"tupleValuesAreOne",(()=>Py)),t(Cy,"eitherStridesOrDilationsAreOne",(()=>Vy)),t(Cy,"checkPadOnDimRoundingMode",(()=>Uy));var Gy={};t(Gy,"getFusedDyActivation",(()=>tb)),t(Gy,"getFusedBiasGradient",(()=>nb)),t(Gy,"applyActivation",(()=>rb)),t(Gy,"shouldFuse",(()=>sb));const Hy=am({elu_:function(e){const t={x:rm(e,"x","elu","float32")};return qf.runKernel("Elu",t)}});const qy=am({leakyRelu_:function(e,t=.2){const n={x:rm(e,"x","leakyRelu")},r={alpha:t};return qf.runKernel("LeakyRelu",n,r)}});const jy=am({mul_:function(e,t){let n=rm(e,"a","mul"),r=rm(t,"b","mul");[n,r]=Lf(n,r);const s={a:n,b:r};return qf.runKernel("Multiply",s)}});const Ky=am({prelu_:function(e,t){const n={x:rm(e,"x","prelu"),alpha:rm(t,"alpha","prelu")};return qf.runKernel("Prelu",n)}});const Xy=am({relu_:function(e){const t={x:rm(e,"x","relu")};return qf.runKernel("Relu",t)}});const Yy=am({relu6_:function(e){const t={x:rm(e,"x","relu6")};return qf.runKernel("Relu6",t)}});const Zy=am({reshape_:function(e,t){const n={x:rm(e,"x","reshape","string_or_numeric")},r={shape:t};return qf.runKernel("Reshape",n,r)}});const Jy=am({sigmoid_:function(e){const t={x:rm(e,"x","sigmoid","float32")};return qf.runKernel("Sigmoid",t)}});const Qy=am({step_:function(e,t=0){const n={x:rm(e,"x","step")},r={alpha:t};return qf.runKernel("Step",n,r)}});const eb=am({sum_:function(e,t=null,n=!1){let r=rm(e,"x","sum");"bool"===r.dtype&&(r=ag(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return qf.runKernel("Sum",s,a)}});function tb(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return jy(e,Qy(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function nb(e,t){let n=t;const r=Rg(e.shape,t.shape);return r.length>0&&(n=eb(n,r)),Zy(n,e.shape)}function rb(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Xy(e);if("elu"===t)return Hy(e);if("relu6"===t)return Yy(e);if("prelu"===t)return Ky(e,n);if("leakyrelu"===t)return qy(e,r);if("sigmoid"===t)return Jy(e);throw new Error(`Unknown fused activation ${t}.`)}const sb=(e,t)=>!(e>0)||"linear"===t;var ab,ob,ib={};function ub(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],o=r[r.length-n.length+s],i=r[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${i}`)}else r[o]=a}return r}function lb(e){const t={FIRST_DIM_SIZE:ab.FIRST_DIM_SIZE,VALUE_ROWIDS:ab.VALUE_ROWIDS,ROW_LENGTHS:ab.ROW_LENGTHS,ROW_SPLITS:ab.ROW_SPLITS,ROW_LIMITS:ab.ROW_LIMITS,ROW_STARTS:ab.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function cb(e){return 0===e.length?0:e[0]===ab.FIRST_DIM_SIZE?e.length-1:e.length}function pb(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}t(ib,"RowPartitionType",(()=>ab)),t(ib,"combineRaggedTensorToTensorShapes",(()=>ub)),t(ib,"getRowPartitionTypesHelper",(()=>lb)),t(ib,"getRaggedRank",(()=>cb)),t(ib,"validateDefaultValueShape",(()=>pb)),(ob=ab||(ab={}))[ob.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",ob[ob.VALUE_ROWIDS=1]="VALUE_ROWIDS",ob[ob.ROW_LENGTHS=2]="ROW_LENGTHS",ob[ob.ROW_SPLITS=3]="ROW_SPLITS",ob[ob.ROW_LIMITS=4]="ROW_LIMITS",ob[ob.ROW_STARTS=5]="ROW_STARTS";var hb={};function db(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(hb,"getImageCenter",(()=>db));var fb={};function mb(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function gb(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function yb(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function bb(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function xb(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}t(fb,"getReshaped",(()=>mb)),t(fb,"getPermuted",(()=>gb)),t(fb,"getReshapedPermuted",(()=>yb)),t(fb,"getSliceBeginCoords",(()=>bb)),t(fb,"getSliceSize",(()=>xb));var wb={};function kb(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===Wh(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,u=s.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=i[e],u.push(i[e]);const c=[...fd(e.shape).map((e=>e/l)),1].slice(0,a);return[u,o,l,c]}t(wb,"prepareAndValidate",(()=>kb));var vb={};function Nb(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function Sb(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Nb(n,t,e)}function Ib(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:Wh(t.shape)/i,sliceSize:o,strides:[...fd(n.slice(0,s)),1],outputSize:Wh(n)}}t(vb,"validateUpdateShape",(()=>Nb)),t(vb,"validateInput",(()=>Sb)),t(vb,"calculateShapes",(()=>Ib));var Tb={};t(Tb,"SELU_SCALEALPHA",(()=>Eb)),t(Tb,"SELU_SCALE",(()=>$b));const Eb=1.7580993408473768,$b=1.0507009873554805;var Cb={};t(Cb,"ERF_P",(()=>Ab)),t(Cb,"ERF_A1",(()=>Rb)),t(Cb,"ERF_A2",(()=>_b)),t(Cb,"ERF_A3",(()=>Db)),t(Cb,"ERF_A4",(()=>Fb)),t(Cb,"ERF_A5",(()=>Ob));const Ab=.3275911,Rb=.254829592,_b=-.284496736,Db=1.421413741,Fb=-1.453152027,Ob=1.061405429;var Mb={};function Lb(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function zb(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Bb(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Pb(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Vb(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Wb(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Ub(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Gb(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(Mb,"mergeRealAndImagArrays",(()=>Lb)),t(Mb,"splitRealAndImagArrays",(()=>zb)),t(Mb,"complexWithEvenIndex",(()=>Bb)),t(Mb,"complexWithOddIndex",(()=>Pb)),t(Mb,"getComplexWithIndex",(()=>Vb)),t(Mb,"assignToTypedArray",(()=>Wb)),t(Mb,"exponents",(()=>Ub)),t(Mb,"exponent",(()=>Gb));var Hb={};t(Hb,"decodeEinsumEquation",(()=>jb)),t(Hb,"getEinsumPermutation",(()=>Kb)),t(Hb,"checkEinsumDimSizes",(()=>Xb)),t(Hb,"getEinsumComputePath",(()=>Yb)),t(Hb,"isIdentityPermutation",(()=>Zb));const qb=/->/g;function jb(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(qb,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split("->");zh(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=r.split(","),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const u=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(i.indexOf(a[e][t]))}const l=i.length,c=[];for(let e=s.length;e<l;++e)c.push(e);return{allDims:i,summedDims:c,idDims:u}}function Kb(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Xb(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:zh(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function Yb(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=Jb(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function Zb(e){return e.every(((e,t)=>e===t))}function Jb(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var Qb={};function ex(e,t,n=0){let r=[];if("number"==typeof t)zh(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{zh(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}zh(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}t(Qb,"prepareSplitSize",(()=>ex));var tx={};function nx(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function rx(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function sx(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(tx,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>nx)),t(tx,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>rx)),t(tx,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>sx));var ax={};function ox(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function ix(e,t){return`size ${e} must be non-negative, not ${t}`}function ux(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function lx(e,t){return`Input to reshape is a SparseTensor with ${Wh(e)}\n  dense values, but the requested shape requires a multiple of ${Wh(t)}. inputShape=${e} outputShape= ${t}`}function cx(e,t){return`Input to reshape is a tensor with ${Wh(e)} dense values, but the requested shape has ${Wh(t)}. inputShape=${e} outputShape=${t}`}t(ax,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>ox)),t(ax,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>ix)),t(ax,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>ux)),t(ax,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>lx)),t(ax,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>cx));var px={};function hx(){return"segment ids must be >= 0"}function dx(){return"segment ids are not increasing"}function fx(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function mx(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function gx(e){try{return e.map((e=>lf(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function yx(e){return e.map((e=>uf(e)))}t(px,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>hx)),t(px,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>dx)),t(px,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>fx)),t(px,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>mx)),n(ly,yy),n(ly,Cg),n(ly,Ty),n(ly,Cy),n(ly,Gy),n(ly,{}),n(ly,ib),n(ly,py),n(ly,hb),n(ly,fb),n(ly,wb),n(ly,vb),n(ly,Tb),n(ly,Cb),n(ly,Rd),n(ly,Mb),n(ly,Hb),n(ly,Qb),n(ly,tx),n(ly,ax),n(ly,px);var bx={};function xx(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||wx)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function wx(e,t){return e>t?1:e<t?-1:0}function kx(e,t,n,r,s){return Sx(e,t,n,r,s,0)}function vx(e,t,n,r,s,a){return Sx(e,t,n,r,s,0,!1,a,!0)}function Nx(e,t,n,r,s,a){return Sx(e,t,n,r,s,a,!0)}function Sx(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Ex);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=Ix(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*Tx(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&xx(l,t,Ex))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),u&&(m.validOutputs=d),m}function Ix(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),f=(p-l)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(u,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Tx(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Ex(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function $x(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=sg(e,"int32"),s=sg([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}function Cx(){return qf}function Ax(){return qf.memory()}function Rx(e,t){return qf.tidy(e,t)}function _x(e){Pf(e).forEach((e=>e.dispose()))}function Dx(e){return qf.keep(e)}function Fx(e,t,n=1){return qf.registerBackend(e,t,n)}function Ox(e,t){zh(hd(e),(()=>"The f passed in variableGrads(f) must be a function")),zh(null==t||Array.isArray(t)&&t.every((e=>e instanceof Ef)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in qf.registeredVariables)t.push(qf.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;zh((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:o}=qf.gradients(e,t,null,!0);zh(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),zh(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:a,grads:i}}function Mx(e){return qf.customGrad(e)}t(bx,"nonMaxSuppressionV3Impl",(()=>kx)),t(bx,"nonMaxSuppressionV4Impl",(()=>vx)),t(bx,"nonMaxSuppressionV5Impl",(()=>Nx)),t(bx,"whereImpl",(()=>$x)),function(e){Nf=e}((function(e){Td().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}));var Lx={};t(Lx,"spectral",(()=>wS)),t(Lx,"signal",(()=>kS)),t(Lx,"image",(()=>vS)),t(Lx,"linalg",(()=>NS)),t(Lx,"losses",(()=>SS)),t(Lx,"sparse",(()=>IS)),t(Lx,"string",(()=>TS)),t(Lx,"abs",(()=>Zw)),t(Lx,"acos",(()=>Pk)),t(Lx,"acosh",(()=>Vk)),t(Lx,"add",(()=>Jx)),t(Lx,"addN",(()=>Wk)),t(Lx,"all",(()=>Uk)),t(Lx,"any",(()=>Gk)),t(Lx,"argMax",(()=>Hk)),t(Lx,"argMin",(()=>qk)),t(Lx,"asin",(()=>jk)),t(Lx,"asinh",(()=>Kk)),t(Lx,"atan",(()=>Xk)),t(Lx,"atan2",(()=>Yk)),t(Lx,"atanh",(()=>Zk)),t(Lx,"avgPool",(()=>Jk)),t(Lx,"avgPool3d",(()=>Qk)),t(Lx,"basicLSTMCell",(()=>tv)),t(Lx,"batchToSpaceND",(()=>nv)),t(Lx,"batchNorm",(()=>sv)),t(Lx,"batchNorm2d",(()=>av)),t(Lx,"batchNorm3d",(()=>ov)),t(Lx,"batchNorm4d",(()=>iv)),t(Lx,"bincount",(()=>Dw)),t(Lx,"broadcastArgs",(()=>uv)),t(Lx,"broadcastTo",(()=>Pw)),t(Lx,"buffer",(()=>sg)),t(Lx,"cast",(()=>ag)),t(Lx,"ceil",(()=>lv)),t(Lx,"clipByValue",(()=>cv)),t(Lx,"clone",(()=>og)),t(Lx,"complex",(()=>om)),t(Lx,"concat",(()=>zx)),t(Lx,"concat1d",(()=>pv)),t(Lx,"concat2d",(()=>hv)),t(Lx,"concat3d",(()=>dv)),t(Lx,"concat4d",(()=>fv)),t(Lx,"conv1d",(()=>mv)),t(Lx,"conv2d",(()=>Qx)),t(Lx,"conv2dTranspose",(()=>gv)),t(Lx,"conv3d",(()=>yv)),t(Lx,"conv3dTranspose",(()=>xv)),t(Lx,"cos",(()=>wv)),t(Lx,"cosh",(()=>kv)),t(Lx,"cumprod",(()=>vv)),t(Lx,"cumsum",(()=>Nv)),t(Lx,"denseBincount",(()=>Sv)),t(Lx,"depthToSpace",(()=>Iv)),t(Lx,"depthwiseConv2d",(()=>rw)),t(Lx,"diag",(()=>Tv)),t(Lx,"dilation2d",(()=>Ev)),t(Lx,"div",(()=>Lw)),t(Lx,"divNoNan",(()=>Cv)),t(Lx,"dot",(()=>Av)),t(Lx,"einsum",(()=>Rv)),t(Lx,"elu",(()=>Hy)),t(Lx,"equal",(()=>$v)),t(Lx,"erf",(()=>_v)),t(Lx,"euclideanNorm",(()=>Dv)),t(Lx,"exp",(()=>$k)),t(Lx,"expandDims",(()=>ik)),t(Lx,"expm1",(()=>Fv)),t(Lx,"eye",(()=>uk)),t(Lx,"fill",(()=>mw)),t(Lx,"floor",(()=>Ov)),t(Lx,"floorDiv",(()=>Mw)),t(Lx,"gather",(()=>Mv)),t(Lx,"greater",(()=>Ow)),t(Lx,"greaterEqual",(()=>Hw)),t(Lx,"imag",(()=>Bx)),t(Lx,"isFinite",(()=>Lv)),t(Lx,"isInf",(()=>zv)),t(Lx,"isNaN",(()=>Bv)),t(Lx,"leakyRelu",(()=>qy)),t(Lx,"less",(()=>Pv)),t(Lx,"lessEqual",(()=>Fw)),t(Lx,"linspace",(()=>Vv)),t(Lx,"localResponseNormalization",(()=>Wv)),t(Lx,"log",(()=>Sk)),t(Lx,"log1p",(()=>Ck)),t(Lx,"logSigmoid",(()=>Gv)),t(Lx,"logSoftmax",(()=>Hv)),t(Lx,"logSumExp",(()=>Rk)),t(Lx,"logicalAnd",(()=>qw)),t(Lx,"logicalNot",(()=>qv)),t(Lx,"logicalOr",(()=>jv)),t(Lx,"logicalXor",(()=>Kv)),t(Lx,"lowerBound",(()=>Zv)),t(Lx,"matMul",(()=>iw)),t(Lx,"max",(()=>Jw)),t(Lx,"maxPool",(()=>Jv)),t(Lx,"maxPool3d",(()=>Qv)),t(Lx,"maxPoolWithArgmax",(()=>eN)),t(Lx,"maximum",(()=>tN)),t(Lx,"mean",(()=>mk)),t(Lx,"meshgrid",(()=>nN)),t(Lx,"min",(()=>Qw)),t(Lx,"minimum",(()=>vk)),t(Lx,"mirrorPad",(()=>rN)),t(Lx,"mod",(()=>sN)),t(Lx,"moments",(()=>aN)),t(Lx,"mul",(()=>jy)),t(Lx,"multiRNNCell",(()=>oN)),t(Lx,"multinomial",(()=>iN)),t(Lx,"neg",(()=>lk)),t(Lx,"notEqual",(()=>gk)),t(Lx,"oneHot",(()=>uN)),t(Lx,"ones",(()=>yk)),t(Lx,"onesLike",(()=>lN)),t(Lx,"outerProduct",(()=>cN)),t(Lx,"pad",(()=>pN)),t(Lx,"pad1d",(()=>hN)),t(Lx,"pad2d",(()=>dN)),t(Lx,"pad3d",(()=>fN)),t(Lx,"pad4d",(()=>mN)),t(Lx,"pool",(()=>yN)),t(Lx,"pow",(()=>ek)),t(Lx,"prelu",(()=>Ky)),t(Lx,"print",(()=>ig)),t(Lx,"prod",(()=>bN)),t(Lx,"raggedGather",(()=>xN)),t(Lx,"raggedRange",(()=>wN)),t(Lx,"raggedTensorToTensor",(()=>kN)),t(Lx,"rand",(()=>vN)),t(Lx,"randomGamma",(()=>TN)),t(Lx,"randomNormal",(()=>EN)),t(Lx,"randomStandardNormal",(()=>$N)),t(Lx,"randomUniform",(()=>CN)),t(Lx,"range",(()=>Ww)),t(Lx,"real",(()=>Px)),t(Lx,"reciprocal",(()=>AN)),t(Lx,"relu",(()=>Xy)),t(Lx,"relu6",(()=>Yy)),t(Lx,"reshape",(()=>Zy)),t(Lx,"reverse",(()=>Kx)),t(Lx,"reverse1d",(()=>RN)),t(Lx,"reverse2d",(()=>_N)),t(Lx,"reverse3d",(()=>DN)),t(Lx,"reverse4d",(()=>FN)),t(Lx,"round",(()=>Bw)),t(Lx,"rsqrt",(()=>ON)),t(Lx,"scalar",(()=>Xx)),t(Lx,"selu",(()=>MN)),t(Lx,"separableConv2d",(()=>LN)),t(Lx,"setdiff1dAsync",(()=>zN)),t(Lx,"sigmoid",(()=>Jy)),t(Lx,"sign",(()=>BN)),t(Lx,"sin",(()=>PN)),t(Lx,"sinh",(()=>VN)),t(Lx,"slice",(()=>Vx)),t(Lx,"slice1d",(()=>WN)),t(Lx,"slice2d",(()=>UN)),t(Lx,"slice3d",(()=>GN)),t(Lx,"slice4d",(()=>HN)),t(Lx,"softmax",(()=>qN)),t(Lx,"softplus",(()=>Uv)),t(Lx,"spaceToBatchND",(()=>gN)),t(Lx,"fft",(()=>Hx)),t(Lx,"ifft",(()=>jx)),t(Lx,"irfft",(()=>Yx)),t(Lx,"rfft",(()=>qx)),t(Lx,"split",(()=>Wx)),t(Lx,"sqrt",(()=>tk)),t(Lx,"square",(()=>nk)),t(Lx,"squaredDifference",(()=>Tk)),t(Lx,"squeeze",(()=>ak)),t(Lx,"stack",(()=>jw)),t(Lx,"step",(()=>Qy)),t(Lx,"stridedSlice",(()=>jN)),t(Lx,"sub",(()=>zw)),t(Lx,"sum",(()=>eb)),t(Lx,"tan",(()=>KN)),t(Lx,"tanh",(()=>ev)),t(Lx,"tensor",(()=>um)),t(Lx,"tensor1d",(()=>cw)),t(Lx,"tensor2d",(()=>gw)),t(Lx,"tensor3d",(()=>Fg)),t(Lx,"tensor4d",(()=>XN)),t(Lx,"tensor5d",(()=>YN)),t(Lx,"tensor6d",(()=>ZN)),t(Lx,"tile",(()=>kw)),t(Lx,"topk",(()=>JN)),t(Lx,"truncatedNormal",(()=>QN)),t(Lx,"unique",(()=>eS)),t(Lx,"unsortedSegmentSum",(()=>tS)),t(Lx,"unstack",(()=>Kw)),t(Lx,"upperBound",(()=>nS)),t(Lx,"variable",(()=>rS)),t(Lx,"where",(()=>Vw)),t(Lx,"whereAsync",(()=>sS)),t(Lx,"zeros",(()=>Ux)),t(Lx,"zerosLike",(()=>Gx)),t(Lx,"op",(()=>am)),t(Lx,"OP_SCOPE_SUFFIX",(()=>"__op")),t(Lx,"fused",(()=>Zx));const zx=am({concat_:function(e,t=0){zh(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=sm(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return og(n[0]);const r=n,s={axis:t};return qf.runKernel("Concat",r,s)}});const Bx=am({imag_:function(e){const t={input:rm(e,"input","imag")};return qf.runKernel("Imag",t)}});const Px=am({real_:function(e){const t={input:rm(e,"input","real")};return qf.runKernel("Real",t)}});const Vx=am({slice_:function(e,t,n){const r=rm(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return qf.runKernel("Slice",s,a)}});const Wx=am({split_:function(e,t,n=0){const r={x:rm(e,"x","split")},s={numOrSizeSplits:t,axis:n};return qf.runKernel("SplitV",r,s)}});function Ux(e,t="float32"){if("complex64"===t){const t=Ux(e,"float32"),n=Ux(e,"float32");return om(t,n)}const n=bd(Wh(e),t);return qf.makeTensor(n,e,t)}const Gx=am({zerosLike_:function(e){const t={x:rm(e,"x","zerosLike")};return qf.runKernel("ZerosLike",t)}});const Hx=am({fft_:function(e){zh("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return qf.runKernel("FFT",t)}});const qx=am({rfft_:function(e,t){zh("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=Vx(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=zx([e,Ux(r)],e.shape.length-1),n=t}else s=e;const a=Gx(s),o=Zy(om(s,a),[r,n]),i=Hx(o),u=Math.floor(n/2)+1,l=Px(i),c=Bx(i),p=Wx(l,[u,n-u],l.shape.length-1),h=Wx(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,Zy(om(p[0],h[0]),d)}});const jx=am({ifft_:function(e){zh("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return qf.runKernel("IFFT",t)}});const Kx=am({reverse_:function(e,t){const n={x:rm(e,"x","reverse")},r={dims:t};return qf.runKernel("Reverse",n,r)}});function Xx(e,t){if((ad(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&ad(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return im(e,[],[],t)}const Yx=am({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Zy(e,[n,t]);r=jx(s)}else{const s=[n,2*(t-1)],a=Zy(Px(e),[n,t]),o=Zy(Bx(e),[n,t]),i=Kx(Vx(a,[0,1],[n,t-2]),1),u=jy(Kx(Vx(o,[0,1],[n,t-2]),1),Xx(-1)),l=zx([a,i],1),c=zx([o,u],1),p=Zy(om(l,c),[s[0],s[1]]);r=jx(p)}if(r=Px(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Zy(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var Zx={};t(Zx,"conv2d",(()=>nw)),t(Zx,"depthwiseConv2d",(()=>ow)),t(Zx,"matMul",(()=>uw));const Jx=am({add_:function(e,t){let n=rm(e,"a","add"),r=rm(t,"b","add");[n,r]=Lf(n,r);const s={a:n,b:r};return qf.runKernel("Add",s)}});const Qx=am({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=rm(e,"x","conv2d","float32"),u=rm(t,"filter","conv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Zy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),zh(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),zh(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),Uy("conv2d",r,o);const p="NHWC"===s?l.shape[3]:l.shape[1];zh(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),zh(Vy(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=qf.runKernel("Conv2D",h,d);return c?Zy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ew=am({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=Zy(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Zy(t,[1,t.shape[0],t.shape[1],t.shape[2]])),zh(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),zh(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),zh(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];zh(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),zh(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Uy("conv2dDerFilter",s,o);const p={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return qf.runKernel("Conv2DBackpropFilter",p,h)}});const tw=am({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){zh(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=Zy(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),zh(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),zh(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),zh(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];zh(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),zh(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Uy("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=qf.runKernel("Conv2DBackpropInput",h,d);return l?Zy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const nw=am({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===sb(qf.state.gradientDepth,u)){zh("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=Qx(e,t,n,r,s,a,o);return null!=i&&(p=Jx(p,i)),rb(p,u,l,c)}const p=rm(e,"x","conv2d","float32"),h=rm(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Zy(p,[1,p.shape[0],p.shape[1],p.shape[2]])),zh(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),zh(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),Uy("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];zh(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),zh(Vy(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=Dy(d.shape,h.shape,n,a,r,o);let y,b;if(null!=i&&(y=rm(i,"bias","fused conv2d"),[y]=Lf(y,p),"NHWC"===s?_g(g.outShape,y.shape):(zh(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),zh(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(zh(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)zh(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{_g(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=rm(l,"prelu weights","fused conv2d")}const x=(e,t)=>{zh("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,l,c]=t,p=tb(e,l,u);zh(Py(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[tw(i.shape,p,o,n,r),ew(i,p,o.shape,n,r)];if(null!=c){const e=nb(c,p);h.push(e)}return h},w={x:d,filter:h,bias:y,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Mx(((e,t,n)=>{let r=qf.runKernel("FusedConv2D",w,k);return n([t,e,r]),f&&(r=Zy(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=Mx(((e,t,n,r)=>{let s=qf.runKernel("FusedConv2D",w,k);return r([t,e,s,n]),f&&(s=Zy(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,y)}}});const rw=am({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=rm(e,"x","depthwiseConv2d","float32"),u=rm(t,"filter","depthwiseConv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Zy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),zh(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),zh(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const p="NHWC"===s?l.shape[3]:l.shape[1];zh(p===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Uy("depthwiseConv2d",r,o);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=qf.runKernel("DepthwiseConv2dNative",h,d);return c?Zy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const sw=am({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=Zy(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Zy(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return qf.runKernel("DepthwiseConv2dNativeBackpropFilter",l,c)}});const aw=am({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=Zy(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=qf.runKernel("DepthwiseConv2dNativeBackpropInput",l,c);return u?Zy(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const ow=am({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===sb(qf.state.gradientDepth,u)){let p=rw(e,t,n,r,s,a,o);return null!=i&&(p=Jx(p,i)),rb(p,u,l,c)}const p=rm(e,"x","depthwiseConv2d","float32"),h=rm(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Zy(p,[1,p.shape[0],p.shape[1],p.shape[2]])),zh(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),zh(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),zh(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),zh(Vy(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Uy("fused depthwiseConv2d",r,o);const m=Dy(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=rm(i,"bias","fused conv2d"),[g]=Lf(g,p),_g(m.outShape,g.shape)),null!=l&&(y=rm(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{zh(Py(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,l,c]=t,p=tb(e,l,u),h=aw(i.shape,p,s,n,r,a,o),d=sw(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,nb(g,p)]}return[h,d]},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Mx(((e,t,n)=>{let r=qf.runKernel("FusedDepthwiseConv2D",x,w);return n([t,e,r]),f&&(r=Zy(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=Mx(((e,t,n,r)=>{let s=qf.runKernel("FusedDepthwiseConv2D",x,w);return r([t,e,s,n]),f&&(s=Zy(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,g)}}});const iw=am({matMul_:function(e,t,n=!1,r=!1){let s=rm(e,"a","matMul"),a=rm(t,"b","matMul");[s,a]=Lf(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return qf.runKernel("BatchMatMul",o,i)}});const uw=am({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===sb(qf.state.gradientDepth,a)){let u=iw(e,t,n,r);return null!=s&&(u=Jx(u,s)),rb(u,a,o,i)}let u=rm(e,"a","fused matMul"),l=rm(t,"b","fused matMul");[u,l]=Lf(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],p=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=Wh(f),y=Wh(m);zh(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=_g(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,d]),x=Zy(u,n?[g,c,h]:[g,h,c]),w=Zy(l,r?[y,d,p]:[y,p,d]);let k,v;null!=s&&(k=rm(s,"bias","fused matMul"),[k]=Lf(k,u),_g(b,k.shape)),null!=o&&(v=rm(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,u,l]=t,c=tb(Zy(e,u.shape),u,a);let p,h;if(n||r?!n&&r?(p=iw(c,i,!1,!1),h=iw(c,o,!0,!1)):n&&!r?(p=iw(i,c,!1,!0),h=iw(o,c,!1,!1)):(p=iw(i,c,!0,!0),h=iw(c,o,!0,!0)):(p=iw(c,i,!1,!0),h=iw(o,c,!0,!1)),null!=s){return[p,h,nb(l,c)]}return[p,h]},S={a:x,b:w,bias:k,preluActivationWeights:v},I={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=Mx(((e,t,n)=>{const r=qf.runKernel("_FusedMatMul",S,I);return n([e,t,r]),{value:Zy(r,b),gradFunc:N}}));return e(x,w)}{const e=Mx(((e,t,n,r)=>{const s=qf.runKernel("_FusedMatMul",S,I);return r([e,t,s,n]),{value:Zy(s,b),gradFunc:N}}));return e(x,w,k)}}});var lw={};function cw(e,t){Ph(e);const n=em(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return im(e,null,n,t)}function pw(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function hw(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return cw(s,"float32")}t(lw,"enclosingPowerOfTwo",(()=>pw)),t(lw,"cosineWindow",(()=>hw));const dw=am({hammingWindow_:function(e){return hw(e,.54,.46)}});const fw=am({hannWindow_:function(e){return hw(e,.5,.5)}});function mw(e,t,n){const r={shape:e,value:t,dtype:n};return qf.runKernel("Fill",{},r)}function gw(e,t,n){if(Ph(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=em(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return im(e,t,r,n)}const yw=am({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(Vx(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=zx([Vx(e,a,t-r),mw([r],s)]);o.push(i),a+=n}return 0===o.length?gw([],[0,t]):Zy(zx(o),[o.length,t])}});const bw=am({stft_:function(e,t,n,r,s=fw){null==r&&(r=pw(t));const a=yw(e,t,n),o=jy(a,s(t));return qx(o,r)}});const xw=am({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=rm(e,"image","cropAndResize"),i=rm(t,"boxes","cropAndResize","float32"),u=rm(n,"boxInd","cropAndResize","int32"),l=i.shape[0];zh(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),zh(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),zh(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),zh(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),zh(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),zh("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return qf.runKernel("CropAndResize",c,p)}});const ww=am({flipLeftRight_:function(e){const t=rm(e,"image","flipLeftRight","float32");zh(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return qf.runKernel("FlipLeftRight",n,{})}});const kw=am({tile_:function(e,t){const n=rm(e,"x","tile","string_or_numeric");zh(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return qf.runKernel("Tile",r,s)}});const vw=am({grayscaleToRGB_:function(e){const t=rm(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];zh(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),zh(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,kw(t,s)}});const Nw=am({rotateWithOffset_:function(e,t,n=0,r=.5){const s=rm(e,"image","rotateWithOffset","float32");zh(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return qf.runKernel("RotateWithOffset",a,o)}});function Sw(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),zh(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),zh(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),zh(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),zh(1===t.rank,(()=>"scores must be a 1D tensor")),zh(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),zh(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Iw=am({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=rm(e,"boxes","nonMaxSuppression","float32"),o=rm(t,"scores","nonMaxSuppression","float32"),i=Sw(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return qf.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});const Tw=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=rm(e,"boxes","nonMaxSuppressionAsync"),o=rm(t,"scores","nonMaxSuppressionAsync"),i=Sw(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=kx(l,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),cw(p,"int32")};const Ew=am({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=rm(e,"boxes","nonMaxSuppression"),i=rm(t,"scores","nonMaxSuppression"),u=Sw(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=qf.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const $w=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=rm(e,"boxes","nonMaxSuppressionAsync"),i=rm(t,"scores","nonMaxSuppressionAsync"),u=Sw(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:h,selectedScores:d}=Nx(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:cw(h,"int32"),selectedScores:cw(d)}};const Cw=am({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=rm(e,"boxes","nonMaxSuppression"),i=rm(t,"scores","nonMaxSuppression"),u=Sw(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=qf.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Aw=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=rm(e,"boxes","nonMaxSuppressionAsync"),i=rm(t,"scores","nonMaxSuppressionAsync"),u=Sw(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=vx(h,d,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:cw(f,"int32"),validOutputs:Xx(m,"int32")}};const Rw=am({resizeBilinear_:function(e,t,n=!1,r=!1){const s=rm(e,"images","resizeBilinear");zh(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),zh(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),zh(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Zy(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=qf.runKernel("ResizeBilinear",i,u);return o?Zy(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const _w=am({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=rm(e,"images","resizeNearestNeighbor");zh(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),zh(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),zh("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),zh(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Zy(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=qf.runKernel("ResizeNearestNeighbor",i,u);return o?Zy(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Dw=am({bincount_:function(e,t,n){const r=rm(e,"x","bincount"),s=rm(t,"weights","bincount");zh("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),zh(n>=0,(()=>`size must be non-negative, but got ${n}.`)),zh(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return qf.runKernel("Bincount",a,o)}});const Fw=am({lessEqual_:function(e,t){let n=rm(e,"a","lessEqual","string_or_numeric"),r=rm(t,"b","lessEqual","string_or_numeric");[n,r]=Lf(n,r),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("LessEqual",s)}});const Ow=am({greater_:function(e,t){let n=rm(e,"a","greater","string_or_numeric"),r=rm(t,"b","greater","string_or_numeric");[n,r]=Lf(n,r),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("Greater",s)}});const Mw=am({floorDiv_:function(e,t){let n=rm(e,"a","floorDiv"),r=rm(t,"b","floorDiv");[n,r]=Lf(n,r);const s={a:n,b:r};return qf.runKernel("FloorDiv",s)}});const Lw=am({div_:function(e,t){let n=rm(e,"a","div"),r=rm(t,"b","div");if([n,r]=Lf(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Mw(n,r);const s={a:n,b:r};return qf.runKernel("RealDiv",s,{})}});const zw=am({sub_:function(e,t){let n=rm(e,"a","sub"),r=rm(t,"b","sub");[n,r]=Lf(n,r);const s={a:n,b:r};return qf.runKernel("Sub",s)}});const Bw=am({round_:function(e){const t={x:rm(e,"x","round")};return qf.runKernel("Round",t)}});const Pw=am({broadcastTo_:function(e,t){let n=rm(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Zy(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return og(n);const o={x:n},i={reps:a};return qf.runKernel("Tile",o,i)}});const Vw=am({where_:function(e,t,n){const r=rm(t,"a","where"),s=rm(n,"b","where"),a=rm(e,"condition","where","bool"),o=_g(_g(a.shape,r.shape),s.shape),i={condition:Pw(a,o),t:Pw(r,o),e:Pw(s,o)};return qf.runKernel("Select",i)}});function Ww(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return qf.runKernel("Range",{},s)}const Uw=am({threshold_:function(e,t="binary",n=!1,r=.5){const s=rm(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,c=jy(cw([r]),255);if(zh(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),zh(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),zh("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),zh("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=Wx(s,[1,1,1],-1);const e=jy(o,.2989),t=jy(i,.587),n=jy(u,.114);l=Jx(Jx(e,t),n)}else l=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,u=cw([-1]),l=cw([0]),c=cw([0]);for(let p=0;p<e.size-1;p++){n=Vx(e,0,p+1),r=Vx(e,p+1),o=Lw(eb(n),t),i=Lw(eb(r),t);const h=eb(jy(n,Ww(0,n.size)));s=Lw(h,eb(n));const d=mw(r.shape,n.size),f=Jx(Ww(0,r.size),d),m=jy(r,f);a=Lw(eb(m),eb(r));const g=zw(s,a),y=zw(s,a),b=jy(o,i);c=jy(jy(b,g),y);const x=Ow(c,l);l=Vw(x,c,l),u=Vw(x,cw([p]),u)}return u}(Dw(ag(Bw(l),"int32"),um([]),256),a)}const p=n?Fw(l,c):Ow(l,c);return ag(jy(p,255),"int32")}});const Gw=am({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=rm(e,"image","transform","float32"),i=rm(t,"transforms","transform","float32");zh(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),zh(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),zh(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return qf.runKernel("Transform",u,l)}});const Hw=am({greaterEqual_:function(e,t){let n=rm(e,"a","greaterEqual","string_or_numeric"),r=rm(t,"b","greaterEqual","string_or_numeric");[n,r]=Lf(n,r),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("GreaterEqual",s)}});const qw=am({logicalAnd_:function(e,t){const n=rm(e,"a","logicalAnd","bool"),r=rm(t,"b","logicalAnd","bool");_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("LogicalAnd",s)}});const jw=am({stack_:function(e,t=0){const n=sm(e,"tensors","stack","string_or_numeric");zh(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&zh(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return qf.runKernel("Pack",r,s)}});const Kw=am({unstack_:function(e,t=0){const n=rm(e,"x","unstack","string_or_numeric");zh(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return qf.runKernel("Unpack",r,s)}});const Xw=am({bandPart_:function(e,t,n){zh(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),zh(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=rm(e,"a","bandPart");zh(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Zy(Ww(0,a,1,"int32"),[-1,1]),u=Ww(0,o,1,"int32"),l=zw(i,u),c=qw(Fw(l,Xx(+t,"int32")),Hw(l,Xx(-n,"int32"))),p=Ux([a,o],r.dtype);return Zy(jw(Kw(Zy(r,[-1,a,o])).map((e=>Vw(c,e,p)))),s)}});var Yw={};t(Yw,"norm",(()=>sk));const Zw=am({abs_:function(e){const t=rm(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return qf.runKernel("ComplexAbs",e)}{const e={x:t};return qf.runKernel("Abs",e)}}});const Jw=am({max_:function(e,t=null,n=!1){const r={x:rm(e,"x","max")},s={reductionIndices:t,keepDims:n};return qf.runKernel("Max",r,s)}});const Qw=am({min_:function(e,t=null,n=!1){const r={x:rm(e,"x","min")},s={axis:t,keepDims:n};return qf.runKernel("Min",r,s)}});const ek=am({pow_:function(e,t){let n=rm(e,"base","pow"),r=rm(t,"exp","pow");[n,r]=Lf(n,r);const s={a:n,b:r};return qf.runKernel("Pow",s)}});const tk=am({sqrt_:function(e){const t={x:rm(e,"x","sqrt","float32")};return qf.runKernel("Sqrt",t)}});const nk=am({square_:function(e){const t=rm(e,"x","square");return qf.runKernel("Square",{x:t},{})}});function rk(e,t,n=null){if(0===e.rank)return Zw(e);if(1!==e.rank&&null===n)return rk(Zy(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return eb(Zw(e),n);if(t===1/0)return Jw(Zw(e),n);if(t===-1/0)return Qw(Zw(e),n);if("euclidean"===t||2===t)return tk(eb(ek(Zw(e),Xx(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Jw(eb(Zw(e),n[0]),n[1]-1);if(t===1/0)return Jw(eb(Zw(e),n[1]),n[0]);if(t===-1/0)return Qw(eb(Zw(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return tk(eb(nk(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const sk=am({norm_:function(e,t="euclidean",n=null,r=!1){const s=rk(e=rm(e,"x","norm"),t,n);let a=s.shape;if(r){const t=Jh(n,e.shape);a=ky(s.shape,t)}return Zy(s,a)}});const ak=am({squeeze_:function(e,t){const n=rm(e,"x","squeeze","string_or_numeric");return Zy(n,Qh(n.shape,t).newShape)}});const ok=am({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,zh(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)zh(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Wx(e,e.shape[0],0).map((e=>ak(e,[0])));zh(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(qf.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=jy(eb(jy(n[r],e)),n[r]);e=zw(e,t)}return Lw(e,sk(e,"euclidean"))})));return t?jw(n,0):n}});const ik=am({expandDims_:function(e,t=0){const n=rm(e,"x","expandDims","string_or_numeric");zh(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return qf.runKernel("ExpandDims",r,s)}});const uk=am({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=sg([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=Zy(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return kw(ik(o,0),[n[0],1,1]);if(2===n.length)return kw(ik(ik(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return kw(ik(ik(ik(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const lk=am({neg_:function(e){const t={x:rm(e,"x","neg")};return qf.runKernel("Neg",t)}});var ck={};t(ck,"transpose",(()=>pk));const pk=am({transpose_:function(e,t,n){const r=rm(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),zh(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{zh(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?Rx((()=>{let e=Px(r),t=Bx(r);return e=qf.runKernel("Transpose",{x:e},a),t=qf.runKernel("Transpose",{x:t},a),n&&(t=lk(t)),om(e,t)})):qf.runKernel("Transpose",s,a)}});function hk(e,t=!1){return qf.tidy((()=>{zh(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=uk(n),a=og(e);const o=gw([[1]],[1,1]);let i=og(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=qf.tidy((()=>{const t=Vx(a,[e,e],[n-e,1]),u=sk(t),l=Vx(a,[e,e],[1,1]),c=Vw(Ow(l,0),gw([[-1]]),gw([[1]])),p=zw(l,jy(c,u)),h=Lw(t,p);i=1===h.shape[0]?og(o):zx([o,Vx(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=lk(Lw(iw(c,p),u)),f=Vx(a,[e,0],[n-e,r]),m=jy(d,i),g=pk(i);if(0===e)a=zw(f,iw(m,iw(g,f)));else{const t=zw(f,iw(m,iw(g,f)));a=zx([Vx(a,[0,0],[e,r]),t],0)}const y=pk(m),b=Vx(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=zw(b,iw(iw(b,i),y));else{const t=zw(b,iw(iw(b,i),y));s=zx([Vx(s,[0,0],[n,e]),t],1)}return[i,a,s]})),_x([t,u,l])}return!t&&n>r&&(s=Vx(s,[0,0],[n,r]),a=Vx(a,[0,0],[r,r])),[s,a]}))}const dk=am({qr_:function(e,t=!1){if(zh(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return hk(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Kw(Zy(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=hk(e,t);s.push(n),a.push(r)}));return[Zy(jw(s,0),e.shape),Zy(jw(a,0),e.shape)]}}});var fk;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(fk||(fk={}));const mk=am({mean_:function(e,t=null,n=!1){const r={x:rm(e,"x","mean")},s={axis:t,keepDims:n};return qf.runKernel("Mean",r,s)}});const gk=am({notEqual_:function(e,t){let n=rm(e,"a","notEqual","string_or_numeric"),r=rm(t,"b","notEqual","string_or_numeric");[n,r]=Lf(n,r),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("NotEqual",s)}});function yk(e,t="float32"){if("complex64"===t){const t=yk(e,"float32"),n=Ux(e,"float32");return om(t,n)}const n=yd(Wh(e),t);return qf.makeTensor(n,e,t)}const bk=am({computeWeightedLoss_:function(e,t,n=fk.SUM_BY_NONZERO_WEIGHTS){const r=rm(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=rm(t,"weights","computeWeightedLoss"));const a=null==s?r:jy(r,s);if(n===fk.NONE)return a;if(n===fk.SUM)return eb(a);if(n===fk.MEAN){if(null==s)return mk(a);{const e=r.size/s.size,t=Lw(eb(a),eb(s));return e>1?Lw(t,Xx(e)):t}}if(n===fk.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Lw(eb(a),Xx(r.size));{const e=jy(s,yk(r.shape)),t=ag(eb(gk(e,Xx(0))),"float32");return Lw(eb(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const xk=am({absoluteDifference_:function(e,t,n,r=fk.SUM_BY_NONZERO_WEIGHTS){const s=rm(e,"labels","absoluteDifference"),a=rm(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=rm(n,"weights","absoluteDifference")),Bh(s.shape,a.shape,"Error in absoluteDifference: ");const i=Zw(zw(s,a));return bk(i,o,r)}});const wk=am({cosineDistance_:function(e,t,n,r,s=fk.SUM_BY_NONZERO_WEIGHTS){const a=rm(e,"labels","cosineDistance"),o=rm(t,"predictions","cosineDistance");let i=null;null!=r&&(i=rm(r,"weights","cosineDistance")),Bh(a.shape,o.shape,"Error in cosineDistance: ");const u=Xx(1),l=zw(u,eb(jy(a,o),n,!0));return bk(l,i,s)}});const kk=am({hingeLoss_:function(e,t,n,r=fk.SUM_BY_NONZERO_WEIGHTS){let s=rm(e,"labels","hingeLoss");const a=rm(t,"predictions","hingeLoss");let o=null;null!=n&&(o=rm(n,"weights","hingeLoss")),Bh(s.shape,a.shape,"Error in hingeLoss: ");const i=Xx(1);s=zw(jy(Xx(2),s),i);const u=Xy(zw(i,jy(s,a)));return bk(u,o,r)}});const vk=am({minimum_:function(e,t){let n=rm(e,"a","minimum"),r=rm(t,"b","minimum");[n,r]=Lf(n,r),"bool"===n.dtype&&(n=ag(n,"int32"),r=ag(r,"int32")),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("Minimum",s)}});const Nk=am({huberLoss_:function(e,t,n,r=1,s=fk.SUM_BY_NONZERO_WEIGHTS){const a=rm(e,"labels","huberLoss"),o=rm(t,"predictions","huberLoss");let i=null;null!=n&&(i=rm(n,"weights","huberLoss")),Bh(a.shape,o.shape,"Error in huberLoss: ");const u=Xx(r),l=Zw(zw(o,a)),c=vk(l,u),p=zw(l,c),h=Jx(jy(Xx(.5),nk(c)),jy(u,p));return bk(h,i,s)}});const Sk=am({log_:function(e){const t={x:rm(e,"x","log","float32")};return qf.runKernel("Log",t)}});const Ik=am({logLoss_:function(e,t,n,r=1e-7,s=fk.SUM_BY_NONZERO_WEIGHTS){const a=rm(e,"labels","logLoss"),o=rm(t,"predictions","logLoss");let i=null;null!=n&&(i=rm(n,"weights","logLoss")),Bh(a.shape,o.shape,"Error in logLoss: ");const u=Xx(1),l=Xx(r),c=lk(jy(a,Sk(Jx(o,l)))),p=jy(zw(u,a),Sk(Jx(zw(u,o),l))),h=zw(c,p);return bk(h,i,s)}});const Tk=am({squaredDifference_:function(e,t){let n=rm(e,"a","squaredDifference"),r=rm(t,"b","squaredDifference");[n,r]=Lf(n,r),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("SquaredDifference",s,{})}});const Ek=am({meanSquaredError_:function(e,t,n,r=fk.SUM_BY_NONZERO_WEIGHTS){const s=rm(e,"labels","meanSquaredError"),a=rm(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=rm(n,"weights","meanSquaredError")),Bh(s.shape,a.shape,"Error in meanSquaredError: ");const i=Tk(s,a);return bk(i,o,r)}});const $k=am({exp_:function(e){const t={x:rm(e,"x","exp")};return qf.runKernel("Exp",t)}});const Ck=am({log1p_:function(e){const t={x:rm(e,"x","log1p")};return qf.runKernel("Log1p",t)}});const Ak=am({sigmoidCrossEntropy_:function(e,t,n,r=0,s=fk.SUM_BY_NONZERO_WEIGHTS){let a=rm(e,"multiClassLabels","sigmoidCrossEntropy");const o=rm(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=rm(n,"weights","sigmoidCrossEntropy")),Bh(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Xx(r),t=Xx(1),n=Xx(.5);a=Jx(jy(a,zw(t,e)),jy(n,e))}const u=function(e,t){const n=rm(e,"labels","sigmoidCrossEntropyWithLogits"),r=rm(t,"logits","sigmoidCrossEntropyWithLogits");Bh(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Xy(r),a=jy(r,n),o=Ck($k(lk(Zw(r))));return Jx(zw(s,a),o)}(a,o);return bk(u,i,s)}});const Rk=am({logSumExp_:function(e,t=null,n=!1){const r=rm(e,"x","logSumExp"),s=Jh(t,r.shape),a=Jw(r,s,!0),o=zw(r,a),i=$k(o),u=eb(i,s),l=Sk(u),c=Jx(Zy(a,l.shape),l);if(n){const e=ky(c.shape,s);return Zy(c,e)}return c}});const _k=am({softmaxCrossEntropy_:function(e,t,n,r=0,s=fk.SUM_BY_NONZERO_WEIGHTS){let a=rm(e,"onehotLabels","softmaxCrossEntropy");const o=rm(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=rm(n,"weights","softmaxCrossEntropy")),Bh(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Xx(r),t=Xx(1),n=Xx(a.shape[1]);a=Jx(jy(a,zw(t,e)),Lw(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Mx(((e,t,r)=>{const s=Rk(t,[n],!0),a=zw(ag(t,"float32"),s);r([e,a]);const o=lk(jy(a,e));return{value:eb(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=ky(e.shape,[n]);return[jy(Zy(e,a),zw(ag(r,"float32"),$k(s))),jy(Zy(e,a),zw($k(s),ag(r,"float32")))]}}}));return r(e,t)}(a,o);return bk(u,i,s)}});const Dk=am({sparseFillEmptyRows_:function(e,t,n,r){const s=rm(e,"indices","sparseFillEmptyRows","int32"),a=rm(t,"values","sparseFillEmptyRows"),o=rm(n,"denseShape","sparseFillEmptyRows","int32"),i=rm(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=qf.runKernel("SparseFillEmptyRows",u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Fk=am({sparseReshape_:function(e,t,n){const r=rm(e,"inputIndices","sparseReshape","int32"),s=rm(t,"inputShape","sparseReshape","int32"),a=rm(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=qf.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Ok=am({sparseSegmentMean_:function(e,t,n){const r=rm(e,"data","sparseSegmentMean"),s=rm(t,"indices","sparseSegmentMean","int32"),a=rm(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return qf.runKernel("SparseSegmentMean",o)}});const Mk=am({sparseSegmentSum_:function(e,t,n){const r=rm(e,"data","sparseSegmentSum"),s=rm(t,"indices","sparseSegmentSum","int32"),a=rm(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return qf.runKernel("SparseSegmentSum",o)}});const Lk=am({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=rm(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=rm(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},h=qf.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const zk=am({stringSplit_:function(e,t,n=!0){const r=rm(e,"input","stringSplit","string"),s=rm(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=qf.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const Bk=am({stringToHashBucketFast_:function(e,t){const n=rm(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return qf.runKernel("StringToHashBucketFast",s,r)}});const Pk=am({acos_:function(e){const t={x:rm(e,"x","acos")};return qf.runKernel("Acos",t)}});const Vk=am({acosh_:function(e){const t={x:rm(e,"x","acosh")};return qf.runKernel("Acosh",t)}});const Wk=am({addN_:function(e){zh(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),zh(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>rm(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!Gh(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return qf.runKernel("AddN",r)}});const Uk=am({all_:function(e,t=null,n=!1){const r={x:rm(e,"x","all","bool")},s={axis:t,keepDims:n};return qf.runKernel("All",r,s)}});const Gk=am({any_:function(e,t=null,n=!1){const r={x:rm(e,"x","any","bool")},s={axis:t,keepDims:n};return qf.runKernel("Any",r,s)}});const Hk=am({argMax_:function(e,t=0){const n={x:rm(e,"x","argMax")},r={axis:t};return qf.runKernel("ArgMax",n,r)}});const qk=am({argMin_:function(e,t=0){const n={x:rm(e,"x","argMin")},r={axis:t};return qf.runKernel("ArgMin",n,r)}});const jk=am({asin_:function(e){const t={x:rm(e,"x","asin")};return qf.runKernel("Asin",t)}});const Kk=am({asinh_:function(e){const t={x:rm(e,"x","asinh")};return qf.runKernel("Asinh",t)}});const Xk=am({atan_:function(e){const t={x:rm(e,"x","atan")};return qf.runKernel("Atan",t)}});const Yk=am({atan2_:function(e,t){let n=rm(e,"a","atan2"),r=rm(t,"b","atan2");[n,r]=Lf(n,r);const s={a:n,b:r};return qf.runKernel("Atan2",s)}});const Zk=am({atanh_:function(e){const t={x:rm(e,"x","atanh")};return qf.runKernel("Atanh",t)}});const Jk=am({avgPool_:function(e,t,n,r,s){const a=rm(e,"x","avgPool","float32");zh(Vy(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=Zy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),zh(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Uy("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=qf.runKernel("AvgPool",u,l);return c=ag(c,a.dtype),i?Zy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Qk=am({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=rm(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=Zy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),zh(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),zh("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Uy("avgPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=qf.runKernel("AvgPool3D",l,c);return p=ag(p,i.dtype),u?Zy(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const ev=am({tanh_:function(e){const t={x:rm(e,"x","tanh","float32")};return qf.runKernel("Tanh",t)}});const tv=am({basicLSTMCell_:function(e,t,n,r,s,a){const o=rm(e,"forgetBias","basicLSTMCell"),i=rm(t,"lstmKernel","basicLSTMCell"),u=rm(n,"lstmBias","basicLSTMCell"),l=rm(r,"data","basicLSTMCell"),c=rm(s,"c","basicLSTMCell"),p=rm(a,"h","basicLSTMCell"),h=zx([l,p],1),d=iw(h,i),f=Jx(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Vx(f,[0,0],y),x=Vx(f,[0,g],y),w=Vx(f,[0,2*g],y),k=Vx(f,[0,3*g],y),v=Jx(jy(Jy(b),ev(x)),jy(c,Jy(Jx(o,w))));return[v,jy(ev(v),Jy(k))]}});const nv=am({batchToSpaceND_:function(e,t,n){const r=rm(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));zh(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),zh(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),zh(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return qf.runKernel("BatchToSpaceND",a,o)}});function rv(e){let t;return t=0===e.rank||1===e.rank?Zy(e,[1,1,1,e.size]):2===e.rank?Zy(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Zy(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const sv=am({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=rm(e,"x","batchNorm"),i=rm(t,"mean","batchNorm"),u=rm(n,"variance","batchNorm");let l,c;null!=s&&(l=rm(s,"scale","batchNorm")),null!=r&&(c=rm(r,"offset","batchNorm")),zh(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),zh(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),zh(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:rv(o),scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},d=qf.runKernel("FusedBatchNorm",p,h);return Zy(d,o.shape)}});const av=am({batchNorm2d_:function(e,t,n,r,s,a){const o=rm(e,"x","batchNorm"),i=rm(t,"mean","batchNorm"),u=rm(n,"variance","batchNorm");let l,c;return null!=s&&(l=rm(s,"scale","batchNorm")),null!=r&&(c=rm(r,"offset","batchNorm")),zh(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),zh(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),zh(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&zh(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&zh(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),sv(o,i,u,c,l,a)}});const ov=am({batchNorm3d_:function(e,t,n,r,s,a){const o=rm(e,"x","batchNorm"),i=rm(t,"mean","batchNorm"),u=rm(n,"variance","batchNorm");let l,c;return null!=s&&(l=rm(s,"scale","batchNorm")),null!=r&&(c=rm(r,"offset","batchNorm")),zh(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),zh(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),zh(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&zh(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&zh(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),sv(o,i,u,c,l,a)}});const iv=am({batchNorm4d_:function(e,t,n,r,s,a){const o=rm(e,"x","batchNorm"),i=rm(t,"mean","batchNorm"),u=rm(n,"variance","batchNorm");let l,c;return null!=s&&(l=rm(s,"scale","batchNorm")),null!=r&&(c=rm(r,"offset","batchNorm")),zh(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),zh(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),zh(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&zh(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&zh(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),sv(o,i,u,c,l,a)}});const uv=am({broadcastArgs_:function(e,t){const n=rm(e,"s0","broadcastArgs","int32"),r=rm(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return qf.runKernel("BroadcastArgs",s)}});const lv=am({ceil_:function(e){const t={x:rm(e,"x","ceil","float32")};return qf.runKernel("Ceil",t)}});const cv=am({clipByValue_:function(e,t,n){const r=rm(e,"x","clipByValue");if(zh(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return mw(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return qf.runKernel("ClipByValue",s,a)}});const pv=am({concat1d_:function(e){return zx(e,0)}});const hv=am({concat2d_:function(e,t){return zx(e,t)}});const dv=am({concat3d_:function(e,t){return zx(e,t)}});const fv=am({concat4d_:function(e,t){return zx(e,t)}});const mv=am({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=rm(e,"x","conv1d"),u=rm(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=Zy(i,[1,i.shape[0],i.shape[1]])),zh(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),zh(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),Uy("conv1d",r,o),zh(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),zh(Vy(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),zh("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=Zy(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=Zy(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Qx(h,p,[1,n],r,"NHWC",[1,a],o);return Zy(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const gv=am({conv2dTranspose_:function(e,t,n,r,s,a){const o=rm(e,"x","conv2dTranspose"),i=rm(t,"filter","conv2dTranspose");return tw(n,o,i,r,s,"NHWC",a)}});const yv=am({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=rm(e,"x","conv3d"),i=rm(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=Zy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),zh(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),zh(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),zh(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),zh(Vy(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),zh("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=qf.runKernel("Conv3D",c,p);return l?Zy(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const bv=am({conv3DBackpropInput_:function(e,t,n,r,s){zh(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Zy(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];zh(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),zh(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),zh(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),zh(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),zh(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=qf.runKernel("Conv3DBackpropInputV2",c,p);return i?Zy(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const xv=am({conv3dTranspose_:function(e,t,n,r,s){const a=rm(e,"x","conv3dTranspose"),o=rm(t,"filter","conv3dTranspose");return bv(n,a,o,r,s)}});const wv=am({cos_:function(e){const t={x:rm(e,"x","cos","float32")};return qf.runKernel("Cos",t)}});const kv=am({cosh_:function(e){const t={x:rm(e,"x","cosh","float32")};return qf.runKernel("Cosh",t)}});const vv=am({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:rm(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return qf.runKernel("Cumprod",s,a)}});const Nv=am({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:rm(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return qf.runKernel("Cumsum",s,a)}});const Sv=am({denseBincount_:function(e,t,n,r=!1){const s=rm(e,"x","denseBincount"),a=rm(t,"weights","denseBincount");zh("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),zh(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),zh(n>=0,(()=>`size must be non-negative, but got ${n}.`)),zh(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return qf.runKernel("DenseBincount",o,i)}});const Iv=am({depthToSpace_:function(e,t,n="NHWC"){const r=rm(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];zh(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),zh(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),zh(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),zh(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return qf.runKernel("DepthToSpace",i,u)}});const Tv=am({diag_:function(e){const t={x:rm(e,"x","diag")};return qf.runKernel("Diag",t)}});const Ev=am({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=rm(e,"x","dilation2d"),i=rm(t,"filter","dilation2d");zh(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),zh(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),zh("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=Zy(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},h=qf.runKernel("Dilation2D",c,p);return l?Zy(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const $v=am({equal_:function(e,t){let n=rm(e,"a","equal","string_or_numeric"),r=rm(t,"b","equal","string_or_numeric");[n,r]=Lf(n,r),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("Equal",s)}});const Cv=am({divNoNan_:function(e,t){let n=rm(e,"a","div"),r=rm(t,"b","div");[n,r]=Lf(n,r);const s=Lw(n,r),a=Gx(s),o=$v(r,a);return Vw(o,a,s)}});const Av=am({dot_:function(e,t){const n=rm(e,"t1","dot"),r=rm(t,"t2","dot");zh(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(zh(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Zy(n,[1,-1]),t=Zy(r,[-1,1]),s=iw(e,t);return Zy(s,[])}if(1===n.rank&&2===r.rank){const e=Zy(n,[1,-1]),t=Zy(r,[r.shape[0],r.shape[1]]),s=iw(e,t);return Zy(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Zy(r,[-1,1]),t=iw(n,e);return Zy(t,[t.size])}{const e=Zy(r,[r.shape[0],r.shape[1]]);return iw(n,e)}}});const Rv=am({einsum_:function(e,...t){const n=t.map(((e,t)=>rm(e,`tensors${t}`,"einsum"))),r={equation:e};return qf.runKernel("Einsum",n,r)}});const _v=am({erf_:function(e){let t=rm(e,"x","erf");zh("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=ag(t,"float32"));const n={x:t};return qf.runKernel("Erf",n)}});const Dv=am({euclideanNorm_:function(e,t=null,n=!1){return sk(e,"euclidean",t,n)}});const Fv=am({expm1_:function(e){const t={x:rm(e,"x","expm1")};return qf.runKernel("Expm1",t)}});const Ov=am({floor_:function(e){const t={x:rm(e,"x","floor","float32")};return qf.runKernel("Floor",t)}});const Mv=am({gather_:function(e,t,n=0,r=0){const s={x:rm(e,"x","gather"),indices:rm(t,"indices","gather","int32")},a={axis:n,batchDims:r};return qf.runKernel("GatherV2",s,a)}});const Lv=am({isFinite_:function(e){const t={x:rm(e,"x","isFinite")};return qf.runKernel("IsFinite",t)}});const zv=am({isInf_:function(e){const t={x:rm(e,"x","isInf")};return qf.runKernel("IsInf",t)}});const Bv=am({isNaN_:function(e){const t={x:rm(e,"x","isNaN")};return qf.runKernel("IsNan",t)}});const Pv=am({less_:function(e,t){let n=rm(e,"a","less","string_or_numeric"),r=rm(t,"b","less","string_or_numeric");[n,r]=Lf(n,r),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("Less",s)}});function Vv(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return qf.runKernel("LinSpace",{},r)}const Wv=am({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=rm(e,"x","localResponseNormalization");zh(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),zh(Hh(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=Zy(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=qf.runKernel("LRN",u,l);return i?Zy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Uv=am({softplus_:function(e){const t={x:rm(e,"x","softplus")};return qf.runKernel("Softplus",t)}});const Gv=am({logSigmoid_:function(e){const t=rm(e,"x","logSigmoid"),n=Mx((e=>({value:lk(Uv(lk(e))),gradFunc:t=>jy(t,Jy(lk(e)))})));return n(t)}});const Hv=am({logSoftmax_:function(e,t=-1){const n=rm(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Mx(((e,n)=>{const r=Jw(e,t,!0),s=zw(e,r),a=zw(ag(s,"float32"),Sk(eb($k(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=$k(r);return zw(e,jy(eb(e,t,!0),s))}}}));return r(n)}});const qv=am({logicalNot_:function(e){const t={x:rm(e,"x","logicalNot","bool")};return qf.runKernel("LogicalNot",t)}});const jv=am({logicalOr_:function(e,t){const n=rm(e,"a","logicalOr","bool"),r=rm(t,"b","logicalOr","bool");_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("LogicalOr",s)}});const Kv=am({logicalXor_:function(e,t){const n=rm(e,"a","logicalXor","bool"),r=rm(t,"b","logicalXor","bool");return _g(n.shape,r.shape),qw(jv(e,t),qv(qw(e,t)))}});var Xv={};t(Xv,"searchSorted",(()=>Yv));const Yv=am({searchSorted_:function(e,t,n="left"){const r=rm(e,"sortedSequence","searchSorted"),s=rm(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=Zy(r,[-1,a]),u=Zy(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Wh(u.shape)>=2147483648)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=2147483648)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},c={side:n};return qf.runKernel("SearchSorted",l,c)}});function Zv(e,t){return Yv(e,t,"left")}const Jv=am({maxPool_:function(e,t,n,r,s){const a=rm(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Zy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),zh(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),zh(Vy(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Uy("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=qf.runKernel("MaxPool",u,l);return i?Zy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Qv=am({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=rm(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=Zy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),zh(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),zh("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Uy("maxPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=qf.runKernel("MaxPool3D",l,c);return u?Zy(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const eN=am({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:rm(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=qf.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const tN=am({maximum_:function(e,t){let n=rm(e,"a","maximum"),r=rm(t,"b","maximum");[n,r]=Lf(n,r),"bool"===n.dtype&&(n=ag(n,"int32"),r=ag(r,"int32")),_g(n.shape,r.shape);const s={a:n,b:r};return qf.runKernel("Maximum",s)}});function nN(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=rm(e,"x","meshgrid",e instanceof If?e.dtype:"float32");if(void 0===t)return[r];let s=rm(t,"y","meshgrid",t instanceof If?t.dtype:"float32");const a=Wh(r.shape),o=Wh(s.shape);return"xy"===n?(r=Zy(r,[1,-1]),s=Zy(s,[-1,1]),[iw(yk([o,1],r.dtype),r),iw(s,yk([1,a],s.dtype))]):(r=Zy(r,[-1,1]),s=Zy(s,[1,-1]),[iw(r,yk([1,o],r.dtype)),iw(yk([a,1],s.dtype),s)])}const rN=am({mirrorPad_:function(e,t,n){zh("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=rm(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");zh(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)zh(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),zh(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return qf.runKernel("MirrorPad",o,a)}});const sN=am({mod_:function(e,t){let n=rm(e,"a","mod"),r=rm(t,"b","mod");[n,r]=Lf(n,r);const s={a:n,b:r};return qf.runKernel("Mod",s)}});const aN=am({moments_:function(e,t=null,n=!1){const r=Jh(t,(e=rm(e,"x","moments")).shape),s=mk(e,r,n);let a=s.shape;n||(a=ky(s.shape,r));const o=nk(zw(ag(e,"float32"),Zy(s,a)));return{mean:s,variance:mk(o,r,n)}}});const oN=am({multiRNNCell_:function(e,t,n,r){const s=rm(t,"data","multiRNNCell"),a=sm(n,"c","multiRNNCell"),o=sm(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const iN=am({multinomial_:function(e,t,n,r=!1){const s=rm(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Zy(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=qf.runKernel("Multinomial",i,u);return 1===o?Zy(l,[l.size]):l}});const uN=am({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:rm(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return qf.runKernel("OneHot",a,o)}});const lN=am({onesLike_:function(e){const t={x:rm(e,"x","onesLike")};return qf.runKernel("OnesLike",t)}});const cN=am({outerProduct_:function(e,t){const n=rm(e,"v1","outerProduct"),r=rm(t,"v2","outerProduct");zh(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=Zy(n,[-1,1]),a=Zy(r,[1,-1]);return iw(s,a)}});const pN=am({pad_:function(e,t,n=0){const r=rm(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return qf.runKernel("PadV2",a,s)}});const hN=am({pad1d_:function(e,t,n=0){return zh(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),pN(e,[t],n)}});const dN=am({pad2d_:function(e,t,n=0){return zh(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),pN(e,t,n)}});const fN=am({pad3d_:function(e,t,n=0){return zh(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),pN(e,t,n)}});const mN=am({pad4d_:function(e,t,n=0){return zh(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),pN(e,t,n)}});const gN=am({spaceToBatchND_:function(e,t,n){const r=rm(e,"x","spaceToBatchND");zh(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),zh(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),zh(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return qf.runKernel("SpaceToBatchND",s,a)}});const yN=am({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=rm(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=Zy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),zh(Vy(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=Ry(u.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?u:gN(u,p,f),b=("avg"===n?()=>Jk(y,t,a,g,o):()=>Jv(y,t,a,g,o))(),x=d?b:nv(b,p,m);return l?Zy(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const bN=am({prod_:function(e,t=null,n=!1){let r=rm(e,"x","prod");"bool"===r.dtype&&(r=ag(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return qf.runKernel("Prod",s,a)}});const xN=am({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>rm(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:rm(t,"paramsDenseValues","raggedGather"),indices:rm(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=qf.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const wN=am({raggedRange_:function(e,t,n){const r=rm(e,"starts","raggedRange"),s={starts:r,limits:rm(t,"limits","raggedRange",r.dtype),deltas:rm(n,"deltas","raggedRange",r.dtype)},a=qf.runKernel("RaggedRange",s);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const kN=am({raggedTensorToTensor_:function(e,t,n,r,s){const a=rm(e,"shape","raggedTensorToTensor","int32"),o=rm(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:rm(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>rm(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return qf.runKernel("RaggedTensorToTensor",i,u)}});const vN=am({rand_:function(e,t,n){const r=Wh(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return qf.makeTensor(s,e,n)}});class NN{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=dl.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class SN{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=dl.alea(s.toString()),this.randn=new NN(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class IN{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=dl.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const TN=am({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new SN(t,n,r,s),o=sg(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const EN=am({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new NN(t,n,r,!1,s),o=sg(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const $N=am({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return EN(e,0,1,t,n)}});const CN=am({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=sg(e,r),o=new IN(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const AN=am({reciprocal_:function(e){const t={x:rm(e,"x","reciprocal")};return qf.runKernel("Reciprocal",t)}});const RN=am({reverse1d_:function(e){const t=rm(e,"x","reverse");return zh(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Kx(t,0)}});const _N=am({reverse2d_:function(e,t){const n=rm(e,"x","reverse");return zh(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Kx(n,t)}});const DN=am({reverse3d_:function(e,t){const n=rm(e,"x","reverse");return zh(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Kx(n,t)}});const FN=am({reverse4d_:function(e,t){const n=rm(e,"x","reverse");return zh(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Kx(n,t)}});const ON=am({rsqrt_:function(e){const t={x:rm(e,"x","rsqrt","float32")};return qf.runKernel("Rsqrt",t)}});const MN=am({selu_:function(e){const t={x:rm(e,"x","selu")};return qf.runKernel("Selu",t)}});const LN=am({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=rm(e,"x","separableConv2d"),u=rm(t,"depthwiseFilter","separableConv2d"),l=rm(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Zy(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");zh(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),zh(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),zh(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),zh(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),zh(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const h=u.shape[2],d=u.shape[3];zh(l.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${l.shape[2]}.`));const f=rw(c,u,r,s,o,a),m=Qx(f,l,1,"valid",o);return p?Zy(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const zN=async function(e,t){const n=rm(e,"x","setdiff1d"),r=rm(t,"y","setdiff1d");zh(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),zh(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),zh(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new wf([i],n.dtype),l=new wf([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const BN=am({sign_:function(e){const t={x:rm(e,"x","sign")};return qf.runKernel("Sign",t)}});const PN=am({sin_:function(e){const t={x:rm(e,"x","sin","float32")};return qf.runKernel("Sin",t)}});const VN=am({sinh_:function(e){const t={x:rm(e,"x","sinh")};return qf.runKernel("Sinh",t)}});const WN=am({slice1d_:function(e,t,n){const r=rm(e,"x","slice1d");return zh(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Vx(r,[t],[n])}});const UN=am({slice2d_:function(e,t,n){const r=rm(e,"x","slice2d");return zh(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Vx(r,t,n)}});const GN=am({slice3d_:function(e,t,n){const r=rm(e,"x","slice3d");return zh(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Vx(r,t,n)}});const HN=am({slice4d_:function(e,t,n){const r=rm(e,"x","slice4d");return zh(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Vx(r,t,n)}});const qN=am({softmax_:function(e,t=-1){const n=rm(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return qf.runKernel("Softmax",r,s)}});const jN=am({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const l={x:rm(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return qf.runKernel("StridedSlice",l,c)}});const KN=am({tan_:function(e){const t={x:rm(e,"x","tan","float32")};return qf.runKernel("Tan",t)}});function XN(e,t,n){if(Ph(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=em(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return im(e,t,r,n)}function YN(e,t,n){if(Ph(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=em(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return im(e,t,r,n)}function ZN(e,t,n){if(Ph(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=em(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return im(e,t=t||r,r,n)}const JN=am({topk_:function(e,t=1,n=!0){const r=rm(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=qf.runKernel("TopK",a,o);return{values:i,indices:u}}});const QN=am({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new NN(t,n,r,!0,s),o=sg(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const eS=am({unique_:function(e,t=0){const n=rm(e,"x","unique","string_or_numeric");zh(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=qf.runKernel("Unique",r,s);return{values:a,indices:o}}});const tS=am({unsortedSegmentSum_:function(e,t,n){const r=rm(e,"x","unsortedSegmentSum"),s=rm(t,"segmentIds","unsortedSegmentSum","int32");zh(Hh(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return qf.runKernel("UnsortedSegmentSum",a,o)}});function nS(e,t){return Yv(e,t,"right")}function rS(e,t=!0,n,r){return qf.makeVariable(e,t,n,r)}const sS=async function(e){const t=rm(e,"condition","whereAsync","bool"),n=await t.data(),r=$x(t.shape,n);return e!==t&&t.dispose(),r};var aS={};t(aS,"booleanMaskAsync",(()=>oS));const oS=async function(e,t,n){const r=rm(e,"tensor","boolMask"),s=rm(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;zh(o>0,(()=>"mask cannot be scalar")),Bh(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=Zy(r,l),p=Zy(s,[-1]),h=await sS(p),d=ak(h,[1]),f=Mv(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var iS={};t(iS,"movingAverage",(()=>uS));const uS=am({movingAverage_:function(e,t,n,r,s=!0){const a=rm(e,"v","movingAverage"),o=rm(t,"x","movingAverage"),i=rm(n,"decay","movingAverage");zf(a,o),zh(Gh(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const u=Xx(1),l=zw(u,i);let c=jy(zw(o,a),l);if(s){zh(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=rm(r,"step","movingAverage");c=Lw(c,zw(u,ek(i,e)))}return Jx(a,c)}});var lS={};t(lS,"scatterND",(()=>cS));const cS=am({scatterND_:function(e,t,n){const r=rm(e,"indices","scatterND","int32"),s=rm(t,"updates","scatterND");Sb(s,r,n);const a={indices:r,updates:s},o={shape:n};return qf.runKernel("ScatterNd",a,o)}});var pS={};t(pS,"sparseToDense",(()=>hS));const hS=am({sparseToDense_:function(e,t,n,r=0){const s=rm(e,"sparseIndices","sparseToDense","int32"),a=rm(t,"sparseValues","sparseToDense","string_or_numeric"),o=rm(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return qf.runKernel("SparseToDense",i,u)}});var dS={};t(dS,"gatherND",(()=>fS));const fS=am({gatherND_:function(e,t){const n=rm(t,"indices","gatherND","int32"),r={params:rm(e,"x","gatherND","string_or_numeric"),indices:n};return qf.runKernel("GatherNd",r)}});var mS={};function gS(e,t){if(null==t)return e.shape.slice();if(Gh(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(mS,"dropout",(()=>yS));const yS=am({dropout_:function(e,t,n,r){const s=rm(e,"x","dropout");if(zh("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),zh(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof If?s.clone():s;const a=gS(s,n),o=1-t,i=Lw(Ov(Jx(CN(a,0,1,"float32",r),o)),o);return jy(s,i)}});var bS={};t(bS,"inTopKAsync",(()=>xS));const xS=async function(e,t,n=1){const r=rm(e,"predictions","inTopK"),s=rm(t,"targets","inTopK");zh(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),zh(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),Bh(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];zh(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=ed("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),um(c,s.shape,"bool")},wS={fft:Hx,ifft:jx,rfft:qx,irfft:Yx},kS={hammingWindow:dw,hannWindow:fw,frame:yw,stft:bw},vS={flipLeftRight:ww,grayscaleToRGB:vw,resizeNearestNeighbor:_w,resizeBilinear:Rw,rotateWithOffset:Nw,cropAndResize:xw,nonMaxSuppression:Iw,nonMaxSuppressionAsync:Tw,nonMaxSuppressionWithScore:Ew,nonMaxSuppressionWithScoreAsync:$w,nonMaxSuppressionPadded:Cw,nonMaxSuppressionPaddedAsync:Aw,threshold:Uw,transform:Gw},NS={bandPart:Xw,gramSchmidt:ok,qr:dk},SS={absoluteDifference:xk,computeWeightedLoss:bk,cosineDistance:wk,hingeLoss:kk,huberLoss:Nk,logLoss:Ik,meanSquaredError:Ek,sigmoidCrossEntropy:Ak,softmaxCrossEntropy:_k},IS={sparseFillEmptyRows:Dk,sparseReshape:Fk,sparseSegmentMean:Ok,sparseSegmentSum:Mk},TS={stringNGrams:Lk,stringSplit:zk,stringToHashBucketFast:Bk};n(Lx,aS),n(Lx,ck),n(Lx,Yw),n(Lx,iS),n(Lx,lS),n(Lx,Xv),n(Lx,pS),n(Lx,dS),n(Lx,mS),n(Lx,lw),n(Lx,bS);class ES extends oy{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return _x(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Ox(e,t)}dispose(){null!=this.iterations_&&_x(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Xx(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(ES,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class $S extends ES{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=qf.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=qf.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Rx((()=>Gx(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Rx((()=>Gx(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Rx((()=>{const e=Jx(jy(a,this.rho),jy(nk(s),1-this.rho)),t=jy(Lw(tk(Jx(o,this.epsilon)),tk(Jx(a,this.epsilon))),s),n=Jx(jy(o,this.rho),jy(nk(t),1-this.rho));a.assign(e),o.assign(n);const i=Jx(jy(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(_x(this.accumulatedGrads.map((e=>e.variable))),_x(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}$S.className="Adadelta",uy($S);class CS extends ES{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=qf.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Rx((()=>mw(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Rx((()=>{const e=Jx(a,nk(s));a.assign(e);const t=Jx(jy(Lw(s,tk(Jx(e,qf.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&_x(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}CS.className="Adagrad",uy(CS);class AS extends ES{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Rx((()=>{this.accBeta1=Xx(t).variable(),this.accBeta2=Xx(n).variable()})),null==r&&(this.epsilon=qf.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Rx((()=>{const n=zw(1,this.accBeta1),r=zw(1,this.accBeta2);t.forEach(((t,s)=>{const a=qf.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Rx((()=>Gx(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:Rx((()=>Gx(a).variable(false)))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=Jx(jy(i,this.beta1),jy(o,1-this.beta1)),c=Jx(jy(u,this.beta2),jy(nk(o),1-this.beta2)),p=Lw(l,n),h=Lw(c,r);i.assign(l),u.assign(c);const d=Jx(jy(Lw(p,Jx(tk(h),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(jy(this.accBeta1,this.beta1)),this.accBeta2.assign(jy(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&_x(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&_x(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Rx((()=>{this.accBeta1.assign(ek(this.beta1,this.iterations_+1)),this.accBeta2.assign(ek(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}AS.className="Adam",uy(AS);class RS extends ES{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Rx((()=>{this.iteration=Xx(0).variable(),this.accBeta1=Xx(t).variable()})),null==r&&(this.epsilon=qf.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Rx((()=>{const n=zw(1,this.accBeta1),r=Lw(-this.learningRate,Jx(jy(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=qf.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Gx(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:Gx(a).variable(false)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=Jx(jy(i,this.beta1),jy(o,1-this.beta1)),c=jy(u,this.beta2),p=Zw(o),h=tN(c,p);i.assign(l),u.assign(h);const d=Jx(jy(Lw(r,n),Lw(l,Jx(h,this.epsilon))),a);a.assign(d)})),this.iteration.assign(Jx(this.iteration,1)),this.accBeta1.assign(jy(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&_x(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&_x(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}RS.className="Adamax",uy(RS);class _S extends ES{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=qf.registeredVariables[t];Rx((()=>{const e=Jx(jy(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Dx(Xx(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}_S.className="SGD",uy(_S);class DS extends _S{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Xx(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=qf.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Rx((()=>Gx(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Rx((()=>{let e;const t=Jx(jy(this.m,s),a);e=this.useNesterov?Jx(jy(this.c,Jx(a,jy(t,this.m))),r):Jx(jy(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&_x(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}DS.className="Momentum",uy(DS);class FS extends ES{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=qf.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=qf.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Rx((()=>Gx(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Rx((()=>Gx(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Rx((()=>Gx(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Rx((()=>{const e=Jx(jy(o,this.decay),jy(nk(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=Jx(jy(t,this.decay),jy(a,1-this.decay)),u=Lw(jy(a,this.learningRate),tk(zw(e,Jx(nk(s),this.epsilon)))),l=Jx(jy(i,this.momentum),u);o.assign(e),t.assign(s),i.assign(l);const c=zw(r,l);r.assign(c)}else{const e=Jx(jy(o,this.decay),jy(nk(a),1-this.decay)),t=Jx(jy(i,this.momentum),Lw(jy(a,this.learningRate),tk(Jx(e,this.epsilon))));o.assign(e),i.assign(t);const n=zw(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&_x(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&_x(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&_x(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}FS.className="RMSProp",uy(FS);class OS{static sgd(e){return new _S(e)}static momentum(e,t,n=!1){return new DS(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new FS(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new AS(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new $S(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new RS(e,t,n,r,s)}static adagrad(e,t=.1){return new CS(e,t)}}const MS={sgd:OS.sgd,momentum:OS.momentum,adadelta:OS.adadelta,adagrad:OS.adagrad,rmsprop:OS.rmsprop,adamax:OS.adamax,adam:OS.adam},LS="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zS(){return new Promise((e=>LS((()=>e()))))}const BS={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(e,Qy(ag(n,"float32"),-1))}}},PS={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=nk(ag(n,"float32")),r=tk(zw(Xx(1),t));return lk(Lw(e,r))}}}},VS={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=tk(zw(nk(ag(n,"float32")),1));return Lw(e,t)}}}},WS={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_g(n.shape,r.shape);return{a:()=>{let t=e;const r=Rg(n.shape,s);return r.length>0&&(t=eb(t,r)),Zy(t,n.shape)},b:()=>{let t=e;const n=Rg(r.shape,s);return n.length>0&&(t=eb(t,n)),Zy(t,r.shape)}}}},US={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},GS={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gx(n)}}},HS={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gx(n)}}},qS={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,tk(zw(Xx(1),nk(ag(n,"float32")))))}}},jS={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=tk(Jx(Xx(1),nk(ag(n,"float32"))));return Lw(e,t)}}}},KS={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_g(n.shape,r.shape);return{a:()=>{const t=Jx(nk(n),nk(r));let a=jy(e,Lw(r,t));const o=Rg(n.shape,s);return o.length>0&&(a=eb(a,o)),Zy(a,n.shape)},b:()=>{const t=Jx(nk(n),nk(r));let a=lk(jy(e,Lw(n,t)));const o=Rg(r.shape,s);return o.length>0&&(a=eb(a,o)),Zy(a,r.shape)}}}},XS={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,Jx(nk(ag(n,"float32")),1))}}},YS={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,zw(Xx(1),nk(ag(n,"float32"))))}}};const ZS=am({avgPool3dGrad_:function(e,t,n,r,s,a){const o=rm(e,"dy","avgPool3dGrad"),i=rm(t,"input","avgPool3dGrad");let u=o,l=i,c=!1;4===i.rank&&(c=!0,u=Zy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),l=Zy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),zh(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),zh(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),Uy("avgPool3dGrad",s,a);const p={dy:u,input:l},h={filterSize:n,strides:r,pad:s,dimRoundingMode:a},d=qf.runKernel("AvgPool3DGrad",p,h);return c?Zy(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),JS={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>ZS(e,r,s,a,o,i)}}};const QS=am({avgPoolGrad_:function(e,t,n,r,s){const a=rm(e,"dy","avgPoolGrad"),o=rm(t,"input","avgPoolGrad");zh(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,u=a,l=!1;3===o.rank&&(l=!0,i=Zy(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=Zy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),zh(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),zh(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:u,input:i},p={filterSize:n,strides:r,pad:s},h=qf.runKernel("AvgPoolGrad",c,p);return l?Zy(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),eI={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>QS(e,r,s,a,o)}}},tI={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>iw(e,s,!1,!1),b:()=>iw(e,r,!0,!1)}:a&&!o?{a:()=>iw(s,e,!1,!0),b:()=>iw(r,e,!1,!1)}:{a:()=>iw(s,e,!0,!0),b:()=>iw(e,r,!0,!0)}:{a:()=>iw(e,s,!1,!0),b:()=>iw(r,e,!0,!1)}}},nI={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>gN(e,r,s)}}},rI={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>eb(e,i,!0)}}},sI={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},aI={kernelName:"Ceil",gradFunc:e=>({x:()=>Gx(e)})},oI={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Vw(qw(Hw(r,s),Fw(r,a)),e,Gx(e))}}},iI={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:BS.gradFunc},uI={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=Jh(s,t[0].shape)[0],o=r.map((e=>e[a]));return Wx(e,o,a).map((e=>()=>e))}},lI={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:u}=n;return zh(Py(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>tw(r.shape,e,s,o,i,u),filter:()=>ew(r,e,s.shape,o,i,u)}}},cI={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:u}=n;return{dy:()=>Qx(e,s,a,o,i,1,u),filter:()=>ew(e,r,s.shape,a,o,i,u)}}};const pI=am({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Zy(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=Zy(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),zh(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),zh(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),zh(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),zh(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),zh(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},u={strides:r,pad:s,filterShape:n};return qf.runKernel("Conv3DBackpropFilterV2",i,u)}}),hI={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;zh(Py(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>bv(o.shape,e,i,s,a),filter:()=>pI(o,e,i.shape,s,a)}}},dI={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(lk(PN(ag(n,"float32"))),e)}}},fI={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(VN(ag(n,"float32")),e)}}},mI={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=Ny([s],r.rank);let n=Nv(e,s,a,!o);return null!=t&&(n=pk(n,t)),n}}}},gI={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;zh(Py(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[u,l]=t;return zh(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),zh(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),zh(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),zh(Vy(s,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`)),Uy("depthwiseConv2d",a,o),{x:()=>aw(u.shape,e,l,s,a,i,o),filter:()=>sw(u,e,l.shape,s,a,i,o)}}},yI={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>qf.runKernel("Dilation2DBackpropInput",a,n),filter:()=>qf.runKernel("Dilation2DBackpropFilter",o,n)}}},bI={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>qf.runKernel("EluGrad",r)}}},xI={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=jy($k(lk(nk(n))),2/Math.sqrt(Math.PI));return{x:()=>jy(e,r)}}},wI={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(e,n)}}},kI={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Zy(e,n.shape)}}},vI={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(e,$k(n))}}},NI={kernelName:"Floor",gradFunc:e=>({x:()=>Gx(e)})},SI={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_g(n.shape,r.shape);return{a:()=>{const t=Lw(e,ag(r,"float32")),a=Rg(n.shape,s);return a.length>0?Zy(eb(t,a),n.shape):t},b:()=>{let t=jy(e,ag(n,"float32"));const a=Rg(r.shape,s);a.length>0&&(t=Zy(eb(t,a),r.shape));const o=nk(r);return lk(Lw(t,ag(o,"float32")))}}}},II={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,u=null==i?Xx(1):i,l=Rg(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=zw(s,a),h=jy(e,u),d=ON(Jx(o,Xx(r))),f=jy(jy(jy(d,d),d),Xx(-.5));return{x:()=>1===a.rank?Zy(jy(jy(e,kw(Zy(d,[1,1,1,a.shape[0]]),c)),u),s.shape):Zy(jy(jy(e,d),u),s.shape),mean:()=>{let e=jy(jy(d,Xx(-1)),h);return 1===a.rank&&(e=eb(e,l)),Zy(e,a.shape)},variance:()=>{let e=jy(jy(f,p),h);return 1===a.rank&&(e=eb(e,l)),Zy(e,a.shape)},scale:()=>{const t=jy(p,d);let n=jy(e,t);return 1===a.rank&&(n=eb(n,l)),Zy(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=eb(t,l)),Zy(t,a.shape)}}}},TI={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,o=Jh(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,i=t.slice(0,o),u=i.length,l=t.slice(a,t.length).slice(1),c=l.length,p=EI(0,u),h=EI(u+1,u+1+c),d=$I([i,[n],l]),f=Zy(e,d),m=Zy(s,[n]),g=$I([[u],p,h]),y=pk(f,g);let b=tS(y,m,r.shape[o]);const x=Sy(g);return b=pk(b,x),b},indices:()=>s}}};function EI(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function $I(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const CI={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Gx(n),b:()=>Gx(r)}}},AI={kernelName:"Identity",gradFunc:e=>({x:()=>ag(e,"float32")})},RI={kernelName:"IsFinite",gradFunc:e=>({x:()=>Gx(e)})},_I={kernelName:"IsInf",gradFunc:e=>({x:()=>Gx(e)})},DI={kernelName:"IsNan",gradFunc:e=>({x:()=>Gx(e)})},FI={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=Ow(r,0);return{x:()=>Vw(a,e,jy(e,s))}}},OI={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,Jx(n,1))}}},MI={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,ag(n,"float32"))}}},LI={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=$k(r);return zw(e,jy(eb(e,s,!0),t))}}}};const zI=am({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:o};return qf.runKernel("LRNGrad",i,u)}}),BI={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:u}=n;return{x:()=>zI(r,s,e,a,o,i,u)}}};function PI(e,t,n,r){return t.rank<n.rank&&(t=Zy(t,ky(t.shape,r))),e.rank<n.rank&&(e=Zy(e,ky(e.shape,r))),{x:()=>jy(e,ag($v(n,t),e.dtype))}}const VI={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],o=PI(e,t[1],a,Jh(s,a.shape));return{x:()=>o.x()}}},WI={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>jy(e,ag(Hw(n,r),"float32")),b:()=>jy(e,ag(Pv(n,r),"float32"))}}};const UI=am({maxPool3dGrad_:function(e,t,n,r,s,a,o){const i=rm(e,"dy","maxPool3dGrad"),u=rm(t,"input","maxPool3dGrad"),l=rm(n,"output","maxPool3dGrad");let c=i,p=u,h=l,d=!1;4===u.rank&&(d=!0,c=Zy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),p=Zy(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),h=Zy(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),zh(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),zh(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),zh(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),Uy("maxPool3dGrad",a,o);const f={dy:c,input:p,output:h},m={filterSize:r,strides:s,pad:a,dimRoundingMode:o},g=qf.runKernel("MaxPool3DGrad",f,m);return d?Zy(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),GI={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=n;return{x:()=>UI(e,r,s,a,o,i,u)}}};const HI=am({maxPoolGrad_:function(e,t,n,r,s,a,o){const i=rm(e,"dy","maxPoolGrad"),u=rm(t,"input","maxPoolGrad"),l=rm(n,"output","maxPoolGrad");zh(u.rank===i.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${i.rank})`)),zh(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),zh(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),Uy("maxPoolGrad",a,o);const c={dy:i,input:u,output:l},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return qf.runKernel("MaxPoolGrad",c,p)}}),qI={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Vx(e,a,r.shape)}}};function jI(e,t,n){const r=e.shape.length,s=r-n.length,a=ly.getAxesPermutation(n,r);let o=e;null!=a&&(o=pk(e,a));const i=o.shape.slice(),u=i.splice(r-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(u);let l=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=Zy(t,r),a=vv(e,n,!0,!1),o=vv(e,n,!0,!0),i=jy(a,o);return jy(s,i)}(o.reshape(i),t,s);if(l=l.reshape(o.shape),null!=a){const e=ly.getUndoAxesPermutation(a);l=pk(l,e)}return l}const KI={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>nv(e,r,s)}}},XI={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>zx(e,r)}}};const YI=[BS,PS,VS,WS,US,GS,HS,qS,jS,KS,XS,YS,JS,eI,tI,nI,rI,sI,aI,oI,iI,uI,cI,lI,hI,dI,fI,mI,gI,yI,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_g(n.shape,r.shape);return{a:()=>{const t=Lw(e,ag(r,"float32")),a=Rg(n.shape,s);return a.length>0?Zy(eb(t,a),n.shape):t},b:()=>{let t=jy(e,ag(n,"float32"));const a=Rg(r.shape,s);a.length>0&&(t=Zy(eb(t,a),r.shape));const o=nk(r);return lk(Lw(t,ag(o,"float32")))}}}},bI,xI,wI,kI,vI,SI,NI,II,TI,CI,AI,RI,_I,DI,FI,OI,MI,LI,BI,VI,VI,WI,GI,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>HI(e,r,s,a,o,i)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=Jh(s,r.shape),o=Wh(wy(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=Zy(e,t);return Lw(jy(n,yk(r.shape,"float32")),o)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=PI(e,o,a,Jh(s,a.shape));return{x:()=>i.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>jy(e,ag(Fw(n,r),"float32")),b:()=>jy(e,ag(Ow(n,r),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Vx(e,a,r.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_g(n.shape,r.shape);return{a:()=>{const t=Rg(n.shape,s);return t.length>0?Zy(eb(e,t),n.shape):e},b:()=>{const t=jy(e,lk(Ov(Lw(n,r)))),a=Rg(r.shape,s);return a.length>0?Zy(eb(t,a),r.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_g(n.shape,r.shape);return{a:()=>{const t=jy(e,ag(r,"float32")),a=Rg(n.shape,s);return a.length>0?Zy(eb(t,a),n.shape):t},b:()=>{const t=jy(e,ag(n,"float32")),a=Rg(r.shape,s);return a.length>0?Zy(eb(t,a),r.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>lk(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Ux(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>Gx(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return Kw(e,r).map((e=>()=>e))}},qI,qI,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=_g(a.shape,o.shape);return{a:()=>{const t=ag(o,"float32");let n=jy(e,jy(t,ek(a,zw(t,Xx(1)))));const r=Rg(a.shape,i);return r.length>0&&(n=eb(n,r)),Zy(n,a.shape)},b:()=>{const t=Ow(a,0),n=Vw(t,Sk(a),Gx(a));let r=jy(e,jy(s,n));const u=Rg(o.shape,i);return u.length>0&&(r=eb(r,u)),Zy(r,o.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=Ow(n,0);return{x:()=>Vw(s,e,jy(e,r)),alpha:()=>{let t=Vw(s,Gx(e),jy(e,n));const a=Rg(r.shape,e.shape);return a.length>0&&(t=eb(t,a)),Zy(t,r.shape)}}}},{kernelName:"Prod",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map(((e,t)=>t)):"number"==typeof s?[s]:s,{x:()=>jI(r,e,a)}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,lk(nk(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=jy(Fw(n,6),Qy(n));return{x:()=>jy(e,ag(r,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(e,ag(Qy(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Zy(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>qf.runKernel("ResizeBilinearGrad",s,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>qf.runKernel("ResizeNearestNeighborGrad",s,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:r}=n,s=Jh(r,e.shape);return{x:()=>Kx(e,s)}}},{kernelName:"Round",gradFunc:e=>({x:()=>Gx(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>lk(Lw(e,jy(ek(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>ag(Gx(n),"float32"),t:()=>jy(e,ag(n,e.dtype)),e:()=>jy(e,ag(qv(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ow(n,Xx(0)),r=Xx(Eb),s=Xx($b),a=jy(e,s),o=jy(jy(e,r),$k(ag(n,"float32")));return Vw(t,a,o)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(e,jy(n,zw(Xx(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>Gx(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(wv(ag(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(kv(ag(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,u]=ny(r,s,a),l=[];for(let t=0;t<e.rank;t++)l.push([i[t],o[t]-i[t]-u[t]]);return{x:()=>pN(e,l)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=jy(e,r);return{logits:()=>zw(a,jy(eb(a,[s],true),r))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(e,Jy(n))}}},KI,KI,XI,XI,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,jy(tk(ag(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Xx(2);return{a:()=>jy(e,jy(s,zw(n,r))),b:()=>jy(e,jy(s,zw(r,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(e,jy(ag(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>Gx(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=_g(n.shape,r.shape);return{a:()=>{let t=e;const r=Rg(n.shape,s);return r.length>0&&(t=eb(t,r)),Zy(t,n.shape)},b:()=>{let t=e;const n=Rg(r.shape,s);return n.length>0&&(t=eb(t,n)),Zy(lk(t),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;Jh(a,r.shape).forEach((e=>{s[e]=1}));const o=Zy(e,s),i=jy(o,yk(r.shape,"float32"));return{x:()=>i}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lw(e,nk(wv(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>jy(zw(Xx(1),nk(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=Gx(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=Jx(t,Vx(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=Jx(t,Vx(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=Jx(t,Vx(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=Jx(t,Vx(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Sy(s);return{x:()=>pk(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>jw(e,s)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=tN(t,Gx(t)),r=Mv(e,n);let s=Hw(t,Xx(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=ik(s,e+1);s=qw(s,yk(r.shape,"bool"));const o=Gx(r);return Vw(s,r,o)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>Gx(e)})}];for(const e of YI)Pd(e);function ZI(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(tT(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const o=ZI(e[a],t,n,r);s[a]=o}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function JI(e,t=eT){return QI(e,t)}function QI(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(tT(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=QI(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function eT(e){return null===e?null:tT(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function tT(e){let t=!1;if(Td().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("kjyEk");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof If)&&!(e instanceof Promise)&&!t)}function nT(e){return ZI(e,rT)}function rT(e){return e instanceof If?{value:e.clone(),recurse:!1}:tT(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}Tf().prototype.abs=function(){return this.throwIfDisposed(),Zw(this)},Tf().prototype.acos=function(){return this.throwIfDisposed(),Pk(this)},Tf().prototype.acosh=function(){return this.throwIfDisposed(),Vk(this)},Tf().prototype.add=function(e){return this.throwIfDisposed(),Jx(this,e)},Tf().prototype.all=function(e,t){return this.throwIfDisposed(),Uk(this,e,t)},Tf().prototype.any=function(e,t){return this.throwIfDisposed(),Gk(this,e,t)},Tf().prototype.argMax=function(e){return this.throwIfDisposed(),Hk(this,e)},Tf().prototype.argMin=function(e){return this.throwIfDisposed(),qk(this,e)},Tf().prototype.asScalar=function(){return this.throwIfDisposed(),zh(1===this.size,(()=>"The array must have only 1 element.")),Zy(this,[])},Tf().prototype.asType=function(e){return this.throwIfDisposed(),ag(this,e)},Tf().prototype.as1D=function(){return this.throwIfDisposed(),Zy(this,[this.size])},Tf().prototype.as2D=function(e,t){return this.throwIfDisposed(),Zy(this,[e,t])},Tf().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Zy(this,[e,t,n])},Tf().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Zy(this,[e,t,n,r])},Tf().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Zy(this,[e,t,n,r,s])},Tf().prototype.asin=function(){return this.throwIfDisposed(),jk(this)},Tf().prototype.asinh=function(){return this.throwIfDisposed(),Kk(this)},Tf().prototype.atan=function(){return this.throwIfDisposed(),Xk(this)},Tf().prototype.atan2=function(e){return this.throwIfDisposed(),Yk(this,e)},Tf().prototype.atanh=function(){return this.throwIfDisposed(),Zk(this)},Tf().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),Jk(this,e,t,n,r)},Tf().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),nv(this,e,t)},Tf().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),sv(this,e,t,n,r,s)},Tf().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Pw(this,e)},Tf().prototype.cast=function(e){return this.throwIfDisposed(),ag(this,e)},Tf().prototype.ceil=function(){return this.throwIfDisposed(),lv(this)},Tf().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),cv(this,e,t)},Tf().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof If&&(e=[e]),zx([this,...e],t)},Tf().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),mv(this,e,t,n,r,s,a)},Tf().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),gv(this,e,t,n,r,s)},Tf().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Qx(this,e,t,n,r,s,a)},Tf().prototype.cos=function(){return this.throwIfDisposed(),wv(this)},Tf().prototype.cosh=function(){return this.throwIfDisposed(),kv(this)},Tf().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),vv(this,e,t,n)},Tf().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Nv(this,e,t,n)},Tf().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Iv(this,e,t)},Tf().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),rw(this,e,t,n,r,s,a)},Tf().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),Ev(this,e,t,n,r,s)},Tf().prototype.divNoNan=function(e){return this.throwIfDisposed(),Cv(this,e)},Tf().prototype.div=function(e){return this.throwIfDisposed(),Lw(this,e)},Tf().prototype.dot=function(e){return this.throwIfDisposed(),Av(this,e)},Tf().prototype.elu=function(){return this.throwIfDisposed(),Hy(this)},Tf().prototype.equal=function(e){return this.throwIfDisposed(),$v(this,e)},Tf().prototype.erf=function(){return this.throwIfDisposed(),_v(this)},Tf().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),Dv(this,e,t)},Tf().prototype.exp=function(){return this.throwIfDisposed(),$k(this)},Tf().prototype.expandDims=function(e){return this.throwIfDisposed(),ik(this,e)},Tf().prototype.expm1=function(){return this.throwIfDisposed(),Fv(this)},Tf().prototype.fft=function(){return this.throwIfDisposed(),Hx(this)},Tf().prototype.flatten=function(){return this.throwIfDisposed(),Zy(this,[this.size])},Tf().prototype.floor=function(){return this.throwIfDisposed(),Ov(this)},Tf().prototype.floorDiv=function(e){return this.throwIfDisposed(),Mw(this,e)},Tf().prototype.gather=function(e,t){return this.throwIfDisposed(),Mv(this,e,t)},Tf().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Hw(this,e)},Tf().prototype.greater=function(e){return this.throwIfDisposed(),Ow(this,e)},Tf().prototype.ifft=function(){return this.throwIfDisposed(),jx(this)},Tf().prototype.irfft=function(){return this.throwIfDisposed(),Yx(this)},Tf().prototype.isFinite=function(){return this.throwIfDisposed(),Lv(this)},Tf().prototype.isInf=function(){return this.throwIfDisposed(),zv(this)},Tf().prototype.isNaN=function(){return this.throwIfDisposed(),Bv(this)},Tf().prototype.leakyRelu=function(e){return this.throwIfDisposed(),qy(this,e)},Tf().prototype.lessEqual=function(e){return this.throwIfDisposed(),Fw(this,e)},Tf().prototype.less=function(e){return this.throwIfDisposed(),Pv(this,e)},Tf().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),Wv(this,e,t,n,r)},Tf().prototype.logSigmoid=function(){return this.throwIfDisposed(),Gv(this)},Tf().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Hv(this,e)},Tf().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Rk(this,e,t)},Tf().prototype.log=function(){return this.throwIfDisposed(),Sk(this)},Tf().prototype.log1p=function(){return this.throwIfDisposed(),Ck(this)},Tf().prototype.logicalAnd=function(e){return this.throwIfDisposed(),qw(this,e)},Tf().prototype.logicalNot=function(){return this.throwIfDisposed(),qv(this)},Tf().prototype.logicalOr=function(e){return this.throwIfDisposed(),jv(this,e)},Tf().prototype.logicalXor=function(e){return this.throwIfDisposed(),Kv(this,e)},Tf().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),iw(this,e,t,n)},Tf().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Jv(this,e,t,n,r)},Tf().prototype.max=function(e,t){return this.throwIfDisposed(),Jw(this,e,t)},Tf().prototype.maximum=function(e){return this.throwIfDisposed(),tN(this,e)},Tf().prototype.mean=function(e,t){return this.throwIfDisposed(),mk(this,e,t)},Tf().prototype.min=function(e,t){return this.throwIfDisposed(),Qw(this,e,t)},Tf().prototype.minimum=function(e){return this.throwIfDisposed(),vk(this,e)},Tf().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),rN(this,e,t)},Tf().prototype.mod=function(e){return this.throwIfDisposed(),sN(this,e)},Tf().prototype.mul=function(e){return this.throwIfDisposed(),jy(this,e)},Tf().prototype.neg=function(){return this.throwIfDisposed(),lk(this)},Tf().prototype.norm=function(e,t,n){return this.throwIfDisposed(),sk(this,e,t,n)},Tf().prototype.notEqual=function(e){return this.throwIfDisposed(),gk(this,e)},Tf().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),uN(this,e,t,n)},Tf().prototype.onesLike=function(){return this.throwIfDisposed(),lN(this)},Tf().prototype.pad=function(e,t){return this.throwIfDisposed(),pN(this,e,t)},Tf().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),yN(this,e,t,n,r,s,a)},Tf().prototype.pow=function(e){return this.throwIfDisposed(),ek(this,e)},Tf().prototype.prelu=function(e){return this.throwIfDisposed(),Ky(this,e)},Tf().prototype.prod=function(e,t){return this.throwIfDisposed(),bN(this,e,t)},Tf().prototype.reciprocal=function(){return this.throwIfDisposed(),AN(this)},Tf().prototype.relu=function(){return this.throwIfDisposed(),Xy(this)},Tf().prototype.relu6=function(){return this.throwIfDisposed(),Yy(this)},Tf().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Zy(this,e.shape)},Tf().prototype.reshape=function(e){return this.throwIfDisposed(),Zy(this,e)},Tf().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Rw(this,e,t,n)},Tf().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),_w(this,e,t,n)},Tf().prototype.reverse=function(e){return this.throwIfDisposed(),Kx(this,e)},Tf().prototype.rfft=function(){return this.throwIfDisposed(),qx(this)},Tf().prototype.round=function(){return this.throwIfDisposed(),Bw(this)},Tf().prototype.rsqrt=function(){return this.throwIfDisposed(),ON(this)},Tf().prototype.selu=function(){return this.throwIfDisposed(),MN(this)},Tf().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),LN(this,e,t,n,r,s,a)},Tf().prototype.sigmoid=function(){return this.throwIfDisposed(),Jy(this)},Tf().prototype.sign=function(){return this.throwIfDisposed(),BN(this)},Tf().prototype.sin=function(){return this.throwIfDisposed(),PN(this)},Tf().prototype.sinh=function(){return this.throwIfDisposed(),VN(this)},Tf().prototype.slice=function(e,t){return this.throwIfDisposed(),Vx(this,e,t)},Tf().prototype.softmax=function(e){return this.throwIfDisposed(),qN(this,e)},Tf().prototype.softplus=function(){return this.throwIfDisposed(),Uv(this)},Tf().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),gN(this,e,t)},Tf().prototype.split=function(e,t){return this.throwIfDisposed(),Wx(this,e,t)},Tf().prototype.sqrt=function(){return this.throwIfDisposed(),tk(this)},Tf().prototype.square=function(){return this.throwIfDisposed(),nk(this)},Tf().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Tk(this,e)},Tf().prototype.squeeze=function(e){return this.throwIfDisposed(),ak(this,e)},Tf().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof If?[this,e]:[this,...e];return jw(n,t)},Tf().prototype.step=function(e){return this.throwIfDisposed(),Qy(this,e)},Tf().prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),jN(this,e,t,n,r,s,a,o,i)},Tf().prototype.sub=function(e){return this.throwIfDisposed(),zw(this,e)},Tf().prototype.sum=function(e,t){return this.throwIfDisposed(),eb(this,e,t)},Tf().prototype.tan=function(){return this.throwIfDisposed(),KN(this)},Tf().prototype.tanh=function(){return this.throwIfDisposed(),ev(this)},Tf().prototype.tile=function(e){return this.throwIfDisposed(),kw(this,e)},Tf().prototype.toBool=function(){return this.throwIfDisposed(),ag(this,"bool")},Tf().prototype.toFloat=function(){return this.throwIfDisposed(),ag(this,"float32")},Tf().prototype.toInt=function(){return this.throwIfDisposed(),ag(this,"int32")},Tf().prototype.topk=function(e,t){return this.throwIfDisposed(),JN(this,e,t)},Tf().prototype.transpose=function(e){return this.throwIfDisposed(),pk(this,e)},Tf().prototype.unique=function(e){return this.throwIfDisposed(),eS(this,e)},Tf().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),tS(this,e,t)},Tf().prototype.unstack=function(e){return this.throwIfDisposed(),Kw(this,e)},Tf().prototype.where=function(e,t){return this.throwIfDisposed(),Vw(e,this,t)},Tf().prototype.zerosLike=function(){return this.throwIfDisposed(),Gx(this)};class sT{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class aT extends sT{constructor(){super(aT.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function oT(e){return new cT(e)}function iT(e){return new pT(e)}function uT(e,t){return new vT(e,t)}aT.INITIAL_CAPACITY=32;class lT{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new bT(this,e)}filter(e){return new gT(this,e)}map(e){return new yT(this,e)}mapAsync(e){return new xT(this,e)}serialMapAsync(e){return new xT(this,e).serial()}flatmap(e){return new kT(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new mT(this,e,t)}columnMajorBatch(e,t=!0,n=eT){return this.rowMajorBatch(e,t).map((e=>JI(e,n)))}concatenate(e,t){return new vT(oT([this,e]),t)}take(e){return e<0||null==e?this:new fT(this,e)}skip(e){return e<0||null==e?this:new dT(this,e)}prefetch(e){return new IT(this,e)}shuffle(e,t){return new TT(this,e,t)}serial(){return new hT(this)}}class cT extends lT{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:nT(e),done:!1}}}class pT extends lT{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class hT extends lT{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class dT extends lT{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;_x(e.value)}return this.upstream.next()}}class fT extends lT{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class mT extends lT{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class gT extends lT{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;_x(e.value)}}}class yT extends lT{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Df.getTensorsInContainer(e.value),n=this.transform(e.value),r=Df.getTensorsInContainer(n);for(const e of t)Df.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class bT extends lT{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class xT extends lT{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Df.getTensorsInContainer(e.value),n=await this.transform(e.value),r=Df.getTensorsInContainer(n);for(const e of t)Df.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class wT extends lT{constructor(){super(),this.outputQueue=new aT,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class kT extends wT{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Df.getTensorsInContainer(e.value),n=this.transform(e.value),r=Df.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)Df.isTensorInList(e,r)||e.dispose();return!0}}class vT extends lT{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var NT,ST;(ST=NT||(NT={}))[ST.FAIL=0]="FAIL",ST[ST.SHORTEST=1]="SHORTEST",ST[ST.LONGEST=2]="LONGEST";class IT extends lT{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new sT(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class TT extends IT{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=dl.alea(n||Wd.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class ET{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return Wd.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),$T((async()=>(await n.iterator()).columnMajorBatch(e,t,CT)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,$T((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,$T((async()=>(await t.iterator()).filter((t=>Rx((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return $T((async()=>(await t.iterator()).map((t=>Rx((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return $T((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return $T((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,$T((async()=>uT(iT((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,$T((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=dl.alea(t||Wd.now().toString());return $T((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,$T((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function $T(e,t=null){return new class extends ET{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function CT(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof If||Wd.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof If?jw(e):um(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}ET.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function AT(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Wd.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function RT(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(AT(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,u=i.data.get(o.dataId).values,l=Wd.sizeFromShape(o.shape),c=n||o.dtype,p=Wd.getArrayFromDType(c,l);for(let e=0;e<l;++e)p[e]=t(u[e],s);return i.makeTensorInfo(o.shape,c,p)}}function _T(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(AT(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,u=i.data.get(o.dataId).values,l=n||o.dtype,c=t(u,l,s);return i.makeTensorInfo(o.shape,l,c)}}const DT=RT("Elu",(e=>e>=0?e:Math.exp(e)-1)),FT={kernelName:"Elu",backendName:"cpu",kernelFunc:DT};function OT(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const MT={kernelName:"Identity",backendName:"cpu",kernelFunc:OT};function LT(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;AT([s],"leakyRelu");const o=Wd.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,u=Wd.getTypedArrayFromDType("float32",o);for(let e=0;e<i.length;e++)u[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(s.shape,"float32",u)}const zT={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:LT};function BT(e){return(t,n,r,s,a)=>{const o=ly.assertAndGetBroadcastShape(t,n),i=o.length,u=Wd.computeStrides(o),l=Wd.sizeFromShape(o),c=Wd.getTypedArrayFromDType(a,l),p=t.length,h=n.length,d=Wd.computeStrides(t),f=Wd.computeStrides(n),m=ly.getBroadcastDims(t,o),g=ly.getBroadcastDims(n,o);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<c.length;++t){const n=Wd.indexToLoc(t,i,u),a=n.slice(-p);m.forEach((e=>a[e]=0));const o=Wd.locToIndex(a,p,d),l=n.slice(-h);g.forEach((e=>l[e]=0));const y=Wd.locToIndex(l,h,f);c[t]=e(r[o],s[y])}return[c,o]}}const PT=BT(((e,t)=>e<0?t*e:e));function VT(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;AT([r,s],"prelu");const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,[i,u]=PT(r.shape,s.shape,a,o,"float32");return n.makeTensorInfo(u,"float32",i)}const WT={kernelName:"Prelu",backendName:"cpu",kernelFunc:VT},UT=RT("Relu",(e=>Math.max(0,e))),GT={kernelName:"Relu",backendName:"cpu",kernelFunc:UT},HT=RT("Relu6",(e=>Math.min(Math.max(0,e),6))),qT={kernelName:"Relu6",backendName:"cpu",kernelFunc:HT};function jT(e){return(t,n,r)=>{const s=Wd.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const KT=jT((e=>1/(1+Math.exp(-e)))),XT=RT("Sigmoid",(e=>1/(1+Math.exp(-e)))),YT={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:XT};function ZT(e,t,n,r,s){if("linear"===n)return OT({inputs:{x:t},backend:e});if("relu"===n)return UT({inputs:{x:t},backend:e});if("elu"===n)return DT({inputs:{x:t},backend:e});if("relu6"===n)return HT({inputs:{x:t},backend:e});if("prelu"===n)return VT({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return LT({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return XT({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function JT(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",o)},i}const QT={kernelName:"Complex",backendName:"cpu",kernelFunc:JT};function eE(e,t,n="float32"){if("complex64"===n){return JT({inputs:{real:eE(e,t,"float32"),imag:eE(e,t,"float32")},backend:e})}const r=Wd.makeZerosTypedArray(Wd.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function tE(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const nE={kernelName:"Real",backendName:"cpu",kernelFunc:tE};function rE(e,t,n,r){if("int32"===r){return[t,"int32",Int32Array.from(e)]}if("bool"===r){const r=Wd.toTypedArray([0],n),[s,a]=BT(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function sE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return OT({inputs:{x:s},backend:n});const e=eE(n,s.shape,s.dtype),t=sE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=JT({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=tE({inputs:{input:s},backend:n}),t=sE({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Wd.hasEncodingLoss(s.dtype,a)){const e=OT({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const o=n.data.get(s.dataId).values,[i,u,l]=rE(o,s.shape,s.dtype,a);return n.makeTensorInfo(i,u,l)}const aE={kernelName:"Cast",backendName:"cpu",kernelFunc:sE};function oE(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:o}=n,i=s;AT([a,o],e);const u=i.data.get(a.dataId).values,l=i.data.get(o.dataId).values,c="string"===a.dtype?ly.fromUint8ToStringArray(u):u,p="string"===a.dtype?ly.fromUint8ToStringArray(l):l,h=r||a.dtype,[d,f]=t(a.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:s})=>{const{a:a,b:o}=e,i=s;if("complex64"===a.dtype||"complex64"===o.dtype){const e=sE({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,u=i.data.get(r.dataId).values,l=i.data.get(s.dataId).values,c=sE({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,b]=n(a.shape,o.shape,u,l,f,m),x=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),k=JT({inputs:{real:x,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(w),k}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,o.shape,e,n,s);return i.makeTensorInfo(l,s,u)}}}function iE(e){return(t,n,r,s,a,o)=>{const i=ly.assertAndGetBroadcastShape(t,n),u=Wd.sizeFromShape(i),l=i.length,c=Wd.computeStrides(i),p=Wd.getTypedArrayFromDType("float32",u),h=Wd.getTypedArrayFromDType("float32",u),d=ly.getBroadcastDims(t,i),f=ly.getBroadcastDims(n,i),m=ly.mergeRealAndImagArrays(r,s),g=ly.mergeRealAndImagArrays(a,o),y=t.length,b=Wd.computeStrides(t),x=n.length,w=Wd.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=s.real,h[t]=s.imag}else for(let t=0;t<p.length;t++){const n=Wd.indexToLoc(t,l,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=Wd.locToIndex(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const o=Wd.locToIndex(a,x,w),i=e(m[2*s],m[2*s+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const uE=BT(((e,t)=>e+t)),lE=iE(((e,t,n,r)=>({real:e+n,imag:t+r}))),cE=oE("Add",uE,lE),pE={kernelName:"Add",backendName:"cpu",kernelFunc:cE};function hE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=Wd.sizeFromShape(s.shape),i=Wd.inferFromImplicitShape(a,o),u=Wd.sizeFromShape(i);Wd.assert(o===u,(()=>`The new shape (${i}) has ${u} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:s.dataId,shape:i,dtype:s.dtype}}const dE={kernelName:"Reshape",backendName:"cpu",kernelFunc:hE};function fE(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;AT([s,a],"matMul");const u=s.shape.length,l=a.shape.length,c=o?s.shape[u-2]:s.shape[u-1],p=i?a.shape[l-1]:a.shape[l-2],h=o?s.shape[u-1]:s.shape[u-2],d=i?a.shape[l-2]:a.shape[l-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=Wd.sizeFromShape(f),y=Wd.sizeFromShape(m),b=Cg.assertAndGetBroadcastShape(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([h,d]);Wd.assert(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const x=i?[y,d,p]:[y,p,d],w=hE({inputs:{x:s},backend:n,attrs:{shape:o?[g,c,h]:[g,h,c]}}),k=hE({inputs:{x:a},backend:n,attrs:{shape:x}}),v=o?w.shape[1]:w.shape[2],N=o?w.shape[2]:w.shape[1],S=i?k.shape[1]:k.shape[2],I=Math.max(g,y),T=n.data.get(w.dataId).values,E=n.data.get(k.dataId).values,$=Wd.computeStrides(w.shape),C=Wd.computeStrides(k.shape),[A,R,_]=o?[$[0],1,$[1]]:[$[0],$[1],1],[D,F,O]=i?[1,C[1],C[0]]:[C[1],1,C[0]],M=N*S,L=sg([I,N,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<I;e++)for(let t=0;t<N;t+=B)for(let n=0;n<S;n+=B)for(let r=0;r<v;r+=B){const s=Math.min(t+B,N),a=Math.min(n+B,S),o=Math.min(r+B,v);for(let i=t;i<s;i++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<o;s++){const r=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=T[r+i*R+s*_]*E[s*D+t*F+a]}z[e*M+(i*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const mE={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:fE};const gE={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;let h,d,f;const m=[];h=fE({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),o&&(d=cE({inputs:{a:h,b:o},backend:n}),m.push(h),h=d),c&&(f=ZT(n,h,c,i,p),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}};function yE(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const bE={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;AT(t,"abs");let r=new Float32Array(Wd.sizeFromShape(t.shape));return r=yE(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},xE={kernelName:"Acos",backendName:"cpu",kernelFunc:RT("Acos",(e=>Math.acos(e)))},wE={kernelName:"Acosh",backendName:"cpu",kernelFunc:RT("Acosh",(e=>Math.acosh(e)))};const kE={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;AT(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=sg(r[0].shape,r[0].dtype),o=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function vE(e,t,n,r,s){const a=t.length,o=Wd.sizeFromShape(t),i=Wd.computeStrides(t),u=Wd.computeStrides(s),l=Wd.getTypedArrayFromDType(n,Wd.sizeFromShape(s));for(let t=0;t<o;++t){const n=Wd.indexToLoc(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[Wd.locToIndex(s,a,u)]=e[t]}return l}function NE(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;AT(s,"transpose");const o=s.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=s.shape[a[e]];const u=vE(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(u,i,s.dtype),shape:i,dtype:s.dtype}}const SE={kernelName:"Transpose",backendName:"cpu",kernelFunc:NE};const IE={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;AT(s,"all");const i=Wd.parseAxisParam(a,s.shape);let u=i;const l=ly.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=NE({inputs:{x:s},backend:n,attrs:{perm:l}}),u=ly.getInnerMostAxes(u.length,s.shape.length)),ly.assertAxesAreInnerMostDims("all",u,c.shape.length);const[p,h]=ly.computeOutAndReduceShapes(c.shape,u),d=Wd.sizeFromShape(h),f=Wd.makeZerosTypedArray(Wd.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=hE({inputs:{x:g},backend:n,attrs:{shape:ly.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const TE={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;AT(s,"any");const i=Wd.parseAxisParam(a,s.shape);let u=i;const l=ly.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=NE({inputs:{x:s},backend:n,attrs:{perm:l}}),u=ly.getInnerMostAxes(u.length,s.shape.length)),ly.assertAxesAreInnerMostDims("any",u,c.shape.length);const[p,h]=ly.computeOutAndReduceShapes(c.shape,u),d=Wd.sizeFromShape(h),f=Wd.makeZerosTypedArray(Wd.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=hE({inputs:{x:g},backend:n,attrs:{shape:ly.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const EE={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;AT(s,"argMax");let o=Wd.parseAxisParam(a,s.shape);const i=ly.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=NE({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=ly.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],ly.assertAxesAreInnerMostDims("argMax",o,u.shape.length);const[c,p]=ly.computeOutAndReduceShapes(u.shape,o),h=Wd.sizeFromShape(c),d=Wd.makeZerosTypedArray(h,"int32"),f=Wd.sizeFromShape(p),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s>n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const $E={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;AT(s,"argMin");let o=Wd.parseAxisParam(a,s.shape);const i=ly.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=NE({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=ly.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],ly.assertAxesAreInnerMostDims("argMin",o,u.shape.length);const[c,p]=ly.computeOutAndReduceShapes(u.shape,o),h=Wd.sizeFromShape(c),d=Wd.makeZerosTypedArray(h,"int32"),f=Wd.sizeFromShape(p),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s<n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},CE={kernelName:"Asin",backendName:"cpu",kernelFunc:RT("Asin",(e=>Math.asin(e)))},AE={kernelName:"Asinh",backendName:"cpu",kernelFunc:RT("Asinh",(e=>Math.asinh(e)))},RE={kernelName:"Atan",backendName:"cpu",kernelFunc:RT("Atan",(e=>Math.atan(e)))},_E={kernelName:"Atan2",backendName:"cpu",kernelFunc:oE("Atan2",BT(((e,t)=>Math.atan2(e,t))))},DE={kernelName:"Atanh",backendName:"cpu",kernelFunc:RT("Atanh",(e=>Math.atanh(e)))};function FE(e,t,n,r,s,a){const o=s.strideHeight,i=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,p=s.effectiveFilterWidth,h=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=sg(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*o-h,k=Math.max(0,w),v=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const o=n*i-d,c=Math.max(0,o),h=Math.min(s.inWidth,p+o);let y=f,b=0,w=0;for(let n=k;n<v;n+=u){const s=m+n*r[1];for(let n=c;n<h;n+=l){const o=e[s+n*r[2]+t];"max"===a&&o>y?y=o:"avg"===a&&(b+=o,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function OE(e,t,n,r,s=!1,a=!1){const o=sg(r.outShape,"int32"),i=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=sg(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,p+g);for(let i=0;i<r.outWidth;++i){const p=i*u-f;let d=p;for(;d<0;)d+=c;const x=Math.min(r.inWidth,h+p);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=l){const o=n-g;for(let i=d;i<x;i+=c){const u=i-p,l=m.get(e,n,i,t);l>w&&(w=l,k=s?a?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*h+u)}}o.set(k,e,n,i,t)}}return o}function ME(e,t,n,r,s,a){const o=s.strideDepth,i=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,p=s.dilationWidth,h=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=sg(s.outShape,n),w=x.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],v=s.outShape[2]*s.outShape[3]*s.outShape[4],N=s.outShape[3]*s.outShape[4],S=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*k,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let k=0;k<s.outDepth;++k){const I=k*o-m;let T=I;for(;T<0;)T+=l;const E=Math.min(s.inDepth,h+I),$=n+k*v;for(let n=0;n<s.outHeight;++n){const o=n*i-g;let h=o;for(;h<0;)h+=c;const m=Math.min(s.inHeight,d+o),k=$+n*N;for(let n=0;n<s.outWidth;++n){const o=n*u-y;let i=o;for(;i<0;)i+=p;const d=Math.min(s.inWidth,f+o),g=k+n*S;let v=b,N=0,I=0;for(let n=T;n<E;n+=l){const s=x+n*r[1];for(let n=h;n<m;n+=c){const o=s+n*r[2];for(let n=i;n<d;n+=p){const s=e[o+n*r[3]+t];if("max"===a&&s>v?v=s:"avg"===a&&(N+=s,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/I:v}}}}return x}function LE(e,t){const n=sg(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*s-d;let h=l;for(;h<0;)h+=i;const k=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let v=d;for(;v<0;)v+=u;const N=Math.min(t.inWidth,p+d);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=x;t<w;t+=o){const n=t-b;for(let r=h;r<k;r+=i){const s=r-l;for(let a=v;a<N;a+=u){const o=a-d,i=e.get(m,t,r,a,g);i>=S&&(S=i,I=n*c*p+s*c+o)}}}n.set(I,m,y,r,s,g)}}}return n}const zE={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;AT(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;Wd.assert(ly.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=ly.computePool2DInfo(s.shape,a,o,1,i,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&Wd.arraysEqual(l.inShape,l.outShape))c=OT({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Wd.computeStrides(s.shape),r=FE(e,s.shape,s.dtype,t,l,"avg");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const BE={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;AT(s,"avgPool3d");const c=ly.computePool3DInfo(s.shape,a,o,1,i,u,l),p=ME(n.data.get(s.dataId).values,s.shape,s.dtype,Wd.computeStrides(s.shape),c,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}};const PE={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;AT([s,a],"avgPool3DGrad");const c=ly.computePool3DInfo(a.shape,o,i,1,u,l),p=c.strideDepth,h=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,S=v-1-c.padInfo.left,I=k-1-c.padInfo.top,T=sg(a.shape,"float32"),E=1/(f*m*g),$=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-N,o=r-I,i=s-S;let u=0;for(let n=0;n<w;n+=y){const r=(a+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=b){const s=(o+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<v;n+=x){const a=(i+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;u+=$.get(e,r,s,a,t)}}}T.set(u*E,e,n,r,s,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const VE={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;AT([s,a],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=r,c=ly.computePool2DInfo(o.shape,i,u,1,l),p=c.strideHeight,h=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=sg(o.shape,"float32"),v=1/(d*f),N=n.data.get(s.dataId).values,S=sg(s.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(s+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/h;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;o+=S.get(e,r,s,t)}}k.set(o*v,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const WE={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:o,mean:i,variance:u}=t;Wd.assert(i.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Wd.assert(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Wd.assert(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),AT([s,i,u,a,o],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const c=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,h=n.data.get(u.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=h.length,x=p.length;let w=0,k=0,v=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-p[k++])*d[v++]/Math.sqrt(h[N++]+l),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function UE(e,t,n,r,s){const a=Vg.isSliceContinous(r,t,n),o=Wd.sizeFromShape(n),i=Wd.computeStrides(r);if(a){const n=Vg.computeFlatOffset(t,i);return"string"===s?e.slice(n,n+o):e.subarray(n,n+o)}const u=sg(r,s,"string"===s?ly.fromUint8ToStringArray(e):e),l=sg(n,s);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===s?ly.fromStringArrayToUint8(l.values):l.values}function GE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r;AT(s,"slice");const[i,u]=Vg.parseSliceParams(s,a,o);Vg.assertParamsValid(s,i,u);const l=UE(n.data.get(s.dataId).values,i,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const HE={kernelName:"Slice",backendName:"cpu",kernelFunc:GE};const qE={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;AT([s],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),u=ly.getReshaped(s.shape,a,i),l=ly.getPermuted(u.length,a.length),c=ly.getReshapedPermuted(s.shape,a,i),p=ly.getSliceBeginCoords(o,a.length),h=ly.getSliceSize(c,o,a.length),d=hE({inputs:{x:s},backend:n,attrs:{shape:u}}),f=NE({inputs:{x:d},backend:n,attrs:{perm:l}}),m=hE({inputs:{x:f},backend:n,attrs:{shape:c}}),g=GE({inputs:{x:m},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function jE(e,t,n,r,s){const a=Wd.sizeFromShape(r),o=Wd.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=a>0?t[n]:1)}return o}function KE(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],o=sg([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<a;s++){const a=e.get(i,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,s),i,a):o.set(o.get(i,a)+1,i,a))}return o}const XE={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=jE(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}};const YE={kernelName:"BroadcastArgs",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=ly.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},ZE=jT((e=>Math.ceil(e))),JE={kernelName:"Ceil",backendName:"cpu",kernelFunc:_T("Ceil",ZE)},QE={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:RT("ClipByValue",((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}))},e$={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(Wd.sizeFromShape(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,i=n.data.get(a.dataId).values,u=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=u[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function t$(e,t,n,r){const s=Wd.getArrayFromDType(n,Wd.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=Wd.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?ly.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=a[o++]}r+=e.shape[1]}))}return s}function n$(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const r$={kernelName:"Imag",backendName:"cpu",kernelFunc:n$};function s$(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=Wd.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));ly.assertParamsConsistent(o,a);let i=ly.computeOutShape(t.map((e=>e.shape)),a);if(0===Wd.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>Wd.sizeFromShape(e.shape)>0));if(1===u.length)return OT({inputs:{x:u[0]},backend:n});if("complex64"===u[0].dtype){const e=u.map((e=>tE({inputs:{input:e},backend:n}))),t=u.map((e=>n$({inputs:{input:e},backend:n}))),r=s$({inputs:e,backend:n,attrs:{axis:a}}),s=s$({inputs:t,backend:n,attrs:{axis:a}}),o=JT({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}const l=u.map((e=>{const t=Wd.sizeFromShape(e.shape.slice(a));return hE({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=ly.computeOutShape(l.map((e=>e.shape)),1);const p=1===l[0].shape[0],h=t$(c,i,t[0].dtype,p),d=ly.computeOutShape(u.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const a$={kernelName:"Concat",backendName:"cpu",kernelFunc:s$};function o$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=r;AT([s,a],"conv2d");const p=ly.convertConv2DDataFormat(u),h=ly.computeConv2DInfo(s.shape,a.shape,o,l,i,c,!1,p),d=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,b=h.padInfo.top,x="channelsLast"===h.dataFormat,w=new wf(h.outShape,s.dtype),k=Wd.computeStrides(s.shape),v=Wd.computeStrides(a.shape),N=k[0],S=x?k[1]:k[2],I=x?k[2]:1,T=x?1:k[1],E=w.strides[0],$=x?w.strides[1]:w.strides[2],C=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(s.dataId).values,_=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<h.batchSize;++e){const t=e*N,n=e*E;for(let e=0;e<h.outHeight;++e){const r=n+e*$,s=e*h.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=h.inHeight)continue;const a=e*v[0],o=t+n*S;for(let e=0;e<h.outWidth;++e){const t=r+e*C,n=e*h.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=h.inWidth)continue;const s=o+r*I;let i=a+e*v[1];for(let e=0;e<h.inChannels;++e){const n=R[s+e*T];for(let e=0;e<h.outChannels;++e)D[t+e*A]+=n*_[i+e];i+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const i$={kernelName:"Conv2D",backendName:"cpu",kernelFunc:o$};const u$={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;AT([s,a],"conv2dBackpropFilter");const p=ly.convertConv2DDataFormat(u),h=ly.computeConv2DInfo(s.shape,c,o,1,i,l,!1,p),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,b=new wf(h.filterShape,"float32"),x=h.padInfo.left,w=h.padInfo.top,k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=new wf(s.shape,s.dtype,k),S=new wf(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(h.outHeight,(h.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(h.outWidth,(h.inWidth+x-r)/f);for(let o=0;o<h.inChannels;++o)for(let i=0;i<h.outChannels;++i){let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;u+=y?N.get(l,t,n,o)*S.get(l,c,e,i):N.get(l,o,t,n)*S.get(l,i,c,e)}}b.set(u,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const l$={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r;AT([s,a],"conv2dBackpropInput");const p=Wd.computeStrides(a.shape),h=Wd.computeStrides(s.shape);let d=ly.convertConv2DDataFormat(l);const f=ly.computeConv2DInfo(o,a.shape,i,1,u,c,!1,d),m=new wf(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=p,{batchSize:v,filterHeight:N,filterWidth:S,inChannels:I,inHeight:T,inWidth:E,outChannels:$,outHeight:C,outWidth:A,strideHeight:R,strideWidth:_}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,F=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=h[0],V=O?h[1]:h[2],W=O?h[2]:1,U=O?1:h[1];for(let e=0;e<v;++e)for(let t=0;t<I;++t)for(let n=0;n<T;++n){const r=n-D,s=Math.max(0,Math.ceil(r/R)),a=Math.min(C,(N+r)/R);for(let o=0;o<E;++o){const i=o-F,u=Math.max(0,Math.ceil(i/_)),l=Math.min(A,(S+i)/_);let c=0;for(let n=s;n<a;++n){const s=n*R-r;for(let r=u;r<l;++r){const a=P*e+V*n+W*r,o=x*(N-1-s)+w*(S-1-(r*_-i))+k*t;for(let e=0;e<$;++e){c+=y[a+U*e]*b[o+e]}}}g[M*e+L*n+z*o+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const c$={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r;AT([s,a],"conv3d");const l=ly.computeConv3DInfo(s.shape,a.shape,o,u,i),{filterDepth:c,filterHeight:p,filterWidth:h,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new wf(l.outShape,s.dtype),k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=w.values,S=Wd.computeStrides(s.shape),I=Wd.computeStrides(a.shape);for(let e=0;e<l.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const r=n+e*w.strides[1],s=e*l.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=l.inDepth)continue;const a=e*I[0],o=t+n*S[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-x;for(let e=0;e<p;++e){const r=n+e*f;if(r<0||r>=l.inHeight)continue;const s=a+e*I[1],i=o+r*S[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-b;for(let e=0;e<h;++e){const t=r+e*m;if(t<0||t>=l.inWidth)continue;const a=s+e*I[2],o=i+t*l.inChannels;let u=a;for(let e=0;e<l.inChannels;++e){const t=k[o+e];for(let e=0;e<l.outChannels;++e)N[n+e]+=t*v[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const p$={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:u}=r;AT([s,a],"conv3dBackpropFilterV2");const l=Wd.computeStrides(s.shape),c=Wd.computeStrides(a.shape),p=ly.computeConv3DInfo(s.shape,u,o,1,i),h=p.strideDepth,d=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new wf(p.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,S=n.data.get(a.dataId).values,[I,T,E,$]=c,C=n.data.get(s.dataId).values,[A,R,_,D]=l,F=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((F-e)/h)),n=Math.min(p.outDepth,(p.inDepth+F-e)/h),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),o=Math.min(p.outHeight,(p.inHeight+M-s)/d),i=s*k+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((O-r)/f)),l=Math.min(p.outWidth,(p.inWidth+O-r)/f),c=r*v+i;for(let i=0;i<p.inChannels;++i){const m=i*N+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let m=0;m<p.batchSize;++m){const p=m*A,y=m*I;for(let m=t;m<n;++m){const t=(e+m*h-F)*R+p,n=m*T+y;for(let e=a;e<o;++e){const a=(s+e*d-M)*_+t,o=e*E+n;for(let e=u;e<l;++e){const t=e*$+o;g+=C[(r+e*f-O)*D+a+i]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const h$={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:u}=r;AT([s],"conv3dBackpropInputV2");const l=Wd.computeStrides(s.shape),c=Wd.computeStrides(a.shape),p=ly.computeConv3DInfo(u,a.shape,i,1,o),h=new wf(p.inShape,"float32"),d=h.values,[f,m,g,y]=h.strides,b=n.data.get(s.dataId).values,[x,w,k,v]=l,N=n.data.get(a.dataId).values,[S,I,T,E]=c,{batchSize:$,filterDepth:C,filterHeight:A,filterWidth:R,inChannels:_,inDepth:D,inHeight:F,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:V,strideWidth:W}=p,U=C-1-p.padInfo.front,G=A-1-p.padInfo.top,H=R-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<_;++t)for(let n=0;n<D;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(C+r)/P);for(let o=0;o<F;++o){const i=o-G,u=Math.max(0,Math.ceil(i/V)),l=Math.min(z,(A+i)/V);for(let c=0;c<O;++c){const p=c-H,h=Math.max(0,Math.ceil(p/W)),$=Math.min(B,(R+p)/W);let _=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=u;r<l;++r){const a=r*V-i;for(let o=h;o<$;++o){const i=x*e+w*n+k*r+v*o,u=S*(C-1-s)+I*(A-1-a)+T*(R-1-(o*W-p))+E*t;for(let e=0;e<M;++e){_+=b[i+e]*N[u+e]}}}}d[f*e+m*n+g*o+y*c+t]=_}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},d$={kernelName:"Cos",backendName:"cpu",kernelFunc:RT("Cos",(e=>Math.cos(e)))},f$={kernelName:"Cosh",backendName:"cpu",kernelFunc:RT("Cosh",(e=>Math.cosh(e)))};const m$={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,[c,p,h,d]=s.shape,f=a.shape[0],[m,g]=i,y=sg([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,k=Wd.computeStrides(s.shape),v=Wd.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(s-n)*(p-1)/(m-1):0,f=g>1?(a-r)*(h-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+s)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=l}else if("bilinear"===u){const n=Math.floor(c),s=Math.ceil(c),i=c-n;for(let u=0;u<g;u++){const c=g>1?r*(h-1)+u*f:.5*(r+a)*(h-1);if(c<0||c>h-1){for(let n=0;n<d;n++){const r=n+u*v[2]+t*v[1]+e*v[0];y.values[r]=l}continue}const p=Math.floor(c),m=Math.ceil(c),b=c-p;for(let r=0;r<d;r++){let a=r+p*k[2]+n*k[1]+o*k[0];const l=w[a];a=r+m*k[2]+n*k[1]+o*k[0];const c=w[a];a=r+p*k[2]+s*k[1]+o*k[0];const h=w[a];a=r+m*k[2]+s*k[1]+o*k[0];const d=l+(c-l)*b,f=h+(w[a]-h)*b;a=r+u*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*i}}}else for(let n=0;n<g;++n){const s=g>1?r*(h-1)+n*f:.5*(r+a)*(h-1);if(s<0||s>h-1){for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=l}continue}const i=Math.round(s),u=Math.round(c);for(let r=0;r<d;r++){const s=r+i*k[2]+u*k[1]+o*k[0],a=r+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const g$={kernelName:"Cumprod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;AT(s,"cumprod");const u=ly.getAxesPermutation([a],s.shape.length);let l=s;null!=u&&(l=NE({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=ly.getInnerMostAxes(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const p=Of(l.dtype,"int32"),h=Wd.makeOnesTypedArray(Wd.sizeFromShape(l.shape),p),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?1:d[n];else{const r=m(e,t-1);h[n]=o?d[r]*h[r]:d[n]*h[r]}}const g=n.makeTensorInfo(l.shape,p,h);if(null!=u){const e=NE({inputs:{x:g},backend:n,attrs:{perm:ly.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}};const y$={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;AT(s,"cumsum");const u=ly.getAxesPermutation([a],s.shape.length);let l=s;null!=u&&(l=NE({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=ly.getInnerMostAxes(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const p=Of(l.dtype,"int32"),h=Wd.makeZerosTypedArray(Wd.sizeFromShape(l.shape),p),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?0:d[n];else{const r=m(e,t-1);h[n]=o?d[r]+h[r]:d[n]+h[r]}}const g=n.makeTensorInfo(l.shape,p,h);if(null!=u){const e=NE({inputs:{x:g},backend:n,attrs:{perm:ly.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}};const b$={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=jE(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===s.shape.length){const e=KE(n.bufferSync(s),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const x$={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r;Wd.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=s.shape[0],u=s.shape[1],l=s.shape[2],c=s.shape[3],p=u*a,h=l*a,d=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(i*p*h*d);let g=0;for(let e=0;e<i;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<h;++t){const s=Math.floor(t/a),o=(r*a+t%a)*d;for(let t=0;t<d;++t){const r=t+o+c*(s+l*(n+u*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,p,h,d],s.dtype,m)}};function w$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:l}=r;AT([s,a],"depthwiseConv2DNative");const c=Wd.computeStrides(s.shape),p=Wd.computeStrides(a.shape);let h=u;null==h&&(h=[1,1]),Wd.assert(ly.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=ly.computeConv2DInfo(s.shape,a.shape,o,h,i,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new wf(d.outShape,s.dtype),N=n.data.get(s.dataId).values,S=n.data.get(a.dataId).values,I=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*v.strides[1],s=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*p[0],o=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*p[1],i=o+r*d.inChannels;let u=t,l=s;for(let e=0;e<d.inChannels;++e){const t=N[i+e];for(let e=0;e<k;++e)I[u+e]+=t*S[l+e];u+=k,l+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const k$={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:w$};const v$={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=r;AT([s,a],"depthwiseConv2dNativeBackpropFilter");const p=ly.computeConv2DInfo(s.shape,c,o,i,u,l,!0),{strideHeight:h,strideWidth:d,filterHeight:f,filterWidth:m}=p,g=new wf(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,w=n.data.get(s.dataId).values,k=new wf(s.shape,s.dtype,w),v=n.data.get(a.dataId).values,N=new wf(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(p.outHeight,(p.inHeight+b-e)/h);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(p.outWidth,(p.inWidth+y-r)/d);for(let o=0;o<p.outChannels;++o){const i=Math.trunc(o/x),u=o%x;let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*h-b;for(let e=s;e<a;++e){const n=r+e*d-y;l+=k.get(u,t,n,i)*N.get(u,c,e,o)}}g.set(l,e,r,i,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const N$={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=r;AT([s,a],"depthwiseConv2DNativeBackpropInput");const p=Wd.computeStrides(s.shape),h=Wd.computeStrides(a.shape),d=ly.computeConv2DInfo(c,a.shape,o,i,u,l,!0),f=new wf(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,k,v]=p,N=n.data.get(a.dataId).values,[S,I,T]=h,{batchSize:E,filterHeight:$,filterWidth:C,inChannels:A,inHeight:R,inWidth:_,outChannels:D,outHeight:F,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=C-1-d.padInfo.left,P=D/A;for(let e=0;e<E;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(F,($+r)/M);for(let o=0;o<_;++o){const i=o-B,u=Math.max(0,Math.ceil(i/L)),l=Math.min(O,(C+i)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=u;r<l;++r){const a=w*e+k*n+v*r,o=S*($-1-s)+I*(C-1-(r*L-i))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*N[o+e]}}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const S$={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=Wd.sizeFromShape(r.shape),a=n.data.get(r.dataId).values,o=sg([s,s],r.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*s+e]=a[e];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},I$={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:o,dilations:i}=n,u=t,l=u.data.get(r.dataId).values,c=r.shape.length,p=u.data.get(s.dataId).values,h=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=ly.computeDilation2DInfo(r.shape,s.shape,a,o,"NHWC",i),E=Wd.sizeFromShape(T),$=T.length,C=Wd.getArrayFromDType(r.dtype,E);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const o=a*k-x.left;for(let i=0;i<g;++i){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=o+n*I;if(d>=0&&d<m){const o=Wd.locToIndex([e,a,d,i],c,Wd.computeStrides(r.shape)),f=Wd.locToIndex([t,n,i],h,Wd.computeStrides(s.shape)),m=l[o]+p[f];m>u&&(u=m)}}}C[Wd.locToIndex([e,t,a,i],$,Wd.computeStrides(T))]=u}}}return{dataId:u.write(Wd.toTypedArray(C,r.dtype),T,r.dtype),shape:T,dtype:r.dtype}}},T$={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=Wd.toNestedArray(r.shape,l.data.get(r.dataId).values),p=Wd.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=ly.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",u);Wd.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=Wd.toNestedArray(I,l.data.get(a.dataId).values),E=Wd.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const l=s+n*S;if(l>=0&&l<f){const s=c[e][r][l][a]+p[t][n][a];s>o&&(o=s,i=t,u=n)}}}E[i][u][a]+=T[e][t][r][a]}}}return{dataId:l.write(Wd.toTypedArray(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},E$={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=Wd.toNestedArray(r.shape,l.data.get(r.dataId).values),p=Wd.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=ly.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",u);Wd.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=Wd.toNestedArray(I,l.data.get(a.dataId).values),E=Wd.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=s<0?0:s;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const l=s+n*S;if(l>=0&&l<f){const s=c[e][r][l][a]+p[t][n][a];s>o&&(o=s,i=r,u=l)}}}E[e][i][u][a]+=T[e][t][r][a]}}}return{dataId:l.write(Wd.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},$$=BT(((e,t)=>e*t)),C$=iE(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),A$=oE("Multiply",$$,C$),R$={kernelName:"Multiply",backendName:"cpu",kernelFunc:A$};function _$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;let i;AT(s,"sum"),i="bool"===s.dtype?sE({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):OT({inputs:{x:s},backend:n});const u=i.shape.length,l=Wd.parseAxisParam(a,i.shape),c=ly.getAxesPermutation(l,u);let p=l,h=i;null!=c&&(h=NE({inputs:{x:i},backend:n,attrs:{perm:c}}),p=ly.getInnerMostAxes(p.length,u)),ly.assertAxesAreInnerMostDims("sum",p,h.shape.length);const[d,f]=ly.computeOutAndReduceShapes(h.shape,p);let m=eE(n,d,ly.upcastType(h.dtype,"int32"));const g=Wd.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(h.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=hE({inputs:{x:m},backend:n,attrs:{shape:ly.expandShapeToKeepDim(m.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),m}const D$={kernelName:"Sum",backendName:"cpu",kernelFunc:_$};const F$={kernelName:"Einsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:u}=ly.decodeEinsumEquation(s,a.length);ly.checkEinsumDimSizes(o.length,u,a);const{path:l,steps:c}=ly.getEinsumComputePath(i,u),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=ly.getEinsumPermutation(d,u[t]);let s;ly.isIdentityPermutation(e)?s=a[t]:(s=NE({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Wd.arraysEqual(s.shape,o)||(s=hE({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=A$({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(l[e]>=0&&(h=_$({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}};const O$={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;AT([r,s],"eluGrad");const a=new Float32Array(Wd.sizeFromShape(s.shape)),o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},M$=BT(((e,t)=>e===t?1:0)),L$=oE("Equal",M$,null,"bool"),z$={kernelName:"Equal",backendName:"cpu",kernelFunc:L$},B$=ly.ERF_P,P$=ly.ERF_A1,V$=ly.ERF_A2,W$=ly.ERF_A3,U$=ly.ERF_A4,G$=ly.ERF_A5,H$={kernelName:"Erf",backendName:"cpu",kernelFunc:RT("Erf",(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+B$*n);return t*(1-((((G$*r+U$)*r+W$)*r+V$)*r+P$)*r*Math.exp(-n*n))}))},q$=jT((e=>Math.exp(e))),j$=_T("Exp",q$,"float32"),K$={kernelName:"Exp",backendName:"cpu",kernelFunc:j$};function X$(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,o=s.shape.length,i=s.shape.slice();let u=a;return a<0&&(Wd.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+a+1),i.splice(u,0,1),hE({inputs:{x:s},backend:n,attrs:{shape:i}})}const Y$={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:X$},Z$=jT((e=>Math.expm1(e))),J$={kernelName:"Expm1",backendName:"cpu",kernelFunc:_T("Expm1",Z$)},Q$=oE("RealDiv",BT(((e,t)=>e/t))),eC={kernelName:"RealDiv",backendName:"cpu",kernelFunc:Q$},tC=BT(((e,t)=>e-t)),nC=iE(((e,t,n,r)=>({real:e-n,imag:t-r}))),rC=oE("Sub",tC,nC),sC={kernelName:"Sub",backendName:"cpu",kernelFunc:rC};function aC(e,t,n){const r=e.shape,s=r[0],a=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,l=[s,a],c=Wd.sizeFromShape(l),p=Wd.getTypedArrayFromDType("float32",c),h=Wd.getTypedArrayFromDType("float32",c);for(let e=0;e<s;e++){const r=GE({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=GE({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=JT({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=oC(o,t,n),d=ly.mergeRealAndImagArrays(l,c);for(let t=0;t<a;t++){const n=ly.getComplexWithIndex(d,t);p[e*a+t]=n.real,h[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o)}const d=n.makeTensorInfo(l,"float32",p),f=n.makeTensorInfo(l,"float32",h),m=JT({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function oC(e,t,n){const r=Wd.sizeFromShape(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((i=r)&i-1)){const s=iC(a,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",s.real),t=n.makeTensorInfo(i,"float32",s.imag),a=n.makeTensorInfo([],"float32",Wd.createScalarValue(r,"float32")),o=OT({inputs:{x:a},backend:n}),u=eC.kernelFunc({inputs:{a:e,b:a},backend:n}),l=eC.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(u.dataId).values,p=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:p}}return s}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,o=0;for(let r=0;r<t;r++){const i=ly.exponent(s*r,t,n),u=ly.getComplexWithIndex(e,r);a+=u.real*i.real-u.imag*i.imag,o+=u.real*i.imag+u.imag*i.real}n&&(a/=t,o/=t),ly.assignToTypedArray(r,a,o,s)}return r}(ly.mergeRealAndImagArrays(a,o),r,t);return ly.splitRealAndImagArrays(e)}var i}function iC(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=ly.mergeRealAndImagArrays(e,t),o=n/2,i=ly.complexWithEvenIndex(a),u=i.real,l=i.imag,c=[u.length],p=s.makeTensorInfo(c,"float32",u),h=s.makeTensorInfo(c,"float32",l),d=JT({inputs:{real:p,imag:h},backend:s}),f=ly.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=JT({inputs:{real:b,imag:x},backend:s}),k=iC(u,l,o,r,s),v=k.real,N=k.imag,S=[v.length],I=s.makeTensorInfo(S,"float32",v),T=s.makeTensorInfo(S,"float32",N),E=JT({inputs:{real:I,imag:T},backend:s}),$=iC(m,g,o,r,s),C=$.real,A=$.imag,R=[C.length],_=s.makeTensorInfo(R,"float32",C),D=s.makeTensorInfo(R,"float32",A),F=JT({inputs:{real:_,imag:D},backend:s}),O=ly.exponents(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=JT({inputs:{real:L,imag:z},backend:s}),P=A$({inputs:{a:B,b:F},backend:s}),V=cE({inputs:{a:E,b:P},backend:s}),W=rC({inputs:{a:E,b:P},backend:s}),U=tE({inputs:{input:V},backend:s}),G=tE({inputs:{input:W},backend:s}),H=n$({inputs:{input:V},backend:s}),q=n$({inputs:{input:W},backend:s}),j=s$({inputs:[U,G],backend:s,attrs:{axis:0}}),K=s$({inputs:[H,q],backend:s,attrs:{axis:0}}),X=s.data.get(j.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const uC={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=Wd.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=hE({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=aC(o,!1,n),u=hE({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}};function lC(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,o=a||Wd.inferDtype(s),i=Wd.getArrayFromDType(o,Wd.sizeFromShape(r));return function(e,t,n){e.fill(t)}(i,s),t.makeTensorInfo(r,o,i)}const cC={kernelName:"Fill",backendName:"cpu",kernelFunc:lC};const pC={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=Wd.getTypedArrayFromDType(r.dtype,Wd.sizeFromShape(r.shape)),[o,i,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*u*i*l;for(let e=0;e<i;e++){const n=e*(u*l);for(let e=0;e<u;e++){const r=e*l;for(let s=0;s<l;s++){const o=Math.round(u-e-1),i=t+n+r+s;let p=c[i];if(o>=0&&o<u){p=c[t+n+o*l+s]}a[i]=p}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},hC=jT((e=>Math.floor(e))),dC={kernelName:"Floor",backendName:"cpu",kernelFunc:_T("Floor",hC)},fC={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:oE("FloorDiv",BT(((e,t)=>Math.floor(e/t))),null,"int32")};const mC={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=o$({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=hE({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=cE({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=cE({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===i.shape.length&&1!==i.shape[0]){const e=hE({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=ZT(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=ZT(n,m,d,i,f);n.disposeIntermediateTensorInfo(e)}return m}};const gC={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=w$({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=cE({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=ZT(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function yC(e,t,n,r,s,a,o,i,u){const l=sg([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*o[t],r.push(a)}if(c<0||c>=u/a)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<a;e++)l.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return l}const bC={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=Wd.sizeFromShape(r.shape),o=s.shape,i=o[o.length-1],[u,l,c,p]=ly.prepareAndValidate(r,s);if(0===l)return n.makeTensorInfo(u,r.dtype,[]);const h=yC(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,l,i,c,p,r.shape,a);return n.makeTensorInfo(u,r.dtype,h.values)}};function xC(e,t,n){const r=sg(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],o=s[2],i=t.locToIndex([a,o]);s[2]=t.values[i];const u=e.locToIndex(s);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}const wC={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r;AT([s,a],"gatherV2");const u=Wd.parseAxisParam(o,s.shape)[0],l=n.data.get(a.dataId).values,c=s.shape[u];for(let e=0;e<l.length;++e){const t=l[e];Wd.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let p=i;null==i&&(p=0);const h=Wd.sizeFromShape(a.shape),d=ly.segment_util.collectGatherOpShapeInfo(s,a,u,p),f=hE({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=hE({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=xC(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},kC=BT(((e,t)=>e>t?1:0)),vC={kernelName:"Greater",backendName:"cpu",kernelFunc:oE("Greater",kC,null,"bool")},NC=BT(((e,t)=>e>=t?1:0)),SC={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:oE("GreaterEqual",NC,null,"bool")};const IC={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=Wd.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=hE({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=aC(o,!0,n),u=hE({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}},TC={kernelName:"IsFinite",backendName:"cpu",kernelFunc:RT("IsFinite",(e=>Number.isFinite(e)?1:0),"bool")},EC={kernelName:"IsInf",backendName:"cpu",kernelFunc:RT("IsInf",(e=>Math.abs(e)===1/0?1:0),"bool")},$C={kernelName:"IsNan",backendName:"cpu",kernelFunc:RT("IsNan",(e=>Number.isNaN(e)?1:0),"bool")},CC=BT(((e,t)=>e<t?1:0)),AC={kernelName:"Less",backendName:"cpu",kernelFunc:oE("Less",CC,null,"bool")},RC=BT(((e,t)=>e<=t?1:0)),_C={kernelName:"LessEqual",backendName:"cpu",kernelFunc:oE("LessEqual",RC,null,"bool")};function DC(e,t,n){const r=(t-e)/(n-1),s=Wd.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const FC={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=DC(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},OC=jT((e=>Math.log(e))),MC={kernelName:"Log",backendName:"cpu",kernelFunc:_T("Log",OC)},LC={kernelName:"Log1p",backendName:"cpu",kernelFunc:RT("Log1p",(e=>Math.log1p(e)))},zC={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:oE("LogicalAnd",BT(((e,t)=>e&&t)),null,"bool")},BC={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:RT("LogicalNot",(e=>e?0:1),"bool")},PC={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:oE("LogicalOr",BT(((e,t)=>e||t)),null,"bool")};const VC={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:u}=r;AT(s,"LRN");const l=s.shape[3],c=l-1,p=n.data.get(s.dataId).values,h=Wd.sizeFromShape(s.shape),d=new Float32Array(h);function f(e){const t=e%l;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let e=0;e<h;e++){const t=f(e),n=p[e]*Math.pow(o+i*t,-u);d[e]=n}return n.makeTensorInfo(s.shape,s.dtype,d)}};const WC={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r;AT(o,"LRNGrad");const p=Wd.sizeFromShape(o.shape),h=o.shape[3],d=n.data.get(o.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(p),y=p;for(let e=0;e<y;e++){const t=e%h,n=e-t+Math.max(0,t-i),r=e-t+Math.min(h,t+i+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=l*s+u;for(let t=n;t<r;t++){let n=-2*l*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(o.shape,s.dtype,g)}};function UC(e,t,n,r){const s=Wd.getTypedArrayFromDType(r,Wd.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}function GC(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=n;let u=s.shape;const l=u.length,c=Wd.parseAxisParam(a,u);let p=c;const h=ly.getAxesPermutation(p,l);let d=i.data.get(s.dataId).values;if(null!=h){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[h[t]];d=vE(d,u,s.dtype,h,e),p=ly.getInnerMostAxes(p.length,l),u=e}AT(s,"max"),ly.assertAxesAreInnerMostDims("max",p,l);const[f,m]=ly.computeOutAndReduceShapes(u,p),g=UC(d,Wd.sizeFromShape(m),f,s.dtype),y=i.write(g,f,s.dtype);let b=f;if(o){b=ly.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:s.dtype}}const HC={kernelName:"Max",backendName:"cpu",kernelFunc:GC},qC=BT(((e,t)=>Math.max(e,t))),jC={kernelName:"Maximum",backendName:"cpu",kernelFunc:oE("Maximum",qC)};const KC={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;AT(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;Wd.assert(ly.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=ly.computePool2DInfo(s.shape,a,o,1,i,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&Wd.arraysEqual(l.inShape,l.outShape))c=OT({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Wd.computeStrides(s.shape),r=FE(e,s.shape,s.dtype,t,l,"max");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const XC={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;AT(s,"maxPool3d");const c=ly.computePool3DInfo(s.shape,a,o,1,i,u,l),p=ME(n.data.get(s.dataId).values,s.shape,s.dtype,Wd.computeStrides(s.shape),c,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}};const YC={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;AT([s,a],"maxPool3DGrad");const c=ly.computePool3DInfo(a.shape,o,i,1,u,l),p=LE(n.bufferSync(a),c),h=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,S=sg(a.shape,"float32"),I=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-k,o=r-N,i=s-v;let u=0;for(let n=0;n<b;n+=m){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(o+s)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<w;o+=y){const l=(i+o)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const h=b*x*w-1-p.get(e,r,a,l,t)===n*x*w+s*w+o?1:0;if(0===h)continue;u+=I.get(e,r,a,l,t)*h}}}S.set(u,e,n,r,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const ZC={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;AT([a,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,h=ly.computePool2DInfo(i.shape,u,l,1,c,p),d=n.data.get(i.dataId).values,f=sg(h.outShape,i.dtype,OE(d,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=w-1-h.padInfo.left,v=x-1-h.padInfo.top,N=sg(i.shape,"float32"),S=n.data.get(s.dataId).values,I=sg(s.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=n-v,a=r-k;let o=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const i=(a+s)/g;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;const u=x*w-1-f.get(e,r,i,t)===n*w+s?1:0;if(0===u)continue;o+=I.get(e,r,i,t)*u}}N.set(o,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};function JC(e,t,n,r,s){const a=FE(e,0,n,Wd.computeStrides(t),s,"max"),o=OE(e,t,n,s,!0,r);return[a.values,o.values]}const QC={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,u=n;AT(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=ly.computePool2DInfo(r.shape,s,a,[1,1],o),[p,h]=JC(l,r.shape,r.dtype,i,c),d=u.write(p,c.outShape,r.dtype),f=u.write(h,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const eA={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=Wd.parseAxisParam(a,s.shape),u=ly.computeOutAndReduceShapes(s.shape,i)[1],l=Wd.sizeFromShape(u),c=[],p=n.makeTensorInfo([],"float32",new Float32Array([l]));c.push(p);const h=sE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});c.push(h);const d=Q$({inputs:{a:h,b:p},backend:n});c.push(d);const f=_$({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:o}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const tA={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;AT(s,"min");const i=Wd.parseAxisParam(a,s.shape);let u=i;const l=ly.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=NE({inputs:{x:s},backend:n,attrs:{perm:l}}),u=ly.getInnerMostAxes(u.length,s.shape.length)),ly.assertAxesAreInnerMostDims("min",u,c.shape.length);const[p,h]=ly.computeOutAndReduceShapes(c.shape,u),d=Wd.sizeFromShape(h),f=Wd.makeZerosTypedArray(Wd.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=hE({inputs:{x:g},backend:n,attrs:{shape:ly.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},nA=BT(((e,t)=>Math.min(e,t))),rA={kernelName:"Minimum",backendName:"cpu",kernelFunc:oE("Minimum",nA)};const sA={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:o}=r;AT(s,"mirrorPad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===o?0:1,p=n.data.get(s.dataId).values,h=s.shape.length,d=Wd.computeStrides(s.shape),f=Wd.sizeFromShape(i),m=i.length,g=Wd.computeStrides(i),y=Wd.getTypedArrayFromDType(s.dtype,f);for(let e=0;e<f;e++){let t=Wd.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=Wd.locToIndex(t,h,d);y[e]=p[n]}return{dataId:n.write(y,i,s.dtype),shape:i,dtype:s.dtype}}},aA={kernelName:"Mod",backendName:"cpu",kernelFunc:oE("Mod",BT(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})))};function oA(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=s.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const u=Wd.parseAxisParam([i],s.shape),l=GC({inputs:{x:s},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=ly.expandShapeToKeepDim(l.shape,u),p=hE({inputs:{x:l},backend:n,attrs:{shape:c}}),h=rC({inputs:{a:s,b:p},backend:n}),d=j$({inputs:{x:h},backend:n}),f=_$({inputs:{x:d},backend:n,attrs:{axis:u,keepDims:!1}}),m=hE({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Q$({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const iA={kernelName:"Softmax",backendName:"cpu",kernelFunc:oA};const uA={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r;AT(s,"multinomial");const u=i?s:oA({inputs:{logits:s},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],p=n.data.get(u.dataId).values,h=[l,a],d=Wd.makeZerosTypedArray(Wd.sizeFromShape(h),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const r=dl.alea(o.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();d[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[s+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(h,"int32",d)}};function lA(e,t,n){const r=Wd.createScalarValue(-1,n);return $$([],t,r,e,n)}const cA={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;AT(r,"neg");const s=n.data.get(r.dataId).values,[a,o]=lA(s,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,a)}},pA=bx.nonMaxSuppressionV3Impl;const hA={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r;AT(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:p}=pA(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},dA=bx.nonMaxSuppressionV4Impl;const fA={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=r;AT(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,{selectedIndices:h,validOutputs:d}=dA(c,p,o,i,u,l);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},mA=bx.nonMaxSuppressionV5Impl;const gA={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=r;AT(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,h=o,d=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=mA(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},yA=BT(((e,t)=>e!==t?1:0)),bA={kernelName:"NotEqual",backendName:"cpu",kernelFunc:oE("NotEqual",yA,null,"bool")};const xA={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:u}=r;AT(s,"oneHot");const l=Wd.sizeFromShape(s.shape),c=new Float32Array(l*o);c.fill(u);const p=n.data.get(s.dataId).values;for(let e=0;e<l;++e)p[e]>=0&&p[e]<o&&(c[e*o+p[e]]=i);return n.makeTensorInfo([...s.shape,o],a,c)}};function wA(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=tE({inputs:{input:r},backend:n}),t=wA({inputs:{x:e},backend:n}),s=n$({inputs:{input:r},backend:n}),a=wA({inputs:{x:s},backend:n}),o=JT({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return lC({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const kA={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:wA};const vA={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=tE({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=n$({inputs:{input:s},backend:r}),o=wA({inputs:{x:a},backend:r}),i=JT({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return lC({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function NA(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return X$({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{Wd.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Wd.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],u=s$({inputs:t.map((e=>{const t=X$({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const SA={kernelName:"Pack",backendName:"cpu",kernelFunc:NA};const IA={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;AT(s,"pad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=n.data.get(s.dataId).values,c=Wd.sizeFromShape(s.shape),p=s.shape.length,h=Wd.computeStrides(s.shape),d=Wd.sizeFromShape(i),f=i.length,m=Wd.computeStrides(i),g=Wd.getTypedArrayFromDType(s.dtype,d);0!==o&&g.fill(o);for(let e=0;e<c;e++){const t=Wd.indexToLoc(e,p,h).map(((e,t)=>e+u[t]));g[Wd.locToIndex(t,f,m)]=l[e]}return{dataId:n.write(g,i,s.dtype),shape:i,dtype:s.dtype}}},TA={kernelName:"Pow",backendName:"cpu",kernelFunc:oE("Pow",BT(((e,t)=>Math.pow(e,t))))};function EA(e,t,n,r){const[s,a]=ly.computeOutAndReduceShapes(e,r),o=Of(t,"int32"),i=Wd.makeZerosTypedArray(Wd.sizeFromShape(s),o),u=Wd.sizeFromShape(a);for(let e=0;e<i.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:s,outDtype:o}}const $A={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;AT(s,"prod");const i=s.shape.length,u=Wd.parseAxisParam(a,s.shape),l=ly.getAxesPermutation(u,i);let c=u,p=s;const h=[];null!=l&&(p=NE({inputs:{x:s},backend:n,attrs:{perm:l}}),h.push(p),c=ly.getInnerMostAxes(c.length,i));const d=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=EA(p.shape,p.dtype,d,c);let y=m;return o&&(y=ly.expandShapeToKeepDim(m,u)),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function CA(e,t,n,r){const s=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=i[s],t=e[e.length-1]-r[o];for(let e=o;e<u;++e)i[s].push(r[e+1]+t)}o=r[o],u=r[u]}u!==o&&(s.push([o,u]),a+=u-o)}return{outSplits:i,valueSlices:s,numValues:a}}function AA(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function RA(e,t,n,r,s){const a=t.slice();a[0]=s;const o=Wd.getArrayFromDType(n,Wd.sizeFromShape(a)),i=e.length;return function(e,t,n,r,s,a){const o=AA(t,2)[1],i=AA(a,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[u*i+t]=e[n*o+t];++u}}(e,t,r,0===i?0:i/t[0],o,a),[o,a]}function _A(e,t,n,r,s,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,r)=>{if(e<0||e>=n){const s=Wd.indexToLoc(r,t.length,Wd.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const u=r[0],{outSplits:l,valueSlices:c,numValues:p}=CA(a,o,e,u),h=function(e){const t=[];for(let n=0;n<e.length;++n){const r=e[n].length,s=Wd.getArrayFromDType("int32",r);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(l),d=RA(n,r,s,c,p);return[h,d[0],d[1]]}const DA={kernelName:"RaggedGather",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,u=s.map((e=>n.data.get(e.dataId).values)),l=s.map((e=>e.shape)),c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,[h,d,f]=_A(u,l,c,a.shape,a.dtype,p,o.shape),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};function FA(e,t,n,r,s,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,u=0===s.length,l=0===o.length,c=[];i||c.push(t[0]),u||c.push(s[0]),l||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===c.length?1:c[0],h=Wd.getArrayFromDType("int32",p+1);h[0]=0;for(let t=0;t<p;++t){const n=i?e[0]:e[t],s=u?r[0]:r[t],o=l?a[0]:a[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&s<n||o<0&&s>n)c=0;else if(c=Math.ceil(Math.abs((s-n)/o)),c>2147483647)throw new Error("Requires ((limit - start) / delta) <= 2147483647");h[t+1]=h[t]+c}const d=h[p],f=Wd.getArrayFromDType(n,d);let m=0;for(let t=0;t<p;++t){const n=h[t+1]-h[t];let r=i?e[0]:e[t];const s=l?a[0]:a[t];for(let e=0;e<n;++e)f[m++]=r,r+=s}return[h,f]}const OA={kernelName:"RaggedRange",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=FA(o,r.shape,r.dtype,i,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};var MA=ly.RowPartitionType;class LA{constructor(e,t,n,r,s,a,o,i,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=ly.getRowPartitionTypesHelper(l),this.raggedRank=ly.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===MA.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===MA.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case MA.VALUE_ROWIDS:return LA.getMaxWidthValueRowID(t);case MA.ROW_SPLITS:return LA.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${MA[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return BA(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;ly.validateDefaultValueShape(n,t);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=ly.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let e=0;e<r;++e,a+=t)s.push(a);for(let t=r;t<e;++t)s.push(-1);return Wd.assert(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let o=0;o<s-1;++o){const s=e[o+1]-e[o];let i=Math.min(r,s),u=t[o];-1===u&&(i=0);for(let e=0;e<i;++e)a.push(u),u+=n;for(let e=0;e<s-i;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let u=t[i];a.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===i)u>=0&&(++o,o<r?u+=n:u=-1);else{if(o=0,i=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case MA.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case MA.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${MA[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case MA.FIRST_DIM_SIZE:return e[0];case MA.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case MA.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${MA[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=BA(t,!1),s=Wd.getArrayFromDType(this.valuesDType,Wd.sizeFromShape(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){a=this.calculateOutputIndex(e-1,a,n[e],t[e])}this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let o=r.slice();o=o.slice(e+1);const i=Wd.sizeFromShape(o),u=t.length;let l=this.defaultValue;if(l.length!==i&&1!==l.length){const e=this.defaultValueShape;Rx((()=>{const t=Zy(l,e),n=Pw(t,o);l=n.dataSync()}))}let c=0,p=0,h=0;for(let e=0;e<=u;++e){let r=e<u?t[e]:-1;if(r!==h){if(p<h){const e=s.subarray(c*i);zA(a.subarray(p*i),e,(h-p)*i)}if(e>=u){const e=n.length;r=Math.floor(e/i)}if(r>h)if(1===this.defaultValue.length)a.subarray(h*i,r*i).fill(this.defaultValue[0]),h=r;else for(;r>h;){zA(a.slice(h*i),l,i),++h}r<0?(c=e+1,p=h):(c=e,p=h,h=p+1)}else++h}}}function zA(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function BA(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function PA(e,t,n,r,s,a,o,i,u,l){return new LA(e,t,n,r,s,a,o,i,u,l).compute()}const VA={kernelName:"RaggedTensorToTensor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,h=i.map((e=>n.data.get(e.dataId).values)),d=i.map((e=>e.shape)),[f,m]=PA(l,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,u);return n.makeTensorInfo(f,a.dtype,m)}};function WA(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return Wd.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/n)),a=Wd.makeZerosTypedArray(s,r);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const UA={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:o}=n,i=WA(r,s,o,a);return t.makeTensorInfo([i.length],a,i)}},GA={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:RT("Reciprocal",(e=>1/e))};const HA={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;AT(s,"resizeBilinear");const u=Wd.computeStrides(s.shape),[l,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(Wd.sizeFromShape([p,l,c,f])),y=[a&&l>1?h-1:h,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<l;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(h-1,Math.ceil(n)),i=e*u[0]+r*u[1],l=e*u[0]+a*u[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),c=i+n*u[2],p=l+n*u[2],h=i+a*u[2],y=l+a*u[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[p+e],a=t+(m[h+e]-t)*r,o=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=o}}}return n.makeTensorInfo([p,l,c,f],"float32",g)}};const qA={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;AT([a,s],"resizeBilinearGrad");const i=Wd.computeStrides(s.shape),[u,l,c,p]=s.shape,[,h,d]=a.shape,f=new Float32Array(u*l*c*p),m=[o&&h>1?l-1:l,o&&d>1?c-1:c],g=[o&&h>1?h-1:h,o&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<h;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),l-1),a=t+r*i[1],o=t+s*i[1],u=n-r,h=1-u;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,l=1-s,d=a+n*i[2],m=a+r*i[2],g=o+n*i[2],y=o+r*i[2],k=h*l,v=h*s,N=u*l,S=u*s;for(let e=0;e<p;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*S}}}}return n.makeTensorInfo([u,c,l,p],"float32",f)}};const jA={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;AT(s,"resizeNearestNeighbor");const u=Wd.computeStrides(s.shape),[l,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(p*l*c*f),y=[a&&l>1?h-1:h,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<p;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=o?x*(e+.5):x*e;let r=Math.min(h-1,a?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=t+r*u[1];for(let e=0;e<c;e++){const t=o?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*u[2];for(let e=0;e<f;e++){const t=m[r+e];g[k++]=t}}}}return n.makeTensorInfo([p,l,c,f],s.dtype,g)}};const KA={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;AT([a,s],"resizeNearestNeighborGrad");const i=Wd.computeStrides(s.shape),u=Wd.computeStrides(a.shape),[l,c,p,h]=s.shape,[,d,f]=a.shape,m=new Float32Array(l*c*p*h),g=n.data.get(a.dataId).values,y=[o&&d>1?c-1:c,o&&f>1?p-1:p],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,S=2*Math.ceil(v)+2;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],r=Math.floor(e*k),s=Math.floor(r-N/2);for(let r=0;r<p;r++){const a=n+r*i[2],l=Math.floor(r*v),y=Math.floor(l-S/2);for(let n=0;n<h;n++){let i=0;for(let a=0;a<N;a++){const l=a+s;if(l<0||l>=d)continue;const h=t+l*u[1],m=l*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const s=h+t*u[2],a=t*w;r===Math.min(p-1,o?Math.round(a):Math.floor(a))&&(i+=g[s+n])}}m[a+n]=i}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const XA={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;AT(s,"reverse");const o=s.shape.length,i=Wd.parseAxisParam(a,s.shape);if(0===o)return OT({inputs:{x:s},backend:n});const u=new wf(s.shape,s.dtype),l=n.bufferSync(s);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=s.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},YA={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,u=Wd.getTypedArrayFromDType(r.dtype,Wd.sizeFromShape(r.shape)),[l,c,p,h]=r.shape,[d,f]=ly.getImageCenter(o,c,p),m=Math.sin(s),g=Math.cos(s),y=i.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let r=0;r<p;r++){const s=r*h;for(let o=0;o<h;o++){const i=[l,e,r,o],b=i[2],x=i[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;if("number"!=typeof a&&(v=3===o?255:a[o]),w>=0&&w<p&&k>=0&&k<c){v=y[t+k*(p*h)+w*h+o]}u[t+n+s+o]=v}}}}return{dataId:i.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},ZA={kernelName:"Round",backendName:"cpu",kernelFunc:RT("Round",(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}))},JA=jT((e=>1/Math.sqrt(e))),QA={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:_T("Rsqrt",JA)};function eR(e,t,n,r,s,a,o,i,u,l){const c=[r/s,s],p=e.values,h=t.values;if(0===r)return sg(n,t.dtype);const d=sg(c,t.dtype);"string"==typeof u||"number"==typeof u?d.values.fill(u):"boolean"==typeof u&&d.values.fill(+u);for(let e=0;e<a;e++){const a=[];let u=0;for(let t=0;t<o;t++){const n=p[e*o+t];a.push(n),u+=n*i[t]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=h[e*s+n]:d.values[u*s+n]=0===t.rank?h[0]:h[e*s+n]}return d}const tR={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:p}=ly.calculateShapes(a,s,o),h=eR(n.bufferSync(s),n.bufferSync(a),o,p,l,u,i,c,0,!0);return n.makeTensorInfo(o,h.dtype,h.values)}};function nR(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function rR(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}function sR(e,t,n,r,s,a){const o=Wd.getArrayFromDType("int32",n*s);for(let i=0;i<n;++i){const n=e.slice(i*r,(i+1)*r),u=i*s;for(let e=0;e<s;++e)o[u+e]="left"===a?nR(n,t[e+u]):rR(n,t[e+u])}return o}const aR={kernelName:"SearchSorted",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=sR(n.data.get(s.dataId).values,n.data.get(a.dataId).values,s.shape[0],s.shape[1],a.shape[1],o);return n.makeTensorInfo(a.shape,"int32",i)}};const oR={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;AT([r,s,a],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=Of(s.dtype,a.dtype),p=Wd.makeZerosTypedArray(Wd.sizeFromShape(s.shape),c);let h=0;const d=0===o||o>1||1===s.shape.length?1:Wd.sizeFromShape(s.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<d;t++)1===i[e]?p[h++]=u[e]:p[h++]=l[e];return n.makeTensorInfo(s.shape,c,p)}},iR=ly.SELU_SCALEALPHA,uR=ly.SELU_SCALE,lR={kernelName:"Selu",backendName:"cpu",kernelFunc:RT("Selu",(e=>e>=0?uR*e:iR*(Math.exp(e)-1)))},cR={kernelName:"Sign",backendName:"cpu",kernelFunc:RT("Sign",(e=>e<0?-1:e>0?1:0))},pR={kernelName:"Sin",backendName:"cpu",kernelFunc:RT("Sin",(e=>Math.sin(e)))},hR={kernelName:"Sinh",backendName:"cpu",kernelFunc:RT("Sinh",(e=>Math.sinh(e)))},dR=Math.log(1.1920928955078125e-7)+2,fR={kernelName:"Softplus",backendName:"cpu",kernelFunc:RT("Softplus",(e=>{const t=e>-dR,n=e<dR,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s}))};const mR={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;AT([s],"spaceToBatchND");const i=Wd.sizeFromShape(a),u=[[0,0]];u.push(...o);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=IA.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=ly.getReshaped(l.shape,a,i,!1),p=ly.getPermuted(c.length,a.length,!1),h=ly.getReshapedPermuted(l.shape,a,i,!1),d=hE({inputs:{x:l},backend:n,attrs:{shape:c}}),f=NE({inputs:{x:d},backend:n,attrs:{perm:p}}),m=hE({inputs:{x:f},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function gR(e,t,n,r,s,a,o){const i=t[0],u=a[0],l=new Array(u),c=new Array(i),p=t[1];if(0===u){if(0!==i)throw new Error(ly.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));return[Wd.getArrayFromDType(n,0),[0,p],Wd.getArrayFromDType(s,0),l,c]}let h=!0,d=0;const f=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(ly.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=u)throw new Error(ly.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,u));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,l,c]}{const t=f[u-1],a=Wd.getArrayFromDType(n,t*p),h=Wd.getArrayFromDType(s,t),d=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p],s=d[n],o=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<p;++n)a[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<u;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;h[t]=o}}return[a,[t,p],h,l,c]}}const yR={kernelName:"SparseFillEmptyRows",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[p,h,d,f,m]=gR(i,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function bR(e,t,n,r,s){const a=Wd.sizeFromShape(r),o=t[0],i=s.length,u=[];let l=1,c=-1;for(let e=0;e<i;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(ly.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,u.push(1)}else{if(t<0)throw new Error(ly.getSparseReshapeNegativeOutputDimErrorMessage(e,t));l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error(ly.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/l);if(l*e!==a)throw new Error(ly.getSparseReshapeInputOutputMultipleErrorMessage(r,u));u[c]=e}if(Wd.sizeFromShape(u)!==a)throw new Error(ly.getSparseReshapeInputOutputMismatchErrorMessage(r,u));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*u[e+1]}const f=Wd.getArrayFromDType(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],u]}const xR={kernelName:"SparseReshape",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(s.dataId).values),i=n.data.get(r.dataId).values,u=Array.from(n.data.get(a.dataId).values),[l,c,p]=bR(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};function wR(e,t,n,r,s,a=!1,o=0){const i=r.length,u=[t[0],e.length/t[0]],l=u[1],c=i>0?s[i-1]+1:0;if(c<0)throw new Error(ly.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=c;const h=p.reduce(((e,t)=>e*t),1),d=Wd.getArrayFromDType(n,h);if(0===i)return c>0&&d.fill(o),[d,p];if(c<=0)throw new Error(ly.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=s[f];for(;;){let t=0;if(m<i){if(t=s[m],y===t){++m;continue}if(y>=t)throw new Error(ly.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(ly.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(o,g*l,y*l);for(let t=f;t<m;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(ly.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],u[0]));for(let t=0;t<l;t++)d[y*l+t]+=e[n*l+t]}if(a)for(let e=0;e<l;e++)d[y*l+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>i)break}return g<c&&d.fill(o,g*l,c*l),[d,p]}const kR={kernelName:"SparseSegmentMean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=wR(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const vR={kernelName:"SparseSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=wR(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}};const NR={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:h}=ly.calculateShapes(a,s,i),d=!1,f=n.bufferSync(s);let m;switch(a.dtype){case"bool":m=eR(f,n.bufferSync(a),i,h,c,l,u,p,Boolean(n.data.get(o.dataId).values[0]),d);break;case"float32":m=eR(f,n.bufferSync(a),i,h,c,l,u,p,n.data.get(o.dataId).values[0],d);break;case"int32":m=eR(f,n.bufferSync(a),i,h,c,l,u,p,n.data.get(o.dataId).values[0],d);break;case"string":m=eR(f,n.bufferSync(a),i,h,c,l,u,p,Wd.decodeString(n.data.get(o.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}};const SR={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=Wd.parseAxisParam(o,s.shape)[0],u=ly.prepareSplitSize(s,a,i),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map((e=>{const t=[...c];t[i]=e;const r=GE({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[i]+=e,r}))}},IR=jT((e=>Math.sqrt(e))),TR={kernelName:"Sqrt",backendName:"cpu",kernelFunc:RT("Sqrt",(e=>Math.sqrt(e)))},ER={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;AT(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},$R=BT(((e,t)=>{const n=e-t;return n*n})),CR={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:oE("SquaredDifference",$R)},AR={kernelName:"Step",backendName:"cpu",kernelFunc:RT("Step",((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}))};function RR(e,t,n,r){const s=sg(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+r[e];s.set(t.get(...o),...a)}return s}const _R={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r;AT(s,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Vg.sliceInfo(s.shape,a,o,i,u,l,c,p,h);let k;if(m)k=hE({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){Wd.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=Vg.computeOutShape(b,x,w),t=GE({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=hE({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=RR(d,n.bufferSync(s),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class DR{constructor(e,t,n,r,s,a){this.separator=Wd.encodeString(e),this.nGramWidths=t,this.leftPad=Wd.encodeString(n),this.rightPad=Wd.encodeString(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let o=0;o<s;++o){const i=this.getPadWidth(a),u=Math.max(0,i-o),l=Math.max(0,i-(s-(o+1))),c=a-(u+l),p=t+(u>0?0:o-i);let h=0;h+=u*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=l*this.rightPad.length;h+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=Wd.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],u=this.getNumNGrams(i,a);this.createNGrams(e,r,o,s,u,a),s+=u})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,u=1;this.createNGrams(e,r,o,s,u,i)}}return[o,a]}}function FR(e,t,n,r,s,a,o,i){return new DR(n,r,s,a,o,i).compute(e,t)}const OR={kernelName:"StringNGrams",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,h=n.data.get(c.dataId).values,d=n.data.get(p.dataId).values,[f,m]=FR(h,d,s,a,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};function MR(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function LR(e,t,n){const r=e.length,s=[];let a=0,o=0;const i=new Array(r);for(let u=0;u<r;++u){const r=s.length;MR(e[u],t,n,s);const l=s.length-r;i[u]=l,a+=l,o=Math.max(o,l)}const u=Wd.getArrayFromDType("int32",2*a),l=new Array(a),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)u[2*p]=e,u[2*p+1]=t,l[p]=s[p],++p;return[u,l,c]}const zR={kernelName:"StringSplit",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,u=n.data.get(o.dataId).values[0],[l,c,p]=LR(i,u,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",l),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};function BR(e,t){const n=Wd.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=Wd.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const PR={kernelName:"StringToHashBucketFast",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=BR(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",o)}},VR={kernelName:"Tan",backendName:"cpu",kernelFunc:RT("Tan",(e=>Math.tan(e)))},WR=RT("Tanh",(e=>Math.tanh(e)));function UR(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=sg(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const GR=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function HR(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(a-s/2);HR(e,t,Math.max(n,Math.floor(t-a*i/s+u)),Math.min(r,Math.floor(t+(s-a)*i/s+u)))}const s=e[t];let a=n,o=r;for(Wd.swap(e,n,t),GR(e[r],s)>0&&Wd.swap(e,n,r);a<o;){for(Wd.swap(e,a,o),a++,o--;GR(e[a],s)<0;)a+=1;for(;GR(e[o],s)>0;)o-=1}0===GR(e[n],s)?Wd.swap(e,n,o):(o+=1,Wd.swap(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function qR(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],u=Wd.getTypedArrayFromDType(n,o*r),l=Wd.getTypedArrayFromDType("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(HR(o,r),o=o.slice(0,r)),s&&o.sort(GR);const c=t*r,p=u.subarray(c,c+r),h=l.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[sg(c,n,u),sg(c,"int32",l)]}function jR(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Wd.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Wd.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Wd.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function KR(e,t,n,r,s,a,o,i,u,l,c){return 0<=i&&i<t&&0<=u&&u<n?e[o*r+i*s+u*a+l]:c}function XR(e,t,n,r,s,a,o,i,u,l,c){return KR(e,t,n,r,s,a,o,Math.round(i),Math.round(u),l,c)}function YR(e,t,n,r,s,a,o,i,u,l,c){const p=Math.floor(i),h=Math.floor(u),d=p+1,f=h+1;return(d-i)*((f-u)*KR(e,t,n,r,s,a,o,p,h,l,c)+(u-h)*KR(e,t,n,r,s,a,o,p,f,l,c))+(i-p)*((f-u)*KR(e,t,n,r,s,a,o,d,h,l,c)+(u-h)*KR(e,t,n,r,s,a,o,d,f,l,c))}function ZR(e,t,n,r){const s=Wd.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const o={},i=new Int32Array(n[s]),u=new wf(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(u.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,l.push(t)}}const p=a.slice();p[1]=Object.keys(o).length;const h=new wf(p,r);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)h.set(u.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const JR=[gE,bE,xE,wE,pE,kE,IE,TE,EE,$E,CE,AE,RE,_E,DE,zE,BE,PE,VE,mE,WE,qE,XE,YE,aE,JE,QE,QT,e$,a$,i$,u$,l$,c$,p$,h$,d$,f$,m$,g$,y$,b$,x$,k$,v$,N$,S$,I$,T$,E$,F$,FT,O$,z$,H$,K$,Y$,J$,uC,cC,pC,dC,fC,mC,gC,bC,wC,vC,SC,MT,IC,r$,TC,EC,$C,zT,AC,_C,FC,MC,LC,zC,BC,PC,VC,WC,HC,jC,KC,XC,YC,ZC,QC,eA,tA,rA,sA,aA,uA,R$,cA,hA,fA,gA,bA,xA,vA,SA,IA,TA,WT,$A,DA,OA,VA,UA,nE,eC,GA,GT,qT,dE,HA,qA,jA,KA,XA,YA,ZA,QA,tR,aR,oR,lR,YT,cR,pR,hR,HE,iA,fR,mR,yR,xR,kR,vR,NR,SR,TR,ER,CR,AR,_R,OR,zR,PR,sC,D$,VR,{kernelName:"Tanh",backendName:"cpu",kernelFunc:WR},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;AT(s,"tile");const o=UR(n.bufferSync(s),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r;AT(s,"topk");const i=n.data.get(s.dataId).values,[u,l]=qR(i,s.shape,s.dtype,a,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},{kernelName:"Transform",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=n,[c,p,h,d]=s.shape,[f,m]=null!=l?l:[p,h],g=[c,f,m,d],y=Wd.computeStrides(s.shape),b=y[0],x=y[1],w=y[2],k=Wd.computeStrides(g),v=k[0],N=k[1],S=k[2],I=Wd.getTypedArrayFromDType(s.dtype,Wd.sizeFromShape(g));I.fill(u);const T=r.data.get(s.dataId).values,E=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?E:E.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<d;++s){let a;const l=t[6]*r+t[7]*n+1;if(0===l)continue;const c=(t[0]*r+t[1]*n+t[2])/l,d=(t[3]*r+t[4]*n+t[5])/l,f=jR(c,h,i),m=jR(d,p,i);switch(o){case"nearest":a=XR(T,p,h,b,x,w,e,m,f,s,u);break;case"bilinear":a=YR(T,p,h,b,x,w,e,m,f,s,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}I[e*v+n*N+r*S+s]=a}return r.makeTensorInfo(g,s.dtype,I)}return{dataId:r.write(I,g,s.dtype),shape:s.shape,dtype:s.dtype}}},SE,{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;AT(a,"unique");const o=r.data.get(a.dataId).values,{outputValues:i,outputShape:u,indices:l}=ZR(o,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s.shape.length,i=s.shape[a],u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==a&&(u[l++]=s.shape[e]);const c=new Array(o).fill(0),p=s.shape.slice();p[a]=1;const h=new Array(i);for(let e=0;e<h.length;e++){c[a]=e;const t=GE({inputs:{x:s},backend:n,attrs:{begin:c,size:p}});h[e]=hE({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return h}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r;AT(s,"unsortedSegmentSum");const i=[],u=[],l=s.shape.length-a.shape.length;let c=a;for(let e=0;e<l;++e){const t=X$({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<o;++e){const t=Wd.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=L$({inputs:{a:r,b:c},backend:n}),o=sE({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),l=A$({inputs:{a:o,b:s},backend:n}),p=_$({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});i.push(p),u.push(r),u.push(a),u.push(o),u.push(l),u.push(p)}const p=NA({inputs:i,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},kA];for(const e of JR)Bd(e);const QR=bx.whereImpl;class e_ extends Eh{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Th(this,Cx())}nextDataId(){return e_.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,Td().get("IS_NODE")&&ly.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Wd.isString(n[0])){const s=n.map((e=>Wd.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return ly.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Wd.decodeString(e)));return sg(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return sg(e.shape,e.dtype,t)}makeOutput(e,t,n){return Cx().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Wd.now();e();return{kernelMs:Wd.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){AT([e],"where");const t=this.readSync(e.dataId);return QR(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}e_.nextDataId=0;function t_(){let e,t,n,r,s,a,o,i,u,l;return 2===Td().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",o="out vec4 outputColor;",i=Td().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:u,defineRound:l}}function n_(e,t,n="index"){const r=Wd.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function r_(e,t,n="index"){const r=Wd.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / outShapeStrides[${s}]`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function s_(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${r[s]}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}function a_(e){const t=Wd.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Fx("cpu",(()=>new e_),1);const o_="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:i_}=ly;function u_(e,t,n){const r=[];if(e.forEach((e=>{const t=Wd.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=x_(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?c_(e,r):l_(e,r);const a=e.shapeInfo.logicalShape,o=t.logicalShape;a.length<=o.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=i_(e.shapeInfo.logicalShape,t.logicalShape),u=b_(o),l=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+l]} = 0;`)).join("\n");let h="";h=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+l]}`)).join(", ");let d="return outputValue;";const f=1===Wd.sizeFromShape(e.shapeInfo.logicalShape),m=1===Wd.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&Wd.arraysEqual(o,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=b_(u),c=i_(e.shapeInfo.logicalShape,t.logicalShape),p=u-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\n");let f="";f=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${r}(${f});\n    }\n  `}(e,t));return s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=t_(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let l,c,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${p_}\n    ${h_}\n    ${d_}\n  `}(i);t.isPacked?(l=function(e,t,n){switch(e.length){case 0:return m_();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Wd.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let o=a,i="",u="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(l=function(e,t,n){switch(e.length){case 0:return m_();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(Wd.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${r_(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=n_(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${r_(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=n_(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=n_(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=n_(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=f_);return[p,u,c,s,l,a,n.userCode].join("\n")}function l_(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=g_(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${u}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${y_(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],o=s[1];if(1===o&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=g_(n);if(1===o)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&Wd.arraysEqual(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=Wd.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col"];return`\n      ${l_(w_(e,u),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${k_(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${y_(e)}\n      }\n    `;const l=a[0],c=a[1],p=g_(r);if(1===c)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===l)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;return t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:u}=Wd.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col","depth"];return`\n        ${l_(w_(e,l),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${k_(n,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${y_(e)}\n      }\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===o&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=g_(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:u,keptDims:l}=Wd.squeezeShape(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${l_(w_(e,u),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${k_(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${y_(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=g_(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:u,keptDims:l}=Wd.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${l_(w_(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${k_(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${s})) +\n          depth3;\n        ${y_(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=g_(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=Wd.squeezeShape(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${l_(w_(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${k_(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${y_(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=g_(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function c_(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=t_();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=t_();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],u=t_();if(null!=a&&Wd.arraysEqual(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${c_(w_(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${k_(a,r)});\n        }\n      `}const i=t_();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const u=o[0],l=o[1],c=Math.ceil(n[2]/2),p=c*Math.ceil(n[1]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${p}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t_();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=u[0],c=u[1],p=Math.ceil(a[o-1]/2);let h=p*Math.ceil(a[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=a[o-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const p_="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",h_="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",d_="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",f_="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function m_(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function g_(e){return`offset${e}`}function y_(e){const t=e.name,n=Wd.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function b_(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function x_(e,t,n){const{newShape:r,keptDims:s}=Wd.squeezeShape(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):r,u=!e&&a>1&&!Wd.arraysEqual(t,n)&&r.length<a||o;return{useSqueezeShape:u,uniformShape:u?i:t,keptDims:s}}function w_(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function k_(e,t){return t.map((t=>e[t])).join(", ")}const v_={},N_={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function S_(e,t){v_[e]=t}function I_(e,t){if(!(e in v_)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete v_[e]}),!1),Td().getBool("SOFTWARE_WEBGL_ENABLED")&&(N_.failIfMajorPerformanceCaveat=!1);return 1===e?n.getContext("webgl",N_)||n.getContext("experimental-webgl",N_):n.getContext("webgl2",N_)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;v_[e]=n}const n=v_[e];return null==n||n.isContextLost()?(delete v_[e],I_(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),v_[e])}var T_,E_,$_,C_,A_,R_;function __(e,t){return[t,e]}function D_(e){const t=Wd.sizeFromShape(e),n=Math.ceil(t/4);return Wd.sizeToSquarishShape(n)}function F_(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function O_(e,t){const n=e;let r,s,a,o,i,u,l,c,p,h;return 2===Td().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,l=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,u=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,l=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,u=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function M_(e,t){const n=t();return Td().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}(E_=T_||(T_={}))[E_.DENSE=0]="DENSE",E_[E_.SHARED_BATCH=1]="SHARED_BATCH",(C_=$_||($_={}))[C_.RENDER=0]="RENDER",C_[C_.UPLOAD=1]="UPLOAD",C_[C_.PIXELS=2]="PIXELS",C_[C_.DOWNLOAD=3]="DOWNLOAD",(R_=A_||(A_={}))[R_.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",R_[R_.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",R_[R_.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",R_[R_.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",R_[R_.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function L_(e){return!!(Td().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function z_(e,t){return K_(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function B_(e,t){const n=K_(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(M_(e,(()=>e.shaderSource(n,t))),M_(e,(()=>e.compileShader(n))),Td().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw V_(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const P_=/ERROR: [0-9]+:([0-9]+):/g;function V_(e,t){const n=P_.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,o=s.map(((e,t)=>Wd.rightPad((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const u=o.slice(0,r-1),l=o.slice(r-1,r),c=o.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Wd.rightPad(l[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function W_(e,t){if(M_(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function U_(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(M_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),M_(e,(()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o))),M_(e,(()=>e.enableVertexAttribArray(i))),!0)}function G_(e,t,n,r){M_(e,(()=>function(e,t,n){X_(e,n),M_(e,(()=>e.activeTexture(e.TEXTURE0+n))),M_(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),M_(e,(()=>e.uniform1i(n,r)))}function H_(e,t,n){M_(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),M_(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function q_(e,t){M_(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),M_(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function j_(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function K_(e,t,n){const r=M_(e,(()=>t()));if(null==r)throw new Error(n);return r}function X_(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function Y_(e,t=2){return Wd.sizeFromShape(e.slice(0,e.length-t))}function Z_(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function J_(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Y_(e),...Z_(e)]),t}function Q_(e){return e%2==0}function eD(e,t){if(e=e.slice(-2),t=t.slice(-2),Wd.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(Q_(n)&&Q_(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Q_(e[0])&&Q_(t[0])}let tD,nD;function rD(e){if(null==tD){const t=I_(e);tD=t.getParameter(t.MAX_TEXTURE_SIZE)}return tD}function sD(e){if(null==nD){const t=I_(e);nD=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,nD)}function aD(e){if(0===e)return 0;let t;const n=I_(e);return t=oD(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:oD(n,"EXT_disjoint_timer_query")?1:0,t}function oD(e,t){return null!=e.getExtension(t)}function iD(e){try{if(null!=I_(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function uD(e){if(0===e)return!1;const t=I_(e);if(1===e){if(!oD(t,"OES_texture_float"))return!1}else if(!oD(t,"EXT_color_buffer_float"))return!1;return cD(t)}function lD(e){if(0===e)return!1;const t=I_(e);if(1!==e){if(oD(t,"EXT_color_buffer_float"))return cD(t);const e="EXT_color_buffer_half_float";if(oD(t,e)){const n=t.getExtension(e);return function(e,t){const n=O_(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!oD(t,"OES_texture_float"))return!1;if(!oD(t,"WEBGL_color_buffer_float"))return!1;return cD(t)}function cD(e){const t=O_(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function pD(e){if(2!==e)return!1;return null!=I_(e).fenceSync}function hD(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Wd.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function dD(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=u_(s,o,t),u=B_(e.gl,i),l=e.createProgram(u);return Td().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o},fD(e,t,l))}function fD(e,t,n){const r={},s={},a={},o=[];let i,u,l,c=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===Td().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const h=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];r[i]=e.getUniformLocation(n,i,h),r[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,h),t.enableShapeUniforms&&(s[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,h),a[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,h))}return t.enableShapeUniforms&&(i=e.getUniformLocation(n,"outShape",h),l=e.getUniformLocation(n,"outShapeStrides",h),u=e.getUniformLocation(n,"outTexShape",h)),t.customUniforms&&t.customUniforms.forEach(((t,r)=>{o[r]=e.getUniformLocation(n,t.name,h)})),{uniformLocations:r,customUniformLocations:o,infLoc:c,nanLoc:p,inShapesLocations:s,inTexShapesLocations:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}}function mD(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!Wd.arraysEqual(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!Wd.arraysEqual(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function gD(e){return Td().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class yD{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=ly.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=gD(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function bD(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function xD(e,t){return 1===t?[e]:bD(e,t)}function wD(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}class kD{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=ly.assertAndGetBroadcastShape(t,n);const s=this.outputShape.length;this.enableShapeUniforms=gD(s);let a="";if(r)if(0===s||1===Wd.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${b_(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=xD("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function vD(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const ND={kernelName:"Identity",backendName:"webgl",kernelFunc:vD};function SD(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(a.dataId),i=vD({inputs:{x:r},backend:n}),u=vD({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:u},a}const ID={kernelName:"Complex",backendName:"webgl",kernelFunc:SD},TD="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const ED={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,o=n.makeTensorInfo([],"float32",Wd.createScalarValue(a,"float32")),i=Td().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kD(TD,s.shape,o.shape):new yD("return (a < 0.) ? b * a : a;",s.shape,o.shape),u=n.runWebGLProgram(i,[s,o],"float32");return n.disposeIntermediateTensorInfo(o),u}},$D="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const CD={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=Td().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kD($D,r.shape,s.shape):new yD("return (a < 0.) ? b * a : a;",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}};class AD{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class RD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function _D({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:o}=s,i=a,u=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,u);return i.makeTensorInfo(o.shape,u,t)}let l;return l=Td().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new RD(o.shape,t):new AD(o.shape,e),i.runWebGLProgram(l,[o],u)}}function DD({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:o,backend:i})=>{const{a:u,b:l}=o,c=i;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},o=new yD(e,u.shape,l.shape);return c.runWebGLProgram(o,[s,a],Of(n.dtype,r.dtype))})),a=SD({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const p=a||Of(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?ly.fromUint8ToStringArray(e):e,r="string"===u.dtype?ly.fromUint8ToStringArray(t):t,[a,o]=s(u.shape,l.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=a,i}let h;return h=Td().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new kD(t,u.shape,l.shape,n):new yD(e,u.shape,l.shape),c.runWebGLProgram(h,[u,l],p)}}function FD(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?$D:"return (a < 0.) ? b * a : a;";if("leakyrelu"===e)return t?TD:"return (a < 0.) ? b * a : a;";if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class OD{constructor(e,t,n,r=!1,s=!1,a=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=gD(this.outputShape.length);const l=r?e[1]:e[2],c=Math.ceil(l/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const MD="return areal * breal - aimag * bimag;",LD="return areal * bimag + aimag * breal;";class zD{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=ly.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var BD={};t(BD,"simpleAbsImpl",(()=>yE)),t(BD,"addImpl",(()=>uE)),t(BD,"bincountImpl",(()=>jE)),t(BD,"bincountReduceImpl",(()=>KE)),t(BD,"castImpl",(()=>rE)),t(BD,"ceilImpl",(()=>ZE)),t(BD,"concatImpl",(()=>t$)),t(BD,"equalImpl",(()=>M$)),t(BD,"expImpl",(()=>q$)),t(BD,"expm1Impl",(()=>Z$)),t(BD,"floorImpl",(()=>hC)),t(BD,"gatherNdImpl",(()=>yC)),t(BD,"gatherV2Impl",(()=>xC)),t(BD,"greaterImpl",(()=>kC)),t(BD,"greaterEqualImpl",(()=>NC)),t(BD,"lessImpl",(()=>CC)),t(BD,"lessEqualImpl",(()=>RC)),t(BD,"linSpaceImpl",(()=>DC)),t(BD,"logImpl",(()=>OC)),t(BD,"maxImpl",(()=>UC)),t(BD,"maximumImpl",(()=>qC)),t(BD,"minimumImpl",(()=>nA)),t(BD,"multiplyImpl",(()=>$$)),t(BD,"negImpl",(()=>lA)),t(BD,"notEqualImpl",(()=>yA)),t(BD,"prodImpl",(()=>EA)),t(BD,"raggedGatherImpl",(()=>_A)),t(BD,"raggedRangeImpl",(()=>FA)),t(BD,"raggedTensorToTensorImpl",(()=>PA)),t(BD,"rangeImpl",(()=>WA)),t(BD,"rsqrtImpl",(()=>JA)),t(BD,"scatterImpl",(()=>eR)),t(BD,"sigmoidImpl",(()=>KT)),t(BD,"sliceImpl",(()=>UE)),t(BD,"sparseFillEmptyRowsImpl",(()=>gR)),t(BD,"sparseReshapeImpl",(()=>bR)),t(BD,"sparseSegmentReductionImpl",(()=>wR)),t(BD,"sqrtImpl",(()=>IR)),t(BD,"squaredDifferenceImpl",(()=>$R)),t(BD,"stridedSliceImpl",(()=>RR)),t(BD,"stringNGramsImpl",(()=>FR)),t(BD,"stringSplitImpl",(()=>LR)),t(BD,"stringToHashBucketFastImpl",(()=>BR)),t(BD,"subImpl",(()=>tC)),t(BD,"tileImpl",(()=>UR)),t(BD,"topKImpl",(()=>qR)),t(BD,"transposeImpl",(()=>vE)),t(BD,"uniqueImpl",(()=>ZR));const{addImpl:PD,bincountImpl:VD,bincountReduceImpl:WD,castImpl:UD,ceilImpl:GD,concatImpl:HD,equalImpl:qD,expImpl:jD,expm1Impl:KD,floorImpl:XD,gatherNdImpl:YD,gatherV2Impl:ZD,greaterImpl:JD,greaterEqualImpl:QD,lessImpl:eF,lessEqualImpl:tF,linSpaceImpl:nF,logImpl:rF,maxImpl:sF,maximumImpl:aF,minimumImpl:oF,multiplyImpl:iF,negImpl:uF,notEqualImpl:lF,prodImpl:cF,raggedGatherImpl:pF,raggedRangeImpl:hF,raggedTensorToTensorImpl:dF,rangeImpl:fF,rsqrtImpl:mF,scatterImpl:gF,sigmoidImpl:yF,simpleAbsImpl:bF,sliceImpl:xF,sparseFillEmptyRowsImpl:wF,sparseReshapeImpl:kF,sparseSegmentReductionImpl:vF,sqrtImpl:NF,stridedSliceImpl:SF,stringNGramsImpl:IF,stringSplitImpl:TF,stringToHashBucketFastImpl:EF,subImpl:$F,tileImpl:CF,topKImpl:AF,transposeImpl:RF,uniqueImpl:_F}=BD;function DF(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=ly.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new zD(MD,r.shape,s.shape),o=new zD(LD,r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=SD({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[o,i]=iF(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(i,a);return n.texData.get(u.dataId).values=o,u}let o;return o=Td().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kD("return a * b;",r.shape,s.shape):new yD("return a * b;",r.shape,s.shape),n.runWebGLProgram(o,[r,s],a)}const FF={kernelName:"Multiply",backendName:"webgl",kernelFunc:DF};class OF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?s_(["r","c","d"],"inputShape"):n_(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":a_(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function MF(e,t,n){const r=[Y_(e.shape),...Z_(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[Y_(t),...Z_(t)],o=new OF(a,r),i=[r],u=n.runWebGLProgram(o,[s],e.dtype,i,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function LF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=n,i=Wd.sizeFromShape(s.shape),u=Wd.inferFromImplicitShape(a,i),l=Wd.sizeFromShape(u);Wd.assert(i===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(s.dataId);return!c.isPacked||eD(s.shape,u)||null!==c.texture&&eD(c.shape,u)?(o.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):MF(s,u,o)}const zF={kernelName:"Reshape",backendName:"webgl",kernelFunc:LF};class BF{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const o=4*Math.floor(n/4),i=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${Wd.isInt(e)?e.toPrecision(2):e}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class PF{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${u});\n      }\n    `}}function VF(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=ly.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:u,outSize:l}=s[o];let c,p;c="mean"===n?0===o?new BF({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new BF({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new PF({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),p=a,a=r.runWebGLProgram(c,[a],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return a}class WF{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=b_(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class UF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=b_(this.rank),s=bD("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function GF(e,t,n){const r=Td().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new UF(e.shape,t):new WF(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function HF(e,t,n,r){const s=t,a=e.shape.length,o=Wd.parseAxisParam(s,e.shape);let i=o;const u=ly.getAxesPermutation(i,a),l=null!=u;let c=e;l&&(c=GF(e,u,r),i=ly.getInnerMostAxes(i.length,a)),ly.assertAxesAreInnerMostDims("sum",i,a);const[p,h]=ly.computeOutAndReduceShapes(c.shape,i);let d=p;n&&(d=ly.expandShapeToKeepDim(p,o));const f=Wd.sizeFromShape(h),m=LF({inputs:{x:c},attrs:{shape:[Wd.sizeFromShape(e.shape)/f,f]},backend:r}),g=VF(m,Mf(e.dtype),"sum",r),y=LF({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),l&&r.disposeIntermediateTensorInfo(c),y}function qF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;return HF(s,a,o,n)}const jF={kernelName:"Sum",backendName:"webgl",kernelFunc:qF};function KF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,o=n,i=s.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=s.shape[a[e]];let l;if(o.shouldExecuteOnCPU([s])){const e=o.texData.get(s.dataId).values,t=RF(e,s.shape,s.dtype,a,u);l=o.makeTensorInfo(u,s.dtype);o.texData.get(l.dataId).values=t}else l=GF(s,a,o);return l}const XF={kernelName:"Transpose",backendName:"webgl",kernelFunc:KF};function YF({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,p=n?e.shape[l-2]:e.shape[l-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[l-1]:e.shape[l-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=Wd.sizeFromShape(m),b=Wd.sizeFromShape(g),x=Cg.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);Wd.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],k=r?[b,f,h]:[b,h,f],v=LF({inputs:{x:e},backend:s,attrs:{shape:w}}),N=LF({inputs:{x:t},backend:s,attrs:{shape:k}}),S=[v,N],I=Math.max(y,b),T=n?v.shape[1]:v.shape[2],E=null!=a,$=null!=o,C="leakyrelu"===u,A=null!=u?FD(u,!0):null;let R;if((1===d||1===f)&&T>1e3&&!1===(E||$||C||null!=A)){let e=v,t=N;n&&(e=KF({inputs:{x:v},backend:s,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=KF({inputs:{x:N},backend:s,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let o=e;1!==f&&(o=LF({inputs:{x:e},backend:s,attrs:{shape:[I,T,1]}}),S.push(o));const i=1===f?2:1;let u=t;a&&(u=LF({inputs:{x:t},backend:s,attrs:{shape:[I,1,T]}}),S.push(u));const l=DF({inputs:{a:o,b:u},backend:s});R=qF({inputs:{x:l},backend:s,attrs:{axis:i,keepDims:!0}}),S.push(l)}else{const u=Of(e.dtype,t.dtype),l=new OD(w,k,[I,d,f],n,r,E,A,$,C),c=[v,N];if(null!=a&&c.push(a),$&&c.push(o),C){const e=s.makeTensorInfo([],"float32",Wd.createScalarValue(i,"float32"));c.push(e),S.push(e)}R=s.runWebGLProgram(l,c,u)}const _=LF({inputs:{x:R},backend:s,attrs:{shape:x}});S.push(R);for(const e of S)s.disposeIntermediateTensorInfo(e);return _}const ZF={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;return YF({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}};const JF={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=bF(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=Td().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new RD(r.shape,"return abs(x);"):new AD(r.shape,"return abs(x);"),n.runWebGLProgram(s,[r],r.dtype)}},QF={kernelName:"Acos",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},eO={kernelName:"Acosh",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},tO={kernelName:"Add",backendName:"webgl",kernelFunc:DD({opSnippet:"return a + b;",packedOpSnippet:"return a + b;",supportsComplex:!0,cpuKernelImpl:PD})};class nO{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class rO{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const sO={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return vD({inputs:{x:s[0]},backend:r});if(s.length>Td().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>Of(e,t))),o=s.map((e=>e.shape)),i=Td().getBool("WEBGL_PACK")?new rO(s[0].shape,o):new nO(s[0].shape,o);return r.runWebGLProgram(i,s,a)}};const aO={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=Wd.parseAxisParam(a,s.shape);let l=u;const c=ly.getAxesPermutation(l,i);let p=s;null!=c&&(p=KF({inputs:{x:s},backend:n,attrs:{perm:c}}),l=ly.getInnerMostAxes(l.length,i)),ly.assertAxesAreInnerMostDims("all",l,i);const[h,d]=ly.computeOutAndReduceShapes(p.shape,l),f=LF({inputs:{x:p},backend:n,attrs:{shape:[-1,Wd.sizeFromShape(d)]}}),m=VF(f,f.dtype,"all",n);let g;if(o){g=LF({inputs:{x:m},backend:n,attrs:{shape:ly.expandShapeToKeepDim(h,u)}})}else g=LF({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};const oO={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=Wd.parseAxisParam(a,s.shape);let l=u;const c=ly.getAxesPermutation(l,i);let p=s;null!=c&&(p=KF({inputs:{x:s},backend:n,attrs:{perm:c}}),l=ly.getInnerMostAxes(l.length,i)),ly.assertAxesAreInnerMostDims("any",l,i);const[h,d]=ly.computeOutAndReduceShapes(p.shape,l),f=LF({inputs:{x:p},backend:n,attrs:{shape:[-1,Wd.sizeFromShape(d)]}}),m=VF(f,f.dtype,"any",n);let g;if(o){g=LF({inputs:{x:m},backend:n,attrs:{shape:ly.expandShapeToKeepDim(h,u)}})}else g=LF({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};class iO{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class uO{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Wd.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,u=b_(i),l=xD("coords",i);let c,p;if(1===a){p=i+1;const e=b_(p);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[i-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[i-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[i-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[i-2]};`}else p=i,c=`\n        ${u} sourceLocR = coords;\n        ++${l[i-1]};\n        ${u} sourceLocG = coords;\n        ++${l[i-2]};\n        ${u} sourceLocA = coords;\n        --${l[i-1]};\n        ${u} sourceLocB = coords;\n        --${l[i-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),d="."+h[p-1],f=h.map((e=>"int "+e)),m=xD("sourceLocR",p-1).concat("inIdx.r"),g=xD("sourceLocG",p-1).concat("inIdx.g"),y=xD("sourceLocB",p-1).concat("inIdx.b"),b=xD("sourceLocA",p-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${l[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function lO(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const o=ly.computeOptimalWindowSize(a),i={windowSize:o,inSize:a,batchSize:s,outSize:Math.ceil(a/o)},u=new iO(i,n,null==r),l=[t];null!=r&&l.push(r);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const p=lO(e,t,n,c);return e.disposeIntermediateTensorInfo(c),p}function cO(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=s[s.length-1],o=ly.computeOptimalWindowSize(a),i=new uO(s,o,n,null==r),u=null==r?[t]:[t,r],l=e.runWebGLProgram(i,u,"int32");if(l.shape.length===t.shape.length){const r=cO(e,t,n,l);return e.disposeIntermediateTensorInfo(l),r}return l}function pO(e,t,n,r){const s=[n];if(ly.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!Td().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,u]=ly.computeOutAndReduceShapes(o.shape,s),l=Wd.sizeFromShape(u),c=LF({inputs:{x:o},backend:e,attrs:{shape:[-1,l]}});n.push(c);const p=lO(e,c,r);n.push(p);const h=LF({inputs:{x:p},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return cO(e,t,r)}const hO={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=Wd.parseAxisParam(a,s.shape);const i=ly.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=KF({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=ly.getInnerMostAxes(o.length,u.shape.length)),ly.assertAxesAreInnerMostDims("argMax",[o[0]],u.shape.length);const c=pO(n,u,o[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const dO={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=Wd.parseAxisParam(a,s.shape);const i=ly.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=KF({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=ly.getInnerMostAxes(o.length,u.shape.length)),ly.assertAxesAreInnerMostDims("argMin",[o[0]],u.shape.length);const c=pO(n,u,o[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},fO={kernelName:"Asin",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},mO={kernelName:"Asinh",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},gO={kernelName:"Atan",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},yO={kernelName:"Atan2",backendName:"webgl",kernelFunc:DD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})},bO={kernelName:"Atanh",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class xO{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class wO{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const kO={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;hD(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;Wd.assert(ly.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=ly.computePool2DInfo(s.shape,a,o,1,i,u);if(1===l.filterWidth&&1===l.filterHeight&&Wd.arraysEqual(l.inShape,l.outShape))return vD({inputs:{x:s},backend:n});const c=new xO(l,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}};const vO={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r,c=ly.computePool3DInfo(s.shape,a,o,[1,1,1],i,u,l),p=new wO(c,"avg",!1);return n.runWebGLProgram(p,[s],"float32")}};class NO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class SO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const IO={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=r,p=ly.computePool3DInfo(o.shape,i,u,[1,1,1],l,c),h=new SO(p);return n.runWebGLProgram(h,[s],o.dtype)}};const TO={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;hD([s,a],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=r,c=ly.computePool2DInfo(o.shape,i,u,1,l),p=new NO(c);return n.runWebGLProgram(p,[s],o.dtype)}};const EO={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;return YF({a:s,b:a,transposeA:o,transposeB:i,backend:n})}};class $O{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],ly.assertAndGetBroadcastShape(e,t),ly.assertAndGetBroadcastShape(e,n);let o="0.0";null!=r&&(ly.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(ly.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class CO{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],ly.assertAndGetBroadcastShape(e,t),ly.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=r&&(ly.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(ly.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const AO={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:o,scale:i}=e;Wd.assert(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Wd.assert(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Wd.assert(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const l=[r,s,a];let c=null;null!=o&&(c=o.shape,l.push(o));let p=null;null!=i&&(p=i.shape,l.push(i));const h=Td().getBool("WEBGL_PACK_NORMALIZATION")?new CO(r.shape,s.shape,a.shape,c,p,u):new $O(r.shape,s.shape,a.shape,c,p,u);return t.runWebGLProgram(h,l,l[0].dtype)}};class RO{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=b_(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return _O.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${_O[t]} = start[${t}] + coords.${_O[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const _O=["x","y","z","w","u","v"];class DO{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=b_(this.rank),n=xD("coords",this.rank),r=xD("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function FO(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r,[i,u]=Vg.parseSliceParams(s,a,o);if(Vg.assertParamsValid(s,i,u),0===Wd.sizeFromShape(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=xF(e.values,i,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,t)}const{isPacked:l}=n.texData.get(s.dataId),c=Vg.isSliceContinous(s.shape,i,u);if(l||!c){const e=Td().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new DO(u):new RO(u),t=[i];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),o=r.texData.get(a.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=Vg.computeFlatOffset(t,Wd.computeStrides(e.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||e.dataId};const u=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,u+1),a}(s,i,u,n)}const OO={kernelName:"Slice",backendName:"webgl",kernelFunc:FO},MO={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;Wd.assert(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),u=ly.getReshaped(s.shape,a,i),l=ly.getPermuted(u.length,a.length),c=ly.getReshapedPermuted(s.shape,a,i),p=ly.getSliceBeginCoords(o,a.length),h=ly.getSliceSize(c,o,a.length),d=[],f=LF({inputs:{x:s},backend:n,attrs:{shape:u}}),m=KF({inputs:{x:f},backend:n,attrs:{perm:l}}),g=LF({inputs:{x:m},backend:n,attrs:{shape:c}}),y=FO({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const LO={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=n.readSync(s.dataId),u=n.readSync(a.dataId),l=VD(i,u,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,l)}};const zO={kernelName:"BroadcastArgs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),o=n.readSync(s.dataId),i=ly.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},BO=DD({opSnippet:"return float(a != b);",cpuKernelImpl:lF,dtype:"bool"}),PO={kernelName:"NotEqual",backendName:"webgl",kernelFunc:BO};function VO(e){const{inputs:t,backend:n}=e,{input:r}=t;return vD({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const WO={kernelName:"Real",backendName:"webgl",kernelFunc:VO};function UO(e,t){const n=new AD(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const GO={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===a.dtype)return vD({inputs:{x:a},backend:r});const t=Ux(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=SD({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=VO({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!Wd.hasEncodingLoss(a.dtype,o)){const e=vD({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(r.shouldExecuteOnCPU([a])){const e=r.texData.get(a.dataId).values,[t,n,s]=UD(e,a.shape,a.dtype,o);return r.makeTensorInfo(t,n,s)}if("int32"===o)return UO(a,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",Wd.getTypedArrayFromDType("bool",1)),t=BO({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},HO={kernelName:"Ceil",backendName:"webgl",kernelFunc:_D({opSnippet:"return ceil(x);",packedOpSnippet:"return ceil(x);",cpuKernelImpl:GD})};class qO{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class jO{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const KO={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:o}=r;let i;i=Td().getBool("WEBGL_PACK_CLIP")?new jO(s.shape):new qO(s.shape);const u=[[a],[o]];return n.runWebGLProgram(i,[s],s.dtype,u)}};class XO{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function YO(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const ZO={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new XO(r.shape),o=[YO(r,s.complexTensorInfos.real),YO(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class JO{constructor(e){this.outputShape=[],this.outputShape=ly.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class QO{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=ly.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=b_(r),a=xD("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=o[t],l=o.slice(-2),c=o.join();let p=`if (${u} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${eM(o,u,t)}),\n            vec2(${eM(l,u,t)}));\n        }`}const h=i.length,d=i[i.length-1];p+=`\n        return getChannel(\n          getT${h}(${eM(o,u,d)}),\n          vec2(${eM(l,u,d)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function eM(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function tM(e){const{inputs:t,backend:n}=e,{input:r}=t;return vD({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const nM={kernelName:"Imag",backendName:"webgl",kernelFunc:tM};function rM(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>VO({inputs:{input:e},backend:n}))),s=e.map((e=>tM({inputs:{input:e},backend:n}))),a=rM(r,t,n),o=rM(s,t,n),i=SD({inputs:{real:a,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=Wd.sizeFromShape(e.shape.slice(t));return LF({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=ly.computeOutShape(s.map((e=>e.shape)),1),i=1===s[0].shape[0],u=HD(a,o,r,i),l=ly.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,r,u);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=Td().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>a){const r=[];for(let s=0;s<e.length;s+=a){const o=e.slice(s,s+a);r.push(rM(o,t,n))}const s=rM(r,t,n);for(const e of r)n.disposeIntermediateTensorInfo(e);return s}if(Td().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new QO(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const{tensors2D:o,outShape:i}=function(e,t,n){const r=ly.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>LF({inputs:{x:e},attrs:{shape:[-1,Wd.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),u=new JO(o.map((e=>e.shape))),l=n.runWebGLProgram(u,o,r);o.forEach((e=>n.disposeIntermediateTensorInfo(e)));const c=LF({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),c}function sM(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=Wd.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));ly.assertParamsConsistent(o,a);const i=ly.computeOutShape(t.map((e=>e.shape)),a);if(0===Wd.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>Wd.sizeFromShape(e.shape)>0));return 1===u.length?vD({inputs:{x:u[0]},backend:n}):rM(u,a,n)}const aM={kernelName:"Concat",backendName:"webgl",kernelFunc:sM};class oM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class iM{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class uM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=gD(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,u=e.filterHeight,l=e.filterWidth,c=l;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<l;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<l;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(p+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<l&&(a%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,p+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<l)){const e=a%2==0?Wd.nearestLargerEven(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,p+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):p+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<l&&(a%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<l&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<l&&(p+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<l&&(p+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<l&&(p+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let h="",d="";n&&(h=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:s?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${h}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class lM{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length);const{dataFormat:n}=t,r=t_(),s="channelsLast"===n,a=s?1:2,o=s?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function cM(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function pM({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const u=e.shape,l=r.texData.get(e.dataId),c=n.inChannels,p=u[0]*u[1]*u[2],h=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=cM(a.shape,d);null!=e&&(a=LF({inputs:{x:a},backend:r,attrs:{shape:e}}),m.push(a))}if(null!=s){const e=cM(s.shape,d);null!=e&&(s=LF({inputs:{x:s},backend:r,attrs:{shape:e}}),m.push(s))}if(!((1===p||1===h)&&c>1e3)&&l.isPacked&&d&&null!=l.texture&&u[2]%2!=0&&Wd.arraysEqual(l.shape.slice(-3),u.slice(-3))){const c=u[0]*u[1]*(u[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,Wd.assert(eD(l.shape,p.shape),(()=>`packed reshape ${l.shape} to ${p.shape} isn't free`));const d=LF({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=YF({a:p,b:d,backend:r,transposeA:false,transposeB:false,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),y=r.texData.get(g.dataId);Wd.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=h,y.shape=n.outShape,f=vD({inputs:{x:g},backend:r}),f.shape=n.outShape,m.push(g)}else{const u=n.outHeight*n.outWidth,l=LF({inputs:{x:e},backend:r,attrs:{shape:d?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),c=LF({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=YF({a:d?l:c,b:d?c:l,transposeA:!d,transposeB:false,backend:r,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o});f=LF({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),m.push(l),m.push(c),m.push(p)}for(const e of m)r.disposeIntermediateTensorInfo(e);return f}function hM({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=u*l*c,g=h*p,y=[n.batchSize,m,g],b=[];if(null!=a){const e=cM(a.shape,f);null!=e&&(a=LF({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}if(null!=s){const e=cM(s.shape,f);null!=e&&(s=LF({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}const x=LF({inputs:{x:t},backend:r,attrs:{shape:[1,m,Wd.sizeFromShape(t.shape)/m]}});b.push(x);const w=new lM(y,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],v=r.runWebGLProgram(w,[e],"float32",k),N=LF({inputs:{x:v},backend:r,attrs:{shape:y}});b.push(v),b.push(N);const S=null!=s,I=null!=a,T="leakyrelu"===i,E=i?FD(i,!0):null,$=new OD(f?N.shape:x.shape,f?x.shape:N.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,E,I,T),C=f?[N,x]:[x,N];if(s&&C.push(s),I&&C.push(a),T){const e=r.makeTensorInfo([],"float32",Wd.createScalarValue(o,"float32"));C.push(e),b.push(e)}const A=r.runWebGLProgram($,C,"float32"),R=LF({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});b.push(A);for(const e of b)r.disposeIntermediateTensorInfo(e);return R}const dM={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=r,p=ly.convertConv2DDataFormat(u),h=ly.computeConv2DInfo(s.shape,a.shape,o,l,i,c,!1,p);let d;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===p&&Td().getBool("WEBGL_EXP_CONV")){const e=new uM(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];d=n.runWebGLProgram(e,[s,a],"float32",t)}else if(Td().getBool("WEBGL_CONV_IM2COL"))d=hM({x:s,filter:a,convInfo:h,backend:n});else{const e=new oM(h);d=n.runWebGLProgram(e,[s,a],"float32")}else d=pM({x:s,filter:a,convInfo:h,backend:n});const f=LF({inputs:{x:d},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class fM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class mM{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yM{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const bM={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,p=ly.convertConv2DDataFormat(u),h=ly.computeConv2DInfo(s.shape,c,o,1,i,l,!1,p),d=new fM(h);return n.runWebGLProgram(d,[s,a],"float32")}};const xM={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,p=ly.convertConv2DDataFormat(l),h=ly.computeConv2DInfo(o,a.shape,i,1,u,c,!1,p),d=new mM(h);return n.runWebGLProgram(d,[s,a],"float32")}};const wM={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r,l=ly.computeConv3DInfo(s.shape,a.shape,o,u,i),c=new iM(l);return n.runWebGLProgram(c,[s,a],"float32")}};const kM={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:u}=r,l=ly.computeConv3DInfo(s.shape,u,o,1,i),c=new gM(l);return n.runWebGLProgram(c,[s,a],"float32")}};const vM={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:u}=r,l=ly.computeConv3DInfo(u,a.shape,i,1,o),c=new yM(l);return n.runWebGLProgram(c,[s,a],"float32")}},NM={kernelName:"Cos",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},SM={kernelName:"Cosh",backendName:"webgl",kernelFunc:_D({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class IM{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,u]=e,[l]=t,[c,p]=n;this.outputShape=[l,c,p,u];const h="bilinear"===r?1:0,[d,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const TM={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,c=new IM(s.shape,a.shape,i,u,l);return n.runWebGLProgram(c,[s,a,o],"float32")}};var EM,$M;($M=EM||(EM={})).Prod="*",$M.Sum="+";class CM{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=this.op===EM.Prod?"1.0":"0.0",o=n?a:`getX(${AM(s,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=r?"end != "+(i-1):"end != 0",l=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${i}`:"end >= pow2",l=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${b_(s)} coords = getOutputCoords();\n        int end = ${RM(s,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${RM(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${AM(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function AM(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function RM(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function _M(e,t,n,r,s,a){const o=t.shape.length,i=ly.getAxesPermutation([r],o);let u=t;null!=i&&(u=KF({inputs:{x:t},backend:n,attrs:{perm:i}}));const l=ly.getInnerMostAxes(1,o)[0];if(l!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=u.shape[l];let p=vD({inputs:{x:u},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const r=new CM(e,u.shape,!1,a),s=[[t]],o=p;p=n.runWebGLProgram(r,[p],p.dtype,s),n.disposeIntermediateTensorInfo(o)}if(s){const t=new CM(e,u.shape,s,a),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=i){const e=KF({inputs:{x:p},backend:n,attrs:{perm:ly.getUndoAxesPermutation(i)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(u),e}return p}const DM={kernelName:"Cumprod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return _M(EM.Prod,s,n,a,o,i)}};const FM={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return _M(EM.Sum,s,n,a,o,i)}};const OM={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=VD(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=WD(e,t,o,i);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class MM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const LM={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r,i=s.shape[0],u=("NHWC"===o?s.shape[1]:s.shape[2])*a,l=("NHWC"===o?s.shape[2]:s.shape[3])*a,c=("NHWC"===o?s.shape[3]:s.shape[1])/(a*a),p=new MM("NHWC"===o?[i,u,l,c]:[i,c,u,l],a,o);return n.runWebGLProgram(p,[s],s.dtype)}};class zM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=gD(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let u="",l="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class BM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=gD(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,p=c;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${l}; r++) {\n      `;for(let e=0;e<c;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*u};\n          `,1===i){if(t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===u&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?Wd.nearestLargerEven(u):u;u%2==0&&o%2==1||u%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,h+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let d="",f="";n&&(d=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const PM={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:l}=r;let c=u;null==c&&(c=[1,1]),Wd.assert(ly.eitherStridesOrDilationsAreOne(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const p=ly.computeConv2DInfo(s.shape,a.shape,o,c,i,l,!0);let h;h=Td().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new BM(p):new zM(p);const d=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[s,a],"float32",d)}};class VM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class WM{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const UM={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=r,p=ly.computeConv2DInfo(s.shape,c,o,i,u,l,!0),h=new VM(p);return n.runWebGLProgram(h,[s,a],"float32")}};const GM={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=r,p=ly.computeConv2DInfo(c,a.shape,o,i,u,l,!0),h=new WM(p);return n.runWebGLProgram(h,[s,a],"float32")}};class HM{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const qM={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=Wd.sizeFromShape(r.shape),o=LF({inputs:{x:r},backend:n,attrs:{shape:[a]}}),i=new HM(a),u=n.runWebGLProgram(i,[o],o.dtype),l=LF({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}};class jM{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const KM={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r,l=ly.computeDilation2DInfo(s.shape,a.shape,o,i,"NHWC",u);let c;const p=new jM(l);c=n.runWebGLProgram(p,[s,a],"float32");const h=LF({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),h}};const XM={kernelName:"Einsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:u}=ly.decodeEinsumEquation(s,a.length);ly.checkEinsumDimSizes(o.length,u,a);const{path:l,steps:c}=ly.getEinsumComputePath(i,u),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=ly.getEinsumPermutation(d,u[t]);let s;ly.isIdentityPermutation(e)?s=a[t]:(s=KF({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Wd.arraysEqual(s.shape,o)||(s=LF({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=DF({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(l[e]>=0&&(h=qF({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},YM={kernelName:"Elu",backendName:"webgl",kernelFunc:_D({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},ZM={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=Td().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kD("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new yD("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},JM={kernelName:"Equal",backendName:"webgl",kernelFunc:DD({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:qD})},QM={kernelName:"Erf",backendName:"webgl",kernelFunc:_D({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${ly.ERF_P};\n  float a1 = ${ly.ERF_A1};\n  float a2 = ${ly.ERF_A2};\n  float a3 = ${ly.ERF_A3};\n  float a4 = ${ly.ERF_A4};\n  float a5 = ${ly.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},eL=_D({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:jD,dtype:"float32"}),tL={kernelName:"Exp",backendName:"webgl",kernelFunc:eL};function nL(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let u=s;return s<0&&(Wd.assert(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+s+1),i.splice(u,0,1),LF({inputs:{x:a},backend:r,attrs:{shape:i}})}const rL={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:nL},sL={kernelName:"Expm1",backendName:"webgl",kernelFunc:_D({opSnippet:"return exp(x) - 1.0;",packedOpSnippet:"return exp(x) - 1.0;",cpuKernelImpl:KD})};class aL{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function oL(e,t,n){const r=n.texData.get(e.dataId),s=Wd.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],o=LF({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),i=o.shape,u=new aL("real",i,t),l=new aL("imag",i,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(u,c,"float32"),h=n.runWebGLProgram(l,c,"float32"),d=SD({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const f=LF({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(d),f}const iL={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return oL(r,!1,n)}};class uL{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function lL(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||Wd.inferDtype(s),"string"===a){const e=Wd.getArrayFromDType(a,Wd.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new uL(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const cL={kernelName:"Fill",backendName:"webgl",kernelFunc:lL};class pL{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const hL={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new pL(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},dL={kernelName:"Floor",backendName:"webgl",kernelFunc:_D({opSnippet:"return floor(x);",packedOpSnippet:"return floor(x);",cpuKernelImpl:XD})},fL={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:DD({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class mL{constructor(e){this.variableNames=["A"];const t=t_(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class gL{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=t_(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const yL={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],p=[l,u,a];if(i||o){const e=Td().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=bL&&e===xL||(xL=e,bL=document.createElement("canvas").getContext("2d",{willReadFrequently:xL})),bL.canvas.width=u,bL.canvas.height=l,bL.drawImage(s,0,0,u,l),s=bL.canvas}const h=n.makeTensorInfo(c,"int32");n.texData.get(h.dataId).usage=$_.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),s);const d=Td().getBool("WEBGL_PACK")?new gL(p):new mL(p),f=n.runWebGLProgram(d,[h],"int32");return n.disposeData(h.dataId),f}};let bL,xL=Td().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const wL={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=ly.convertConv2DDataFormat(c),g=ly.computeConv2DInfo(s.shape,a.shape,u,p,l,h,!1,m);let y;const b=[],x=null!=o,w=null!=i,k="leakyrelu"===d,v=()=>{const e=[s,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=LF({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,c)),w&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",Wd.createScalarValue(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&Td().getBool("WEBGL_EXP_CONV")){const e=d?FD(d,!0):null,t=new uM(g,x,e,w,k),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=v();y=n.runWebGLProgram(t,s,"float32",r)}else if(Td().getBool("WEBGL_CONV_IM2COL"))y=hM({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=d?FD(d,!1):null,t=new oM(g,x,e,w,k),r=v();y=n.runWebGLProgram(t,r,"float32")}else y=pM({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const N=LF({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};const kL={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:p,activation:h,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),Wd.assert(ly.eitherStridesOrDilationsAreOne(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const g=ly.computeConv2DInfo(s.shape,a.shape,u,m,l,p,!0),y=Td().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=h?FD(h,y):null,x=[s,a],w=null!=o,k=null!=i,v="leakyrelu"===h;if(w&&x.push(o),k&&x.push(i),v){const e=n.makeTensorInfo([],"float32",Wd.createScalarValue(d,"float32"));x.push(e),f.push(e)}let N;N=y?new BM(g,w,b,k,v):new zM(g,w,b,k,v);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],I=n.runWebGLProgram(N,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class vL{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=b_(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const NL={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,o=a[a.length-1],i=Wd.sizeFromShape(r.shape),[u,l,c,p]=ly.prepareAndValidate(r,s),h=LF({inputs:{x:s},backend:n,attrs:{shape:[l,o]}}),d=LF({inputs:{x:r},backend:n,attrs:{shape:[Wd.sizeFromShape(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=YD(e,t,r.dtype,l,o,c,p,r.shape,i);return n.makeTensorInfo(u,r.dtype,a.values)}const f=new vL(o,p,[l,c],r.shape),m=n.runWebGLProgram(f,[d,h],d.dtype),g=LF({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class SL{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=b_(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function IL(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r,u=Wd.parseAxisParam(o,s.shape)[0];if(Td().get("DEBUG")){const e=n.readSync(a.dataId),t=s.shape[u];for(let n=0;n<e.length;++n){const r=e[n];Wd.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const l=ly.segment_util.collectGatherOpShapeInfo(s,a,u,i),c=Wd.sizeFromShape(a.shape),p=[],h=LF({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=LF({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,c/l.batchSize]}});p.push(h),p.push(d);const f=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),r=ZD(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,r.dtype,r.values)}const m=new SL(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);p.push(g);const y=LF({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const TL={kernelName:"GatherV2",backendName:"webgl",kernelFunc:IL},EL={kernelName:"Greater",backendName:"webgl",kernelFunc:DD({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:JD,dtype:"bool"})},$L={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:DD({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:QD})};const CL={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return oL(r,!0,n)}},AL={kernelName:"IsFinite",backendName:"webgl",kernelFunc:_D({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},RL={kernelName:"IsInf",backendName:"webgl",kernelFunc:_D({opSnippet:"return float(isinf(x));",dtype:"bool"})},_L={kernelName:"IsNan",backendName:"webgl",kernelFunc:_D({opSnippet:"return float(isnan(x));",dtype:"bool"})},DL={kernelName:"Less",backendName:"webgl",kernelFunc:DD({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:eF,dtype:"bool"})},FL={kernelName:"LessEqual",backendName:"webgl",kernelFunc:DD({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:tF,dtype:"bool"})};const OL={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=nF(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},ML={kernelName:"Log",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:rF})},LL={kernelName:"Log1p",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"})},zL={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:DD({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},BL={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:_D({opSnippet:"return float(!(x >= 1.0));"})},PL={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:DD({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class VL{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class WL{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const UL={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:u}=r,l=Td().getBool("WEBGL_PACK_NORMALIZATION")?new WL(s.shape,a,o,i,u):new VL(s.shape,a,o,i,u);return n.runWebGLProgram(l,[s],s.dtype)}};class GL{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const HL={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r,p=new GL(s.shape,i,u,l,c);return n.runWebGLProgram(p,[s,a,o],s.dtype)}};function qL(e,t,n,r){const s=Wd.sizeFromShape(t),a=LF({inputs:{x:e},attrs:{shape:[Wd.sizeFromShape(e.shape)/s,s]},backend:r}),o=VF(a,e.dtype,"max",r),i=LF({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}function jL(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=s.shape.length,u=Wd.parseAxisParam(a,s.shape);let l=u;const c=ly.getAxesPermutation(l,i),p=null!=c,h=n.shouldExecuteOnCPU([s]);let d=s;if(p){if(h){const e=n.texData.get(d.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=RF(e,s.shape,s.dtype,c,t);d=n.makeTensorInfo(t,s.dtype);n.texData.get(d.dataId).values=r}else d=GF(s,c,n);l=ly.getInnerMostAxes(l.length,i)}ly.assertAxesAreInnerMostDims("max",l,i);const[f,m]=ly.computeOutAndReduceShapes(d.shape,l);let g,y=f;if(o&&(y=ly.expandShapeToKeepDim(f,u)),h){const e=n.texData.get(d.dataId).values,t=sF(e,Wd.sizeFromShape(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype);n.texData.get(g.dataId).values=t}else g=qL(d,m,y,n);return p&&n.disposeIntermediateTensorInfo(d),g}const KL={kernelName:"Max",backendName:"webgl",kernelFunc:jL},XL={kernelName:"Maximum",backendName:"webgl",kernelFunc:DD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:aF})};const YL={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;hD(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;Wd.assert(ly.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=ly.computePool2DInfo(s.shape,a,o,1,i,u);if(1===l.filterWidth&&1===l.filterHeight&&Wd.arraysEqual(l.inShape,l.outShape))return vD({inputs:{x:s},backend:n});const c=new xO(l,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}};const ZL={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dataFormat:u,dimRoundingMode:l}=r,c=ly.computePool3DInfo(s.shape,a,o,[1,1,1],i,l,u),p=new wO(c,"max",!1);return n.runWebGLProgram(p,[s],s.dtype)}};class JL{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=s-1-e.padInfo.top,i=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class QL{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=u-1-e.padInfo.top,h=l-1-e.padInfo.left,d=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ez={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=r,p=ly.computePool3DInfo(o.shape,i,u,[1,1,1],l,c),h=new wO(p,"max",!0),d=n.runWebGLProgram(h,[o],o.dtype),f=new QL(p),m=n.runWebGLProgram(f,[s,d],o.dtype);return n.disposeIntermediateTensorInfo(d),m}};const tz={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;hD([a,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,h=ly.computePool2DInfo(i.shape,u,l,1,c,p),d=new xO(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new JL(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};function nz(e,t,n,r){let s=new xO(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");s=new xO(n,"max",!0,!0,t);return[a,r.runWebGLProgram(s,[e],"float32")]}const rz={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,u=n;Wd.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const l=[1,1];Wd.assert(ly.eitherStridesOrDilationsAreOne(a,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`));const c=ly.computePool2DInfo(r.shape,s,a,l,o),[p,h]=nz(r,i,c,u);return[p,h]}};function sz(e,t,n,r){const s=Wd.sizeFromShape(t),a=LF({inputs:{x:e},attrs:{shape:[Wd.sizeFromShape(e.shape)/s,s]},backend:r}),o=VF(a,"float32","mean",r),i=LF({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}const az={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,o=n,i=r.shape.length,u=Wd.parseAxisParam(a,r.shape);let l=u;const c=ly.getAxesPermutation(l,i),p=null!=c,h=o.shouldExecuteOnCPU([r]),d=[];let f=r;if(p){if(h){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=RF(e,r.shape,r.dtype,c,t);f=o.makeTensorInfo(t,r.dtype);o.texData.get(f.dataId).values=n}else f=GF(r,c,o);d.push(f),l=ly.getInnerMostAxes(l.length,i)}ly.assertAxesAreInnerMostDims("sum",l,i);const[m,g]=ly.computeOutAndReduceShapes(f.shape,l);let y=m;s&&(y=ly.expandShapeToKeepDim(m,u));const b=sz(f,g,y,o);for(const e of d)o.disposeIntermediateTensorInfo(e);return b}};const oz={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=Wd.parseAxisParam(a,s.shape);let l=u;const c=ly.getAxesPermutation(l,i);let p=s;null!=c&&(p=KF({inputs:{x:s},backend:n,attrs:{perm:c}}),l=ly.getInnerMostAxes(l.length,s.shape.length)),ly.assertAxesAreInnerMostDims("min",l,i);const[h,d]=ly.computeOutAndReduceShapes(p.shape,l),f=LF({inputs:{x:p},backend:n,attrs:{shape:[-1,Wd.sizeFromShape(d)]}}),m=VF(f,f.dtype,"min",n);let g;if(o){g=LF({inputs:{x:m},backend:n,attrs:{shape:ly.expandShapeToKeepDim(h,u)}})}else g=LF({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},iz={kernelName:"Minimum",backendName:"webgl",kernelFunc:DD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:oF})};class uz{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=b_(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class lz{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=b_(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=xD("rc",r),u=xD("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const cz={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,o=Td().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lz(r.shape,s,a):new uz(r.shape,s,a);return t.runWebGLProgram(o,[r],r.dtype)}},pz={kernelName:"Mod",backendName:"webgl",kernelFunc:DD({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})};class hz{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const dz=DD({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),fz={kernelName:"RealDiv",backendName:"webgl",kernelFunc:dz},mz=DD({opSnippet:"return a - b;",packedOpSnippet:"return a - b;",supportsComplex:!0,cpuKernelImpl:$F}),gz={kernelName:"Sub",backendName:"webgl",kernelFunc:mz};function yz(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=Wd.parseAxisParam([a],s.shape),i=jL({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=ly.expandShapeToKeepDim(i.shape,o),l=LF({inputs:{x:i},backend:n,attrs:{shape:u}}),c=mz({inputs:{a:s,b:l},backend:n}),p=eL({inputs:{x:c},backend:n}),h=qF({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),d=LF({inputs:{x:h},backend:n,attrs:{shape:u}}),f=dz({inputs:{a:p,b:d},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),f}const bz={kernelName:"Softmax",backendName:"webgl",kernelFunc:yz};const xz={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r,u=i?s:yz({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=u.shape[0],c=u.shape[1],p=new hz(l,c,a),h=[[o]],d=n.runWebGLProgram(p,[u],"int32",h);return i||n.disposeIntermediateTensorInfo(u),d}};const wz={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=uF(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=Td().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new RD(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new AD(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(s,[r],r.dtype)}},kz=bx.nonMaxSuppressionV3Impl;const vz={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){ly.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:p}=kz(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Nz=bx.nonMaxSuppressionV4Impl;const Sz={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){ly.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),{selectedIndices:h,validOutputs:d}=Nz(c,p,o,i,u,l);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},Iz=bx.nonMaxSuppressionV5Impl;const Tz={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){ly.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),h=o,d=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=Iz(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class Ez{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const $z={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:u}=r,l=Wd.sizeFromShape(s.shape),c=new Ez(l,o,i,u),p=LF({inputs:{x:s},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(c,[p],a);n.disposeIntermediateTensorInfo(p);const d=LF({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,o]}});return n.disposeIntermediateTensorInfo(h),d}};function Cz(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=VO({inputs:{input:r},backend:n}),t=Cz({inputs:{x:e},backend:n}),s=tM({inputs:{input:r},backend:n}),a=Cz({inputs:{x:s},backend:n}),o=SD({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return lL({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const Az={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:Cz};const Rz={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=VO({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=tM({inputs:{input:s},backend:r}),o=Cz({inputs:{x:a},backend:r}),i=SD({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return lL({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const _z={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return nL({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{Wd.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Wd.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],u=sM({inputs:t.map((e=>{const t=nL({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class Dz{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=b_(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Fz{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=b_(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=xD("rc",r),u=xD("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p=[`${s} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const Oz=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;if(0===Wd.sizeFromShape(s.shape)){return lL({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+s.shape[t]+e[1])),value:o,dtype:s.dtype}})}const i=Td().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Fz(s.shape,a,o):new Dz(s.shape,a,o),u=[[o]];return n.runWebGLProgram(i,[s],s.dtype,u)},Mz={kernelName:"PadV2",backendName:"webgl",kernelFunc:Oz},Lz={kernelName:"Pow",backendName:"webgl",kernelFunc:DD({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})};const zz={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=[],l=Wd.parseAxisParam(a,s.shape);let c=l;const p=ly.getAxesPermutation(c,i);let h,d=s;if(null!=p&&(d=KF({inputs:{x:s},backend:n,attrs:{perm:p}}),c=ly.getInnerMostAxes(c.length,i),u.push(d)),ly.assertAxesAreInnerMostDims("prod",c,i),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:s}=cF(d.shape,d.dtype,e,c);h=n.makeTensorInfo(r,s,t)}else{const[e,t]=ly.computeOutAndReduceShapes(d.shape,c),r=Wd.sizeFromShape(t),a=LF({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),o=VF(a,Mf(s.dtype),"prod",n);h=LF({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(a),u.push(o)}if(o){u.push(h);const e=ly.expandShapeToKeepDim(h.shape,l);h=LF({inputs:{x:h},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}};const Bz={kernelName:"RaggedGather",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,u=s.map((e=>n.readSync(e.dataId))),l=s.map((e=>e.shape)),c=n.readSync(a.dataId),p=n.readSync(o.dataId),[h,d,f]=pF(u,l,c,a.shape,a.dtype,p,o.shape,i),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};const Pz={kernelName:"RaggedRange",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=hF(o,r.shape,r.dtype,i,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};const Vz={kernelName:"RaggedTensorToTensor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),p=n.readSync(o.dataId),h=i.map((e=>n.readSync(e.dataId))),d=i.map((e=>e.shape)),[f,m]=dF(l,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,u);return n.makeTensorInfo(f,a.dtype,m)}},Wz=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:o}=n,i=fF(r,s,a,o);return t.makeTensorInfo([i.length],o,i)},Uz={kernelName:"Range",backendName:"webgl",kernelFunc:Wz},Gz={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:_D({opSnippet:"return 1.0 / x;"})},Hz={kernelName:"Relu",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},qz={kernelName:"Relu6",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class jz{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Kz{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Xz={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[u,l]=i,c=Td().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Kz(s.shape,u,l,a,o):new jz(s.shape,u,l,a,o);return n.runWebGLProgram(c,[s],"float32")}};class Yz{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Zz={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new Yz(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class Jz{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Qz{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const eB={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[u,l]=i,c=Td().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Qz(s.shape,u,l,a,o):new Jz(s.shape,u,l,a,o);return n.runWebGLProgram(c,[s],s.dtype)}};class tB{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const nB={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new tB(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class rB{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=b_(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class sB{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=xD("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=b_(n);function i(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const aB={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,o=s.shape.length,i=Wd.parseAxisParam(a,s.shape);if(0===o)return vD({inputs:{x:s},backend:n});const u=Td().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sB(s.shape,i):new rB(s.shape,i);return n.runWebGLProgram(u,[s],s.dtype)}};class oB{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const iB={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,u=new oB(r.shape,a),[l,c]=ly.getImageCenter(o,r.shape[1],r.shape[2]),p=[[l,c,Math.sin(s),Math.cos(s)]];return i.runWebGLProgram(u,[r],r.dtype,p)}},uB={kernelName:"Round",backendName:"webgl",kernelFunc:_D({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},lB={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:_D({opSnippet:"return inversesqrt(x);",cpuKernelImpl:mF})};class cB{constructor(e,t,n,r,s,a,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const i=b_(s.length),u=b_(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const pB={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:p}=ly.calculateShapes(a,s,o),h=[p/l,l];if(0===p)return n.makeTensorInfo(o,s.dtype);const d=LF({inputs:{x:s},backend:n,attrs:{shape:[u,i]}}),f=LF({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new cB(u,i,d.shape.length,f.shape.length,c,h),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=LF({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class hB{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===Td().getNumber("WEBGL_VERSION")?"while (left < right) {":s,o="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const dB={kernelName:"SearchSorted",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=new hB(s.shape[0],s.shape[1],a.shape[1],o),u=[[s.shape[1]]];return n.runWebGLProgram(i,[s,a],"int32",u)}};class fB{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=o.join()}const a=b_(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const mB={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,o=new fB(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[r,s,a],Of(s.dtype,a.dtype))}},gB={kernelName:"Selu",backendName:"webgl",kernelFunc:_D({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${ly.SELU_SCALEALPHA};\n  float scale = ${ly.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},yB={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:yF})},bB={kernelName:"Sign",backendName:"webgl",kernelFunc:_D({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},xB={kernelName:"Sin",backendName:"webgl",kernelFunc:_D({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},wB={kernelName:"Sinh",backendName:"webgl",kernelFunc:_D({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},kB={kernelName:"Softplus",backendName:"webgl",kernelFunc:_D({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},vB={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;Wd.assert(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...o);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=[],c=Oz({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),p=ly.getReshaped(c.shape,a,i,!1),h=ly.getPermuted(p.length,a.length,!1),d=ly.getReshapedPermuted(c.shape,a,i,!1),f=LF({inputs:{x:c},backend:n,attrs:{shape:p}}),m=KF({inputs:{x:f},backend:n,attrs:{perm:h}}),g=LF({inputs:{x:m},backend:n,attrs:{shape:d}});return l.push(c),l.push(f),l.push(m),l.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const NB={kernelName:"SparseFillEmptyRows",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),u=n.readSync(s.dataId),l=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[p,h,d,f,m]=wF(i,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const SB={kernelName:"SparseReshape",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(s.dataId)),i=n.readSync(r.dataId),u=Array.from(n.readSync(a.dataId)),[l,c,p]=kF(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};const IB={kernelName:"SparseSegmentMean",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=vF(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const TB={kernelName:"SparseSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=vF(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}};const EB={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:h}=ly.calculateShapes(a,s,i);if("string"===a.dtype){const e=n.bufferSync(s),t=n.bufferSync(a),r=Wd.decodeString(n.readSync(o.dataId)[0]),d=gF(e,t,i,h,c,l,u,p,r,false);return n.makeTensorInfo(i,d.dtype,d.values)}const d=new cB(l,u,s.shape.length,a.shape.length,p,[h,1],false),f=n.runWebGLProgram(d,[a,s,o],a.dtype),m=LF({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}};const $B={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=Wd.parseAxisParam(o,s.shape)[0],u=ly.prepareSplitSize(s,a,i),l=s.shape.length,c=new Array(l).fill(0),p=s.shape.slice();return u.map((e=>{const t=[...p];t[i]=e;const r=FO({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},CB={kernelName:"Sqrt",backendName:"webgl",kernelFunc:_D({opSnippet:"return sqrt(x);",packedOpSnippet:"return sqrt(x);",cpuKernelImpl:NF})},AB={kernelName:"Square",backendName:"webgl",kernelFunc:_D({opSnippet:"return x * x;"})},RB={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:DD({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})};const _B={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new AD(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class DB{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=b_(n.length),a=b_(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const FB={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Vg.sliceInfo(s.shape,a,o,i,u,l,c,p,h);let k;if(m)k=LF({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){Wd.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=Vg.computeOutShape(b,x,w),t=FO({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=LF({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=sg(s.shape,s.dtype,e),r=SF(d,t,w,b);k=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new DB(b,w,d);k=n.runWebGLProgram(e,[s],s.dtype)}}const v=LF({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}};const OB={kernelName:"StringNGrams",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,h=n.readSync(c.dataId),d=n.readSync(p.dataId),[f,m]=IF(h,d,s,a,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};const MB={kernelName:"StringSplit",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),u=n.readSync(o.dataId)[0],[l,c,p]=TF(i,u,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",l),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};const LB={kernelName:"StringToHashBucketFast",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=EF(o,s);return n.makeTensorInfo(a.shape,"int32",i)}},zB={kernelName:"Tan",backendName:"webgl",kernelFunc:_D({opSnippet:"return tan(x);"})},BB={kernelName:"Tanh",backendName:"webgl",kernelFunc:_D({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class PB{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=b_(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function VB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>Wd.decodeString(e))):e,r=sg(s.shape,s.dtype,t),o=CF(r,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new PB(s.shape,a);return n.runWebGLProgram(o,[s],s.dtype)}const WB={kernelName:"Tile",backendName:"webgl",kernelFunc:VB};class UB{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class GB{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function HB(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function qB(e){let t=1;for(;t<e;)t*=2;return t}const jB={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r,i=Td().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=Td().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=s.shape,c=l[l.length-1];if(n.shouldExecuteOnCPU([s])||c<i||a>u){const e=n.readSync(s.dataId),[t,r]=AF(e,l,s.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return l[l.length-1]=0,[n.makeTensorInfo(l,s.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===c)return[s,lL({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const p=n.texData.get(s.dataId),h=null!==p&&p.isPacked,d=h?n.unpackTensor(s):s,f=Wd.sizeFromShape(l)/c,m=LF({inputs:{x:d},attrs:{shape:[f,c]},backend:n});h&&HB(n,d);const g=qB(a),y=qB(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const s=x(),a=new UB(r),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,s,"int32",o),HB(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new GB([f,e/2]),s=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(r,t,"int32",s),HB(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let k=b;b=FO({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),HB(n,k);let v=IL({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});HB(n,m);const N=l.slice(0,-1);N.push(a),k=b,b=LF({inputs:{x:b},attrs:{shape:N},backend:n}),HB(n,k);const S=v;return v=LF({inputs:{x:v},attrs:{shape:N},backend:n}),HB(n,S),[v,b]}};class KB{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const XB={kernelName:"Transform",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=r,[c,p,h,d]=s.shape,[f,m]=null!=l?l:[p,h],g=new KB(p,h,o,i,u,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}};const YB={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;hD(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(a.dataId),{outputValues:i,outputShape:u,indices:l}=_F(o,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}};const ZB={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s,i=o.shape.length,u=s.shape[a],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(l[c++]=o.shape[e]);const p=[],h=new Array(i).fill(0),d=o.shape.slice();d[a]=1;const f=new Array(u);for(let e=0;e<f.length;e++){h[a]=e;const t=FO({inputs:{x:o},backend:n,attrs:{begin:h,size:d}}),r=LF({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class JB{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,o=a*Math.ceil(s/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const QB=[ZF,JF,QF,eO,tO,sO,aO,oO,hO,dO,fO,mO,gO,yO,bO,kO,vO,IO,TO,EO,AO,MO,LO,zO,GO,HO,KO,ID,ZO,aM,dM,bM,xM,wM,kM,vM,NM,SM,TM,DM,FM,OM,LM,PM,UM,GM,qM,KM,XM,YM,ZM,JM,QM,tL,rL,sL,iL,cL,hL,dL,fL,yL,wL,kL,NL,TL,EL,$L,ND,CL,nM,AL,RL,_L,ED,DL,FL,OL,ML,LL,zL,BL,PL,UL,HL,KL,XL,YL,ZL,ez,tz,rz,az,oz,iz,cz,pz,xz,FF,wz,vz,Sz,Tz,PO,$z,Rz,_z,Mz,Lz,CD,zz,Bz,Pz,Vz,Uz,WO,fz,Gz,Hz,qz,zF,Xz,Zz,eB,nB,aB,iB,uB,lB,pB,dB,mB,gB,yB,bB,xB,wB,OO,bz,kB,vB,NB,SB,IB,TB,EB,$B,CB,AB,RB,_B,FB,OB,MB,LB,gz,jF,zB,BB,WB,jB,XB,XF,YB,ZB,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r,i=s.shape.length,u=[];let l=0;const c=ly.getAxesPermutation([l],i);let p=s;null!=c&&(p=KF({inputs:{x:s},backend:n,attrs:{perm:c}}),u.push(p),l=ly.getInnerMostAxes(1,i)[0]);const h=ly.segment_util.computeOutShape(p.shape,l,o),d=Wd.sizeFromShape([p.shape[l]]),f=LF({inputs:{x:p},backend:n,attrs:{shape:[-1,d]}});u.push(f);const m=Mf(s.dtype),g=(e,t,r,s,a)=>{const o=e.shape[0],i=e.shape[1],l=ly.segment_util.segOpComputeOptimalWindowSize(i,a),c=new JB({windowSize:l,inSize:i,batchSize:o,numSegments:a},t),p=n.compileAndRun(c,[e,r],s);if(u.push(p),p.shape[1]===a)return p;const h=Wz({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=VB({inputs:{x:h},backend:n,attrs:{reps:[i/l]}});u.push(h),u.push(d);return g(p,t,d,s,a)},y=LF({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:h}});let b=y;if(null!=c){u.push(y);const e=ly.getUndoAxesPermutation(c);b=KF({inputs:{x:b},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},Az];for(const e of QB)Bd(e);const eP=Td();eP.registerFlag("HAS_WEBGL",(()=>eP.getNumber("WEBGL_VERSION")>0)),eP.registerFlag("WEBGL_VERSION",(()=>iD(2)?2:iD(1)?1:0)),eP.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),eP.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===eP.get("WEBGL_VERSION"))),eP.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),eP.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),eP.registerFlag("WEBGL_PACK",(()=>eP.getBool("HAS_WEBGL"))),eP.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_PACK_CLIP",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_PACK_REDUCE",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_LAZILY_UNPACK",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_CONV_IM2COL",(()=>eP.getBool("WEBGL_PACK"))),eP.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>rD(eP.getNumber("WEBGL_VERSION")))),eP.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>sD(eP.getNumber("WEBGL_VERSION")))),eP.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=eP.getNumber("WEBGL_VERSION");return 0===e?0:aD(e)})),eP.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>eP.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Kf.isMobile())),eP.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>uD(eP.getNumber("WEBGL_VERSION")))),eP.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!eP.getBool("WEBGL_FORCE_F16_TEXTURES")&&eP.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),eP.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>lD(eP.getNumber("WEBGL_VERSION")))),eP.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>pD(eP.getNumber("WEBGL_VERSION")))),eP.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>eP.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),eP.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),eP.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Kf.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),eP.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),eP.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),eP.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),eP.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),eP.registerFlag("WEBGL_EXP_CONV",(()=>!1)),eP.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>eP.getBool("IS_TEST"))),eP.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),eP.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),eP.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));class tP{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=T_.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=t_();this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?r_(["r","c","d"],e):n_(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class nP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=T_.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=t_();this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?r_(["r","c","d"],e):n_(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class rP{constructor(e){this.variableNames=["A"],this.outTexUsage=$_.DOWNLOAD;const t=t_();this.outputShape=e,this.userCode=`\n      ${o_}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class sP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=$_.DOWNLOAD;const t=t_();this.outputShape=e,this.userCode=`\n      ${o_}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const aP={R:0,G:1,B:2,A:3};class oP{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=t_();this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${aP[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":a_(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class iP{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=t_();this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":a_(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function uP(e){const t=t_();return function(e,t){const n=K_(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(M_(e,(()=>e.shaderSource(n,t))),M_(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function lP(e){return function(e,t){const n=K_(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return M_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),M_(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function cP(e){return function(e,t){const n=K_(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return M_(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),M_(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function pP(e,t,n,r,s,a){!function(e,t){const n=Td().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return K_(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return M_(e,(()=>e.bindTexture(i,o))),M_(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),M_(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),M_(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),M_(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===Td().getNumber("WEBGL_VERSION")?M_(e,(()=>e.texImage2D(i,0,r,t,n,0,s,a,null))):M_(e,(()=>e.texStorage2D(i,1,r,t,n))),M_(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function hP(e){return e.internalFormatFloat}function dP(e){return e.internalFormatHalfFloat}function fP(e){return e.downloadTextureFormat}function mP(e){return e.internalFormatPackedFloat}function gP(e){return e.internalFormatPackedHalfFloat}function yP(e,t,n,r,s,a,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=F_(e,t);return n*r*4}(a,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class bP{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Td().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,S_(t,e)):this.gl=I_(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===Td().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=z_(this.gl,e),oD(this.gl,t))this.textureHalfFloatExtension=z_(this.gl,t);else if(Td().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),oD(this.gl,r))this.colorBufferHalfFloatExtension=z_(this.gl,r);else if(Td().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",oD(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!oD(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=lP(this.gl),this.indexBuffer=cP(this.gl),this.framebuffer=function(e){return K_(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=O_(this.gl,this.textureHalfFloatExtension)}get debug(){return Td().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;M_(e,(()=>e.finish())),M_(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),M_(e,(()=>e.deleteFramebuffer(this.framebuffer))),M_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),M_(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),M_(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=__(t,n);return pP(e,s,a,hP(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=__(t,n);return pP(e,s,a,dP(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=__(t,n);return pP(e,s,a,fP(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){M_(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===Td().getNumber("WEBGL_VERSION")?M_(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):M_(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===Td().getNumber("WEBGL_VERSION")?M_(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):M_(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),M_(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let o,i,u;M_(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,u=a.internalFormatPackedFloat),o.set(s),2===Td().getNumber("WEBGL_VERSION")?M_(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):M_(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,o))),M_(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=F_(t,n);return pP(e,s,a,gP(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=F_(t,n);return pP(e,s,a,mP(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(q_(this.gl,this.framebuffer),this.outputTexture=null),M_(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=__(t,n),o=new Uint8Array(t*n*4);return M_(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return yP(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();M_(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return M_(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),M_(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),M_(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Td().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return M_(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=uP(t));const n=function(e){return K_(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return M_(t,(()=>t.attachShader(n,this.vertexShader))),M_(t,(()=>t.attachShader(n,e))),function(e,t){if(M_(e,(()=>e.linkProgram(t))),!Td().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&W_(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return M_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),U_(e,t,"clipSpacePos",n,3,20,0)&&U_(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&M_(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&W_(this.gl,this.program),M_(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return K_(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),M_(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),G_(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=F_(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&W_(this.gl,this.program),j_(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),M_(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),M_(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=z_(this.gl,2===Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Wd.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in Td().platform&&(n=Td().platform.setTimeoutCustom.bind(Td().platform)),Wd.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),H_(this.gl,e,this.framebuffer),this.debug&&j_(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(H_(this.gl,this.outputTexture,this.framebuffer),this.debug&&j_(this.gl)):q_(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;H_(r,e,this.framebuffer),this.debug&&j_(r),this.outputTexture=e,M_(r,(()=>r.viewport(0,0,t,n))),M_(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),M_(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class xP{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=gD(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=xD("rc",this.rank),t=b_(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class wP{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=vP(t,n),s=NP(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=kP(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let o;return r===A_.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===A_.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===A_.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===A_.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===A_.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=vP(n,r),a=NP(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const o=kP(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=Td().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function kP(e,t,n,r,s){const a=function(e,t){switch(e){case A_.PACKED_2X2_FLOAT32:return mP(t);case A_.PACKED_2X2_FLOAT16:return gP(t);case A_.UNPACKED_FLOAT32:return hP(t);case A_.UNPACKED_FLOAT16:return dP(t);case A_.PACKED_4X1_UNSIGNED_BYTE:return fP(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(s){const[t,n]=F_(e[0],e[1]);o=t*n}else{const[t,n]=__(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function vP(e,t){if(e===$_.UPLOAD)return A_.PACKED_2X2_FLOAT32;if(e===$_.RENDER||null==e)return function(e){return Td().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?A_.PACKED_2X2_FLOAT32:A_.UNPACKED_FLOAT32:e?A_.PACKED_2X2_FLOAT16:A_.UNPACKED_FLOAT16}(t);if(e===$_.DOWNLOAD||e===$_.PIXELS)return A_.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function NP(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class SP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=gD(this.outputShape.length);const t=e.length,n=xD("rc",t),r=b_(t),s=wD(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const IP=bx.whereImpl,TP={};const EP=Td().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class $P extends Eh{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Td().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof bP)t=e;else{const n=I_(Td().getNumber("WEBGL_VERSION"),e);t=new bP(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=I_(Td().getNumber("WEBGL_VERSION"));t=new bP(e),this.binaryCache=((n=Td().getNumber("WEBGL_VERSION"))in TP||(TP[n]={}),TP[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new wP(this.gpgpu),this.numMBBeforeWarning=null==Td().global.screen?1024:Td().global.screen.height*Td().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Th(this,Cx())}nextDataId(){return $P.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,r,s,a){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[r,s]},i.texShape=[r,s];const u=J_(t),l=new oP(u,!1,a),c=this.runWebGLProgram(l,[o],n,[[r,s]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if((Td().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Td().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:$_.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,s){if(Td().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:$_.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new RD(o,"return x;"):new AD(o,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=Wd.now()),"complex64"===r){const e=this.readSync(s.real.dataId),t=this.readSync(s.imag.dataId);c=ly.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=Wd.now()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=s){let t;t=i?new RD(r,"return x;"):new AD(r,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(Td().getBool("DEBUG")&&!Td().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Td().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&Td().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...D_(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];l=ly.mergeRealAndImagArrays(t,n)}else if(null==c)l=this.getValuesFromTexture(e);else{const e=Wd.sizeFromShape(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=c){const e=this.gpgpu.gl;M_(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,l),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Cx().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:o,isPacked:i,texture:u}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new RD(s,"return x;"):new AD(s,"return x;");const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:o}],o),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==u)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),c=Cx().makeTensorFromTensorInfo(l),p=this.texData.get(l.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Wd.decodeString(e)));return sg(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return sg(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!L_(n)){if(Td().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=Wd.sizeFromShape(t);if(Td().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...D_(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=Td().getBool("WEBGL_PACK")&&!0===r,o=a?J_(t):t,i=a?new sP(o):new rP(o),u=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=Wd.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=Wd.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);o.kernelMs=Wd.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Wd.now(),endMs:null}}endTimer(e){return Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Wd.now(),e)}async getQueryTime(e){if(Td().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=EP){return Td().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Wd.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){ly.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return IP(e.shape,t)}packedUnaryOp(e,t,n){const r=new RD(e.shape,t),s=this.compileAndRun(r,[e],n);return Cx().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=bF(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Td().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"return abs(x);",e.dtype);const t=new AD(e.shape,"return abs(x);"),n=this.compileAndRun(t,[e]);return Cx().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Wd.isString(n[0])){const s=n.map((e=>Wd.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return Cx().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new SP(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new xP(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Y_(e.shape),...Z_(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[Y_(t),...Z_(t)],a=new OF(s,n),o=[n],i=this.runWebGLProgram(a,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;if(null!=t){const e=Wd.sizeFromShape(s),n=t[0]*t[1]*4;Wd.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=J_(s);let i;i=r?new nP(o):new tP(o);const u=[null!=t?t:D_(o)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,u,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===T_.DENSE){const t=null!=a?a:D_(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===Wd.sizeFromShape(o.shape))return i.values=Wd.getTypedArrayFromDType(o.dtype,0),o;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Wd.sizeFromShape(t.shape)<=Td().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!eD(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:u}=x_(e.packedInputs,t.shape,a);let l="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=Wd.computeStrides(i);p=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&Wd.arraysEqual(t.shape,a),f=1===Wd.sizeFromShape(t.shape),m=ly.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&Wd.arraysEqual(a,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${g}_${o?u:""}_${i.length}_${f}_${m}_${d}_${l}_${c}_${p}_${y}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${Td().getNumber("WEBGL_VERSION")}`,a}(e,l,c),h=this.getAndSaveBinary(p,(()=>dD(this.gpgpu,e,l,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),Td().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(mD(t.inShapeInfos,n),mD([t.outShapeInfo],[r]));const a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===Td().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],o=t.uniformLocations[`offset${s}`],i=t.inShapesLocations[`${s}Shape`],u=t.inTexShapesLocations[`${s}TexShape`];if(i){const{uniformShape:r}=x_(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(i,new Int32Array(r));break;case 2:e.gl.uniform2iv(i,new Int32Array(r));break;case 3:e.gl.uniform3iv(i,new Int32Array(r));break;case 4:e.gl.uniform4iv(i,new Int32Array(r))}}if(u&&e.gl.uniform2i(u,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(Wd.sizeFromShape(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,r)}));const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=Wd.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s&&t.program.customUniforms.forEach(((n,r)=>{const a=t.customUniformLocations[r],o=s[r];if("float"===n.type)e.gl.uniform1fv(a,o);else if("vec2"===n.type)e.gl.uniform2fv(a,o);else if("vec3"===n.type)e.gl.uniform3fv(a,o);else if("vec4"===n.type)e.gl.uniform4fv(a,o);else if("int"===n.type)e.gl.uniform1iv(a,o);else if("ivec2"===n.type)e.gl.uniform2iv(a,o);else if("ivec3"===n.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,o)}})),e.executeProgram()}(this.gpgpu,h,l,c,r),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=Td().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Wd.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!Td().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Td().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Rx((()=>{if(!Td().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Td().getBool("DEBUG");Td().set("DEBUG",!1);const t=this.abs(Xx(1e-8)).dataSync()[0];if(Td().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=Wd.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=Td().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=Td().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&Td().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Wd.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Wd.squeezeShape(e);e=t.newShape}let s=Wd.sizeFromShape(e),a=null;e.length<=1&&s<=n?a=[1,s]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>r&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=Y_(e);let n=2,r=2;e.length&&([n,r]=Z_(e)),s=t*(n/2)*(r/2),a=Wd.sizeToSquarishShape(s).map((e=>2*e))}else a=Wd.sizeToSquarishShape(s);return a}(n,i),t.texShape=c),null!=s){const e=J_(n);let a,o=c[1],p=c[0];const h=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&h||([o,p]=F_(c[0],c[1])),a=i?new iP(e,h):new oP(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?$_.PIXELS:$_.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);const g=[[p,o]],y=!0,b=this.runWebGLProgram(a,[f],r,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,Td().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=Wd.now()-l)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*Wd.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await zS(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw V_(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,inShapesLocations:a,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}=fD(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.inShapesLocations=a,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}createTensorFromTexture(e,t,n){const{texture:r,height:s,width:a,channels:o}=e,i=Cx().backend;if(!i.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const u=i.writeTexture(r,t,n,s,a,o);return Cx().makeTensorFromDataId(u,t,n,i)}}$P.nextDataId=0;Kf.isBrowser()&&Fx("webgl",(()=>new $P),2);class CP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,CP.prototype)}}class AP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,AP.prototype)}}class RP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,RP.prototype)}}class _P extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_P.prototype)}}class DP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,DP.prototype)}}class FP extends Error{constructor(e){super(e),Object.setPrototypeOf(this,FP.prototype)}}class OP{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function MP(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function LP(e,t){if(!e)throw new DP(t)}function zP(e,t){let n=0;for(const r of e)r===t&&n++;return n}function BP(e){return 1===e.length?e[0]:e}function PP(e){return Array.isArray(e)?e:[e]}function VP(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function WP(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let UP={};function GP(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function HP(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>HP(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?HP(t):e[n]=t.value)}}}function qP(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in UP)a=UP[s];else if(a=t[s],null==a)throw new RP(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new RP(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,u;if(o in n?[i,u]=n[o]:o in UP?[i,u]=UP.className:o in t&&([i,u]=t[o]),null==i)throw new RP(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(UP))e[t]=UP[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},UP);for(const e of Object.keys(n))UP[e]=n[e];HP(a.config);const r=u(i,a.config,n,s);return UP=Object.assign({},t),r}{const e=Object.assign({},UP);for(const e of Object.keys(n))UP[e]=n[e];const t=new i(a.config);return UP=Object.assign({},e),t}}}function jP(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function KP(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function XP(e){if(null==e)throw new RP(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function YP(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new RP(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function ZP(e,t,n=0,r=1/0){return LP(n>=0),LP(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function JP(e,t){Array.isArray(e)?(Wd.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>JP(e,`element ${n+1} of ${t}`)))):Wd.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${QP(e)}.`))}function QP(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>QP(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function eV(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let tV=0;function nV(){return tV++}const rV={};function sV(e=""){return e in rV||(rV[e]=0),rV[e]+=1,e+rV[e].toString()}const aV=["channelsFirst","channelsLast"],oV=["nearest","bilinear"],iV=["valid","same","causal"],uV=["max","avg"],lV=["sum","mul","concat","ave"],cV=new Map;function pV(e){YP(aV,"DataFormat",e)}function hV(e){YP(iV,"PaddingMode",e)}function dV(e){YP(uV,"PoolMode",e)}const fV=[];function mV(e,t){fV.push(e);try{const e=t();return fV.pop(),e}catch(e){throw fV.pop(),e}}function gV(e){if(!xV(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===fV.length?"":fV.join("/")+"/")+e}function yV(e){if(!xV(e))throw new Error("Not a valid tensor name: '"+e+"'");cV.has(e)||cV.set(e,0);const t=cV.get(e);if(cV.set(e,cV.get(e)+1),t>0){const n=`${e}_${t}`;return cV.set(n,1),n}return e}const bV=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function xV(e){return!!e.match(bV)}function wV(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function kV(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function vV(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function NV(e,t){if(t<e)throw new RP(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}let SV;function IV(){return null==SV&&(SV=qf.backend.epsilon()),SV}function TV(e,t){return ag(e,t)}function EV(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Zy(e,n)}function $V(e,t,n){return Rx((()=>{switch(e.rank){case 1:return WN(e,t,n);case 2:return UN(e,[t,0],[n,e.shape[1]]);case 3:return GN(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return HN(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Vx(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Vx(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new RP(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function CV(e,t,n){return Rx((()=>{switch(e.rank){case 1:return WN(e,t,n);case 2:return UN(e,[0,t],[e.shape[0],n]);case 3:return GN(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return HN(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new RP(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function AV(e,t,n,r){return Rx((()=>{switch(e.rank){case 1:return WN(e,t,n);case 2:switch(r){case 1:return $V(e,t,n);case 2:return CV(e,t,n);default:throw new RP(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return $V(e,t,n);case 2:return GN(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return CV(e,t,n);default:throw new RP(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return $V(e,t,n);case 2:return HN(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return HN(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return CV(e,t,n);default:throw new RP(`The axis is not within the rank of the tensor ${r}`)}default:throw new RP(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function RV(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),zx(e,t)}function _V(e,t){switch(e.rank){case 1:return pv([e,t]);case 2:return hv([e,t],0);case 3:return dv([e,t],0);case 4:return fv([e,t],0);default:throw new RP(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function DV(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new RP(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return kw(e,t)}function FV(e,t=0,n=1,r,s){return EN(e,t,n,r,s)}function OV(e,t,n,r){if(e.rank<2||t.rank<2)throw new _P(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new _P(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const s=!1,a=!1;return Zx.matMul({a:e,b:t,transposeA:s,transposeB:a,bias:r?zV(e.rank,r,"channelsLast"):null,activation:n})}{const s=e.shape.slice(),a=s.pop();e=Zy(e,[-1,a]);const o=t.shape.slice(),i=o.pop(),u=o.pop(),l=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Zy(pk(t,c),[u,-1]);const p=[...s,...l],h=!1,d=!1;return Zy(Zx.matMul({a:e,b:t,transposeA:h,transposeB:d,bias:r?zV(e.rank,r,"channelsLast"):null,activation:n}),p)}}function MV(e,t,n){return Rx((()=>(t=Array.isArray(t)?cw(t,"int32"):ag(t,"int32"),Mv(e,t,n))))}function LV(e){return jy(e,e)}function zV(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new RP(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?Zy(t,[1,r[0],1,1,1]):Zy(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?Zy(t,[1,1,1,1,r[0]]):Zy(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?Zy(t,[1,r[0],1,1]):Zy(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?Zy(t,[1,1,1,r[0]]):Zy(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?Zy(t,[1,r[0],1]):Zy(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?Zy(t,[1,1,r[0]]):Zy(t,[1].concat(r))}else if(e<3)return t;throw new RP(`Unsupported input rank by biasAdd: ${t.rank}`)}function BV(e,t,n){return Rx((()=>(null==n&&(n="channelsLast"),pV(n),Jx(e,zV(e.rank,t,n)))))}function PV(e,t,n,r){return Rx((()=>yS(e,t,n,r)))}function VV(e,t,n=!1){return n?e():t()}const WV=["fanIn","fanOut","fanAvg"],UV=["normal","uniform","truncatedNormal"];class GV extends ay.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class HV extends GV{apply(e,t){return Ux(e,t)}}HV.className="Zeros",ay.registerClass(HV);class qV extends GV{apply(e,t){return yk(e,t)}}qV.className="Ones",ay.registerClass(qV);class jV extends GV{constructor(e){if(super(),"object"!=typeof e)throw new RP(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new RP(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Rx((()=>jy(Xx(this.value),yk(e,t))))}getConfig(){return{value:this.value}}}jV.className="Constant",ay.registerClass(jV);class KV extends GV{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return CN(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}KV.className="RandomUniform",ay.registerClass(KV);class XV extends GV{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new _P(`randomNormal does not support dType ${t}.`);return FV(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}XV.className="RandomNormal",ay.registerClass(XV);class YV extends GV{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new _P(`truncatedNormal does not support dType ${t}.`);return QN(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}YV.className="TruncatedNormal",ay.registerClass(YV);class ZV extends GV{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Rx((()=>{if(2!==e.length||e[0]!==e[1])throw new RP("Identity matrix initializer can only be used for 2D square matrices.");return jy(this.gain,uk(e[0]))}))}getConfig(){return{gain:this.gain}}}ZV.className="Identity",ay.registerClass(ZV);class JV extends GV{constructor(e){if(super(),e.scale<0)throw new RP(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,YP(WV,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){YP(UV,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(pV(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=wV(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=wV(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=wV(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new _P(`${this.getClassName()} does not support dType ${t}.`);return QN(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return CN(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}JV.className="VarianceScaling",ay.registerClass(JV);class QV extends JV{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return JV.className}}QV.className="GlorotUniform",ay.registerClass(QV);class eW extends JV{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return JV.className}}eW.className="GlorotNormal",ay.registerClass(eW);class tW extends JV{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return JV.className}}tW.className="HeNormal",ay.registerClass(tW);class nW extends JV{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return JV.className}}nW.className="HeUniform",ay.registerClass(nW);class rW extends JV{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return JV.className}}rW.className="LeCunNormal",ay.registerClass(rW);class sW extends JV{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return JV.className}}sW.className="LeCunNormal",ay.registerClass(sW);class aW extends GV{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new _P("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Rx((()=>{if(e.length<2)throw new _P("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=FV(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=NS.gramSchmidt(t);return e[0]>e[1]&&(n=pk(n)),jy(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}aW.className="Orthogonal",ay.registerClass(aW);const oW={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function iW(e,t={}){return qP(e,ay.SerializationMap.getMap().classNameMap,t,"initializer")}function uW(e){return GP(e)}function lW(e){if("string"==typeof e){const t=e in oW?oW[e]:e;if("GlorotNormal"===t)return new eW;if("GlorotUniform"===t)return new QV;if("HeNormal"===t)return new tW;if("HeUniform"===t)return new nW;if("LeCunNormal"===t)return new rW;if("LeCunUniform"===t)return new sW;{const e={};return e.className=t,e.config={},iW(e)}}return e instanceof GV?e:iW(e)}function cW(e){return Array.isArray(e)&&Array.isArray(e[0])}function pW(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function hW(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new RP(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function dW(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new RP(`Expected exactly 1 Shape; got ${e.length}`)}return e}function fW(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class mW{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=nV(),n=null==n?"Variable":n,this.originalName=gV(n),this.name=yV(this.originalName),this.trainable_=r,this.constraint=s,this.val=rS(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function gW(e){return e.map((e=>e.read()))}function yW(e){e.forEach((e=>{e[0].write(e[1])}))}class bW{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class xW{constructor(e,t,n,r,s,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=o,this.id=nV(),null!=a&&(this.originalName=gV(a),this.name=yV(this.originalName)),this.rank=t.length}}let wW=0;class kW{constructor(e,t){this.callArgs=t,this.id=wW++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let vW=0;class NW extends ay.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=vW++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=VP(e)+"_"+sV(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new AP(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new RP(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return BP(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return BP(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new CP(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new CP(`Layer ${this.name} is not connected, no input to return.`);return BP(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new CP(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new CP(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return BP(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=PP(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=PP(this.inputSpec);if(e.length!==t.length)throw new RP(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new RP(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new RP(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new RP(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new RP(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],o=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(o))throw new RP(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new RP(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=PP(e);let r=!0;for(const e of n)if(!(e instanceof xW)){r=!1;break}let s=!0;for(const e of n)if(e instanceof xW){s=!1;break}if(r===s)throw new RP("Arguments to apply() must be all SymbolicTensors or all Tensors");return mV(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of PP(e))t.push(n.shape);this.build(BP(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=PP(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=BP(a),null!=this.activityRegularizer)throw new _P("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=PP(e);const t=[];for(const n of e)t.push(n.shape);return BP(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new xW(a,n,this,PP(e),t,this.name,r))):new xW(a,r,this,PP(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new _P("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new CP(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new CP(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new AP(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return fW(this.weights)}build(e){this.built=!0}getWeights(e=!1){return gW(e?this.trainableWeights:this.weights)}setWeights(e){Rx((()=>{const t=this.weights;if(t.length!==e.length)throw new RP(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=gW(t);for(let s=0;s<r.length;++s){const a=r[s],o=t[s],i=e[s];if(!Wd.arraysEqual(a.shape,i.shape))throw new RP(`Layer weight shape ${a.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}yW(n)}))}addWeight(e,t,n,r,s,a,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new RP(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=i?i():lW("zeros"));const u=r.apply(t,n),l=new mW(u,n,e,a,o);return u.dispose(),null!=s&&this.addLoss((()=>s.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=PP(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,o=null){const i=PP(e);t=PP(t),n=PP(n),r=PP(r),s=pW(s),a=pW(a);const u=[],l=[],c=[];for(const e of i)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new kW({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function SW(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=SW(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class IW extends NW{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:sV("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new RP("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new RP("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new RP("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new xW(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new kW({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new RP(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function TW(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new RP("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new IW({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}IW.className="InputLayer",ay.registerClass(IW);class EW{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof EW)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new RP(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return ag(t,e.dtype)}catch(n){throw new RP(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof xW){if(null==this.id2Value[e.id])throw new RP(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new RP(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof xW){if(null==this.id2Value[e.id])throw new RP(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new RP(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&_x(this.id2Mask)}}const $W=new OP,CW=new OP;function AW(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],i=o.map((e=>e.name)),u=[],l=t.names();for(const e of i)-1!==l.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let p,h=$W.get(c);if(null==h){const e=function(e,t){Wd.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=_W(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:o}=_W(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in o)null==r[e]&&(r[e]=new Set),o[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:RW(r)}}(o,t);h=e.sorted,p=e.recipientCounts,$W.put(c,h),CW.put(c,p)}p={},s||Object.assign(p,CW.get(c));const d=new EW(t);for(let e=0;e<h.length;++e){if(null!=r){const e=Ax().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=h[e],o=a.sourceLayer;if(o instanceof IW)continue;const l=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);l.push(n),c.push(r),null!=r&&(m=!0),s||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=PP(o.apply(l,n));let y=null;o.supportsMasking&&(y=o.computeMask(l,c));const b=DW(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}s||_x(f)}return d.disposeMasks(),a?u:u[0]}function RW(e){const t={};for(const n in e)t[n]=e[n].size;return t}function _W(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],o=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&o.pop();else{o.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function DW(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function FW(e,t){return Rx((()=>tk(eb(jy(e,e),t,!0))))}Td().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=$W&&$W.setMaxEntries(e),null!=CW&&CW.setMaxEntries(e)}));class OW extends ay.Serializable{getConfig(){return{}}}class MW extends OW{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Rx((()=>{const t=FW(e,this.axis),n=cv(t,0,this.maxValue);return jy(e,Lw(n,Jx(IV(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}MW.className="MaxNorm",ay.registerClass(MW);class LW extends OW{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Rx((()=>Lw(e,Jx(IV(),FW(e,this.axis)))))}getConfig(){return{axis:this.axis}}}LW.className="UnitNorm",ay.registerClass(LW);class zW extends OW{apply(e){return Xy(e)}}zW.className="NonNeg",ay.registerClass(zW);class BW extends OW{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Rx((()=>{const t=FW(e,this.axis),n=Jx(jy(this.rate,cv(t,this.minValue,this.maxValue)),jy(1-this.rate,t));return jy(e,Lw(n,Jx(IV(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}BW.className="MinMaxNorm",ay.registerClass(BW);const PW={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function VW(e){return GP(e)}function WW(e,t={}){return qP(e,ay.SerializationMap.getMap().classNameMap,t,"constraint")}function UW(e){if(null==e)return null;if("string"==typeof e){return WW({className:e in PW?PW[e]:e,config:{}})}return e instanceof OW?e:WW(e)}async function GW(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];_x(r)}}function HW(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var qW,jW;(jW=qW||(qW={}))[jW.SILENT=0]="SILENT",jW[jW.VERBOSE=1]="VERBOSE";class KW{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class XW{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class YW extends KW{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=Rx((()=>Jx(this.totals[e],jy(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Rx((()=>{const n=jy(Lw(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Dx(t[e])})))}}class ZW extends KW{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const o=s[a];e.push(o.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class JW extends KW{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||zS,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Wd.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,s=null!=n?n():Wd.now();return(...a)=>{const o=null!=n?n():Wd.now();return o-s<t||(s=o,r=e(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await GW(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await GW(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await GW(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await GW(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await GW(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Wd.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await GW(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await GW(e),await this.trainEnd(e))}}function QW(e,t){if(null==e&&(e={}),e instanceof KW)return[e];if(Array.isArray(e)&&e[0]instanceof KW)return e;return PP(e).map((e=>new JW(e,t)))}class eU{constructor(){}static registerCallbackConstructor(e,t){Wd.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),eU.checkForDuplicate(t),null==eU.constructors[e]&&(eU.constructors[e]=[]),eU.constructors[e].push(t)}static checkForDuplicate(e){for(const t in eU.constructors){eU.constructors[+t].forEach((t=>{if(t===e)throw new RP("Duplicate callback constructor.")}))}}static clear(){eU.constructors={}}static createCallbacks(e){const t=[];for(const n in eU.constructors){const r=+n;e>=r&&t.push(...eU.constructors[r])}return t.map((e=>new e))}}function tU(e,t,n,r,s,a,o,i,u){const l=new ZW,c=[new YW,...eU.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const p=new XW(c);return p.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:u}),{callbackList:p,history:l}}function nU(e,t={},n=!1){return qP(e,ay.SerializationMap.getMap().classNameMap,t,"layer",n)}function rU(e,t){return Rx((()=>{"float32"!==e.dtype&&(e=ag(e,"float32"));const n=eb(LV(e),t,!0),r=mw(n.shape,IV()),s=tk(tN(n,r));return Lw(e,s)}))}function sU(e,t){return Rx((()=>mk(LV(zw(t,e)),-1)))}function aU(e,t){return Rx((()=>mk(Zw(zw(t,e)),-1)))}function oU(e,t){return Rx((()=>{const n=zw(e,t),r=cv(Zw(e),IV(),Number.MAX_VALUE),s=Zw(Lw(n,r));return jy(100,mk(s,-1))}))}function iU(e,t){return Rx((()=>{const n=cv(t,IV(),Number.MAX_VALUE),r=Sk(Jx(1,n)),s=cv(e,IV(),Number.MAX_VALUE),a=Sk(Jx(1,s));return mk(LV(zw(r,a)),-1)}))}function uU(e,t,n=!1){return Rx((()=>{if(n)t=qN(t);else{const e=eb(t,t.shape.length-1,!0);t=Lw(t,e)}return t=cv(t,IV(),1-IV()),lk(eb(jy(ag(e,"float32"),Sk(t)),t.shape.length-1))}))}function lU(e,t,n=!1){return Rx((()=>{const r=ag(Ov(function(e){const t=[wV(e.shape)];return Zy(e,t)}(e)),"int32"),s=(t=cv(t,IV(),1-IV())).shape;return uU(Zy(uN(r,s[s.length-1]),s),t,n)}))}function cU(e,t){return Rx((()=>{let n;return n=cv(t,IV(),1-IV()),n=Sk(Lw(n,zw(1,n))),mk(function(e,t){if(!Wd.arraysEqual(e.shape,t.shape))throw new RP(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Rx((()=>{const n=Xy(t),r=lk(Zw(t));return Jx(zw(n,jy(t,e)),Ck($k(r)))}))}(e,n),-1)}))}function pU(e,t){return Rx((()=>{const n=cv(e,IV(),1),r=cv(t,IV(),1);return eb(jy(e,Sk(Lw(n,r))),-1)}))}function hU(e,t){return Rx((()=>{const n=rU(e,-1),r=rU(t,-1),s=jy(n,r);return lk(eb(s,-1))}))}eU.constructors={};const dU={meanSquaredError:sU,meanAbsoluteError:aU,meanAbsolutePercentageError:oU,meanSquaredLogarithmicError:iU,squaredHinge:function(e,t){return Rx((()=>{const n=tN(0,zw(1,jy(e,t)));return mk(LV(n),-1)}))},hinge:function(e,t){return Rx((()=>{const n=tN(0,zw(1,jy(e,t)));return mk(n,-1)}))},categoricalHinge:function(e,t){return Rx((()=>{const n=eb(jy(e,t),-1),r=Jw(jy(zw(1,e),t),-1);return tN(0,Jx(1,zw(r,n)))}))},logcosh:function(e,t){return Rx((()=>{const n=Math.log(2),r=zw(t,e),s=zw(Jx(r,Uv(jy(-2,r))),n);return mk(s,-1)}))},categoricalCrossentropy:uU,sparseCategoricalCrossentropy:lU,binaryCrossentropy:cU,kullbackLeiblerDivergence:pU,poisson:function(e,t){return Rx((()=>{const n=Sk(Jx(IV(),t));return mk(zw(t,jy(e,n)),-1)}))},cosineProximity:hU};function fU(e){if("string"==typeof e){if(e in dU)return dU[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new RP(t)}return e}function mU(e,t){return Rx((()=>{const n=jy(.5,lN(t)),r=TV(Ow(t,n),e.dtype);return mk($v(e,r),-1)}))}function gU(e,t){return Rx((()=>TV($v(Hk(e,-1),Hk(t,-1)),"float32")))}function yU(e,t){return Rx((()=>ag(eb(qw($v(e,1),$v(t,1))),"float32")))}function bU(e,t){return Rx((()=>{const n=yU(e,t),r=function(e,t){return Rx((()=>ag(eb(qw($v(e,0),$v(t,1))),"float32")))}(e,t),s=Jx(n,r);return ag(Vw(Ow(s,0),Lw(n,s),0),"float32")}))}function xU(e,t){return cU(e,t)}function wU(e,t){return e.rank===t.rank&&(e=ak(e,[e.rank-1])),(t=Hk(t,-1)).dtype!==e.dtype&&(t=ag(t,e.dtype)),ag($v(e,t),"float32")}const kU=uU,vU=lU,NU={binaryAccuracy:mU,categoricalAccuracy:gU,precision:bU,categoricalCrossentropy:kU,sparseCategoricalCrossentropy:vU,mse:sU,MSE:sU,mae:aU,MAE:aU,mape:oU,MAPE:oU,cosine:hU};function SU(e){if("string"==typeof e&&e in NU)return NU[e];if("string"!=typeof e&&null!=e)return e;throw new RP(`Unknown metric ${e}`)}function IU(e){if(LP(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(dU))if(dU[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(NU))if(NU[n]===e){t=n;break}return void 0!==t?t:e.name}}function TU(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!EU(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function EU(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!EU(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!EU(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function $U(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}r("_".repeat(t)),CU(a,n,r),r("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)s?AU(i[e],n,r):RU(i[e],n,o,r),r((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;t=null!=e.collectedTrainableWeights?fW(e.collectedTrainableWeights):fW(e.trainableWeights);return t}(e),l=fW(e.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(t))}function CU(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function AU(e,t,n){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}CU([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function RU(e,t,n,r){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const o=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];o.push(`${n}[${r}][${s}]`)}const i=e.name,u=e.getClassName(),l=0===o.length?"":o[0];CU([`${i} (${u})`,a,s,e.countParams().toString(),l],t,r);for(let e=1;e<o.length;++e)CU(["","","","",o[e]],t,r)}function _U(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function DU(e,t){if(null===e)return null;if("string"==typeof e)return WP(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];_U(t,s,r)?n.push(r):n.push(DU(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=WP(n);t[e]=DU(r,e)}}return t}}function FU(e,t){if(null==e)return null;if("string"==typeof e)return VP(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];_U(t,s,r)?n.push(r):n.push(FU(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],s=VP(n);t[s]="name"!==n&&"className"!==n||"string"!=typeof r?FU(r,n):r}return t}}
/** @license See the LICENSE file. */class OU extends NW{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=sV(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],KP(this.inputs).length!==this.inputs.length)throw new RP(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);KP(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;LP(0===n,"input layer has >1 nodes"),LP(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof IW))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},o=[],i=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new AP(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(OU.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const r=l.inputTensors[e],s=l.inboundLayers[e],a=l.nodeIndices[e],o=l.tensorIndices[e];i(r,t,n,s,a,o)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);o.push(l)},u=[],l=[];for(const e of this.outputs)i(e,u,l);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const o=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,o),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],o=e.nodeIndices[r],i=s.inboundNodes[o],u=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,u),n[i.id]=i}}const p={};for(const e in t){const r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}const h={};for(const e in r){const t=r[e];t in h||(h[t]=[]),h[t].push(s[e])}let d=Object.keys(h).map((e=>parseInt(e,10))).sort(jP);this.layers=[];for(const e of d){const t=h[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof OU&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,d=Object.keys(p).map((e=>parseInt(e,10))).sort(jP);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of p[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new AP(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new AP(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new kW({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new RP("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new RP(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new RP(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new RP(`${e.length} of ${r} weights are not set: ${e}`)}yW(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 4.0.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=FU(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Rx((()=>{e=PP(e);const n=new EW;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return AW(this.outputs,n,t)}))}computeMask(e,t){return Rx((()=>{let n;return e=PP(e),n=null==t?MP(null,e.length):PP(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=pW(e);if(t.length!==this.inputLayers.length)throw new RP(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(jP);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${s.name}_${a}_${o}`];r.push(i)}const s=pW(t.computeOutputShape(BP(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n[`${t.name}_${a}_${e}`]=s[e]}}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];LP(t in n),s.push(n[t])}return BP(s)}runInternalGraph(e,t){null==t&&(t=MP(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],o=t[r];n[s.id]=[a,o]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(jP);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,o,i,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),i=PP(t.call(e,l)),u=PP(t.computeMask(e,n)),r=[e],o=[n]}else r=a.map((e=>e[0])),o=a.map((e=>e[1])),null==l.mask&&(l.mask=o),i=PP(t.call(r,l)),u=PP(t.computeMask(r,o));if(t.activityRegularizer)throw new _P("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=i[e],a=u[e];n[t.id]=[r,a]}}}}const s=[],a=[],o=[];for(const e of this.outputs){LP(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];o.push(t.shape),s.push(t),a.push(r)}return[s,a,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof OU?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=OU.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new RP(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new RP("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new RP(`No such layer: ${e}`)}calculateLosses(){return Rx((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=OU.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=OU.nodeKey(e,n);let o={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],i=r.tensorIndices[n];let u=t[OU.nodeKey(s,a)];null==u&&(u=0),e.push([s.name,u,i,o])}a.push(e)}}}const o={};o.name=e.name,o.className=r,o.config=s,o.inboundNodes=a,n.push(o)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=OU.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];r.push([n.name,o,i])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=OU.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];s.push([n.name,o,i])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function i(e,t){const n=[];let r;for(const a of t){const i=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(i in s))return void o(e,t);const c=s[i];if(c.inboundNodes.length<=u)return void o(e,t);const p=c.inboundNodes[u];n.push(p.outputTensors[l])}n.length>0&&e.apply(BP(n),r)}function u(e){const n=e.name,a=nU(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new RP(`Corrupted configuration, expected array for nodeData: ${e}`);o(a,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!XP(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)i(t,n)}}const p=[],h=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];LP(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];LP(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}return new e({inputs:p,outputs:h,name:l})}get stateful(){if(this._stateful)throw new RP("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Rx((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function MU(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function LU(e,t){return MU(e,t,"classWeight")}async function zU(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Rx((()=>{if(1===e.shape.length)return og(e);if(2===e.shape.length){if(e.shape[1]>1){return Hk(e,1)}if(1===e.shape[1])return Zy(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());_x(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),cw(s,"float32")}return null}function BU(e,t){return jy(e,t)}function PU(e,t){let n,r;const s=t;n=s.xs,r=s.ys,Wd.assert(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=VU("input",e.inputNames,n),o=VU("output",e.outputNames,r),i=a[0].shape[0];Wd.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Wd.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Wd.assert(a[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)Wd.assert(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:a,ys:o}}function VU(e,t,n){if(n instanceof If)return[n];if(Array.isArray(n))return Wd.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new RP(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function WU(e,t,n){const r=null!=n.batchesPerEpoch;if(Wd.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Wd.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Wd.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Wd.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Wd.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,o;if(s)if(UU(n.validationData))Wd.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new _P("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,o=e.ys}const i=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const c=QW(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:h,history:d}=tU(c,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,s,l);h.setModel(e),e.history=d,await h.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const l={};await h.onEpochBegin(f);let c=0,p=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=PU(e,t.value),a={};a.batch=p,a.size=r[0].shape[0],await h.onBatchBegin(p,a);const o=[];if(null!=n.classWeight){const t=LU(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await zU(s[e],null,t[e]))}const l=r.concat(s).concat(o),d=i(l);_x(l);for(let e=0;e<u.length;++e){const t=u[e],n=d[e];a[t]=n,Dx(n)}await h.onBatchEnd(p,a),HW(a),p++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=UU(n.validationData)?PP(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):PP(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await h.onEpochEnd(f,l),f++,e.stopTraining_)break}return await h.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function UU(e){return"function"==typeof e.iterator}async function GU(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new _P("Verbose mode is not implemented yet.");Wd.assert(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,u=0;for(;!r||u<n.batches;){const t=await o.next();if(a=Rx((()=>{if(t.value){const{xs:n,ys:r}=PU(e,t.value),o=n.concat(r),l=Rx((()=>s(o)));if(_x(o),0===u)for(let e=0;e<l.length;++e)a.push(Xx(0));const c=o[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=a[e];a[e]=Rx((()=>Jx(a[e],jy(c,t)))),u>0&&_x(n)}_x(l),i+=c,++u}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=Lw(a[e],i),_x(t)}return BP(a)}function HU(e){Wd.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function qU(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>$V(e,t,n-t))):$V(e,t,n-t)}function jU(e,t){return Rx((()=>null==e?null:Array.isArray(e)?e.map((e=>jU(e,t))):MV(e,"int32"===t.dtype?t:ag(t,"int32"))))}function KU(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}async function XU(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,o,i,u,l,c,p,h;e.isTraining=!0;try{const d=null==r.batchSize?32:r.batchSize;HU(d);const f=!1,m=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,f,d);s=m[0],a=m[1],h=m[2];let g,y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2!==r.validationData.length)throw 3===r.validationData.length?new _P("validationData including sample weights is not supported yet."):new RP(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);u=r.validationData[0],l=r.validationData[1];const t=!0,n=await e.standardizeUserData(u,l,null,null,t,d);c=n[0],p=n[1],g=c.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];c=qU(s,e,t),o=s,s=qU(s,0,e),p=qU(a,e,t),i=a,a=qU(a,0,e),g=c.concat(p)}else null!=r.validationSteps&&(y=!0);const b=s.concat(a).concat(h);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const N=QW(r.callbacks,r.yieldEvery),S=await async function(e,t,n,r,s,a,o,i,u,l,c,p,h,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==h&&(h=0);let m=!1;if(null!=u&&null!=l&&(m=!0),null!=f&&(m=!0,null==d))throw new RP("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=NV(0,g)),null==o&&(o=1);const{callbackList:b,history:x}=tU(i,o,a,h,g,d,s,m,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let o=h;o<a;++o){await b.onEpochBegin(o);const a={};if(null!=d)throw new _P("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new _P("batch shuffling is not implemneted yet");c&&Wd.shuffle(y);const o=cw(y),i=KU(g,s);for(let c=0;c<i.length;++c){const p={};if(await b.onBatchBegin(c,p),Rx((()=>{const h=i[c][0],d=i[c][1],f=$V(o,h,d-h);p.batch=c,p.size=d-h;const g=jU(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];p[t]=n,Dx(n)}if(c===i.length-1&&m){const t=e.testLoop(u,l,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];Dx(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,p),HW(p),e.stopTraining_)break}o.dispose()}if(await b.onEpochEnd(o,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,r.epochs,r.verbose,N,k,g,r.shuffle,v,r.initialEpoch,null,null);return S}finally{e.isTraining=!1,ZU(s,t),ZU(a,n),ZU(o,t),ZU(i,n),ZU(c,u),ZU(p,l),null!=h&&_x(h)}}function YU(e){const t=[];e instanceof If&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(EV(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function ZU(e,t){if(null==e)return;const n=[];if(t instanceof If)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof If)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function JU(e){return Array.isArray(e)}function QU(e){return!function(e){return e instanceof If}(e)&&!JU(e)}function eG(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(JU(e)&&e.length>0)t=!0;else if(QU(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new RP(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(QU(e)){a=[];for(const n of t){if(null==e[n])throw new RP(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(JU(e)){if(e.length!==t.length)throw new RP(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new RP(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=YU(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new RP(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const a=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&a!==i)throw new RP(`${s} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${s} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function tG(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new RP(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new RP(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new RP(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const i=o.shape[a],u=n[e][a];if(null!=u&&u!==i)throw new RP(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class nG extends OU{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new RP("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");$U(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>MS.adagrad(.01),Adadelta:()=>MS.adadelta(1,.95,IV()),Adam:()=>MS.adam(.001,.9,.999,IV()),Adamax:()=>MS.adamax(.002,.9,.999,IV(),0),RMSProp:()=>MS.rmsprop(.001,.9,0,IV()),SGD:()=>MS.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new RP(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof ES))throw new RP("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new RP(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>fU(e)))}else{const n=fU(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new RP(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(fU(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],mV("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};mV("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,a;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===cU?-1!==["accuracy","acc"].indexOf(o)?r=mU:-1!==["crossentropy","ce"].indexOf(o)&&(r=xU):this.lossFunctions[e]===lU?-1!==["accuracy","acc"].indexOf(o)?r=wU:-1!==["crossentropy","ce"].indexOf(o)&&(r=vU):-1!==["accuracy","acc"].indexOf(o)?r=gU:-1!==["crossentropy","ce"].indexOf(o)&&(r=kU),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),a=r,n=""+s}else{const e=SU(o);a=e,n=""+IU(o)}let t;mV(n,(()=>{t=a})),s(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;HU(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const o=this.testFunction;return BP(this.testLoop(o,a,r,n.verbose,n.steps))}finally{ZU(s[0],e),ZU(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),GU(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new RP(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new RP(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new RP("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new EW;if(e instanceof If&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new RP(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new RP(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const o=AW(s,a);return n?o:o[0]}retrieveSymbolicTensors(e){const t=MP(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const o=a.indexOf(e[r]);if(-1!==o&&(t[r]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new RP(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Rx((()=>{const r=this.checkNumSamples(e);if(n)throw new _P("Verbose predictLoop() is not implemented yet.");const s=KU(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t){Rx((()=>{const n=s[t][0],r=s[t][1],a=qU(e,n,r),o=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)o.push({key:this.inputs[e],value:a[e]});else o.push({key:this.inputs[0],value:a});const i=new EW(o);return AW(this.outputs,i)})).forEach(((e,t)=>a[t].push(e)))}return BP(a.map((e=>zx(e,0))))}))}predict(e,t={}){const n=YU(e);tG(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return HU(r),this.predictLoop(n,r)}finally{ZU(n,e)}}predictOnBatch(e){tG(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new AP("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===lU?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=KP(e.map((e=>e.shape[0])));r.sort();const s=KP(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new RP(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new RP(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!Wd.arraysEqual(r,s))throw new RP(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=eG(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=eG(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[sU,cU,uU];for(let s=0;s<e.length;++s){const a=e[s],o=t[s],i=n[s];if(null!=o){if(o===uU&&1===a.shape[a.shape.length-1])throw new RP(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const e=a.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new RP(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new RP(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[o,i]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=LU(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await zU(i[t],null,e[t]))}return[o,i,u]}testLoop(e,t,n,r=0,s){return Rx((()=>{const a=this.checkNumSamples(t,n,s,"steps"),o=[];if(r>0)throw new _P("Verbose mode is not implemented yet.");if(null!=s)throw new _P("steps mode in testLoop() is not implemented yet");{const r=KU(a,n),s=cw(NV(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],i=r[n][1],u=$V(s,a,i-a),l=jU(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)o.push(Xx(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=Jx(o[e],jy(i-a,t))}}for(let e=0;e<o.length;++e)o[e]=Lw(o[e],a)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;if(zP(e,r)>1){s+=`_${zP(e.slice(0,n),r)}`}t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new EW(e),i=AW(this.outputs,o,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],i[e]);null!=s[e]&&(n=BU(n,s[e]));const a=mk(n);t.push(a),u=0===e?n:Jx(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=mk(t(r[s],i[s]))}Dx(n),a.push(n)}return u=mk(u),this.calculateLosses().forEach((e=>{u=Jx(u,e)})),u}),!0,o)].concat(a)}}makeTestFunction(){this.testFunction=e=>Rx((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const o=new EW(a),i=AW(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=mk(r(s[e],i[e]));n=0===e?a:Jx(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=mk(n(s[r],i[r]));t.push(a)}return t}))}async fit(e,t,n={}){return XU(this,e,t,n)}async fitDataset(e,t){return WU(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),o=[];for(const e of a){const t=await e.data();o.push(t[0])}return _x(a),ZU(n[0],e),ZU(n[1],t),BP(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Ax().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Ax().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=VP(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>VP(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=VP(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[VP(IU(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>VP(IU(e))));{const e={};for(const t in this.metrics)e[t]=VP(IU(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=nU(DU(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=WP(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>WP(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=WP(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>WP(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=WP(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=ug.getSaveHandlers(e);if(0===t.length)throw new RP(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new RP(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new RP("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await ug.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.0.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await ug.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=ug.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;TU(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){TU(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}nG.className="Model",ay.registerClass(nG);class rG extends nG{}rG.className="Functional",ay.registerClass(rG);class sG extends nG{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:sV("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new RP(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof sG||e instanceof nG;let n;if(t){if(n=e,1!==n.outputs.length)throw new RP("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new RP("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new RP("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=TW({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new RP(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new RP("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=SW(this.outputs[0])}this.inboundNodes=[],new kW({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:MP(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(dW(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new nG({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new AP("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new AP("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new AP("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new AP("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new RP("Legacy serialization format not supported yet.");s=t}else Wd.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const o=new e(a);if(!(o instanceof sG))throw new _P(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of s){const t=nU(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new RP("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new RP("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}sG.className="Sequential",ay.registerClass(sG);class aG extends ay.Serializable{getConfig(){return{}}}class oG extends aG{apply(e,t=1){return function(e,t=1){if(1!==t)throw new _P(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Hy(e)}(e,t)}}oG.className="elu",ay.registerClass(oG);class iG extends aG{apply(e){return MN(e)}}iG.className="selu",ay.registerClass(iG);class uG extends aG{apply(e){return Xy(e)}}uG.className="relu",ay.registerClass(uG);class lG extends aG{apply(e){return Rx((()=>vk(6,Xy(e))))}}lG.className="relu6",ay.registerClass(lG);class cG extends aG{apply(e){return e}}cG.className="linear",ay.registerClass(cG);class pG extends aG{apply(e){return Jy(e)}}pG.className="sigmoid",ay.registerClass(pG);class hG extends aG{apply(e){return function(e){return Rx((()=>{const t=Jx(.5,jy(.2,e));return cv(t,0,1)}))}(e)}}hG.className="hardSigmoid",ay.registerClass(hG);class dG extends aG{apply(e){return Uv(e)}}dG.className="softplus",ay.registerClass(dG);class fG extends aG{apply(e){return function(e){return Rx((()=>Lw(e,Jx(Zw(e),1))))}(e)}}fG.className="softsign",ay.registerClass(fG);class mG extends aG{apply(e){return ev(e)}}mG.className="tanh",ay.registerClass(mG);class gG extends aG{apply(e,t=-1){return qN(e,t)}}gG.className="softmax",ay.registerClass(gG);class yG extends aG{apply(e,t=-1){return Hv(e,t)}}yG.className="logSoftmax",ay.registerClass(yG);class bG extends aG{apply(e,t=1){return Rx((()=>jy(Jy(jy(e,t)),e)))}}bG.className="swish",ay.registerClass(bG);class xG extends aG{apply(e){return Rx((()=>jy(e,ev(Uv(e)))))}}function wG(e){return e.getClassName()}function kG(e,t={}){return qP(e,ay.SerializationMap.getMap().classNameMap,t,"activation")}function vG(e){if(null==e){const e={className:"linear",config:{}};return kG(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},kG(t)}return e instanceof aG?e:kG(e)}function NG(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}xG.className="mish",ay.registerClass(xG);class SG extends ay.Serializable{}class IG extends SG{constructor(e){super(),NG(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Rx((()=>{let t=Ux([1]);return this.hasL1&&(t=Jx(t,eb(jy(this.l1,Zw(e))))),this.hasL2&&(t=Jx(t,eb(jy(this.l2,LV(e))))),Zy(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}IG.className="L1L2",ay.registerClass(IG);const TG={l1l2:"L1L2"};function EG(e){return GP(e)}function $G(e,t={}){return qP(e,ay.SerializationMap.getMap().classNameMap,t,"regularizer")}function CG(e){if(null==e)return null;if("string"==typeof e){return $G({className:e in TG?TG[e]:e,config:{}})}return e instanceof SG?e:$G(e)}class AG extends NW{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=hW(e);let n=Xy(e);return null!=this.maxValue&&(n=cv(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}AG.className="ReLU",ay.registerClass(AG);class RG extends NW{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=hW(e);return qy(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}RG.className="LeakyReLU",ay.registerClass(RG);class _G extends NW{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=lW(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=CG(e.alphaRegularizer),this.alphaConstraint=UW(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new RP(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=dW(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new bW({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=hW(e),Ky(e,this.alpha.read())}getConfig(){const e={alphaInitializer:uW(this.alphaInitializer),alphaRegularizer:EG(this.alphaRegularizer),alphaConstraint:VW(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}_G.className="PReLU",ay.registerClass(_G);class DG extends NW{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new _P(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=hW(e);return Hy(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}DG.className="ELU",ay.registerClass(DG);class FG extends NW{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=hW(e);return jy(n,ag(Ow(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}FG.className="ThresholdedReLU",ay.registerClass(FG);class OG extends NW{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new gG).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=hW(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function MG(e,t,n){if("number"==typeof e)return MP(e,t);if(e.length!==t)throw new RP(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new RP(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function LG(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function zG(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+vV([n-t,0]);else{if("same"!==r)throw new RP(`Unsupport padding mode: ${r}.`);e*=t}return e}function BG(e,t){return Rx((()=>(pV(t),"channelsFirst"===t?pk(e,[0,2,3,1]):e)))}function PG(e,t){return Rx((()=>(pV(t),"channelsFirst"===t?pk(e,[0,2,3,4,1]):e)))}function VG(e,t,n,r=1,s="valid",a,o=1){return Rx((()=>{if(null==a&&(a="channelsLast"),pV(a),3!==e.shape.length)throw new RP(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new RP(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new RP(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=pk(e,[0,2,1])),"causal"===s)throw new _P("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=mv(e,t,r,"same"===s?"same":"valid","NWC",o);return null!=n&&(i=BV(i,n)),i}))}function WG(e,t,n,r=[1,1],s="valid",a,o,i=null){return Rx((()=>{if(null==a&&(a="channelsLast"),pV(a),3!==e.rank&&4!==e.rank)throw new RP(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new RP(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=BG(e,a);if("causal"===s)throw new _P("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=Zx.conv2d({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===a&&(u=pk(u,[0,3,1,2])),u}))}function UG(e,t,n,r=[1,1,1],s="valid",a,o){return Rx((()=>{if(null==a&&(a="channelsLast"),pV(a),4!==e.rank&&5!==e.rank)throw new RP(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new RP(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=PG(e,a);if("causal"===s)throw new _P("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=yv(i,t,r,"same"===s?"same":"valid","NDHWC",o),null!=n&&(i=BV(i,n)),"channelsFirst"===a&&(i=pk(i,[0,4,1,2,3])),i}))}OG.className="Softmax",ay.registerClass(OG);class GG extends NW{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",GG.verifyArgs(t),this.rank=e,JP(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new _P(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=MG(t.kernelSize,e,"kernelSize"),this.strides=MG(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,hV(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,pV(this.dataFormat),this.activation=vG(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=lW(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=UW(t.biasConstraint),this.biasRegularizer=CG(t.biasRegularizer),this.activityRegularizer=CG(t.activityRegularizer),this.dilationRate=MG(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new RP(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new RP(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new RP(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(LP("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!ZP(e.kernelSize,"number",1,3))throw new RP(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:wG(this.activation),useBias:this.useBias,biasInitializer:uW(this.biasInitializer),biasRegularizer:EG(this.biasRegularizer),activityRegularizer:EG(this.activityRegularizer),biasConstraint:VW(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class HG extends GG{constructor(e,t){super(e,t),this.kernel=null,HG.verifyArgs(t),this.filters=t.filters,JP(this.filters,"filters"),this.kernelInitializer=lW(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=UW(t.kernelConstraint),this.kernelRegularizer=CG(t.kernelRegularizer)}build(e){e=dW(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new RP(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Rx((()=>{let t;e=hW(e);const n=null==this.bias?null:this.bias.read(),r=eV(this.activation.getClassName());if(null!=r&&2===this.rank)t=WG(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=VG(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=WG(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new _P("convolutions greater than 3D are not implemented yet.");t=UG(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=dW(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=LG(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:uW(this.kernelInitializer),kernelRegularizer:EG(this.kernelRegularizer),kernelConstraint:VW(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new RP(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class qG extends HG{constructor(e){super(2,e),qG.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!ZP(e.kernelSize,"number",1,2))throw new RP(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}qG.className="Conv2D",ay.registerClass(qG);class jG extends HG{constructor(e){super(3,e),jG.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new RP(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}jG.className="Conv3D",ay.registerClass(jG);class KG extends qG{constructor(e){if(super(e),this.inputSpec=[new bW({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new RP(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=dW(e)).length)throw new RP("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new RP("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new bW({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Rx((()=>{let t=hW(e);if(4!==t.shape.length)throw new RP(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const o=n[s],i=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],p=this.strides[1],h=[r,zG(o,c,u,this.padding),zG(i,p,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=pk(t,[0,2,3,1]));let d=gv(t,this.kernel.read(),h,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=pk(d,[0,3,1,2])),null!=this.bias&&(d=BV(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=dW(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=zG(t[r],i,a,this.padding),t[s]=zG(t[s],u,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}KG.className="Conv2DTranspose",ay.registerClass(KG);class XG extends jG{constructor(e){if(super(e),this.inputSpec=[new bW({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new RP(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=dW(e)).length)throw new RP("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new RP("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new bW({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Rx((()=>{let t=hW(e);if(5!==t.shape.length)throw new RP(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,o;"channelsFirst"===this.dataFormat?(o=2,s=3,a=4):(o=1,s=2,a=3);const i=n[o],u=n[s],l=n[a],c=this.kernelSize[0],p=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,zG(i,d,c,this.padding),zG(u,f,p,this.padding),zG(l,m,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=pk(t,[0,2,3,4,1]));let y=xv(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=pk(y,[0,4,1,2,3])),null!==this.bias&&(y=BV(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=dW(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const o=this.kernelSize[0],i=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],p=this.strides[2];return t[n]=this.filters,t[r]=zG(t[r],l,o,this.padding),t[s]=zG(t[s],c,i,this.padding),t[a]=zG(t[a],p,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}XG.className="Conv3DTranspose",ay.registerClass(XG);class YG extends HG{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new RP("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new RP("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new RP(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=lW(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=CG(t.depthwiseRegularizer),this.depthwiseConstraint=UW(t.depthwiseConstraint),this.pointwiseInitializer=lW(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=CG(t.pointwiseRegularizer),this.pointwiseConstraint=UW(t.pointwiseConstraint)}build(e){if((e=dW(e)).length<this.rank+2)throw new RP(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new RP(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new bW({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Rx((()=>{let t;if(e=hW(e),1===this.rank)throw new _P("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=pk(e,[0,2,3,1])),t=LN(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=BV(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=pk(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=uW(this.depthwiseInitializer),e.pointwiseInitializer=uW(this.pointwiseInitializer),e.depthwiseRegularizer=EG(this.depthwiseRegularizer),e.pointwiseRegularizer=EG(this.pointwiseRegularizer),e.depthwiseConstraint=VW(this.depthwiseConstraint),e.pointwiseConstraint=VW(this.pointwiseConstraint),e}}YG.className="SeparableConv";class ZG extends YG{constructor(e){super(2,e)}}ZG.className="SeparableConv2D",ay.registerClass(ZG);class JG extends HG{constructor(e){super(1,e),JG.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!ZP(e.kernelSize,"number",1,1))throw new RP(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}JG.className="Conv1D",ay.registerClass(JG);class QG extends NW{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Rx((()=>{if(e=hW(e),"channelsLast"===this.dataFormat){const t=AV(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return AV(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=AV(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return AV(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}QG.className="Cropping2D",ay.registerClass(QG);class eH extends NW{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pV(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,YP(oV,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Rx((()=>{let t=hW(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=pk(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?vS.resizeNearestNeighbor(t,[e,r]):vS.resizeBilinear(t,[e,r]);return pk(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?vS.resizeNearestNeighbor(t,[e,r]):vS.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}eH.className="UpSampling2D",ay.registerClass(eH);class tH extends GG{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=lW(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=UW(e.depthwiseConstraint),this.depthwiseRegularizer=CG(e.depthwiseRegularizer)}build(e){if((e=dW(e)).length<4)throw new RP(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new RP(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Rx((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Rx((()=>{null==s&&(s="channelsLast"),pV(s);let o=BG(e,s);if(4!==e.rank)throw new RP(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new RP(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=rw(o,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(o=pk(o,[0,3,1,2])),o}))}(e=hW(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=BV(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=dW(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=LG(t,this.kernelSize[0],this.padding,this.strides[0]),a=LG(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=uW(this.depthwiseInitializer),e.depthwiseRegularizer=EG(this.depthwiseRegularizer),e.depthwiseConstraint=VW(this.depthwiseRegularizer),e}}tH.className="DepthwiseConv2D",ay.registerClass(tH);var nH={};function rH(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new RP("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function sH(e,t,n,r=!1,s,a,o=!1,i=!1){return Rx((()=>{const u=t.shape.length;if(u<3)throw new RP(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(NV(2,u));if(t=pk(t,l),null!=a)throw new _P("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=ag(ag(s,"bool"),"float32")).rank===u-1&&(s=ik(s,-1)),s=pk(s,l)),r&&(t=Kx(t,0),null!=s&&(s=Kx(s,0)));const c=[];let p,h=n;const d=t.shape[0],f=Kw(t);let m,g;null!=s&&(m=Kw(s));for(let t=0;t<d;++t){const n=f[t],r=Rx((()=>e(n,h)));if(null==s)p=r[0],h=r[1];else{const e=Rx((()=>{const e=m[t],n=zw(lN(e),e);return{output:Jx(jy(r[0],e),jy(h[0],n)),newStates:h.map(((t,s)=>Jx(jy(r[1][s],e),jy(t,n))))}}));p=e.output,h=e.newStates}i&&c.push(p)}if(i){g=jw(c,1)}return[p,g,h]}))}t(nH,"ConvLSTM2DCell",(()=>yH),(e=>yH=e)),t(nH,"ConvLSTM2D",(()=>bH),(e=>bH=e));class aH extends NW{constructor(e){let t;if(super(e),null==e.cell)throw new RP("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new dH({cells:e.cell}):e.cell,null==t.stateSize)throw new RP("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new bW({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return NV(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){cW(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Rx((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new _P("Constants support is not implemented in RNN yet.");cW(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new bW({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Wd.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new RP(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new bW({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Rx((()=>{if(!this.stateful)throw new CP("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new RP("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Ux([n,e]))):this.states_=[Ux([n,this.cell.stateSize])];else if(null==e)_x(this.states_),null!=this.keptStates&&(_x(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Ux([n,e]))):this.states_[0]=Ux([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new RP(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):_x(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!Wd.arraysEqual(r.shape,a))throw new RP(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>Dx(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=rH(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],o=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new bW({shape:e.shape}));o=o.concat(this.stateSpec)}null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof xW){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return Rx((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=hW(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new RP(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},i=sH(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=i[0],l=i[1],c=i[2];this.stateful&&this.resetStates(c,r);const p=this.returnSequences?l:u;return this.returnState?[p].concat(c):p}))}getInitialState(e){return Rx((()=>{let t=Ux(e.shape);return t=eb(t,[1,2]),t=EV(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?DV(t,[1,e]):t)):this.cell.stateSize>1?[DV(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===aH.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const r=nU(t.cell,n);return new e(Object.assign(t,{cell:r}))}}aH.className="RNN",ay.registerClass(aH);class oH extends NW{}class iH extends oH{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,JP(this.units,"units"),this.activation=vG(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lW(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=CG(e.kernelRegularizer),this.recurrentRegularizer=CG(e.recurrentRegularizer),this.biasRegularizer=CG(e.biasRegularizer),this.kernelConstraint=UW(e.kernelConstraint),this.recurrentConstraint=UW(e.recurrentConstraint),this.biasConstraint=UW(e.biasConstraint),this.dropout=kV([1,vV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=kV([1,vV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=dW(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Rx((()=>{if(2!==e.length)throw new RP(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fH({ones:()=>lN(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fH({ones:()=>lN(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;s=OV(null!=a?jy(e,a):e,this.kernel.read()),null!=this.bias&&(s=BV(s,this.bias.read())),null!=o&&(n=jy(n,o));let i=Jx(s,OV(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:wG(this.activation),useBias:this.useBias,kernelInitializer:uW(this.kernelInitializer),recurrentInitializer:uW(this.recurrentInitializer),biasInitializer:uW(this.biasInitializer),kernelRegularizer:EG(this.kernelRegularizer),recurrentRegularizer:EG(this.recurrentRegularizer),biasRegularizer:EG(this.biasRegularizer),activityRegularizer:EG(this.activityRegularizer),kernelConstraint:VW(this.kernelConstraint),recurrentConstraint:VW(this.recurrentConstraint),biasConstraint:VW(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}iH.className="SimpleRNNCell",ay.registerClass(iH);class uH extends aH{constructor(e){e.cell=new iH(e),super(e)}call(e,t){return Rx((()=>{null!=this.cell.dropoutMask&&(_x(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(_x(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}uH.className="SimpleRNN",ay.registerClass(uH);class lH extends oH{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new RP("GRUCell does not support reset_after parameter set to true.");this.units=e.units,JP(this.units,"units"),this.activation=vG(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=vG(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lW(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=CG(e.kernelRegularizer),this.recurrentRegularizer=CG(e.recurrentRegularizer),this.biasRegularizer=CG(e.biasRegularizer),this.kernelConstraint=UW(e.kernelConstraint),this.recurrentConstraint=UW(e.recurrentConstraint),this.biasConstraint=UW(e.biasConstraint),this.dropout=kV([1,vV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=kV([1,vV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=dW(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Rx((()=>{if(2!==e.length)throw new RP(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fH({ones:()=>lN(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fH({ones:()=>lN(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let o,i,u;0<this.dropout&&this.dropout<1&&(e=jy(e,s[0]));let l=OV(e,this.kernel.read());this.useBias&&(l=BV(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=jy(r,a[0]));const c=this.recurrentKernel.read(),[p,h]=Wx(c,[2*this.units,this.units],c.rank-1),d=OV(r,p),[f,m,g]=Wx(l,3,l.rank-1),[y,b]=Wx(d,2,d.rank-1);o=this.recurrentActivation.apply(Jx(f,y)),i=this.recurrentActivation.apply(Jx(m,b));const x=OV(jy(i,r),h);u=this.activation.apply(Jx(g,x));const w=Jx(jy(o,r),jy(Jx(1,lk(o)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:wG(this.activation),recurrentActivation:wG(this.recurrentActivation),useBias:this.useBias,kernelInitializer:uW(this.kernelInitializer),recurrentInitializer:uW(this.recurrentInitializer),biasInitializer:uW(this.biasInitializer),kernelRegularizer:EG(this.kernelRegularizer),recurrentRegularizer:EG(this.recurrentRegularizer),biasRegularizer:EG(this.biasRegularizer),activityRegularizer:EG(this.activityRegularizer),kernelConstraint:VW(this.kernelConstraint),recurrentConstraint:VW(this.recurrentConstraint),biasConstraint:VW(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}lH.className="GRUCell",ay.registerClass(lH);class cH extends aH{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new lH(e),super(e)}call(e,t){return Rx((()=>{null!=this.cell.dropoutMask&&(_x(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(_x(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}cH.className="GRU",ay.registerClass(cH);class pH extends oH{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,JP(this.units,"units"),this.activation=vG(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=vG(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lW(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=CG(e.kernelRegularizer),this.recurrentRegularizer=CG(e.recurrentRegularizer),this.biasRegularizer=CG(e.biasRegularizer),this.kernelConstraint=UW(e.kernelConstraint),this.recurrentConstraint=UW(e.recurrentConstraint),this.biasConstraint=UW(e.biasConstraint),this.dropout=kV([1,vV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=kV([1,vV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=dW(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends GV{apply(t,r){const s=e.apply([n]),a=(new qV).apply([n]),o=e.apply([2*n]);return _V(_V(s,a),o)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Rx((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new RP(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fH({ones:()=>lN(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fH({ones:()=>lN(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;let i,u,l,c;0<this.dropout&&this.dropout<1&&(e=jy(e,a[0]));let p=OV(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=jy(r,o[0])),p=Jx(p,OV(r,this.recurrentKernel.read())),this.useBias&&(p=BV(p,this.bias.read()));const[h,d,f,m]=Wx(p,4,p.rank-1);i=this.recurrentActivation.apply(h),u=this.recurrentActivation.apply(d),l=Jx(jy(u,s),jy(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=jy(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:wG(this.activation),recurrentActivation:wG(this.recurrentActivation),useBias:this.useBias,kernelInitializer:uW(this.kernelInitializer),recurrentInitializer:uW(this.recurrentInitializer),biasInitializer:uW(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:EG(this.kernelRegularizer),recurrentRegularizer:EG(this.recurrentRegularizer),biasRegularizer:EG(this.biasRegularizer),activityRegularizer:EG(this.activityRegularizer),kernelConstraint:VW(this.kernelConstraint),recurrentConstraint:VW(this.recurrentConstraint),biasConstraint:VW(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}pH.className="LSTMCell",ay.registerClass(pH);class hH extends aH{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new pH(e),super(e)}call(e,t){return Rx((()=>{null!=this.cell.dropoutMask&&(_x(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(_x(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}hH.className="LSTM",ay.registerClass(hH);class dH extends oH{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Rx((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=r[o],a=0===o?[e[0]].concat(n):[a[0]].concat(n),a=i.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;cW(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{mV(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(nU(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return gW(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}yW(t)}}function fH(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,o=()=>null!=a?a(t(),n):PV(t(),n),i=()=>VV(o,t,r);if(!s||s<=1)return Dx(i().clone());return Array(s).fill(void 0).map(i).map((e=>Dx(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */dH.className="StackedRNNCells",ay.registerClass(dH);var mH=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class gH extends aH{constructor(e){if(e.unroll)throw new _P("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new _P("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new bW({ndim:5})]}call(e,t){return Rx((()=>{if(null!=this.cell.dropoutMask&&(_x(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(_x(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new RP("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Rx((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=Ux([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){Rx((()=>{if(!this.stateful)throw new CP("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new RP("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Ux(s))):this.states_=[Ux(s)];else if(null==e)_x(this.states_),null!=this.keptStates&&(_x(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Ux(s))):this.states_[0]=Ux(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new RP(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):_x(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!Wd.arraysEqual(n.shape,r))throw new RP(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Dx(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,u=e[i?3:2],l=e[i?4:3],c=LG(u,r[0],s,a[0],o[0]),p=LG(l,r[1],s,a[1],o[1]);return[...e.slice(0,2),...i?[n,c,p]:[c,p,n]]}}gH.className="ConvRNN2D";class yH extends pH{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,JP(this.filters,"filters"),this.kernelSize=MG(n,2,"kernelSize"),this.kernelSize.forEach((e=>JP(e,"kernelSize"))),this.strides=MG(r||1,2,"strides"),this.strides.forEach((e=>JP(e,"strides"))),this.padding=s||"valid",hV(this.padding),this.dataFormat=a||"channelsLast",pV(this.dataFormat),this.dilationRate=MG(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>JP(e,"dilationRate")))}build(e){var t;e=dW(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new RP(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends GV{apply(e,t){return RV([n.apply([r]),yk([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Rx((()=>{if(3!==e.length)throw new RP(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fH({ones:()=>lN(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?jy(t[n],e):e;let u=i(r,o,0),l=i(r,o,1),c=i(r,o,2),p=i(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fH({ones:()=>lN(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const h=this.recurrentDropoutMask;let d=i(s,h,0),f=i(s,h,1),m=i(s,h,2),g=i(s,h,3);const[y,b,x,w]=Wx(this.kernel.read(),4,3),[k,v,N,S]=this.useBias?Wx(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,k,this.padding),l=this.inputConv(l,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),p=this.inputConv(p,w,S,this.padding);const[I,T,E,$]=Wx(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,I),f=this.recurrentConv(f,T),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const C=this.recurrentActivation.apply(Jx(u,d)),A=this.recurrentActivation.apply(Jx(l,f)),R=Jx(jy(A,a),jy(C,this.activation.apply(Jx(c,m)))),_=jy(this.recurrentActivation.apply(Jx(p,g)),this.activation.apply(R));return[_,_,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=mH(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),r)}inputConv(e,t,n,r){const s=Qx(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?BV(s,n,this.dataFormat):s}recurrentConv(e,t){return Qx(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}yH.className="ConvLSTM2DCell",ay.registerClass(yH);class bH extends gH{constructor(e){const t=new yH(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}bH.className="ConvLSTM2D",ay.registerClass(bH);class xH extends NW{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);const n=hW(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return VV((()=>PV(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}xH.className="Dropout",ay.registerClass(xH);class wH extends xH{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}wH.className="SpatialDropout1D",ay.registerClass(wH);class kH extends NW{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,JP(this.units,"units"),this.activation=vG(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=lW(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=lW(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=UW(e.kernelConstraint),this.biasConstraint=UW(e.biasConstraint),this.kernelRegularizer=CG(e.kernelRegularizer),this.biasRegularizer=CG(e.biasRegularizer),this.activityRegularizer=CG(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=dW(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=dW(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);const n=hW(e),r=eV(this.activation.getClassName());let s;return null!=r?s=OV(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=OV(n,this.kernel.read()),null!=this.bias&&(s=BV(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:wG(this.activation),useBias:this.useBias,kernelInitializer:uW(this.kernelInitializer),biasInitializer:uW(this.biasInitializer),kernelRegularizer:EG(this.kernelRegularizer),biasRegularizer:EG(this.biasRegularizer),activityRegularizer:EG(this.activityRegularizer),kernelConstraint:VW(this.kernelConstraint),biasConstraint:VW(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}kH.className="Dense",ay.registerClass(kH);class vH extends NW{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=dW(e);for(const t of e.slice(1))if(null==t)throw new RP(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],wV(e,1)]}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);let n=hW(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=pk(n,e)}return function(e){if(e.rank<=1)throw new RP(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],wV(e.shape,1)];return Zy(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}vH.className="Flatten",ay.registerClass(vH);class NH extends NW{constructor(e){super(e),this.supportsMasking=!0,this.activation=vG(e.activation)}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);const n=hW(e);return this.activation.apply(n)}))}getConfig(){const e={activation:wG(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}NH.className="Activation",ay.registerClass(NH);class SH extends NW{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Rx((()=>{return e=hW(e),t=e,n=this.n,Rx((()=>{if(2!==t.shape.length)throw new RP(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return DV(EV(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}SH.className="RepeatVector",ay.registerClass(SH);class IH extends NW{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new RP("Can only specifiy one unknown dimension.");a=e}else s*=t}const o=wV(e);if(null!==a){if(0===s||o%s!=0)throw new RP(n);r[a]=o/s}else if(o!==s)throw new RP(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);const n=hW(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return Zy(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}IH.className="Reshape",ay.registerClass(IH);class TH extends NW{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=NV(1,e.dims.length+1);if(!Wd.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new bW({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=dW(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return pk(hW(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}TH.className="Permute",ay.registerClass(TH);class EH extends NW{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=hW(e);return Gk(gk(n,this.maskValue),-1)}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);const n=hW(e),r=Gk(gk(n,this.maskValue),-1,!0);return jy(n,ag(r,n.dtype))}))}}EH.className="Masking",ay.registerClass(EH);class $H extends NW{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(PP(e.inputLength))}this.inputDim=e.inputDim,JP(this.inputDim,"inputDim"),this.outputDim=e.outputDim,JP(this.outputDim,"outputDim"),this.embeddingsInitializer=lW(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=CG(e.embeddingsRegularizer),this.activityRegularizer=CG(e.activityRegularizer),this.embeddingsConstraint=UW(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Rx((()=>this.maskZero?(e=hW(e),gk(e,Gx(e))):null))}computeOutputShape(e){if(e=dW(e),null==this.inputLength)return[...e,this.outputDim];const t=PP(this.inputLength);if(t.length!==e.length-1)throw new RP(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new RP(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);let n=hW(e);"int32"!==n.dtype&&(n=TV(n,"int32"));const r=MV(this.embeddings.read(),Zy(n,[n.size]));return Zy(r,dW(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:uW(this.embeddingsInitializer),embeddingsRegularizer:EG(this.embeddingsRegularizer),activityRegularizer:EG(this.activityRegularizer),embeddingsConstraint:VW(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}$H.className="Embedding",ay.registerClass($H);class CH extends NW{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new _P}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new RP("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[dW(e)]),e.length<2)throw new RP(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=KP(t),t.length>1)throw new RP(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===KP(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Rx((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=vV(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=EV(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let o=Zy(r,[s].concat(wV(e.slice(1))));o=pk(o,[1,0]),o=Zy(o,a),t.push(o),n=!0}else if(e>1){const s=NV(1,e).concat([0]);t.push(pk(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=Zy(pk(Zy(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(NV(0,s-1));r=pk(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=KP(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Rx((()=>{if(null==t)return null;if(!Array.isArray(t))throw new RP("`mask` should be an Array");if(!Array.isArray(e))throw new RP("`inputs` should be an Array");if(t.length!==e.length)throw new RP(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:ik(e,0))))[0];for(let e=1;e<t.length-1;++e)n=qw(n,t[e]);return n}))}}class AH extends CH{constructor(e){super(e)}mergeFunction(e){return Rx((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Jx(t,e[n]);return t}))}}AH.className="Add",ay.registerClass(AH);class RH extends CH{constructor(e){super(e)}mergeFunction(e){return Rx((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=jy(t,e[n]);return t}))}}RH.className="Multiply",ay.registerClass(RH);class _H extends CH{constructor(e){super(e)}mergeFunction(e){return Rx((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Jx(t,e[n]);return jy(1/e.length,t)}))}}_H.className="Average",ay.registerClass(_H);class DH extends CH{constructor(e){super(e)}mergeFunction(e){return Rx((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=tN(t,e[n]);return t}))}}DH.className="Maximum",ay.registerClass(DH);class FH extends CH{constructor(e){super(e)}mergeFunction(e){return Rx((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=vk(t,e[n]);return t}))}}FH.className="Minimum",ay.registerClass(FH);class OH extends CH{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new RP("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(Wd.arraysEqual(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new RP("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Rx((()=>RV(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new RP("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new RP("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new RP("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new RP(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Rx((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(ag(lN(e[n]),"bool")):t[n].rank<e[n].rank?r.push(ik(t[n],-1)):r.push(t[n]);const s=zx(r,this.axis);return Uk(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function MH(e,t){for(;e<0;)e+=t;return e}OH.className="Concatenate",ay.registerClass(OH);class LH extends CH{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Wd.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new _P("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new RP(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new RP(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>MH(t,e[n].shape.length))):[MH(this.axes,n.shape.length),MH(this.axes,r.shape.length)],this.normalize&&(n=rU(n,t[0]),r=rU(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new _P("batchDot is not implemented for tensors of 4D or higher rank yet");if(Wd.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Wd.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new _P("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Rx((()=>{let n,o;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=Zy(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=Zy(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?eb(jy(e,t),a[0]):eb(jy(pk(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;o=iw(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);o=ak(o,t)}return 1===o.shape.length&&(o=ik(o,1)),o}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[MH(this.axes,e.length),MH(this.axes,t.length)],n}computeOutputShape(e){Wd.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new _P("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}LH.className="Dot",ay.registerClass(LH);class zH extends NW{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);const n=hW(e);return VV((()=>Jx(FV(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}zH.className="GaussianNoise",ay.registerClass(zH);class BH extends NW{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Rx((()=>{this.invokeCallHook(e,t);const n=hW(e);if(this.rate>0&&this.rate<1){return VV((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return jy(n,FV(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}BH.className="GaussianDropout",ay.registerClass(BH);class PH extends NW{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||hW(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Rx((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return VV((()=>{const t=hW(e),r=-1.7580993408473766;let s=Hw(CN(n),this.rate);s=TV(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-a*r*this.rate,i=Jx(jy(t,s),jy(Jx(s,-1),r));return Jx(jy(i,a),o)}),(()=>hW(e)),t.training||!1)}return e}))}}function VH(e,t,n,r,s,a=.001){let o;if(2===e.rank)o=av(e,t,n,r,s,a);else if(3===e.rank)o=ov(e,t,n,r,s,a);else{if(4!==e.rank)throw new _P(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=iv(e,t,n,r,s,a)}return o}function WH(e,t,n,r,s=.001){return Wd.arraysEqual(r.slice().sort(),NV(0,e.rank-1))?function(e,t,n,r,s=.001){return Rx((()=>{const a=aN(e,r),o=a.mean,i=a.variance;return[VH(e,o,i,n,t,s),o,i]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return Rx((()=>{const a=aN(e,r),o=a.mean,i=a.variance,u=[];for(const t of NV(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=Zy(o,u),c=Zy(i,u),p=null==t?null:Zy(t,u),h=null==n?null:Zy(n,u);return[VH(e,l,c,h,p,s),o,i]}))}(e,t,n,r,s)}PH.className="AlphaDropout",ay.registerClass(PH);class UH extends NW{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=lW(e.betaInitializer||"zeros"),this.gammaInitializer=lW(e.gammaInitializer||"ones"),this.movingMeanInitializer=lW(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=lW(e.movingVarianceInitializer||"ones"),this.betaConstraint=UW(e.betaConstraint),this.gammaConstraint=UW(e.gammaConstraint),this.betaRegularizer=CG(e.betaRegularizer),this.gammaRegularizer=CG(e.gammaRegularizer)}build(e){e=dW(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new RP(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new bW({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Rx((()=>{const n=null!=t.training&&t.training,r=hW(e),s=r.shape,a=s.length,o=NV(0,a),i=this.axis>=0?this.axis:this.axis+a;o.splice(i,1);const u=MP(1,a);u[i]=s[i];const l=o.slice();l.sort();const c=!Wd.arraysEqual(l,NV(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Zy(this.movingMean.read(),u),t=Zy(this.movingVariance.read(),u),n=this.center?Zy(this.beta.read(),u):null,s=this.scale?Zy(this.gamma.read(),u):null;return VH(r,e,t,n,s,this.epsilon)}return VH(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,h,d]=WH(r,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{Rx((()=>{const r=1-n,s=e.read(),a=jy(zw(s,t),r);e.write(zw(s,a))}))};return(()=>{f(this.movingMean,h,this.momentum),f(this.movingVariance,d,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:uW(this.betaInitializer),gammaInitializer:uW(this.gammaInitializer),movingMeanInitializer:uW(this.movingMeanInitializer),movingVarianceInitializer:uW(this.movingVarianceInitializer),betaRegularizer:EG(this.betaRegularizer),gammaRegularizer:EG(this.gammaRegularizer),betaConstraint:VW(this.betaConstraint),gammaConstraint:VW(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}UH.className="BatchNormalization",ay.registerClass(UH);class GH extends NW{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=lW(e.betaInitializer||"zeros"),this.gammaInitializer=lW(e.gammaInitializer||"ones"),this.betaRegularizer=CG(e.betaRegularizer),this.gammaRegularizer=CG(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=dW(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==KP(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=hW(e),r=n.shape,s=r.length;return Rx((()=>{let{mean:e,variance:t}=aN(n,this.axis,!0);const a=MP(1,s);for(const e of this.axis)a[e]=r[e];const o=e=>null!=e&&e.shape.length!==s?Zy(e,a):e;let i=this.scale?o(this.gamma.read()):null,u=this.center?o(this.beta.read()):null;const l=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(l.push(r[e]),c.push(1)):(l.push(1),c.push(r[e]));return e=kw(e,l),t=kw(t,l),null!=i&&(i=kw(i,c)),null!=u&&(u=kw(u,c)),VH(n,e,t,u,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:uW(this.betaInitializer),gammaInitializer:uW(this.gammaInitializer),betaRegularizer:EG(this.betaRegularizer),gammaRegularizer:EG(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}GH.className="LayerNormalization",ay.registerClass(GH);class HH extends NW{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new RP(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new RP(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new RP(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new bW({ndim:4})]}computeOutputShape(e){let t,n;return e=dW(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Rx((()=>{return t=hW(e),n=this.padding,r=this.dataFormat,Rx((()=>{if(4!==t.rank)throw new RP(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new RP("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new RP(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],pN(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function qH(e,t,n,r,s,a){return Rx((()=>{let o;pV(s),dV(a),hV(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=BG(e,s);const i="same"===r?"same":"valid";return o="max"===a?Jv(e,t,n,i):Jk(e,t,n,i),"channelsFirst"===s&&(o=pk(o,[0,3,1,2])),o}))}function jH(e,t,n,r,s,a){return Rx((()=>{let o;pV(s),dV(a),hV(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=PG(e,s);const i="same"===r?"same":"valid";return o="max"===a?Qv(e,t,n,i):Qk(e,t,n,i),"channelsFirst"===s&&(o=pk(o,[0,4,1,2,3])),o}))}HH.className="ZeroPadding2D",ay.registerClass(HH);class KH extends NW{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new RP(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(JP(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new RP(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}JP(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,hV(this.padding),this.inputSpec=[new bW({ndim:3})]}computeOutputShape(e){const t=LG((e=dW(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Rx((()=>{this.invokeCallHook(e,t),e=EV(hW(e),2);const n=this.poolingFunction(hW(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ak(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class XH extends KH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pV(s),hV(r),qH(e,t,n,r,s,"max")}}XH.className="MaxPooling1D",ay.registerClass(XH);class YH extends KH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pV(s),hV(r),qH(e,t,n,r,s,"avg")}}YH.className="AveragePooling1D",ay.registerClass(YH);class ZH extends NW{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new RP(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];JP(this.poolSize,"poolSize"),JP(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pV(this.dataFormat),hV(this.padding),this.inputSpec=[new bW({ndim:4})]}computeOutputShape(e){e=dW(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=LG(t,this.poolSize[0],this.padding,this.strides[0]),n=LG(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Rx((()=>(this.invokeCallHook(e,t),this.poolingFunction(hW(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class JH extends ZH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pV(s),hV(r),qH(e,t,n,r,s,"max")}}JH.className="MaxPooling2D",ay.registerClass(JH);class QH extends ZH{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pV(s),hV(r),qH(e,t,n,r,s,"avg")}}QH.className="AveragePooling2D",ay.registerClass(QH);class eq extends NW{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new RP(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];JP(this.poolSize,"poolSize"),JP(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pV(this.dataFormat),hV(this.padding),this.inputSpec=[new bW({ndim:5})]}computeOutputShape(e){e=dW(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=LG(t,this.poolSize[0],this.padding,this.strides[0]),n=LG(n,this.poolSize[1],this.padding,this.strides[1]),r=LG(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Rx((()=>(this.invokeCallHook(e,t),this.poolingFunction(hW(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class tq extends eq{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pV(s),hV(r),jH(e,t,n,r,s,"max")}}tq.className="MaxPooling3D",ay.registerClass(tq);class nq extends eq{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pV(s),hV(r),jH(e,t,n,r,s,"avg")}}nq.className="AveragePooling3D",ay.registerClass(nq);class rq extends NW{constructor(e){super(e),this.inputSpec=[new bW({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new _P}}class sq extends rq{constructor(e){super(e||{})}call(e,t){return Rx((()=>{const t=hW(e);return mk(t,1)}))}}sq.className="GlobalAveragePooling1D",ay.registerClass(sq);class aq extends rq{constructor(e){super(e||{})}call(e,t){return Rx((()=>{const t=hW(e);return Jw(t,1)}))}}aq.className="GlobalMaxPooling1D",ay.registerClass(aq);class oq extends NW{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pV(this.dataFormat),this.inputSpec=[new bW({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new _P}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class iq extends oq{call(e,t){return Rx((()=>{const t=hW(e);return"channelsLast"===this.dataFormat?mk(t,[1,2]):mk(t,[2,3])}))}}iq.className="GlobalAveragePooling2D",ay.registerClass(iq);class uq extends oq{call(e,t){return Rx((()=>{const t=hW(e);return"channelsLast"===this.dataFormat?Jw(t,[1,2]):Jw(t,[2,3])}))}}uq.className="GlobalMaxPooling2D",ay.registerClass(uq);class lq extends NW{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=nU(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class cq extends lq{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=dW(e)).length<3)throw new RP(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=dW(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Rx((()=>sH(((e,n)=>[hW(this.layer.call(e,t)),[]]),e=hW(e),[],!1,null,null,!1,!0)[1]))}}cq.className="TimeDistributed",ay.registerClass(cq);class pq extends lq{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=nU(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=nU(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,YP(lV,"BidirectionalMergeMode",s),e.weights)throw new _P("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):BP(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=rH(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new RP("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new bW({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),o.push(...r)}if(null!=r)throw new _P("Support for constants in Bidirectional layers is not implemented yet.");const i=a[0]instanceof xW;for(const e of a)if(e instanceof xW!==i)throw new RP("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return Rx((()=>{const n=t.initialState;let r,s,a,o;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Kx(s,1)),"concat"===this.mergeMode?o=RV([r,s]):"sum"===this.mergeMode?o=Jx(r,s):"ave"===this.mergeMode?o=jy(.5,Jx(r,s)):"mul"===this.mergeMode?o=jy(r,s):null==this.mergeMode&&(o=[r,s]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){mV(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),mV(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=nU(t.layer);if(delete t.layer,null!=t.numConstants)throw new _P("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}pq.className="Bidirectional",ay.registerClass(pq);class hq extends NW{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Rx((()=>("float32"!==(e=hW(e)).dtype&&(e=TV(e,"float32")),Jx(jy(e,this.scale),this.offset))))}}hq.className="Rescaling",ay.registerClass(hq);const dq=new Set(["bilinear","nearest"]);class fq extends NW{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!dq.has(e.interpolation))throw new RP(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=dW(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Rx((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return vS.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return vS.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...dq]} are supported`)}))}}fq.className="Resizing",ay.registerClass(fq);class mq extends NW{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=dW(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return Rx((()=>{let n;if("int32"!==(e=hW(e)).dtype&&(e=TV(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new RP(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=hW(t.countWeights)}const r=Jw(e),s=Qw(e),a=Ow(this.numTokens,r).bufferSync().get(0),o=Hw(s,0).bufferSync().get(0);if(!a||!o)throw new RP(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,r){let s=hW(e);if("int32"!==s.dtype&&(s=TV(s,"int32")),"int"===t)return s;const a=s.shape;if(0===s.rank&&(s=ik(s,-1)),"oneHot"===t&&1!==s.shape[s.shape.length-1]&&(s=ik(s,-1)),s.rank>2)throw new RP(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${s.rank}.`);const o=["multiHot","oneHot"].includes(t);let i;if(i=Sv(s,void 0!==r&&"count"===t?r:[],n,o),"tfIdf"!==t)return i;if(r)return jy(i,r);throw new RP("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}mq.className="CategoryEncoding",ay.registerClass(mq);var gq,yq;Td().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(gq||(gq={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(yq||(yq={}));var bq={};t(bq,"json",(()=>xq));const xq=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var wq={};t(wq,"json",(()=>kq));const kq=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var vq={};t(vq,"json",(()=>Nq));const Nq=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var Sq={};t(Sq,"json",(()=>Iq));const Iq=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var Tq={};t(Tq,"json",(()=>Eq));const Eq=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var $q={};t($q,"json",(()=>Cq));const Cq=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Aq={};t(Aq,"json",(()=>Rq));const Rq=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var _q={};t(_q,"json",(()=>Dq));const Dq=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var Fq={};t(Fq,"json",(()=>Oq));const Oq=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var Mq={};t(Mq,"json",(()=>Lq));const Lq=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var zq={};t(zq,"json",(()=>Bq));const Bq=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Pq={};t(Pq,"json",(()=>Vq));const Vq=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var Wq={};t(Wq,"json",(()=>Uq));const Uq=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var Gq={};t(Gq,"json",(()=>Hq));const Hq=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var qq={};t(qq,"json",(()=>jq));const jq=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var Kq={};t(Kq,"json",(()=>Xq));const Xq=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var Yq={};t(Yq,"json",(()=>Zq));const Zq=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var Jq={};t(Jq,"json",(()=>Qq));const Qq=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var ej={};t(ej,"json",(()=>tj));const tj=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var nj={};n(nj,Lx);var rj=[],sj={};function aj(e,t){var n=Object.prototype.hasOwnProperty,r=0;for(var s in e)n.call(e,s)&&n.call(t,s)&&(r+=e[s]*t[s]);return r}function oj(e,t){var n=Math.sqrt(aj(e,e)),r=Math.sqrt(aj(t,t));return!(!n||!r)&&aj(e,t)/(n*r)}document.getElementById("autoGroupBtn").addEventListener("click",(async function(){!function(){let e=document.getElementById("onOpen"),t=document.getElementById("onLoading");e.setAttribute("style","display: none"),t.setAttribute("style","display: block; width: 100%; height: 100%")}();let e=await chrome.tabs.query({currentWindow:!0}),t=[];e.forEach((e=>{t.push(e.title),sj[e.title]=e.id})),rj=t,console.log("Tabs: "+t),async function(e){let t=async function(e){return function(e){let t={},n=[];for(let s=0;s<e.length;s++){var r=e[s];for(let a=s;a<r.length;a++)if(s!=a){if(e[s][a]>.5){let e;s in t?e=t[s]:(e=n.length,t[s]=e),a in t||(t[a]=e),n.length<=e&&n.push([]),n[e].push(s),n[e].push(a)}}}let s=[];for(var a in n)s.push(Array.from(new Set(n[a])));return console.log(s),async function(e){var t;chrome.windows.getCurrent((function(e){t=e.id}));for(let n in e){console.log("group:"+n);let r=[];for(let t in e[n])r.push(sj[rj[e[n][t]]]),console.log(e[n][t],rj[e[n][t]]);console.log("creating groups"),console.log(r);await chrome.tabs.group({createProperties:{windowId:t},tabIds:r})}await async function(){let e=new Date,t=e.toJSON().slice(0,10);await chrome.storage.sync.get(["log"],(function(n){let r=n.log;console.log(n),console.log(r);let s={date:t,tabsOpen:rj.length,time:e.getHours()+":"+e.getMinutes()};r.push(s),chrome.storage.sync.set({log:r},(function(){}))}))}(),window.close()}(s),s}(function(e){let t=[];for(let n=0;n<e.length;n++){let r=[];for(let e=0;e<n;e++)r.push(t[e][n]);r.push(1);for(let t=n+1;t<e.length;t++)r.push(oj(e[n],e[t]));t.push(r)}return t}(e.arraySync()))};await function(e,t){(function(e){return yh(this,void 0,void 0,(function(){var t;return bh(this,(function(n){switch(n.label){case 0:return[4,(t=new Ih).load(e)];case 1:return n.sent(),[2,t]}}))}))})().then((n=>{n.embed(e).then((e=>{t(e)}))}))}(e,t.bind(this))}(t)}));
//# sourceMappingURL=popup.45175fc6.js.map
