(()=>{var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var r={},s={},a=e.parcelRequire3f73;null==a&&((a=function(e){if(e in r)return r[e].exports;if(e in s){var t=s[e];delete s[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){s[e]=t},e.parcelRequire3f73=a),a.register("foUwZ",(function(e,t){})),a.register("gj6Et",(function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new r(e),a=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("4gDjz",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("HLBv4",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("ktaoY",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("gBs5C",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("ktLSh",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));class o{refCount(e){return i("refCount")}incRef(e){return i("incRef")}timerAvailable(){return!0}time(e){return i("time")}read(e){return i("read")}readSync(e){return i("readSync")}readToGPU(e,t){return i("readToGPU")}numDataIds(){return i("numDataIds")}disposeData(e,t){return i("disposeData")}write(e,t,n){return i("write")}move(e,t,n,r,s){return i("move")}memory(){return i("memory")}floatPrecision(){return i("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return i("dispose")}}function i(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var u={};function l(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,d(e,t,n)}function c(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,d(e,n,r),d(t,n,r)}function p(e,t,n){return Math.max(e,Math.min(t,n))}function h(e){return e%2==0?e:e+1}function d(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function f(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function m(e,t){const n=Math.random();return t*n+(1-n)*e}function g(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function y(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function b(e,t,n=""){y(N(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function x(e){y(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function w(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||z(e)&&!n)for(let r=0;r<e.length;++r)w(e[r],t,n);else t.push(e);return t}function k(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function v(e){return 0===e.length}function N(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function S(e){return e%1==0}function I(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function T(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function E(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return l(t),t}function $(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function C(e,t=(e=>0),n,r=setTimeout){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const u=t(o);null!=n&&o>=n?a():r(i,u)};i()}))}function A(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function _(e,t){const n=t.length;return y((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),y(e.every((e=>S(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function R(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:_(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function D(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function F(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function O(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function M(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function L(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function z(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function B(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function P(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function W(e){return"string"==typeof e||e instanceof String}function V(e){return"boolean"==typeof e}function U(e){return"number"==typeof e}function G(e){return Array.isArray(e)?G(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":U(e)?"float32":W(e)?"string":V(e)?"bool":"float32"}function H(e){return!!(e&&e.constructor&&e.call&&e.apply)}function q(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function j(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function K(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=K(e+t*i,o,n,r)}return s}function X(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return K(0,e,t,n)}function Y(e,t){const n=Z(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Z(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function J(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return X(e,new Float32Array(n));if("int32"===t)return X(e,new Int32Array(n));if("bool"===t)return X(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Q(e){e.forEach((t=>{y(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ee(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function te(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function ne(e){return e&&e.then&&"function"==typeof e.then}t(u,"shuffle",(()=>l)),t(u,"swap",(()=>d)),t(u,"shuffleCombo",(()=>c)),t(u,"clamp",(()=>p)),t(u,"nearestLargerEven",(()=>h)),t(u,"sum",(()=>f)),t(u,"randUniform",(()=>m)),t(u,"distSquared",(()=>g)),t(u,"assert",(()=>y)),t(u,"assertShapesMatch",(()=>b)),t(u,"arraysEqual",(()=>N)),t(u,"assertNonNull",(()=>x)),t(u,"flatten",(()=>w)),t(u,"isTypedArray",(()=>z)),t(u,"sizeFromShape",(()=>k)),t(u,"isScalarShape",(()=>v)),t(u,"isInt",(()=>S)),t(u,"tanh",(()=>I)),t(u,"sizeToSquarishShape",(()=>T)),t(u,"createShuffledIndices",(()=>E)),t(u,"rightPad",(()=>$)),t(u,"repeatedTry",(()=>C)),t(u,"inferFromImplicitShape",(()=>A)),t(u,"parseAxisParam",(()=>_)),t(u,"squeezeShape",(()=>R)),t(u,"getTypedArrayFromDType",(()=>D)),t(u,"getArrayFromDType",(()=>F)),t(u,"checkConversionForErrors",(()=>O)),t(u,"isValidDtype",(()=>M)),t(u,"hasEncodingLoss",(()=>L)),t(u,"bytesPerElement",(()=>B)),t(u,"bytesFromStringArray",(()=>P)),t(u,"isString",(()=>W)),t(u,"isBoolean",(()=>V)),t(u,"isNumber",(()=>U)),t(u,"inferDtype",(()=>G)),t(u,"isFunction",(()=>H)),t(u,"nearestDivisor",(()=>q)),t(u,"computeStrides",(()=>j)),t(u,"toNestedArray",(()=>X)),t(u,"makeOnesTypedArray",(()=>Y)),t(u,"makeZerosTypedArray",(()=>Z)),t(u,"makeZerosNestedTypedArray",(()=>J)),t(u,"assertNonNegativeIntegerDimensions",(()=>Q)),t(u,"locToIndex",(()=>ee)),t(u,"indexToLoc",(()=>te)),t(u,"isPromise",(()=>ne));const re="tfjsflags";class se{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ae,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(ne(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(re in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function ae(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function oe(){return ie}let ie=null;var ue,le,ce={},pe=ce={};function he(){throw new Error("setTimeout has not been defined")}function de(){throw new Error("clearTimeout has not been defined")}function fe(e){if(ue===setTimeout)return setTimeout(e,0);if((ue===he||!ue)&&setTimeout)return ue=setTimeout,setTimeout(e,0);try{return ue(e,0)}catch(t){try{return ue.call(null,e,0)}catch(t){return ue.call(this,e,0)}}}!function(){try{ue="function"==typeof setTimeout?setTimeout:he}catch(e){ue=he}try{le="function"==typeof clearTimeout?clearTimeout:de}catch(e){le=de}}();var me,ge=[],ye=!1,be=-1;function xe(){ye&&me&&(ye=!1,me.length?ge=me.concat(ge):be=-1,ge.length&&we())}function we(){if(!ye){var e=fe(xe);ye=!0;for(var t=ge.length;t;){for(me=ge,ge=[];++be<t;)me&&me[be].run();be=-1,t=ge.length}me=null,ye=!1,function(e){if(le===clearTimeout)return clearTimeout(e);if((le===de||!le)&&clearTimeout)return le=clearTimeout,clearTimeout(e);try{le(e)}catch(t){try{return le.call(null,e)}catch(t){return le.call(this,e)}}}(e)}}function ke(e,t){this.fun=e,this.array=t}function ve(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Ne;function Se(){if(null==Ne){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==ce)t=ce;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Ne=t}return Ne}function Ie(e,t){const n=function(){const e=Se();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}pe.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];ge.push(new ke(e,t)),1!==ge.length||ye||fe(we)},ke.prototype.run=function(){this.fun.apply(null,this.array)},pe.title="browser",pe.browser=!0,pe.env={},pe.argv=[],pe.version="",pe.versions={},pe.on=ve,pe.addListener=ve,pe.once=ve,pe.off=ve,pe.removeListener=ve,pe.removeAllListeners=ve,pe.emit=ve,pe.prependListener=ve,pe.prependOnceListener=ve,pe.listeners=function(e){return[]},pe.binding=function(e){throw new Error("process.binding is not supported")},pe.cwd=function(){return"/"},pe.chdir=function(e){throw new Error("process.chdir is not supported")},pe.umask=function(){return 0};const Te="Cast",Ee="Identity",$e="Tile",Ce="Transpose",Ae="_FusedMatMul",_e="FusedConv2D",Re="FusedDepthwiseConv2D";function De(...e){oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(...e)}const Fe=Ie("kernelRegistry",(()=>new Map)),Oe=Ie("gradRegistry",(()=>new Map));function Me(e,t){const n=Be(e,t);return Fe.get(n)}function Le(e){return Oe.get(e)}function ze(e){const t=Fe.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function Be(e,t){return`${t}_${e}`}var Pe={};t(Pe,"createScalarValue",(()=>Tt)),t(Pe,"encodeString",(()=>At)),t(Pe,"toTypedArray",(()=>Et)),t(Pe,"now",(()=>$t)),t(Pe,"fetch",(()=>Ct)),t(Pe,"decodeString",(()=>_t));var We={};t(We,"hexToLong",(()=>ft)),t(We,"fingerPrint64",(()=>It));var Ve;Ve=Ge;var Ue=null;try{Ue=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Ge(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function He(e){return!0===(e&&e.__isLong__)}Ge.prototype.__isLong__,Object.defineProperty(Ge.prototype,"__isLong__",{value:!0}),Ge.isLong=He;var qe={},je={};function Ke(e,t){var n,r,s;return t?(s=0<=(e>>>=0)&&e<256)&&(r=je[e])?r:(n=Ye(e,(0|e)<0?-1:0,!0),s&&(je[e]=n),n):(s=-128<=(e|=0)&&e<128)&&(r=qe[e])?r:(n=Ye(e,e<0?-1:0,!1),s&&(qe[e]=n),n)}function Xe(e,t){if(isNaN(e))return t?at:st;if(t){if(e<0)return at;if(e>=tt)return ct}else{if(e<=-nt)return pt;if(e+1>=nt)return lt}return e<0?Xe(-e,t).neg():Ye(e%et|0,e/et|0,t)}function Ye(e,t,n){return new Ge(e,t,n)}Ge.fromInt=Ke,Ge.fromNumber=Xe,Ge.fromBits=Ye;var Ze=Math.pow;function Je(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return st;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return Je(e.substring(1),t,n).neg();for(var s=Xe(Ze(n,8)),a=st,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),u=parseInt(e.substring(o,o+i),n);if(i<8){var l=Xe(Ze(n,i));a=a.mul(l).add(Xe(u))}else a=(a=a.mul(s)).add(Xe(u))}return a.unsigned=t,a}function Qe(e,t){return"number"==typeof e?Xe(e,t):"string"==typeof e?Je(e,t):Ye(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}Ge.fromString=Je,Ge.fromValue=Qe;var et=4294967296,tt=et*et,nt=tt/2,rt=Ke(16777216),st=Ke(0);Ge.ZERO=st;var at=Ke(0,!0);Ge.UZERO=at;var ot=Ke(1);Ge.ONE=ot;var it=Ke(1,!0);Ge.UONE=it;var ut=Ke(-1);Ge.NEG_ONE=ut;var lt=Ye(-1,2147483647,!1);Ge.MAX_VALUE=lt;var ct=Ye(-1,-1,!0);Ge.MAX_UNSIGNED_VALUE=ct;var pt=Ye(0,-2147483648,!1);Ge.MIN_VALUE=pt;var ht=Ge.prototype;ht.toInt=function(){return this.unsigned?this.low>>>0:this.low},ht.toNumber=function(){return this.unsigned?(this.high>>>0)*et+(this.low>>>0):this.high*et+(this.low>>>0)},ht.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(pt)){var t=Xe(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=Xe(Ze(e,6),this.unsigned),a=this,o="";;){var i=a.div(s),u=(a.sub(i.mul(s)).toInt()>>>0).toString(e);if((a=i).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},ht.getHighBits=function(){return this.high},ht.getHighBitsUnsigned=function(){return this.high>>>0},ht.getLowBits=function(){return this.low},ht.getLowBitsUnsigned=function(){return this.low>>>0},ht.getNumBitsAbs=function(){if(this.isNegative())return this.eq(pt)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},ht.isZero=function(){return 0===this.high&&0===this.low},ht.eqz=ht.isZero,ht.isNegative=function(){return!this.unsigned&&this.high<0},ht.isPositive=function(){return this.unsigned||this.high>=0},ht.isOdd=function(){return 1==(1&this.low)},ht.isEven=function(){return 0==(1&this.low)},ht.equals=function(e){return He(e)||(e=Qe(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},ht.eq=ht.equals,ht.notEquals=function(e){return!this.eq(e)},ht.neq=ht.notEquals,ht.ne=ht.notEquals,ht.lessThan=function(e){return this.comp(e)<0},ht.lt=ht.lessThan,ht.lessThanOrEqual=function(e){return this.comp(e)<=0},ht.lte=ht.lessThanOrEqual,ht.le=ht.lessThanOrEqual,ht.greaterThan=function(e){return this.comp(e)>0},ht.gt=ht.greaterThan,ht.greaterThanOrEqual=function(e){return this.comp(e)>=0},ht.gte=ht.greaterThanOrEqual,ht.ge=ht.greaterThanOrEqual,ht.compare=function(e){if(He(e)||(e=Qe(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},ht.comp=ht.compare,ht.negate=function(){return!this.unsigned&&this.eq(pt)?pt:this.not().add(ot)},ht.neg=ht.negate,ht.add=function(e){He(e)||(e=Qe(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=0,l=0,c=0,p=0;return c+=(p+=s+(65535&e.low))>>>16,l+=(c+=r+i)>>>16,u+=(l+=n+o)>>>16,u+=t+a,Ye((c&=65535)<<16|(p&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},ht.subtract=function(e){return He(e)||(e=Qe(e)),this.add(e.neg())},ht.sub=ht.subtract,ht.multiply=function(e){if(this.isZero())return st;if(He(e)||(e=Qe(e)),Ue)return Ye(Ue.mul(this.low,this.high,e.low,e.high),Ue.get_high(),this.unsigned);if(e.isZero())return st;if(this.eq(pt))return e.isOdd()?pt:st;if(e.eq(pt))return this.isOdd()?pt:st;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(rt)&&e.lt(rt))return Xe(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=65535&e.low,l=0,c=0,p=0,h=0;return p+=(h+=s*u)>>>16,c+=(p+=r*u)>>>16,p&=65535,c+=(p+=s*i)>>>16,l+=(c+=n*u)>>>16,c&=65535,l+=(c+=r*i)>>>16,c&=65535,l+=(c+=s*o)>>>16,l+=t*u+n*i+r*o+s*a,Ye((p&=65535)<<16|(h&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},ht.mul=ht.multiply,ht.divide=function(e){if(He(e)||(e=Qe(e)),e.isZero())throw Error("division by zero");var t,n,r;if(Ue)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?Ye((this.unsigned?Ue.div_u:Ue.div_s)(this.low,this.high,e.low,e.high),Ue.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?at:st;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return at;if(e.gt(this.shru(1)))return it;r=at}else{if(this.eq(pt))return e.eq(ot)||e.eq(ut)?pt:e.eq(pt)?ot:(t=this.shr(1).div(e).shl(1)).eq(st)?e.isNegative()?ot:ut:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(pt))return this.unsigned?at:st;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=st}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),a=s<=48?1:Ze(2,s-48),o=Xe(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=Xe(t-=a,this.unsigned)).mul(e);o.isZero()&&(o=ot),r=r.add(o),n=n.sub(i)}return r},ht.div=ht.divide,ht.modulo=function(e){return He(e)||(e=Qe(e)),Ue?Ye((this.unsigned?Ue.rem_u:Ue.rem_s)(this.low,this.high,e.low,e.high),Ue.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},ht.mod=ht.modulo,ht.rem=ht.modulo,ht.not=function(){return Ye(~this.low,~this.high,this.unsigned)},ht.and=function(e){return He(e)||(e=Qe(e)),Ye(this.low&e.low,this.high&e.high,this.unsigned)},ht.or=function(e){return He(e)||(e=Qe(e)),Ye(this.low|e.low,this.high|e.high,this.unsigned)},ht.xor=function(e){return He(e)||(e=Qe(e)),Ye(this.low^e.low,this.high^e.high,this.unsigned)},ht.shiftLeft=function(e){return He(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Ye(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Ye(0,this.low<<e-32,this.unsigned)},ht.shl=ht.shiftLeft,ht.shiftRight=function(e){return He(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Ye(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Ye(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},ht.shr=ht.shiftRight,ht.shiftRightUnsigned=function(e){if(He(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?Ye(this.low>>>e|t<<32-e,t>>>e,this.unsigned):Ye(32===e?t:t>>>e-32,0,this.unsigned)},ht.shru=ht.shiftRightUnsigned,ht.shr_u=ht.shiftRightUnsigned,ht.toSigned=function(){return this.unsigned?Ye(this.low,this.high,!1):this},ht.toUnsigned=function(){return this.unsigned?this:Ye(this.low,this.high,!0)},ht.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},ht.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},ht.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},Ge.fromBytes=function(e,t,n){return n?Ge.fromBytesLE(e,t):Ge.fromBytesBE(e,t)},Ge.fromBytesLE=function(e,t){return new Ge(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Ge.fromBytesBE=function(e,t){return new Ge(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const dt=Ve.default||Ve;function ft(e){return dt.fromString(e,!0,16)}const mt=ft("c3a5c85c97cb3127"),gt=ft("b492b66fbe98f273"),yt=ft("9ae16a3b2f90404f");function bt(e){return e.xor(e.shru(47))}function xt(e,t,n){const r=e.slice(t,t+n);return dt.fromBytes(Array.from(r),!0,!0)}function wt(e,t){return xt(e,t,8)}function kt(e,t){return xt(e,t,4)}function vt(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Nt(e,t,n=ft("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function St(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=vt(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(vt(s,44)),[s.add(r),a.add(o)]}(wt(e,t),wt(e,t+8),wt(e,t+16),wt(e,t+24),n,r)}function It(e,t=e.length){const n=dt.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=yt.add(2*t),r=wt(e,0).add(yt),s=wt(e,t-8);return Nt(vt(s,37).mul(n).add(r),vt(r,25).add(s).mul(n),n)}if(t>=4){const n=yt.add(2*t);return Nt(kt(e,0).shl(3).add(t),kt(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return bt(yt.mul(n).xor(mt.mul(r))).mul(yt)}return yt}(e,t):function(e,t=e.length){const n=yt.add(2*t),r=wt(e,0).mul(gt),s=wt(e,8),a=wt(e,t-8).mul(n),o=wt(e,t-16).mul(yt);return Nt(vt(r.add(s),43).add(vt(a,30)).add(o),r.add(vt(s.add(yt),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=yt.add(2*t),r=wt(e,0).mul(yt),s=wt(e,8),a=wt(e,t-8).mul(n),o=wt(e,t-16).mul(yt),i=vt(r.add(s),43).add(vt(a,30)).add(o),u=Nt(i,r.add(vt(s.add(yt),18)).add(a),n),l=wt(e,16).mul(n),c=wt(e,24),p=i.add(wt(e,t-32)).mul(n),h=u.add(wt(e,t-24)).mul(n);return Nt(vt(l.add(c),43).add(vt(p,30)).add(h),l.add(vt(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(gt).add(113),a=bt(s.mul(yt).add(113)).mul(yt),o=[dt.UZERO,dt.UZERO],i=[dt.UZERO,dt.UZERO];r=r.mul(yt).add(wt(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=vt(r.add(s).add(o[0]).add(wt(e,u+8)),37).mul(gt),s=vt(s.add(o[1]).add(wt(e,u+48)),42).mul(gt),r=r.xor(i[1]),s=s.add(o[0]).add(wt(e,u+40)),a=vt(a.add(i[0]),33).mul(gt),o=St(e,u,o[1].mul(gt),r.add(i[0])),i=St(e,u+32,a.add(i[1]),s.add(wt(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const p=gt.add(a.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=vt(r.add(s).add(o[0]).add(wt(e,u+8)),37).mul(p),s=vt(s.add(o[1]).add(wt(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(wt(e,u+40))),a=vt(a.add(i[0]),33).mul(p),o=St(e,u,o[1].mul(p),r.add(i[0])),i=St(e,u+32,a.add(i[1]),s.add(wt(e,u+16))),[a,r]=[r,a],Nt(Nt(o[0],i[0],p).add(bt(s).mul(mt)).add(a),Nt(o[1],i[1],p).add(r),p)}function Tt(e,t){return"string"===t?At(e):Et([e],t)}function Et(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=w(e)),oe().getBool("DEBUG")&&O(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function $t(){return oe().platform.now()}function Ct(e,t){return oe().platform.fetch(e,t)}function At(e,t="utf-8"){return t=t||"utf-8",oe().platform.encode(e,t)}function _t(e,t="utf-8"){return t=t||"utf-8",oe().platform.decode(e,t)}n(Pe,u),n(Pe,We);class Rt{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Ft)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=$t();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:$t()-o})}if(oe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Dt(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function Dt(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Ft{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?$(`${r}ms`,9):r.error,i=$(e,25),u=t.rank,l=t.size,c=$(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ot(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function Mt(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!N(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function Lt(e,t,n,r){const s=j(t),a=function(e,t,n,r){const s=k(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?Wt(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],zt(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=Pt(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function zt(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:W(e)?`'${e}'`:"bool"===n?Bt(e):parseFloat(e.toFixed(7)).toString(),$(r,t)}function Bt(e){return 0===e?"false":"true"}function Pt(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[zt(Wt(e)[0],0,n)]}return"bool"===n?[Bt(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Wt(r),a=Wt(a)),["["+r.map(((e,t)=>zt(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>zt(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Wt(e):Array.from(e)).map(((e,t)=>zt(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...Pt(e.slice(r,a),l,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...Pt(e.slice(r,a),l,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...Pt(e.slice(r,a),l,n,c,s,t===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function Wt(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Vt{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=k(e),null!=n){const e=n.length;y(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||F(t,this.size),this.strides=j(e)}set(e,...t){0===t.length&&(t=[0]),y(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ut().makeTensor(this.values,this.shape,this.dtype)}}let Ut=null,Gt=null,Ht=null;class qt{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=k(e),this.strides=j(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Gt.buffer(this.shape,this.dtype,e)}bufferSync(){return Gt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return X(this.shape,e,"complex64"===this.dtype)}arraySync(){return X(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Ut().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>_t(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Ut().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Ut().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>_t(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ut().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ut().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Gt.print(this,e)}clone(){return this.throwIfDisposed(),Gt.clone(this)}toString(e=!1){return Lt(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Gt.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Ut().makeVariable(this,e,t,n)}}Object.defineProperty(qt,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Ie("Tensor",(()=>qt));class jt extends qt{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!N(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ut().disposeTensor(this),this.dataId=e.dataId,Ut().incRef(this,null)}dispose(){Ut().disposeVariable(this),this.isDisposedInternal=!0}}var Kt,Xt,Yt,Zt,Jt,Qt,en,tn,nn,rn;Object.defineProperty(jt,Symbol.hasInstance,{value:e=>e instanceof qt&&null!=e.assign&&e.assign instanceof Function}),(Xt=Kt||(Kt={})).R0="R0",Xt.R1="R1",Xt.R2="R2",Xt.R3="R3",Xt.R4="R4",Xt.R5="R5",Xt.R6="R6",(Zt=Yt||(Yt={})).float32="float32",Zt.int32="int32",Zt.bool="int32",Zt.complex64="complex64",(Qt=Jt||(Jt={})).float32="float32",Qt.int32="int32",Qt.bool="bool",Qt.complex64="complex64",(tn=en||(en={})).float32="float32",tn.int32="float32",tn.bool="float32",tn.complex64="complex64",(rn=nn||(nn={})).float32="complex64",rn.int32="complex64",rn.bool="complex64",rn.complex64="complex64";const sn={float32:en,int32:Yt,bool:Jt,complex64:nn};function an(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return sn[e][t]}function on(e,t){if(e.dtype===t.dtype)return[e,t];const n=an(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function un(e){const t=[];return ln(e,t,new Set),t}function ln(e,t,n){if(null==e)return;if(e instanceof qt)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),ln(r,t,n))}}function cn(e){return null!=e.kernelName}class pn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class hn{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new pn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(De(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Rt(this.backendInstance),!0}setupRegisteredKernels(){ze(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){ze(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof o||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,De(`Initialization of backend ${e} failed`),De(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return De(`Initialization of backend ${e} failed`),De(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return hn.nextTensorId++}nextVariableId(){return hn.nextVariableId++}clone(e){const t=fn.runKernel(Ee,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return fn.runKernel(Te,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Me(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=cn(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(cn(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=Me(t,this.backendName);y(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,p=cn(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(u,l,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Le(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(y(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&W(e[0])&&(s=e.map((e=>At(e))));const a=r.write(s,t,n),o=new qt(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=P(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new qt(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new jt(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*B(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof jt||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*B(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=Le(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Z(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=un(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(y(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));y(s instanceof qt,(()=>"The result y returned by f() must be a tensor."));const a=Ot(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Y(k(e),"float32");return fn.makeTensor(t,e,"float32")}(s.shape):n,Mt(e,a,(e=>this.tidy(e)),mn);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return y(H(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;y(t.every((e=>e instanceof qt)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),y(n.value instanceof qt,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),y(H(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];y(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),y(a.every((e=>e instanceof qt)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=$t(),n=await this.backend.time(e);return n.wallMs=$t()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new pn;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function dn(){const e=Se();if(null==e._tfengine){const t=new se(e);e._tfengine=new hn(t)}var t;return t=e._tfengine.ENV,ie=t,Ut=()=>e._tfengine,e._tfengine}hn.nextTensorId=0,hn.nextVariableId=0;const fn=dn();function mn(e,t){const n={a:e,b:t};return fn.runKernel("Add",n)}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gn=oe();function yn(e,t){let n=e;if(z(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||z(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&oe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&bn(e,r,[]),r}function bn(e,t,n){if(n=n||[],!Array.isArray(e)&&!z(e))return void y(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));y(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),y(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)bn(e[t],r,n.concat(t))}function xn(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function wn(e,t,n,r="numeric"){if(e instanceof qt)return xn(r,e.dtype,t,n),e;let s=G(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),xn(r,s,t,n),null==e||!z(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=yn(e,s);z(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?Et(e,s):w(e,[],!0);return fn.makeTensor(o,a,s)}function kn(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>wn(e,`${t}[${s}]`,n,r)))}gn.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),gn.registerFlag("IS_BROWSER",(()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope)),gn.registerFlag("IS_NODE",(()=>void 0!==ce&&void 0!==ce.versions&&void 0!==ce.versions.node)),gn.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),gn.registerFlag("PROD",(()=>!1)),gn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>gn.getBool("DEBUG"))),gn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),gn.registerFlag("IS_TEST",(()=>!1)),gn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),gn.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),gn.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),gn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),gn.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const vn="__op";function Nn(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=vn;const s=(...e)=>{fn.startScope(n);try{const t=r(...e);return ne(t)&&console.error("Cannot return a Promise inside of tidy."),fn.endScope(t),t}catch(e){throw fn.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Sn=Nn({complex_:function(e,t){const n=wn(e,"real","complex"),r=wn(t,"imag","complex");b(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return fn.runKernel("Complex",s)}});function In(e,t,n,r){if(null==r&&(r=G(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!z(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Q(t);const e=k(t),r=k(n);y(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==k(t.slice(e));y(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return z(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Et(e,r):w(e,[],!0),fn.makeTensor(e,t,r)}function Tn(e,t,n){return In(e,t,yn(e,n),n)}const En={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var $n,Cn,An;Cn=function(e){var t,n,r=Bn(e),s=r[0],a=r[1],o=new On(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),i=0,u=a>0?s-4:s;for(n=0;n<u;n+=4)t=Fn[e.charCodeAt(n)]<<18|Fn[e.charCodeAt(n+1)]<<12|Fn[e.charCodeAt(n+2)]<<6|Fn[e.charCodeAt(n+3)],o[i++]=t>>16&255,o[i++]=t>>8&255,o[i++]=255&t;2===a&&(t=Fn[e.charCodeAt(n)]<<2|Fn[e.charCodeAt(n+1)]>>4,o[i++]=255&t);1===a&&(t=Fn[e.charCodeAt(n)]<<10|Fn[e.charCodeAt(n+1)]<<4|Fn[e.charCodeAt(n+2)]>>2,o[i++]=t>>8&255,o[i++]=255&t);return o},An=function(e){for(var t,n=e.length,r=n%3,s=[],a=16383,o=0,i=n-r;o<i;o+=a)s.push(Pn(e,o,o+a>i?i:o+a));1===r?(t=e[n-1],s.push(Dn[t>>2]+Dn[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],s.push(Dn[t>>10]+Dn[t>>4&63]+Dn[t<<2&63]+"="));return s.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var _n,Rn,Dn=[],Fn=[],On="undefined"!=typeof Uint8Array?Uint8Array:Array,Mn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Ln=0,zn=Mn.length;Ln<zn;++Ln)Dn[Ln]=Mn[Ln],Fn[Mn.charCodeAt(Ln)]=Ln;function Bn(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function Pn(e,t,n){for(var r,s,a=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(Dn[(s=r)>>18&63]+Dn[s>>12&63]+Dn[s>>6&63]+Dn[63&s]);return a.join("")}Fn["-".charCodeAt(0)]=62,Fn["_".charCodeAt(0)]=63,_n=function(e,t,n,r,s){var a,o,i=8*s-r-1,u=(1<<i)-1,l=u>>1,c=-7,p=n?s-1:0,h=n?-1:1,d=e[t+p];for(p+=h,a=d&(1<<-c)-1,d>>=-c,c+=i;c>0;a=256*a+e[t+p],p+=h,c-=8);for(o=a&(1<<-c)-1,a>>=-c,c+=r;c>0;o=256*o+e[t+p],p+=h,c-=8);if(0===a)a=1-l;else{if(a===u)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,r),a-=l}return(d?-1:1)*o*Math.pow(2,a-r)},Rn=function(e,t,n,r,s,a){var o,i,u,l=8*a-s-1,c=(1<<l)-1,p=c>>1,h=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),(t+=o+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(o++,u/=2),o+p>=c?(i=0,o=c):o+p>=1?(i=(t*u-1)*Math.pow(2,s),o+=p):(i=t*Math.pow(2,p-1)*Math.pow(2,s),o=0));s>=8;e[n+d]=255&i,d+=f,i/=256,s-=8);for(o=o<<s|i,l+=s;l>0;e[n+d]=255&o,d+=f,o/=256,l-=8);e[n+d-f]|=128*m};const Wn="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;$n=Gn;const Vn=2147483647;function Un(e){if(e>Vn)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,Gn.prototype),t}function Gn(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return jn(e)}return Hn(e,t,n)}function Hn(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!Gn.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|Zn(e,t);let r=Un(n);const s=r.write(e,t);s!==n&&(r=r.slice(0,s));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(_r(e,Uint8Array)){const t=new Uint8Array(e);return Xn(t.buffer,t.byteOffset,t.byteLength)}return Kn(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(_r(e,ArrayBuffer)||e&&_r(e.buffer,ArrayBuffer))return Xn(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(_r(e,SharedArrayBuffer)||e&&_r(e.buffer,SharedArrayBuffer)))return Xn(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return Gn.from(r,t,n);const s=function(e){if(Gn.isBuffer(e)){const t=0|Yn(e.length),n=Un(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Rr(e.length)?Un(0):Kn(e);if("Buffer"===e.type&&Array.isArray(e.data))return Kn(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return Gn.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function qn(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function jn(e){return qn(e),Un(e<0?0:0|Yn(e))}function Kn(e){const t=e.length<0?0:0|Yn(e.length),n=Un(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function Xn(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,Gn.prototype),r}function Yn(e){if(e>=Vn)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Vn.toString(16)+" bytes");return 0|e}function Zn(e,t){if(Gn.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||_r(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return $r(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Cr(e).length;default:if(s)return r?-1:$r(e).length;t=(""+t).toLowerCase(),s=!0}}function Jn(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return hr(this,t,n);case"utf8":case"utf-8":return ur(this,t,n);case"ascii":return cr(this,t,n);case"latin1":case"binary":return pr(this,t,n);case"base64":return ir(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return dr(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function Qn(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function er(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Rr(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=Gn.from(t,r)),Gn.isBuffer(t))return 0===t.length?-1:tr(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):tr(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function tr(e,t,n,r,s){let a,o=1,i=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,i/=2,u/=2,n/=2}function l(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s){let r=-1;for(a=n;a<i;a++)if(l(e,a)===l(t,-1===r?0:a-r)){if(-1===r&&(r=a),a-r+1===u)return r*o}else-1!==r&&(a-=a-r),r=-1}else for(n+u>i&&(n=i-u),a=n;a>=0;a--){let n=!0;for(let r=0;r<u;r++)if(l(e,a+r)!==l(t,r)){n=!1;break}if(n)return a}return-1}function nr(e,t,n,r){n=Number(n)||0;const s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;const a=t.length;let o;for(r>a/2&&(r=a/2),o=0;o<r;++o){const r=parseInt(t.substr(2*o,2),16);if(Rr(r))return o;e[n+o]=r}return o}function rr(e,t,n,r){return Ar($r(t,e.length-n),e,n,r)}function sr(e,t,n,r){return Ar(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function ar(e,t,n,r){return Ar(Cr(t),e,n,r)}function or(e,t,n,r){return Ar(function(e,t){let n,r,s;const a=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,s=n%256,a.push(s),a.push(r);return a}(t,e.length-n),e,n,r)}function ir(e,t,n){return 0===t&&n===e.length?An(e):An(e.slice(t,n))}function ur(e,t,n){n=Math.min(e.length,n);const r=[];let s=t;for(;s<n;){const t=e[s];let a=null,o=t>239?4:t>223?3:t>191?2:1;if(s+o<=n){let n,r,i,u;switch(o){case 1:t<128&&(a=t);break;case 2:n=e[s+1],128==(192&n)&&(u=(31&t)<<6|63&n,u>127&&(a=u));break;case 3:n=e[s+1],r=e[s+2],128==(192&n)&&128==(192&r)&&(u=(15&t)<<12|(63&n)<<6|63&r,u>2047&&(u<55296||u>57343)&&(a=u));break;case 4:n=e[s+1],r=e[s+2],i=e[s+3],128==(192&n)&&128==(192&r)&&128==(192&i)&&(u=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&i,u>65535&&u<1114112&&(a=u))}}null===a?(a=65533,o=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),s+=o}return function(e){const t=e.length;if(t<=lr)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=lr));return n}(r)}Gn.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),Gn.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Gn.prototype,"parent",{enumerable:!0,get:function(){if(Gn.isBuffer(this))return this.buffer}}),Object.defineProperty(Gn.prototype,"offset",{enumerable:!0,get:function(){if(Gn.isBuffer(this))return this.byteOffset}}),Gn.poolSize=8192,Gn.from=function(e,t,n){return Hn(e,t,n)},Object.setPrototypeOf(Gn.prototype,Uint8Array.prototype),Object.setPrototypeOf(Gn,Uint8Array),Gn.alloc=function(e,t,n){return function(e,t,n){return qn(e),e<=0?Un(e):void 0!==t?"string"==typeof n?Un(e).fill(t,n):Un(e).fill(t):Un(e)}(e,t,n)},Gn.allocUnsafe=function(e){return jn(e)},Gn.allocUnsafeSlow=function(e){return jn(e)},Gn.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==Gn.prototype},Gn.compare=function(e,t){if(_r(e,Uint8Array)&&(e=Gn.from(e,e.offset,e.byteLength)),_r(t,Uint8Array)&&(t=Gn.from(t,t.offset,t.byteLength)),!Gn.isBuffer(e)||!Gn.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let s=0,a=Math.min(n,r);s<a;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},Gn.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Gn.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Gn.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=Gn.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(_r(t,Uint8Array))s+t.length>r.length?(Gn.isBuffer(t)||(t=Gn.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else{if(!Gn.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,s)}s+=t.length}return r},Gn.byteLength=Zn,Gn.prototype._isBuffer=!0,Gn.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)Qn(this,t,t+1);return this},Gn.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)Qn(this,t,t+3),Qn(this,t+1,t+2);return this},Gn.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)Qn(this,t,t+7),Qn(this,t+1,t+6),Qn(this,t+2,t+5),Qn(this,t+3,t+4);return this},Gn.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?ur(this,0,e):Jn.apply(this,arguments)},Gn.prototype.toLocaleString=Gn.prototype.toString,Gn.prototype.equals=function(e){if(!Gn.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Gn.compare(this,e)},Gn.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},Wn&&(Gn.prototype[Wn]=Gn.prototype.inspect),Gn.prototype.compare=function(e,t,n,r,s){if(_r(e,Uint8Array)&&(e=Gn.from(e,e.offset,e.byteLength)),!Gn.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(s>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0);const i=Math.min(a,o),u=this.slice(r,s),l=e.slice(t,n);for(let e=0;e<i;++e)if(u[e]!==l[e]){a=u[e],o=l[e];break}return a<o?-1:o<a?1:0},Gn.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Gn.prototype.indexOf=function(e,t,n){return er(this,e,t,n,!0)},Gn.prototype.lastIndexOf=function(e,t,n){return er(this,e,t,n,!1)},Gn.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let a=!1;for(;;)switch(r){case"hex":return nr(this,e,t,n);case"utf8":case"utf-8":return rr(this,e,t,n);case"ascii":case"latin1":case"binary":return sr(this,e,t,n);case"base64":return ar(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return or(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},Gn.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const lr=4096;function cr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function pr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function hr(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let s="";for(let r=t;r<n;++r)s+=Dr[e[r]];return s}function dr(e,t,n){const r=e.slice(t,n);let s="";for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}function fr(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function mr(e,t,n,r,s,a){if(!Gn.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function gr(e,t,n,r,s){Sr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,n}function yr(e,t,n,r,s){Sr(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=o,o>>=8,e[n+2]=o,o>>=8,e[n+1]=o,o>>=8,e[n]=o,n+8}function br(e,t,n,r,s,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function xr(e,t,n,r,s){return t=+t,n>>>=0,s||br(e,0,n,4),Rn(e,t,n,r,23,4),n+4}function wr(e,t,n,r,s){return t=+t,n>>>=0,s||br(e,0,n,8),Rn(e,t,n,r,52,8),n+8}Gn.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,Gn.prototype),r},Gn.prototype.readUintLE=Gn.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||fr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return r},Gn.prototype.readUintBE=Gn.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||fr(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},Gn.prototype.readUint8=Gn.prototype.readUInt8=function(e,t){return e>>>=0,t||fr(e,1,this.length),this[e]},Gn.prototype.readUint16LE=Gn.prototype.readUInt16LE=function(e,t){return e>>>=0,t||fr(e,2,this.length),this[e]|this[e+1]<<8},Gn.prototype.readUint16BE=Gn.prototype.readUInt16BE=function(e,t){return e>>>=0,t||fr(e,2,this.length),this[e]<<8|this[e+1]},Gn.prototype.readUint32LE=Gn.prototype.readUInt32LE=function(e,t){return e>>>=0,t||fr(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Gn.prototype.readUint32BE=Gn.prototype.readUInt32BE=function(e,t){return e>>>=0,t||fr(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Gn.prototype.readBigUInt64LE=Fr((function(e){Ir(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Tr(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(s)<<BigInt(32))})),Gn.prototype.readBigUInt64BE=Fr((function(e){Ir(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Tr(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(s)})),Gn.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||fr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},Gn.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||fr(e,t,this.length);let r=t,s=1,a=this[e+--r];for(;r>0&&(s*=256);)a+=this[e+--r]*s;return s*=128,a>=s&&(a-=Math.pow(2,8*t)),a},Gn.prototype.readInt8=function(e,t){return e>>>=0,t||fr(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Gn.prototype.readInt16LE=function(e,t){e>>>=0,t||fr(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Gn.prototype.readInt16BE=function(e,t){e>>>=0,t||fr(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Gn.prototype.readInt32LE=function(e,t){return e>>>=0,t||fr(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Gn.prototype.readInt32BE=function(e,t){return e>>>=0,t||fr(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Gn.prototype.readBigInt64LE=Fr((function(e){Ir(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Tr(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),Gn.prototype.readBigInt64BE=Fr((function(e){Ir(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Tr(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),Gn.prototype.readFloatLE=function(e,t){return e>>>=0,t||fr(e,4,this.length),_n(this,e,!0,23,4)},Gn.prototype.readFloatBE=function(e,t){return e>>>=0,t||fr(e,4,this.length),_n(this,e,!1,23,4)},Gn.prototype.readDoubleLE=function(e,t){return e>>>=0,t||fr(e,8,this.length),_n(this,e,!0,52,8)},Gn.prototype.readDoubleBE=function(e,t){return e>>>=0,t||fr(e,8,this.length),_n(this,e,!1,52,8)},Gn.prototype.writeUintLE=Gn.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){mr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=1,a=0;for(this[t]=255&e;++a<n&&(s*=256);)this[t+a]=e/s&255;return t+n},Gn.prototype.writeUintBE=Gn.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){mr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=n-1,a=1;for(this[t+s]=255&e;--s>=0&&(a*=256);)this[t+s]=e/a&255;return t+n},Gn.prototype.writeUint8=Gn.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,1,255,0),this[t]=255&e,t+1},Gn.prototype.writeUint16LE=Gn.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Gn.prototype.writeUint16BE=Gn.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Gn.prototype.writeUint32LE=Gn.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Gn.prototype.writeUint32BE=Gn.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Gn.prototype.writeBigUInt64LE=Fr((function(e,t=0){return gr(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Gn.prototype.writeBigUInt64BE=Fr((function(e,t=0){return yr(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Gn.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);mr(this,e,t,n,r-1,-r)}let s=0,a=1,o=0;for(this[t]=255&e;++s<n&&(a*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},Gn.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);mr(this,e,t,n,r-1,-r)}let s=n-1,a=1,o=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},Gn.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Gn.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Gn.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Gn.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Gn.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||mr(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Gn.prototype.writeBigInt64LE=Fr((function(e,t=0){return gr(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Gn.prototype.writeBigInt64BE=Fr((function(e,t=0){return yr(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Gn.prototype.writeFloatLE=function(e,t,n){return xr(this,e,t,!0,n)},Gn.prototype.writeFloatBE=function(e,t,n){return xr(this,e,t,!1,n)},Gn.prototype.writeDoubleLE=function(e,t,n){return wr(this,e,t,!0,n)},Gn.prototype.writeDoubleBE=function(e,t,n){return wr(this,e,t,!1,n)},Gn.prototype.copy=function(e,t,n,r){if(!Gn.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},Gn.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Gn.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const a=Gn.isBuffer(e)?e:Gn.from(e,r),o=a.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=a[s%o]}return this};const kr={};function vr(e,t,n){kr[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Nr(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function Sr(e,t,n,r,s,a){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let s;throw s=a>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(a+1)}${r}`:`>= -(2${r} ** ${8*(a+1)-1}${r}) and < 2 ** ${8*(a+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new kr.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){Ir(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||Tr(t,e.length-(n+1))}(r,s,a)}function Ir(e,t){if("number"!=typeof e)throw new kr.ERR_INVALID_ARG_TYPE(t,"number",e)}function Tr(e,t,n){if(Math.floor(e)!==e)throw Ir(e,n),new kr.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new kr.ERR_BUFFER_OUT_OF_BOUNDS;throw new kr.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}vr("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),vr("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),vr("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=Nr(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=Nr(s)),s+="n"),r+=` It must be ${t}. Received ${s}`,r}),RangeError);const Er=/[^+/0-9A-Za-z-_]/g;function $r(e,t){let n;t=t||1/0;const r=e.length;let s=null;const a=[];for(let o=0;o<r;++o){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function Cr(e){return Cn(function(e){if((e=(e=e.split("=")[0]).trim().replace(Er,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Ar(e,t,n,r){let s;for(s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function _r(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Rr(e){return e!=e}const Dr=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let s=0;s<16;++s)t[r+s]=e[n]+e[s]}return t}();function Fr(e){return"undefined"==typeof BigInt?Or:e}function Or(){throw new Error("BigInt not supported")}var Mr=$n;async function Lr(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:Br(await Promise.all(r)),specs:n}}function zr(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=k(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=En[n.dtype],c=e.slice(s,s+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Zr()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=k(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=En[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=Tn(e,i,"float32"),o=Tn(r,i,"float32");n[t]=Sn(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=Tn(l,i,o))}return n}function Br(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Pr=void 0!==Mr&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Wr(e){return Pr?Mr.byteLength(e):new Blob([e]).size}function Vr(e){if(Pr)return Mr.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function Ur(e){if(Pr){const t=Mr.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function Gr(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Hr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function qr(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function jr(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function Kr(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),jr(e,n,r)}function Xr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Wr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Wr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Yr(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Zr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class Jr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Jr.instance&&(Jr.instance=new Jr),Jr.instance}static registerSaveRouter(e){Jr.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Jr.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Jr.getHandlers(e,"save")}static getLoadHandlers(e,t){return Jr.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Jr.getInstance().loadRouters:Jr.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Qr=e=>Jr.registerSaveRouter(e),es=e=>Jr.registerLoadRouter(e),ts=e=>Jr.getSaveHandlers(e),ns=(e,t)=>Jr.getLoadHandlers(e,t),rs="tensorflowjs",ss="models_store",as="model_info_store";function os(){if(!oe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function is(e){const t=e.result;t.createObjectStore(ss,{keyPath:"modelPath"}),t.createObjectStore(as,{keyPath:"modelPath"})}class us{constructor(e){if(this.indexedDB=os(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(rs,1);r.onupgradeneeded=()=>is(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(ss,"readonly"),r=t.objectStore(ss).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Xr(t),a=s.transaction(as,"readwrite");let o=a.objectStore(as);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction(ss,"readwrite");const i=u.objectStore(ss).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore(as);const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}us.URL_SCHEME="indexeddb://";const ls=e=>{return oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(us.URL_SCHEME)?(t=e.slice(us.URL_SCHEME.length),new us(t)):null;var t};Jr.registerSaveRouter(ls),Jr.registerLoadRouter(ls);class cs{constructor(){this.indexedDB=os()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(rs,1);n.onupgradeneeded=()=>is(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(as,"readonly"),a=s.objectStore(as).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(us.URL_SCHEME)?t.slice(us.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(rs,1);r.onupgradeneeded=()=>is(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(as,"readwrite"),o=a.objectStore(as),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction(ss,"readwrite");const r=u.objectStore(ss).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const ps="/",hs="tensorflowjs_models",ds="info",fs="model_topology",ms="weight_specs",gs="weight_data",ys="model_metadata";function bs(e){return{info:[hs,e,ds].join(ps),topology:[hs,e,fs].join(ps),weightSpecs:[hs,e,ms].join(ps),weightData:[hs,e,gs].join(ps),modelMetadata:[hs,e,ys].join(ps)}}function xs(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function ws(e){const t=e.split(ps);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(ps)}class ks{constructor(e){if(!oe().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=bs(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Xr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Vr(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw xs(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Ur(a),t}}ks.URL_SCHEME="localstorage://";const vs=e=>{return oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ks.URL_SCHEME)?(t=e.slice(ks.URL_SCHEME.length),new ks(t)):null;var t};Jr.registerSaveRouter(vs),Jr.registerLoadRouter(vs);class Ns{constructor(){y(oe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),y("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=hs+ps,n=ps+ds;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[ws(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=bs(e=(t=e).startsWith(ks.URL_SCHEME)?t.slice(ks.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return xs(n),r}}const Ss="://";class Is{constructor(){this.managers={}}static getInstance(){return null==Is.instance&&(Is.instance=new Is),Is.instance}static registerManager(e,t){y(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Ss)&&(e=e.slice(0,e.indexOf(Ss))),y(e.length>0,(()=>"scheme must not be an empty string."));const n=Is.getInstance();y(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Is.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Is.getInstance().managers)}}function Ts(e){if(-1===e.indexOf(Ss))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Is.getSchemes().join(",")}`);return{scheme:e.split(Ss)[0],path:e.split(Ss)[1]}}async function Es(e,t,n=!1){y(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Jr.getLoadHandlers(e);y(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),y(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Jr.getSaveHandlers(t);y(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),y(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=Ts(e).scheme,u=Ts(e).path,l=i===Ts(e).scheme,c=await s.load();n&&l&&await Is.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await Is.getManager(i).removeModel(u),p.modelArtifactsInfo}async function $s(){const e=Is.getSchemes(),t={};for(const n of e){const e=await Is.getManager(n).listModels();for(const r in e){t[n+Ss+r]=e[r]}}return t}async function Cs(e){const t=Ts(e);return Is.getManager(t.scheme).removeModel(t.path)}async function As(e,t){return Es(e,t,!1)}async function _s(e,t){return Es(e,t,!0)}class Rs{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&oe().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(oe().get("IS_BROWSER")){oe().setPlatform("browser",new Rs);try{Is.registerManager(ks.URL_SCHEME,new Ns)}catch(e){}try{Is.registerManager(us.URL_SCHEME,new cs)}catch(e){}}const Ds=()=>a("foUwZ");let Fs;function Os(e,t="float32",n){return t=t||"float32",Q(e),new Vt(e,t,n)}oe().get("IS_NODE")&&!oe().get("IS_BROWSER")&&oe().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=oe().global.fetch?oe().global.fetch(e,t):(null==Fs&&(Fs=Ds()),Fs(e,t))}now(){const e=ce.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Ms=Nn({cast_:function(e,t){const n=wn(e,"x","cast");if(!M(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return fn.runKernel(Te,r,s)}});const Ls=Nn({clone_:function(e){const t={x:wn(e,"x","clone","string_or_numeric")};return fn.runKernel(Ee,t)}});function zs(e,t=!1){console.log(e.toString(t))}dn();Gt={buffer:Os,cast:Ms,clone:Ls,print:zs};var Bs={};t(Bs,"copyModel",(()=>As)),t(Bs,"listModels",(()=>$s)),t(Bs,"moveModel",(()=>_s)),t(Bs,"removeModel",(()=>Cs)),t(Bs,"browserFiles",(()=>Us)),t(Bs,"browserHTTPRequest",(()=>Js)),t(Bs,"concatenateArrayBuffers",(()=>Gr)),t(Bs,"decodeWeights",(()=>zr)),t(Bs,"encodeWeights",(()=>Lr)),t(Bs,"fromMemory",(()=>na)),t(Bs,"fromMemorySync",(()=>ra)),t(Bs,"getLoadHandlers",(()=>ns)),t(Bs,"getModelArtifactsForJSON",(()=>Kr)),t(Bs,"getModelArtifactsForJSONSync",(()=>jr)),t(Bs,"getModelArtifactsInfoForJSON",(()=>Xr)),t(Bs,"getSaveHandlers",(()=>ts)),t(Bs,"getWeightSpecs",(()=>Yr)),t(Bs,"http",(()=>Zs)),t(Bs,"isHTTPScheme",(()=>Xs)),t(Bs,"loadWeights",(()=>qs)),t(Bs,"registerLoadRouter",(()=>es)),t(Bs,"registerSaveRouter",(()=>Qr)),t(Bs,"weightsLoaderFactory",(()=>js)),t(Bs,"withSaveHandler",(()=>sa)),t(Bs,"withSaveHandlerSync",(()=>aa));function Ps(e){return new Promise((e=>setTimeout(e))).then(e)}class Ws{constructor(e){if(!oe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ws.URL_SCHEME)&&(e=e.slice(Ws.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=qr(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Ps((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ps((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Xr(e)}}}}Ws.URL_SCHEME="downloads://";class Vs{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Kr(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,Gr(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Hr(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Hr(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Us(e){return new Vs(e)}function Gs(e,t,n,r){!function(e){y(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){y(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),y(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),y(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function Hs(e,t){null==t&&(t={});const n=null==t.fetchFunc?oe().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Gs(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Gs(s,t.onProgress,.5,1)}async function qs(e,t="",n,r){return js((e=>Hs(e,{requestInit:r})))(e,t,n)}function js(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=En[u]*k(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=zr(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Jr.registerSaveRouter((e=>oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ws.URL_SCHEME)?function(e="model"){return new Ws(e)}(e.slice(Ws.URL_SCHEME.length)):null));class Ks{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(y("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=oe().platform.fetch,y(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&y(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=qr(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Xr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Kr(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Yr(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,Gr(await Hs(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Xs(e){return null!=e.match(Ks.URL_SCHEME_REGEX)}Ks.URL_SCHEME_REGEX=/^https?:\/\//;const Ys=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Xs(e))):Xs(e),n)return Zs(e,t)}return null};function Zs(e,t){return new Ks(e,t)}function Js(e,t){return Zs(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */Jr.registerSaveRouter(Ys),Jr.registerLoadRouter(Ys);class Qs{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class ea{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class ta{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function na(e,t,n,r){const s=arguments;return new ta(ra(...s))}function ra(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Qs(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Qs({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Qs({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function sa(e){return new ea(e)}function aa(e){return new ea(e)}var oa={};t(oa,"spectral",(()=>zc)),t(oa,"signal",(()=>Bc)),t(oa,"image",(()=>Pc)),t(oa,"linalg",(()=>Wc)),t(oa,"losses",(()=>Vc)),t(oa,"sparse",(()=>Uc)),t(oa,"string",(()=>Gc)),t(oa,"abs",(()=>ei)),t(oa,"acos",(()=>ji)),t(oa,"acosh",(()=>Ki)),t(oa,"add",(()=>Sa)),t(oa,"addN",(()=>Xi)),t(oa,"all",(()=>Yi)),t(oa,"any",(()=>Zi)),t(oa,"argMax",(()=>Ji)),t(oa,"argMin",(()=>Qi)),t(oa,"asin",(()=>eu)),t(oa,"asinh",(()=>tu)),t(oa,"atan",(()=>nu)),t(oa,"atan2",(()=>ru)),t(oa,"atanh",(()=>su)),t(oa,"avgPool",(()=>au)),t(oa,"avgPool3d",(()=>ou)),t(oa,"basicLSTMCell",(()=>uu)),t(oa,"batchToSpaceND",(()=>lu)),t(oa,"batchNorm",(()=>pu)),t(oa,"batchNorm2d",(()=>hu)),t(oa,"batchNorm3d",(()=>du)),t(oa,"batchNorm4d",(()=>fu)),t(oa,"bincount",(()=>Mo)),t(oa,"broadcastArgs",(()=>mu)),t(oa,"broadcastTo",(()=>Uo)),t(oa,"buffer",(()=>Os)),t(oa,"cast",(()=>Ms)),t(oa,"ceil",(()=>gu)),t(oa,"clipByValue",(()=>yu)),t(oa,"clone",(()=>Ls)),t(oa,"complex",(()=>Sn)),t(oa,"concat",(()=>ia)),t(oa,"concat1d",(()=>bu)),t(oa,"concat2d",(()=>xu)),t(oa,"concat3d",(()=>wu)),t(oa,"concat4d",(()=>ku)),t(oa,"conv1d",(()=>vu)),t(oa,"conv2d",(()=>Fa)),t(oa,"conv2dTranspose",(()=>Nu)),t(oa,"conv3d",(()=>Su)),t(oa,"conv3dTranspose",(()=>Tu)),t(oa,"cos",(()=>Eu)),t(oa,"cosh",(()=>$u)),t(oa,"cumprod",(()=>Cu)),t(oa,"cumsum",(()=>Au)),t(oa,"denseBincount",(()=>_u)),t(oa,"depthToSpace",(()=>Ru)),t(oa,"depthwiseConv2d",(()=>Ya)),t(oa,"diag",(()=>Du)),t(oa,"dilation2d",(()=>Fu)),t(oa,"div",(()=>Po)),t(oa,"divNoNan",(()=>Mu)),t(oa,"dot",(()=>Lu)),t(oa,"einsum",(()=>zu)),t(oa,"elu",(()=>La)),t(oa,"equal",(()=>Ou)),t(oa,"erf",(()=>Bu)),t(oa,"euclideanNorm",(()=>Pu)),t(oa,"exp",(()=>Oi)),t(oa,"expandDims",(()=>di)),t(oa,"expm1",(()=>Wu)),t(oa,"eye",(()=>fi)),t(oa,"fill",(()=>uo)),t(oa,"floor",(()=>Vu)),t(oa,"floorDiv",(()=>Bo)),t(oa,"gather",(()=>Uu)),t(oa,"greater",(()=>zo)),t(oa,"greaterEqual",(()=>Ko)),t(oa,"imag",(()=>ua)),t(oa,"isFinite",(()=>Gu)),t(oa,"isInf",(()=>Hu)),t(oa,"isNaN",(()=>qu)),t(oa,"leakyRelu",(()=>za)),t(oa,"less",(()=>ju)),t(oa,"lessEqual",(()=>Lo)),t(oa,"linspace",(()=>Ku)),t(oa,"localResponseNormalization",(()=>Xu)),t(oa,"log",(()=>_i)),t(oa,"log1p",(()=>Mi)),t(oa,"logSigmoid",(()=>Zu)),t(oa,"logSoftmax",(()=>Ju)),t(oa,"logSumExp",(()=>zi)),t(oa,"logicalAnd",(()=>Xo)),t(oa,"logicalNot",(()=>Qu)),t(oa,"logicalOr",(()=>el)),t(oa,"logicalXor",(()=>tl)),t(oa,"lowerBound",(()=>al)),t(oa,"matMul",(()=>eo)),t(oa,"max",(()=>ni)),t(oa,"maxPool",(()=>ol)),t(oa,"maxPool3d",(()=>il)),t(oa,"maxPoolWithArgmax",(()=>ul)),t(oa,"maximum",(()=>ll)),t(oa,"mean",(()=>vi)),t(oa,"meshgrid",(()=>cl)),t(oa,"min",(()=>ri)),t(oa,"minimum",(()=>Ci)),t(oa,"mirrorPad",(()=>pl)),t(oa,"mod",(()=>hl)),t(oa,"moments",(()=>dl)),t(oa,"mul",(()=>ba)),t(oa,"multiRNNCell",(()=>fl)),t(oa,"multinomial",(()=>ml)),t(oa,"neg",(()=>mi)),t(oa,"notEqual",(()=>Ni)),t(oa,"oneHot",(()=>gl)),t(oa,"ones",(()=>Si)),t(oa,"onesLike",(()=>yl)),t(oa,"outerProduct",(()=>bl)),t(oa,"pad",(()=>xl)),t(oa,"pad1d",(()=>wl)),t(oa,"pad2d",(()=>kl)),t(oa,"pad3d",(()=>vl)),t(oa,"pad4d",(()=>Nl)),t(oa,"pool",(()=>Il)),t(oa,"pow",(()=>si)),t(oa,"prelu",(()=>Ba)),t(oa,"print",(()=>zs)),t(oa,"prod",(()=>Tl)),t(oa,"raggedGather",(()=>El)),t(oa,"raggedTensorToTensor",(()=>$l)),t(oa,"rand",(()=>Cl)),t(oa,"randomGamma",(()=>Wl)),t(oa,"randomNormal",(()=>Vl)),t(oa,"randomStandardNormal",(()=>Ul)),t(oa,"randomUniform",(()=>Gl)),t(oa,"range",(()=>Ho)),t(oa,"real",(()=>la)),t(oa,"reciprocal",(()=>Hl)),t(oa,"relu",(()=>Pa)),t(oa,"relu6",(()=>Wa)),t(oa,"reshape",(()=>ca)),t(oa,"reverse",(()=>xa)),t(oa,"reverse1d",(()=>ql)),t(oa,"reverse2d",(()=>jl)),t(oa,"reverse3d",(()=>Kl)),t(oa,"reverse4d",(()=>Xl)),t(oa,"round",(()=>Vo)),t(oa,"rsqrt",(()=>Yl)),t(oa,"scalar",(()=>wa)),t(oa,"selu",(()=>Zl)),t(oa,"separableConv2d",(()=>Jl)),t(oa,"setdiff1dAsync",(()=>Ql)),t(oa,"sigmoid",(()=>Va)),t(oa,"sign",(()=>ec)),t(oa,"sin",(()=>tc)),t(oa,"sinh",(()=>nc)),t(oa,"slice",(()=>pa)),t(oa,"slice1d",(()=>rc)),t(oa,"slice2d",(()=>sc)),t(oa,"slice3d",(()=>ac)),t(oa,"slice4d",(()=>oc)),t(oa,"softmax",(()=>ic)),t(oa,"softplus",(()=>Yu)),t(oa,"spaceToBatchND",(()=>Sl)),t(oa,"fft",(()=>ma)),t(oa,"ifft",(()=>ya)),t(oa,"irfft",(()=>ka)),t(oa,"rfft",(()=>ga)),t(oa,"split",(()=>ha)),t(oa,"sqrt",(()=>ai)),t(oa,"square",(()=>oi)),t(oa,"squaredDifference",(()=>Di)),t(oa,"squeeze",(()=>li)),t(oa,"stack",(()=>Yo)),t(oa,"step",(()=>Ua)),t(oa,"stridedSlice",(()=>uc)),t(oa,"sub",(()=>Wo)),t(oa,"sum",(()=>Ga)),t(oa,"tan",(()=>lc)),t(oa,"tanh",(()=>iu)),t(oa,"tensor",(()=>Tn)),t(oa,"tensor1d",(()=>ro)),t(oa,"tensor2d",(()=>lo)),t(oa,"tensor3d",(()=>cc)),t(oa,"tensor4d",(()=>pc)),t(oa,"tensor5d",(()=>hc)),t(oa,"tensor6d",(()=>dc)),t(oa,"tile",(()=>mo)),t(oa,"topk",(()=>fc)),t(oa,"truncatedNormal",(()=>mc)),t(oa,"unique",(()=>gc)),t(oa,"unsortedSegmentSum",(()=>yc)),t(oa,"unstack",(()=>Zo)),t(oa,"upperBound",(()=>bc)),t(oa,"variable",(()=>xc)),t(oa,"where",(()=>Go)),t(oa,"whereAsync",(()=>kc)),t(oa,"zeros",(()=>da)),t(oa,"zerosLike",(()=>fa)),t(oa,"op",(()=>Nn)),t(oa,"OP_SCOPE_SUFFIX",(()=>vn)),t(oa,"fused",(()=>va));const ia=Nn({concat_:function(e,t=0){y(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=kn(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Ls(n[0]);const r=n,s={axis:t};return fn.runKernel("Concat",r,s)}});const ua=Nn({imag_:function(e){const t={input:wn(e,"input","imag")};return fn.runKernel("Imag",t)}});const la=Nn({real_:function(e){const t={input:wn(e,"input","real")};return fn.runKernel("Real",t)}});const ca=Nn({reshape_:function(e,t){const n={x:wn(e,"x","reshape","string_or_numeric")},r={shape:t};return fn.runKernel("Reshape",n,r)}});const pa=Nn({slice_:function(e,t,n){const r=wn(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return fn.runKernel("Slice",s,a)}});const ha=Nn({split_:function(e,t,n=0){const r={x:wn(e,"x","split")},s={numOrSizeSplits:t,axis:n};return fn.runKernel("SplitV",r,s)}});function da(e,t="float32"){if("complex64"===t){const t=da(e,"float32"),n=da(e,"float32");return Sn(t,n)}const n=Z(k(e),t);return fn.makeTensor(n,e,t)}const fa=Nn({zerosLike_:function(e){const t={x:wn(e,"x","zerosLike")};return fn.runKernel("ZerosLike",t)}});const ma=Nn({fft_:function(e){y("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return fn.runKernel("FFT",t)}});const ga=Nn({rfft_:function(e,t){y("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=pa(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=ia([e,da(r)],e.shape.length-1),n=t}else s=e;const a=fa(s),o=ca(Sn(s,a),[r,n]),i=ma(o),u=Math.floor(n/2)+1,l=la(i),c=ua(i),p=ha(l,[u,n-u],l.shape.length-1),h=ha(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,ca(Sn(p[0],h[0]),d)}});const ya=Nn({ifft_:function(e){y("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return fn.runKernel("IFFT",t)}});const ba=Nn({mul_:function(e,t){let n=wn(e,"a","mul"),r=wn(t,"b","mul");[n,r]=on(n,r);const s={a:n,b:r};return fn.runKernel("Multiply",s)}});const xa=Nn({reverse_:function(e,t){const n={x:wn(e,"x","reverse")},r={dims:t};return fn.runKernel("Reverse",n,r)}});function wa(e,t){if((z(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&z(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return In(e,[],[],t)}const ka=Nn({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=ca(e,[n,t]);r=ya(s)}else{const s=[n,2*(t-1)],a=ca(la(e),[n,t]),o=ca(ua(e),[n,t]),i=xa(pa(a,[0,1],[n,t-2]),1),u=ba(xa(pa(o,[0,1],[n,t-2]),1),wa(-1)),l=ia([a,i],1),c=ia([o,u],1),p=ca(Sn(l,c),[s[0],s[1]]);r=ya(p)}if(r=la(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=ca(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var va={};function Na(e){return fn.customGrad(e)}t(va,"conv2d",(()=>Xa)),t(va,"depthwiseConv2d",(()=>Qa)),t(va,"matMul",(()=>to));const Sa=Nn({add_:function(e,t){let n=wn(e,"a","add"),r=wn(t,"b","add");[n,r]=on(n,r);const s={a:n,b:r};return fn.runKernel("Add",s)}});function Ia(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}function Ta(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[h,d,,f]=t,[m,g]=$a(n),[y,b]=$a(r),x=Ca(h,y),w=Ca(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Ea(e,t,n));const a=e[0],o=e[1],i=Aa((a-t+2*r)/n+1,s),u=Aa((o-t+2*r)/n+1,s);return[i,u]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);l={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Aa((t-a+h+d)/r+1,i),p=Aa((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[u,S,v,N]:"channelsLast"===i&&(I=[u,v,N,S]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function Ea(e,t,n,r=1){const s=Ca(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function $a(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Ca(e,t){return t<=1?e:e+(e-1)*(t-1)}function Aa(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function _a(e){const[t,n,r]=$a(e);return 1===t&&1===n&&1===r}function Ra(e,t){return _a(e)||_a(t)}function Da(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)y(S(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{y(S(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const Fa=Nn({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=wn(e,"x","conv2d","float32"),u=wn(t,"filter","conv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=ca(i,[1,i.shape[0],i.shape[1],i.shape[2]])),y(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),y(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),Da("conv2d",r,o);const p="NHWC"===s?l.shape[3]:l.shape[1];y(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),y(Ra(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=fn.runKernel("Conv2D",h,d);return c?ca(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Oa=Nn({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=ca(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ca(t,[1,t.shape[0],t.shape[1],t.shape[2]])),y(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),y(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),y(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];y(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),y(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Da("conv2dDerFilter",s,o);const p={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return fn.runKernel("Conv2DBackpropFilter",p,h)}});const Ma=Nn({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){y(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=ca(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),y(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),y(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),y(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];y(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),y(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Da("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=fn.runKernel("Conv2DBackpropInput",h,d);return l?ca(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const La=Nn({elu_:function(e){const t={x:wn(e,"x","elu","float32")};return fn.runKernel("Elu",t)}});const za=Nn({leakyRelu_:function(e,t=.2){const n={x:wn(e,"x","leakyRelu")},r={alpha:t};return fn.runKernel("LeakyRelu",n,r)}});const Ba=Nn({prelu_:function(e,t){const n={x:wn(e,"x","prelu"),alpha:wn(t,"alpha","prelu")};return fn.runKernel("Prelu",n)}});const Pa=Nn({relu_:function(e){const t={x:wn(e,"x","relu")};return fn.runKernel("Relu",t)}});const Wa=Nn({relu6_:function(e){const t={x:wn(e,"x","relu6")};return fn.runKernel("Relu6",t)}});const Va=Nn({sigmoid_:function(e){const t={x:wn(e,"x","sigmoid","float32")};return fn.runKernel("Sigmoid",t)}});const Ua=Nn({step_:function(e,t=0){const n={x:wn(e,"x","step")},r={alpha:t};return fn.runKernel("Step",n,r)}});const Ga=Nn({sum_:function(e,t=null,n=!1){let r=wn(e,"x","sum");"bool"===r.dtype&&(r=Ms(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return fn.runKernel("Sum",s,a)}});function Ha(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return ba(e,Ua(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function qa(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(e.shape,t.shape);return r.length>0&&(n=Ga(n,r)),ca(n,e.shape)}function ja(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Pa(e);if("elu"===t)return La(e);if("relu6"===t)return Wa(e);if("prelu"===t)return Ba(e,n);if("leakyrelu"===t)return za(e,r);if("sigmoid"===t)return Va(e);throw new Error(`Unknown fused activation ${t}.`)}const Ka=(e,t)=>!(e>0)||"linear"===t;const Xa=Nn({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===Ka(fn.state.gradientDepth,u)){y("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=Fa(e,t,n,r,s,a,o);return null!=i&&(p=Sa(p,i)),ja(p,u,l,c)}const p=wn(e,"x","conv2d","float32"),h=wn(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=ca(p,[1,p.shape[0],p.shape[1],p.shape[2]])),y(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),y(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),Da("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];y(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),y(Ra(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=Ta(d.shape,h.shape,n,a,r,o);let b,x;if(null!=i&&(b=wn(i,"bias","fused conv2d"),[b]=on(b,p),"NHWC"===s?Ia(g.outShape,b.shape):(y(b.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`)),y(0===b.shape.length||b.shape[0]===g.outChannels||1===b.shape[0],(()=>`Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(y(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)y(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Ia(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}x=wn(l,"prelu weights","fused conv2d")}const w=(e,t)=>{y("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,l,c]=t,p=Ha(e,l,u);y(_a(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Ma(i.shape,p,o,n,r),Oa(i,p,o.shape,n,r)];if(null!=c){const e=qa(c,p);h.push(e)}return h},k={x:d,filter:h,bias:b,preluActivationWeights:x},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Na(((e,t,n)=>{let r=fn.runKernel(_e,k,v);return n([t,e,r]),f&&(r=ca(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}));return e(d,h)}{const e=Na(((e,t,n,r)=>{let s=fn.runKernel(_e,k,v);return r([t,e,s,n]),f&&(s=ca(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}));return e(d,h,b)}}});const Ya=Nn({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=wn(e,"x","depthwiseConv2d","float32"),u=wn(t,"filter","depthwiseConv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=ca(i,[1,i.shape[0],i.shape[1],i.shape[2]])),y(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),y(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const p="NHWC"===s?l.shape[3]:l.shape[1];y(p===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Da("depthwiseConv2d",r,o);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=fn.runKernel("DepthwiseConv2dNative",h,d);return c?ca(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Za=Nn({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=ca(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ca(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return fn.runKernel("DepthwiseConv2dNativeBackpropFilter",l,c)}});const Ja=Nn({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=ca(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=fn.runKernel("DepthwiseConv2dNativeBackpropInput",l,c);return u?ca(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Qa=Nn({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===Ka(fn.state.gradientDepth,u)){let p=Ya(e,t,n,r,s,a,o);return null!=i&&(p=Sa(p,i)),ja(p,u,l,c)}const p=wn(e,"x","depthwiseConv2d","float32"),h=wn(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=ca(p,[1,p.shape[0],p.shape[1],p.shape[2]])),y(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),y(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),y(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),y(Ra(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Da("fused depthwiseConv2d",r,o);const m=Ta(d.shape,h.shape,n,a,r,o,!0);let g,b;null!=i&&(g=wn(i,"bias","fused conv2d"),[g]=on(g,p),Ia(m.outShape,g.shape)),null!=l&&(b=wn(l,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{y(_a(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,l,c]=t,p=Ha(e,l,u),h=Ja(i.shape,p,s,n,r,a,o),d=Za(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,qa(g,p)]}return[h,d]},w={x:d,filter:h,bias:g,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Na(((e,t,n)=>{let r=fn.runKernel(Re,w,k);return n([t,e,r]),f&&(r=ca(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=Na(((e,t,n,r)=>{let s=fn.runKernel(Re,w,k);return r([t,e,s,n]),f&&(s=ca(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,g)}}});const eo=Nn({matMul_:function(e,t,n=!1,r=!1){let s=wn(e,"a","matMul"),a=wn(t,"b","matMul");[s,a]=on(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return fn.runKernel("BatchMatMul",o,i)}});const to=Nn({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Ka(fn.state.gradientDepth,a)){let u=eo(e,t,n,r);return null!=s&&(u=Sa(u,s)),ja(u,a,o,i)}let u=wn(e,"a","fused matMul"),l=wn(t,"b","fused matMul");[u,l]=on(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],p=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=k(f),b=k(m);y(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const x=Ia(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,d]),w=ca(u,n?[g,c,h]:[g,h,c]),v=ca(l,r?[b,d,p]:[b,p,d]);let N,S;null!=s&&(N=wn(s,"bias","fused matMul"),[N]=on(N,u),Ia(x,N.shape)),null!=o&&(S=wn(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,u,l]=t,c=Ha(ca(e,u.shape),u,a);let p,h;if(n||r?!n&&r?(p=eo(c,i,!1,!1),h=eo(c,o,!0,!1)):n&&!r?(p=eo(i,c,!1,!0),h=eo(o,c,!1,!1)):(p=eo(i,c,!0,!0),h=eo(c,o,!0,!0)):(p=eo(c,i,!1,!0),h=eo(o,c,!0,!1)),null!=s){return[p,h,qa(l,c)]}return[p,h]},T={a:w,b:v,bias:N,preluActivationWeights:S},E={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=Na(((e,t,n)=>{const r=fn.runKernel(Ae,T,E);return n([e,t,r]),{value:ca(r,x),gradFunc:I}}));return e(w,v)}{const e=Na(((e,t,n,r)=>{const s=fn.runKernel(Ae,T,E);return r([e,t,s,n]),{value:ca(s,x),gradFunc:I}}));return e(w,v,N)}}});var no={};function ro(e,t){x(e);const n=yn(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return In(e,null,n,t)}function so(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function ao(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return ro(s,"float32")}t(no,"enclosingPowerOfTwo",(()=>so)),t(no,"cosineWindow",(()=>ao));const oo=Nn({hammingWindow_:function(e){return ao(e,.54,.46)}});const io=Nn({hannWindow_:function(e){return ao(e,.5,.5)}});function uo(e,t,n){const r={shape:e,value:t,dtype:n};return fn.runKernel("Fill",{},r)}function lo(e,t,n){if(x(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=yn(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return In(e,t,r,n)}const co=Nn({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(pa(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=ia([pa(e,a,t-r),uo([r],s)]);o.push(i),a+=n}return 0===o.length?lo([],[0,t]):ca(ia(o),[o.length,t])}});const po=Nn({stft_:function(e,t,n,r,s=io){null==r&&(r=so(t));const a=co(e,t,n),o=ba(a,s(t));return ga(o,r)}});const ho=Nn({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=wn(e,"image","cropAndResize"),i=wn(t,"boxes","cropAndResize","float32"),u=wn(n,"boxInd","cropAndResize","int32"),l=i.shape[0];y(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),y(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),y(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),y(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),y(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),y("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return fn.runKernel("CropAndResize",c,p)}});const fo=Nn({flipLeftRight_:function(e){const t=wn(e,"image","flipLeftRight","float32");y(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return fn.runKernel("FlipLeftRight",n,{})}});const mo=Nn({tile_:function(e,t){const n=wn(e,"x","tile","string_or_numeric");y(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return fn.runKernel($e,r,s)}});const go=Nn({grayscaleToRGB_:function(e){const t=wn(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];y(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),y(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,mo(t,s)}});const yo=Nn({rotateWithOffset_:function(e,t,n=0,r=.5){const s=wn(e,"image","rotateWithOffset","float32");y(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return fn.runKernel("RotateWithOffset",a,o)}});function bo(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),y(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),y(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),y(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),y(1===t.rank,(()=>"scores must be a 1D tensor")),y(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),y(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const xo=Nn({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=wn(e,"boxes","nonMaxSuppression","float32"),o=wn(t,"scores","nonMaxSuppression","float32"),i=bo(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return fn.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function wo(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||ko)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function ko(e,t){return e>t?1:e<t?-1:0}function vo(e,t,n,r,s){return Io(e,t,n,r,s,0)}function No(e,t,n,r,s,a){return Io(e,t,n,r,s,0,!1,a,!0)}function So(e,t,n,r,s,a){return Io(e,t,n,r,s,a,!0)}function Io(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort($o);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=To(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*Eo(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&wo(l,t,$o))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),u&&(m.validOutputs=d),m}function To(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),f=(p-l)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(u,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Eo(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function $o(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Co=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=wn(e,"boxes","nonMaxSuppressionAsync"),o=wn(t,"scores","nonMaxSuppressionAsync"),i=bo(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=vo(l,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),ro(p,"int32")};const Ao=Nn({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=wn(e,"boxes","nonMaxSuppression"),i=wn(t,"scores","nonMaxSuppression"),u=bo(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=fn.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const _o=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=wn(e,"boxes","nonMaxSuppressionAsync"),i=wn(t,"scores","nonMaxSuppressionAsync"),u=bo(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:h,selectedScores:d}=So(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:ro(h,"int32"),selectedScores:ro(d)}};const Ro=Nn({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=wn(e,"boxes","nonMaxSuppression"),i=wn(t,"scores","nonMaxSuppression"),u=bo(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=fn.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Do=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=wn(e,"boxes","nonMaxSuppressionAsync"),i=wn(t,"scores","nonMaxSuppressionAsync"),u=bo(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=No(h,d,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:ro(f,"int32"),validOutputs:wa(m,"int32")}};const Fo=Nn({resizeBilinear_:function(e,t,n=!1,r=!1){const s=wn(e,"images","resizeBilinear");y(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),y(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),y(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ca(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=fn.runKernel("ResizeBilinear",i,u);return o?ca(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Oo=Nn({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=wn(e,"images","resizeNearestNeighbor");y(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),y(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),y("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),y(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ca(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=fn.runKernel("ResizeNearestNeighbor",i,u);return o?ca(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Mo=Nn({bincount_:function(e,t,n){const r=wn(e,"x","bincount"),s=wn(t,"weights","bincount");y("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),y(n>=0,(()=>`size must be non-negative, but got ${n}.`)),y(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return fn.runKernel("Bincount",a,o)}});const Lo=Nn({lessEqual_:function(e,t){let n=wn(e,"a","lessEqual","string_or_numeric"),r=wn(t,"b","lessEqual","string_or_numeric");[n,r]=on(n,r),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("LessEqual",s)}});const zo=Nn({greater_:function(e,t){let n=wn(e,"a","greater","string_or_numeric"),r=wn(t,"b","greater","string_or_numeric");[n,r]=on(n,r),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("Greater",s)}});const Bo=Nn({floorDiv_:function(e,t){let n=wn(e,"a","floorDiv"),r=wn(t,"b","floorDiv");[n,r]=on(n,r);const s={a:n,b:r};return fn.runKernel("FloorDiv",s)}});const Po=Nn({div_:function(e,t){let n=wn(e,"a","div"),r=wn(t,"b","div");if([n,r]=on(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Bo(n,r);const s={a:n,b:r};return fn.runKernel("RealDiv",s,{})}});const Wo=Nn({sub_:function(e,t){let n=wn(e,"a","sub"),r=wn(t,"b","sub");[n,r]=on(n,r);const s={a:n,b:r};return fn.runKernel("Sub",s)}});const Vo=Nn({round_:function(e){const t={x:wn(e,"x","round")};return fn.runKernel("Round",t)}});const Uo=Nn({broadcastTo_:function(e,t){let n=wn(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ca(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Ls(n);const o={x:n},i={reps:a};return fn.runKernel($e,o,i)}});const Go=Nn({where_:function(e,t,n){const r=wn(t,"a","where"),s=wn(n,"b","where"),a=wn(e,"condition","where","bool"),o=Ia(Ia(a.shape,r.shape),s.shape),i={condition:Uo(a,o),t:Uo(r,o),e:Uo(s,o)};return fn.runKernel("Select",i)}});function Ho(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return fn.runKernel("Range",{},s)}const qo=Nn({threshold_:function(e,t="binary",n=!1,r=.5){const s=wn(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,c=ba(ro([r]),255);if(y(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),y(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),y("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),y("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=ha(s,[1,1,1],-1);const e=ba(o,.2989),t=ba(i,.587),n=ba(u,.114);l=Sa(Sa(e,t),n)}else l=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,u=ro([-1]),l=ro([0]),c=ro([0]);for(let p=0;p<e.size-1;p++){n=pa(e,0,p+1),r=pa(e,p+1),o=Po(Ga(n),t),i=Po(Ga(r),t);const h=Ga(ba(n,Ho(0,n.size)));s=Po(h,Ga(n));const d=uo(r.shape,n.size),f=Sa(Ho(0,r.size),d),m=ba(r,f);a=Po(Ga(m),Ga(r));const g=Wo(s,a),y=Wo(s,a),b=ba(o,i);c=ba(ba(b,g),y);const x=zo(c,l);l=Go(x,c,l),u=Go(x,ro([p]),u)}return u}(Mo(Ms(Vo(l),"int32"),Tn([]),256),a)}const p=n?Lo(l,c):zo(l,c);return Ms(ba(p,255),"int32")}});const jo=Nn({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=wn(e,"image","transform","float32"),i=wn(t,"transforms","transform","float32");y(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),y(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),y(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return fn.runKernel("Transform",u,l)}});const Ko=Nn({greaterEqual_:function(e,t){let n=wn(e,"a","greaterEqual","string_or_numeric"),r=wn(t,"b","greaterEqual","string_or_numeric");[n,r]=on(n,r),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("GreaterEqual",s)}});const Xo=Nn({logicalAnd_:function(e,t){const n=wn(e,"a","logicalAnd","bool"),r=wn(t,"b","logicalAnd","bool");Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("LogicalAnd",s)}});const Yo=Nn({stack_:function(e,t=0){const n=kn(e,"tensors","stack","string_or_numeric");y(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&y(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return fn.runKernel("Pack",r,s)}});const Zo=Nn({unstack_:function(e,t=0){const n=wn(e,"x","unstack","string_or_numeric");y(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return fn.runKernel("Unpack",r,s)}});const Jo=Nn({bandPart_:function(e,t,n){y(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),y(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=wn(e,"a","bandPart");y(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=ca(Ho(0,a,1,"int32"),[-1,1]),u=Ho(0,o,1,"int32"),l=Wo(i,u),c=Xo(Lo(l,wa(+t,"int32")),Ko(l,wa(-n,"int32"))),p=da([a,o],r.dtype);return ca(Yo(Zo(ca(r,[-1,a,o])).map((e=>Go(c,e,p)))),s)}});var Qo={};t(Qo,"norm",(()=>ui));const ei=Nn({abs_:function(e){const t=wn(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return fn.runKernel("ComplexAbs",e)}{const e={x:t};return fn.runKernel("Abs",e)}}});function ti(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}(e,t.map((e=>1)),t)}const ni=Nn({max_:function(e,t=null,n=!1){const r={x:wn(e,"x","max")},s={reductionIndices:t,keepDims:n};return fn.runKernel("Max",r,s)}});const ri=Nn({min_:function(e,t=null,n=!1){const r={x:wn(e,"x","min")},s={axis:t,keepDims:n};return fn.runKernel("Min",r,s)}});const si=Nn({pow_:function(e,t){let n=wn(e,"base","pow"),r=wn(t,"exp","pow");[n,r]=on(n,r);const s={a:n,b:r};return fn.runKernel("Pow",s)}});const ai=Nn({sqrt_:function(e){const t={x:wn(e,"x","sqrt","float32")};return fn.runKernel("Sqrt",t)}});const oi=Nn({square_:function(e){const t=wn(e,"x","square");return fn.runKernel("Square",{x:t},{})}});function ii(e,t,n=null){if(0===e.rank)return ei(e);if(1!==e.rank&&null===n)return ii(ca(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Ga(ei(e),n);if(t===1/0)return ni(ei(e),n);if(t===-1/0)return ri(ei(e),n);if("euclidean"===t||2===t)return ai(Ga(si(ei(e),wa(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return ni(Ga(ei(e),n[0]),n[1]-1);if(t===1/0)return ni(Ga(ei(e),n[1]),n[0]);if(t===-1/0)return ri(Ga(ei(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ai(Ga(oi(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ui=Nn({norm_:function(e,t="euclidean",n=null,r=!1){const s=ii(e=wn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=_(n,e.shape);a=ti(s.shape,t)}return ca(s,a)}});const li=Nn({squeeze_:function(e,t){const n=wn(e,"x","squeeze","string_or_numeric");return ca(n,R(n.shape,t).newShape)}});const ci=Nn({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,y(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)y(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=ha(e,e.shape[0],0).map((e=>li(e,[0])));y(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(fn.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=ba(Ga(ba(n[r],e)),n[r]);e=Wo(e,t)}return Po(e,ui(e,"euclidean"))})));return t?Yo(n,0):n}});function pi(e,t){return fn.tidy(e,t)}function hi(e){return fn.keep(e)}Ht=function(e){oe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const di=Nn({expandDims_:function(e,t=0){const n=wn(e,"x","expandDims","string_or_numeric");y(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return fn.runKernel("ExpandDims",r,s)}});const fi=Nn({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Os([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=ca(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return mo(di(o,0),[n[0],1,1]);if(2===n.length)return mo(di(di(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return mo(di(di(di(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const mi=Nn({neg_:function(e){const t={x:wn(e,"x","neg")};return fn.runKernel("Neg",t)}});var gi={};t(gi,"transpose",(()=>yi));const yi=Nn({transpose_:function(e,t,n){const r=wn(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),y(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{y(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?pi((()=>{let e=la(r),t=ua(r);return e=fn.runKernel(Ce,{x:e},a),t=fn.runKernel(Ce,{x:t},a),n&&(t=mi(t)),Sn(e,t)})):fn.runKernel(Ce,s,a)}});function bi(e,t=!1){return fn.tidy((()=>{y(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=fi(n),a=Ls(e);const o=lo([[1]],[1,1]);let i=Ls(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=fn.tidy((()=>{const t=pa(a,[e,e],[n-e,1]),u=ui(t),l=pa(a,[e,e],[1,1]),c=Go(zo(l,0),lo([[-1]]),lo([[1]])),p=Wo(l,ba(c,u)),h=Po(t,p);i=1===h.shape[0]?Ls(o):ia([o,pa(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=mi(Po(eo(c,p),u)),f=pa(a,[e,0],[n-e,r]),m=ba(d,i),g=yi(i);if(0===e)a=Wo(f,eo(m,eo(g,f)));else{const t=Wo(f,eo(m,eo(g,f)));a=ia([pa(a,[0,0],[e,r]),t],0)}const y=yi(m),b=pa(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Wo(b,eo(eo(b,i),y));else{const t=Wo(b,eo(eo(b,i),y));s=ia([pa(s,[0,0],[n,e]),t],1)}return[i,a,s]})),un([t,u,l]).forEach((e=>e.dispose()))}return!t&&n>r&&(s=pa(s,[0,0],[n,r]),a=pa(a,[0,0],[r,r])),[s,a]}))}const xi=Nn({qr_:function(e,t=!1){if(y(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return bi(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Zo(ca(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=bi(e,t);s.push(n),a.push(r)}));return[ca(Yo(s,0),e.shape),ca(Yo(a,0),e.shape)]}}});var wi,ki;(ki=wi||(wi={}))[ki.NONE=0]="NONE",ki[ki.MEAN=1]="MEAN",ki[ki.SUM=2]="SUM",ki[ki.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const vi=Nn({mean_:function(e,t=null,n=!1){const r={x:wn(e,"x","mean")},s={axis:t,keepDims:n};return fn.runKernel("Mean",r,s)}});const Ni=Nn({notEqual_:function(e,t){let n=wn(e,"a","notEqual","string_or_numeric"),r=wn(t,"b","notEqual","string_or_numeric");[n,r]=on(n,r),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("NotEqual",s)}});function Si(e,t="float32"){if("complex64"===t){const t=Si(e,"float32"),n=da(e,"float32");return Sn(t,n)}const n=Y(k(e),t);return fn.makeTensor(n,e,t)}const Ii=Nn({computeWeightedLoss_:function(e,t,n=wi.SUM_BY_NONZERO_WEIGHTS){const r=wn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=wn(t,"weights","computeWeightedLoss"));const a=null==s?r:ba(r,s);if(n===wi.NONE)return a;if(n===wi.SUM)return Ga(a);if(n===wi.MEAN){if(null==s)return vi(a);{const e=r.size/s.size,t=Po(Ga(a),Ga(s));return e>1?Po(t,wa(e)):t}}if(n===wi.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Po(Ga(a),wa(r.size));{const e=ba(s,Si(r.shape)),t=Ms(Ga(Ni(e,wa(0))),"float32");return Po(Ga(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const Ti=Nn({absoluteDifference_:function(e,t,n,r=wi.SUM_BY_NONZERO_WEIGHTS){const s=wn(e,"labels","absoluteDifference"),a=wn(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=wn(n,"weights","absoluteDifference")),b(s.shape,a.shape,"Error in absoluteDifference: ");const i=ei(Wo(s,a));return Ii(i,o,r)}});const Ei=Nn({cosineDistance_:function(e,t,n,r,s=wi.SUM_BY_NONZERO_WEIGHTS){const a=wn(e,"labels","cosineDistance"),o=wn(t,"predictions","cosineDistance");let i=null;null!=r&&(i=wn(r,"weights","cosineDistance")),b(a.shape,o.shape,"Error in cosineDistance: ");const u=wa(1),l=Wo(u,Ga(ba(a,o),n,!0));return Ii(l,i,s)}});const $i=Nn({hingeLoss_:function(e,t,n,r=wi.SUM_BY_NONZERO_WEIGHTS){let s=wn(e,"labels","hingeLoss");const a=wn(t,"predictions","hingeLoss");let o=null;null!=n&&(o=wn(n,"weights","hingeLoss")),b(s.shape,a.shape,"Error in hingeLoss: ");const i=wa(1);s=Wo(ba(wa(2),s),i);const u=Pa(Wo(i,ba(s,a)));return Ii(u,o,r)}});const Ci=Nn({minimum_:function(e,t){let n=wn(e,"a","minimum"),r=wn(t,"b","minimum");[n,r]=on(n,r),"bool"===n.dtype&&(n=Ms(n,"int32"),r=Ms(r,"int32")),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("Minimum",s)}});const Ai=Nn({huberLoss_:function(e,t,n,r=1,s=wi.SUM_BY_NONZERO_WEIGHTS){const a=wn(e,"labels","huberLoss"),o=wn(t,"predictions","huberLoss");let i=null;null!=n&&(i=wn(n,"weights","huberLoss")),b(a.shape,o.shape,"Error in huberLoss: ");const u=wa(r),l=ei(Wo(o,a)),c=Ci(l,u),p=Wo(l,c),h=Sa(ba(wa(.5),oi(c)),ba(u,p));return Ii(h,i,s)}});const _i=Nn({log_:function(e){const t={x:wn(e,"x","log","float32")};return fn.runKernel("Log",t)}});const Ri=Nn({logLoss_:function(e,t,n,r=1e-7,s=wi.SUM_BY_NONZERO_WEIGHTS){const a=wn(e,"labels","logLoss"),o=wn(t,"predictions","logLoss");let i=null;null!=n&&(i=wn(n,"weights","logLoss")),b(a.shape,o.shape,"Error in logLoss: ");const u=wa(1),l=wa(r),c=mi(ba(a,_i(Sa(o,l)))),p=ba(Wo(u,a),_i(Sa(Wo(u,o),l))),h=Wo(c,p);return Ii(h,i,s)}});const Di=Nn({squaredDifference_:function(e,t){let n=wn(e,"a","squaredDifference"),r=wn(t,"b","squaredDifference");[n,r]=on(n,r),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("SquaredDifference",s,{})}});const Fi=Nn({meanSquaredError_:function(e,t,n,r=wi.SUM_BY_NONZERO_WEIGHTS){const s=wn(e,"labels","meanSquaredError"),a=wn(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=wn(n,"weights","meanSquaredError")),b(s.shape,a.shape,"Error in meanSquaredError: ");const i=Di(s,a);return Ii(i,o,r)}});const Oi=Nn({exp_:function(e){const t={x:wn(e,"x","exp")};return fn.runKernel("Exp",t)}});const Mi=Nn({log1p_:function(e){const t={x:wn(e,"x","log1p")};return fn.runKernel("Log1p",t)}});const Li=Nn({sigmoidCrossEntropy_:function(e,t,n,r=0,s=wi.SUM_BY_NONZERO_WEIGHTS){let a=wn(e,"multiClassLabels","sigmoidCrossEntropy");const o=wn(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=wn(n,"weights","sigmoidCrossEntropy")),b(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=wa(r),t=wa(1),n=wa(.5);a=Sa(ba(a,Wo(t,e)),ba(n,e))}const u=function(e,t){const n=wn(e,"labels","sigmoidCrossEntropyWithLogits"),r=wn(t,"logits","sigmoidCrossEntropyWithLogits");b(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Pa(r),a=ba(r,n),o=Mi(Oi(mi(ei(r))));return Sa(Wo(s,a),o)}(a,o);return Ii(u,i,s)}});const zi=Nn({logSumExp_:function(e,t=null,n=!1){const r=wn(e,"x","logSumExp"),s=_(t,r.shape),a=ni(r,s,!0),o=Wo(r,a),i=Oi(o),u=Ga(i,s),l=_i(u),c=Sa(ca(a,l.shape),l);if(n){const e=ti(c.shape,s);return ca(c,e)}return c}});const Bi=Nn({softmaxCrossEntropy_:function(e,t,n,r=0,s=wi.SUM_BY_NONZERO_WEIGHTS){let a=wn(e,"onehotLabels","softmaxCrossEntropy");const o=wn(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=wn(n,"weights","softmaxCrossEntropy")),b(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=wa(r),t=wa(1),n=wa(a.shape[1]);a=Sa(ba(a,Wo(t,e)),Po(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Na(((e,t,r)=>{const s=zi(t,[n],!0),a=Wo(Ms(t,"float32"),s);r([e,a]);const o=mi(ba(a,e));return{value:Ga(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=ti(e.shape,[n]);return[ba(ca(e,a),Wo(Ms(r,"float32"),Oi(s))),ba(ca(e,a),Wo(Oi(s),Ms(r,"float32")))]}}}));return r(e,t)}(a,o);return Ii(u,i,s)}});const Pi=Nn({sparseFillEmptyRows_:function(e,t,n,r){const s=wn(e,"indices","sparseFillEmptyRows","int32"),a=wn(t,"values","sparseFillEmptyRows"),o=wn(n,"denseShape","sparseFillEmptyRows","int32"),i=wn(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=fn.runKernel("SparseFillEmptyRows",u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Wi=Nn({sparseReshape_:function(e,t,n){const r=wn(e,"inputIndices","sparseReshape","int32"),s=wn(t,"inputShape","sparseReshape","int32"),a=wn(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=fn.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Vi=Nn({sparseSegmentMean_:function(e,t,n){const r=wn(e,"data","sparseSegmentMean"),s=wn(t,"indices","sparseSegmentMean","int32"),a=wn(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return fn.runKernel("SparseSegmentMean",o)}});const Ui=Nn({sparseSegmentSum_:function(e,t,n){const r=wn(e,"data","sparseSegmentSum"),s=wn(t,"indices","sparseSegmentSum","int32"),a=wn(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return fn.runKernel("SparseSegmentSum",o)}});const Gi=Nn({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=wn(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=wn(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},h=fn.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const Hi=Nn({stringSplit_:function(e,t,n=!0){const r=wn(e,"input","stringSplit","string"),s=wn(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=fn.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const qi=Nn({stringToHashBucketFast_:function(e,t){const n=wn(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return fn.runKernel("StringToHashBucketFast",s,r)}});const ji=Nn({acos_:function(e){const t={x:wn(e,"x","acos")};return fn.runKernel("Acos",t)}});const Ki=Nn({acosh_:function(e){const t={x:wn(e,"x","acosh")};return fn.runKernel("Acosh",t)}});const Xi=Nn({addN_:function(e){y(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),y(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>wn(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!N(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return fn.runKernel("AddN",r)}});const Yi=Nn({all_:function(e,t=null,n=!1){const r={x:wn(e,"x","all","bool")},s={axis:t,keepDims:n};return fn.runKernel("All",r,s)}});const Zi=Nn({any_:function(e,t=null,n=!1){const r={x:wn(e,"x","any","bool")},s={axis:t,keepDims:n};return fn.runKernel("Any",r,s)}});const Ji=Nn({argMax_:function(e,t=0){const n={x:wn(e,"x","argMax")},r={axis:t};return fn.runKernel("ArgMax",n,r)}});const Qi=Nn({argMin_:function(e,t=0){const n={x:wn(e,"x","argMin")},r={axis:t};return fn.runKernel("ArgMin",n,r)}});const eu=Nn({asin_:function(e){const t={x:wn(e,"x","asin")};return fn.runKernel("Asin",t)}});const tu=Nn({asinh_:function(e){const t={x:wn(e,"x","asinh")};return fn.runKernel("Asinh",t)}});const nu=Nn({atan_:function(e){const t={x:wn(e,"x","atan")};return fn.runKernel("Atan",t)}});const ru=Nn({atan2_:function(e,t){let n=wn(e,"a","atan2"),r=wn(t,"b","atan2");[n,r]=on(n,r);const s={a:n,b:r};return fn.runKernel("Atan2",s)}});const su=Nn({atanh_:function(e){const t={x:wn(e,"x","atanh")};return fn.runKernel("Atanh",t)}});const au=Nn({avgPool_:function(e,t,n,r,s){const a=wn(e,"x","avgPool","float32");y(Ra(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=ca(a,[1,a.shape[0],a.shape[1],a.shape[2]])),y(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Da("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=fn.runKernel("AvgPool",u,l);return c=Ms(c,a.dtype),i?ca(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ou=Nn({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=wn(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=ca(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),y(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),y("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Da("avgPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=fn.runKernel("AvgPool3D",l,c);return p=Ms(p,i.dtype),u?ca(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const iu=Nn({tanh_:function(e){const t={x:wn(e,"x","tanh","float32")};return fn.runKernel("Tanh",t)}});const uu=Nn({basicLSTMCell_:function(e,t,n,r,s,a){const o=wn(e,"forgetBias","basicLSTMCell"),i=wn(t,"lstmKernel","basicLSTMCell"),u=wn(n,"lstmBias","basicLSTMCell"),l=wn(r,"data","basicLSTMCell"),c=wn(s,"c","basicLSTMCell"),p=wn(a,"h","basicLSTMCell"),h=ia([l,p],1),d=eo(h,i),f=Sa(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=pa(f,[0,0],y),x=pa(f,[0,g],y),w=pa(f,[0,2*g],y),k=pa(f,[0,3*g],y),v=Sa(ba(Va(b),iu(x)),ba(c,Va(Sa(o,w))));return[v,ba(iu(v),Va(k))]}});const lu=Nn({batchToSpaceND_:function(e,t,n){const r=wn(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));y(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),y(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),y(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return fn.runKernel("BatchToSpaceND",a,o)}});function cu(e){let t;return t=0===e.rank||1===e.rank?ca(e,[1,1,1,e.size]):2===e.rank?ca(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ca(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const pu=Nn({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=wn(e,"x","batchNorm"),i=wn(t,"mean","batchNorm"),u=wn(n,"variance","batchNorm");let l,c;null!=s&&(l=wn(s,"scale","batchNorm")),null!=r&&(c=wn(r,"offset","batchNorm")),y(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),y(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),y(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:cu(o),scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},d=fn.runKernel("FusedBatchNorm",p,h);return ca(d,o.shape)}});const hu=Nn({batchNorm2d_:function(e,t,n,r,s,a){const o=wn(e,"x","batchNorm"),i=wn(t,"mean","batchNorm"),u=wn(n,"variance","batchNorm");let l,c;return null!=s&&(l=wn(s,"scale","batchNorm")),null!=r&&(c=wn(r,"offset","batchNorm")),y(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),y(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),y(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&y(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&y(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),pu(o,i,u,c,l,a)}});const du=Nn({batchNorm3d_:function(e,t,n,r,s,a){const o=wn(e,"x","batchNorm"),i=wn(t,"mean","batchNorm"),u=wn(n,"variance","batchNorm");let l,c;return null!=s&&(l=wn(s,"scale","batchNorm")),null!=r&&(c=wn(r,"offset","batchNorm")),y(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),y(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),y(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&y(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&y(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),pu(o,i,u,c,l,a)}});const fu=Nn({batchNorm4d_:function(e,t,n,r,s,a){const o=wn(e,"x","batchNorm"),i=wn(t,"mean","batchNorm"),u=wn(n,"variance","batchNorm");let l,c;return null!=s&&(l=wn(s,"scale","batchNorm")),null!=r&&(c=wn(r,"offset","batchNorm")),y(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),y(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),y(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&y(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&y(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),pu(o,i,u,c,l,a)}});const mu=Nn({broadcastArgs_:function(e,t){const n=wn(e,"s0","broadcastArgs","int32"),r=wn(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return fn.runKernel("BroadcastArgs",s)}});const gu=Nn({ceil_:function(e){const t={x:wn(e,"x","ceil","float32")};return fn.runKernel("Ceil",t)}});const yu=Nn({clipByValue_:function(e,t,n){const r=wn(e,"x","clipByValue");if(y(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return uo(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return fn.runKernel("ClipByValue",s,a)}});const bu=Nn({concat1d_:function(e){return ia(e,0)}});const xu=Nn({concat2d_:function(e,t){return ia(e,t)}});const wu=Nn({concat3d_:function(e,t){return ia(e,t)}});const ku=Nn({concat4d_:function(e,t){return ia(e,t)}});const vu=Nn({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=wn(e,"x","conv1d"),u=wn(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=ca(i,[1,i.shape[0],i.shape[1]])),y(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),y(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),Da("conv1d",r,o),y(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),y(Ra(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),y("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=ca(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=ca(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Fa(h,p,[1,n],r,"NHWC",[1,a],o);return ca(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Nu=Nn({conv2dTranspose_:function(e,t,n,r,s,a){const o=wn(e,"x","conv2dTranspose"),i=wn(t,"filter","conv2dTranspose");return Ma(n,o,i,r,s,"NHWC",a)}});const Su=Nn({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=wn(e,"x","conv3d"),i=wn(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=ca(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),y(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),y(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),y(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),y(Ra(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),y("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=fn.runKernel("Conv3D",c,p);return l?ca(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Iu=Nn({conv3DBackpropInput_:function(e,t,n,r,s){y(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=ca(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];y(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),y(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),y(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),y(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),y(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=fn.runKernel("Conv3DBackpropInputV2",c,p);return i?ca(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Tu=Nn({conv3dTranspose_:function(e,t,n,r,s){const a=wn(e,"x","conv3dTranspose"),o=wn(t,"filter","conv3dTranspose");return Iu(n,a,o,r,s)}});const Eu=Nn({cos_:function(e){const t={x:wn(e,"x","cos","float32")};return fn.runKernel("Cos",t)}});const $u=Nn({cosh_:function(e){const t={x:wn(e,"x","cosh","float32")};return fn.runKernel("Cosh",t)}});const Cu=Nn({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:wn(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return fn.runKernel("Cumprod",s,a)}});const Au=Nn({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:wn(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return fn.runKernel("Cumsum",s,a)}});const _u=Nn({denseBincount_:function(e,t,n,r=!1){const s=wn(e,"x","denseBincount"),a=wn(t,"weights","denseBincount");y("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),y(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),y(n>=0,(()=>`size must be non-negative, but got ${n}.`)),y(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return fn.runKernel("DenseBincount",o,i)}});const Ru=Nn({depthToSpace_:function(e,t,n="NHWC"){const r=wn(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];y(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),y(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),y(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),y(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return fn.runKernel("DepthToSpace",i,u)}});const Du=Nn({diag_:function(e){const t={x:wn(e,"x","diag")};return fn.runKernel("Diag",t)}});const Fu=Nn({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=wn(e,"x","dilation2d"),i=wn(t,"filter","dilation2d");y(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),y(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),y("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=ca(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},h=fn.runKernel("Dilation2D",c,p);return l?ca(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Ou=Nn({equal_:function(e,t){let n=wn(e,"a","equal","string_or_numeric"),r=wn(t,"b","equal","string_or_numeric");[n,r]=on(n,r),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("Equal",s)}});const Mu=Nn({divNoNan_:function(e,t){let n=wn(e,"a","div"),r=wn(t,"b","div");[n,r]=on(n,r);const s=Po(n,r),a=fa(s),o=Ou(r,a);return Go(o,a,s)}});const Lu=Nn({dot_:function(e,t){const n=wn(e,"t1","dot"),r=wn(t,"t2","dot");y(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(y(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=ca(n,[1,-1]),t=ca(r,[-1,1]),s=eo(e,t);return ca(s,[])}if(1===n.rank&&2===r.rank){const e=ca(n,[1,-1]),t=ca(r,[r.shape[0],r.shape[1]]),s=eo(e,t);return ca(s,[s.size])}if(2===n.rank&&1===r.rank){const e=ca(r,[-1,1]),t=eo(n,e);return ca(t,[t.size])}{const e=ca(r,[r.shape[0],r.shape[1]]);return eo(n,e)}}});const zu=Nn({einsum_:function(e,...t){const n=t.map(((e,t)=>wn(e,`tensors${t}`,"einsum"))),r={equation:e};return fn.runKernel("Einsum",n,r)}});const Bu=Nn({erf_:function(e){let t=wn(e,"x","erf");y("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Ms(t,"float32"));const n={x:t};return fn.runKernel("Erf",n)}});const Pu=Nn({euclideanNorm_:function(e,t=null,n=!1){return ui(e,"euclidean",t,n)}});const Wu=Nn({expm1_:function(e){const t={x:wn(e,"x","expm1")};return fn.runKernel("Expm1",t)}});const Vu=Nn({floor_:function(e){const t={x:wn(e,"x","floor","float32")};return fn.runKernel("Floor",t)}});const Uu=Nn({gather_:function(e,t,n=0,r=0){const s={x:wn(e,"x","gather"),indices:wn(t,"indices","gather","int32")},a={axis:n,batchDims:r};return fn.runKernel("GatherV2",s,a)}});const Gu=Nn({isFinite_:function(e){const t={x:wn(e,"x","isFinite")};return fn.runKernel("IsFinite",t)}});const Hu=Nn({isInf_:function(e){const t={x:wn(e,"x","isInf")};return fn.runKernel("IsInf",t)}});const qu=Nn({isNaN_:function(e){const t={x:wn(e,"x","isNaN")};return fn.runKernel("IsNan",t)}});const ju=Nn({less_:function(e,t){let n=wn(e,"a","less","string_or_numeric"),r=wn(t,"b","less","string_or_numeric");[n,r]=on(n,r),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("Less",s)}});function Ku(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return fn.runKernel("LinSpace",{},r)}const Xu=Nn({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=wn(e,"x","localResponseNormalization");y(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),y(S(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=ca(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=fn.runKernel("LRN",u,l);return i?ca(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Yu=Nn({softplus_:function(e){const t={x:wn(e,"x","softplus")};return fn.runKernel("Softplus",t)}});const Zu=Nn({logSigmoid_:function(e){const t=wn(e,"x","logSigmoid"),n=Na((e=>({value:mi(Yu(mi(e))),gradFunc:t=>ba(t,Va(mi(e)))})));return n(t)}});const Ju=Nn({logSoftmax_:function(e,t=-1){const n=wn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Na(((e,n)=>{const r=ni(e,t,!0),s=Wo(e,r),a=Wo(Ms(s,"float32"),_i(Ga(Oi(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=Oi(r);return Wo(e,ba(Ga(e,t,!0),s))}}}));return r(n)}});const Qu=Nn({logicalNot_:function(e){const t={x:wn(e,"x","logicalNot","bool")};return fn.runKernel("LogicalNot",t)}});const el=Nn({logicalOr_:function(e,t){const n=wn(e,"a","logicalOr","bool"),r=wn(t,"b","logicalOr","bool");Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("LogicalOr",s)}});const tl=Nn({logicalXor_:function(e,t){const n=wn(e,"a","logicalXor","bool"),r=wn(t,"b","logicalXor","bool");return Ia(n.shape,r.shape),Xo(el(e,t),Qu(Xo(e,t)))}});var nl={};t(nl,"searchSorted",(()=>sl));const rl=2147483648;const sl=Nn({searchSorted_:function(e,t,n="left"){const r=wn(e,"sortedSequence","searchSorted"),s=wn(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=ca(r,[-1,a]),u=ca(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(k(u.shape)>=rl)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=rl)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},c={side:n};return fn.runKernel("SearchSorted",l,c)}});function al(e,t){return sl(e,t,"left")}const ol=Nn({maxPool_:function(e,t,n,r,s){const a=wn(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=ca(a,[1,a.shape[0],a.shape[1],a.shape[2]])),y(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),y(Ra(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Da("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=fn.runKernel("MaxPool",u,l);return i?ca(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const il=Nn({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=wn(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=ca(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),y(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),y("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Da("maxPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=fn.runKernel("MaxPool3D",l,c);return u?ca(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const ul=Nn({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:wn(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=fn.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const ll=Nn({maximum_:function(e,t){let n=wn(e,"a","maximum"),r=wn(t,"b","maximum");[n,r]=on(n,r),"bool"===n.dtype&&(n=Ms(n,"int32"),r=Ms(r,"int32")),Ia(n.shape,r.shape);const s={a:n,b:r};return fn.runKernel("Maximum",s)}});function cl(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=wn(e,"x","meshgrid",e instanceof qt?e.dtype:"float32");if(void 0===t)return[r];let s=wn(t,"y","meshgrid",t instanceof qt?t.dtype:"float32");const a=k(r.shape),o=k(s.shape);return"xy"===n?(r=ca(r,[1,-1]),s=ca(s,[-1,1]),[eo(Si([o,1],r.dtype),r),eo(s,Si([1,a],s.dtype))]):(r=ca(r,[-1,1]),s=ca(s,[1,-1]),[eo(r,Si([1,o],r.dtype)),eo(Si([a,1],s.dtype),s)])}const pl=Nn({mirrorPad_:function(e,t,n){y("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=wn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");y(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)y(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),y(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return fn.runKernel("MirrorPad",o,a)}});const hl=Nn({mod_:function(e,t){let n=wn(e,"a","mod"),r=wn(t,"b","mod");[n,r]=on(n,r);const s={a:n,b:r};return fn.runKernel("Mod",s)}});const dl=Nn({moments_:function(e,t=null,n=!1){const r=_(t,(e=wn(e,"x","moments")).shape),s=vi(e,r,n);let a=s.shape;n||(a=ti(s.shape,r));const o=oi(Wo(Ms(e,"float32"),ca(s,a)));return{mean:s,variance:vi(o,r,n)}}});const fl=Nn({multiRNNCell_:function(e,t,n,r){const s=wn(t,"data","multiRNNCell"),a=kn(n,"c","multiRNNCell"),o=kn(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const ml=Nn({multinomial_:function(e,t,n,r=!1){const s=wn(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?ca(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=fn.runKernel("Multinomial",i,u);return 1===o?ca(l,[l.size]):l}});const gl=Nn({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:wn(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return fn.runKernel("OneHot",a,o)}});const yl=Nn({onesLike_:function(e){const t={x:wn(e,"x","onesLike")};return fn.runKernel("OnesLike",t)}});const bl=Nn({outerProduct_:function(e,t){const n=wn(e,"v1","outerProduct"),r=wn(t,"v2","outerProduct");y(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=ca(n,[-1,1]),a=ca(r,[1,-1]);return eo(s,a)}});const xl=Nn({pad_:function(e,t,n=0){const r=wn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return fn.runKernel("PadV2",a,s)}});const wl=Nn({pad1d_:function(e,t,n=0){return y(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),xl(e,[t],n)}});const kl=Nn({pad2d_:function(e,t,n=0){return y(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),xl(e,t,n)}});const vl=Nn({pad3d_:function(e,t,n=0){return y(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),xl(e,t,n)}});const Nl=Nn({pad4d_:function(e,t,n=0){return y(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),xl(e,t,n)}});const Sl=Nn({spaceToBatchND_:function(e,t,n){const r=wn(e,"x","spaceToBatchND");y(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),y(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),y(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return fn.runKernel("SpaceToBatchND",s,a)}});const Il=Nn({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=wn(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=ca(i,[1,i.shape[0],i.shape[1],i.shape[2]])),y(Ra(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=function(e,t,n,r,s,a,o="channelsLast"){const[i,u]=$a(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return Ta(e,l,n,r,s,a,!1,o)}(u.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",b=d?u:Sl(u,p,f),x=("avg"===n?()=>au(b,t,a,g,o):()=>ol(b,t,a,g,o))(),w=d?x:lu(x,p,m);return l?ca(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const Tl=Nn({prod_:function(e,t=null,n=!1){let r=wn(e,"x","prod");"bool"===r.dtype&&(r=Ms(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return fn.runKernel("Prod",s,a)}});const El=Nn({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>wn(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:wn(t,"paramsDenseValues","raggedGather"),indices:wn(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=fn.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const $l=Nn({raggedTensorToTensor_:function(e,t,n,r,s){const a=wn(e,"shape","raggedTensorToTensor","int32"),o=wn(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:wn(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>wn(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return fn.runKernel("RaggedTensorToTensor",i,u)}});const Cl=Nn({rand_:function(e,t,n){const r=k(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return fn.makeTensor(s,e,n)}});var Al={},_l=a("gj6Et"),Rl=a("4gDjz"),Dl=a("HLBv4"),Fl=a("ktaoY"),Ol=a("gBs5C"),Ml=a("ktLSh"),Ll={};!function(e,t,n){var r,s=256,o=n.pow(s,6),i=n.pow(2,52),u=2*i,l=255;function c(a,l,c){var g=[],y=f(d((l=1==l?{entropy:!0}:l||{}).entropy?[a,m(t)]:null==a?function(){try{var n;return r&&(n=r.randomBytes)?n=n(s):(n=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(n)),m(n)}catch(n){var a=e.navigator,o=a&&a.plugins;return[+new Date,e,o,e.screen,m(t)]}}():a,3),g),b=new p(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*s,t*=s,n=b.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(l.pass||c||function(e,t,r,s){return s&&(s.S&&h(s,b),e.state=function(){return h(b,{})}),r?(n.random=e,t):e})(x,y,"global"in l?l.global:this==n,l.state)}function p(e){var t,n=e.length,r=this,a=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<s;)i[a]=a++;for(a=0;a<s;a++)i[a]=i[o=l&o+e[a%n]+(t=i[a])],i[o]=t;(r.g=function(e){for(var t,n=0,a=r.i,o=r.j,i=r.S;e--;)t=i[a=l&a+1],n=n*s+i[l&(i[a]=i[o=l&o+t])+(i[o]=t)];return r.i=a,r.j=o,n})(s)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(d(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function f(e,t){for(var n,r=e+"",s=0;s<r.length;)t[l&s]=l&(n^=19*t[l&s])+r.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),Ll){Ll=c;try{r=a("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n.seedrandom=c}("undefined"!=typeof self?self:Ll,[],Math),Ll.alea=_l,Ll.xor128=Rl,Ll.xorwow=Dl,Ll.xorshift7=Fl,Ll.xor4096=Ol,Ll.tychei=Ml,Al=Ll;class zl{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Al.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Bl{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Al.alea(s.toString()),this.randn=new zl(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Pl{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Al.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Wl=Nn({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Bl(t,n,r,s),o=Os(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Vl=Nn({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new zl(t,n,r,!1,s),o=Os(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Ul=Nn({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Vl(e,0,1,t,n)}});const Gl=Nn({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Os(e,r),o=new Pl(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const Hl=Nn({reciprocal_:function(e){const t={x:wn(e,"x","reciprocal")};return fn.runKernel("Reciprocal",t)}});const ql=Nn({reverse1d_:function(e){const t=wn(e,"x","reverse");return y(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),xa(t,0)}});const jl=Nn({reverse2d_:function(e,t){const n=wn(e,"x","reverse");return y(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),xa(n,t)}});const Kl=Nn({reverse3d_:function(e,t){const n=wn(e,"x","reverse");return y(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),xa(n,t)}});const Xl=Nn({reverse4d_:function(e,t){const n=wn(e,"x","reverse");return y(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),xa(n,t)}});const Yl=Nn({rsqrt_:function(e){const t={x:wn(e,"x","rsqrt","float32")};return fn.runKernel("Rsqrt",t)}});const Zl=Nn({selu_:function(e){const t={x:wn(e,"x","selu")};return fn.runKernel("Selu",t)}});const Jl=Nn({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=wn(e,"x","separableConv2d"),u=wn(t,"depthwiseFilter","separableConv2d"),l=wn(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=ca(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");y(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),y(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),y(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),y(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),y(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const h=u.shape[2],d=u.shape[3];y(l.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${l.shape[2]}.`));const f=Ya(c,u,r,s,o,a),m=Fa(f,l,1,"valid",o);return p?ca(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ql=async function(e,t){const n=wn(e,"x","setdiff1d"),r=wn(t,"y","setdiff1d");y(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),y(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),y(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new Vt([i],n.dtype),l=new Vt([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const ec=Nn({sign_:function(e){const t={x:wn(e,"x","sign")};return fn.runKernel("Sign",t)}});const tc=Nn({sin_:function(e){const t={x:wn(e,"x","sin","float32")};return fn.runKernel("Sin",t)}});const nc=Nn({sinh_:function(e){const t={x:wn(e,"x","sinh")};return fn.runKernel("Sinh",t)}});const rc=Nn({slice1d_:function(e,t,n){const r=wn(e,"x","slice1d");return y(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),pa(r,[t],[n])}});const sc=Nn({slice2d_:function(e,t,n){const r=wn(e,"x","slice2d");return y(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),pa(r,t,n)}});const ac=Nn({slice3d_:function(e,t,n){const r=wn(e,"x","slice3d");return y(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),pa(r,t,n)}});const oc=Nn({slice4d_:function(e,t,n){const r=wn(e,"x","slice4d");return y(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),pa(r,t,n)}});const ic=Nn({softmax_:function(e,t=-1){const n=wn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return fn.runKernel("Softmax",r,s)}});const uc=Nn({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const l={x:wn(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return fn.runKernel("StridedSlice",l,c)}});const lc=Nn({tan_:function(e){const t={x:wn(e,"x","tan","float32")};return fn.runKernel("Tan",t)}});function cc(e,t,n){if(x(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=yn(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return In(e,t,r,n)}function pc(e,t,n){if(x(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=yn(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return In(e,t,r,n)}function hc(e,t,n){if(x(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=yn(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return In(e,t,r,n)}function dc(e,t,n){if(x(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=yn(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return In(e,t=t||r,r,n)}const fc=Nn({topk_:function(e,t=1,n=!0){const r=wn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=fn.runKernel("TopK",a,o);return{values:i,indices:u}}});const mc=Nn({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new zl(t,n,r,!0,s),o=Os(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const gc=Nn({unique_:function(e,t=0){const n=wn(e,"x","unique","string_or_numeric");y(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=fn.runKernel("Unique",r,s);return{values:a,indices:o}}});const yc=Nn({unsortedSegmentSum_:function(e,t,n){const r=wn(e,"x","unsortedSegmentSum"),s=wn(t,"segmentIds","unsortedSegmentSum","int32");y(S(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return fn.runKernel("UnsortedSegmentSum",a,o)}});function bc(e,t){return sl(e,t,"right")}function xc(e,t=!0,n,r){return fn.makeVariable(e,t,n,r)}function wc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Os(e,"int32"),s=Os([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const kc=async function(e){const t=wn(e,"condition","whereAsync","bool"),n=await t.data(),r=wc(t.shape,n);return e!==t&&t.dispose(),r};var vc={};t(vc,"booleanMaskAsync",(()=>Nc));const Nc=async function(e,t,n){const r=wn(e,"tensor","boolMask"),s=wn(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;y(o>0,(()=>"mask cannot be scalar")),b(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=ca(r,l),p=ca(s,[-1]),h=await kc(p),d=li(h,[1]),f=Uu(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var Sc={};t(Sc,"movingAverage",(()=>Ic));const Ic=Nn({movingAverage_:function(e,t,n,r,s=!0){const a=wn(e,"v","movingAverage"),o=wn(t,"x","movingAverage"),i=wn(n,"decay","movingAverage");var u,l;l=o,y((u=a).dtype===l.dtype,(()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`)),y(N(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const c=wa(1),p=Wo(c,i);let h=ba(Wo(o,a),p);if(s){y(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=wn(r,"step","movingAverage");h=Po(h,Wo(c,si(i,e)))}return Sa(a,h)}});var Tc={};function Ec(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}(n,t,e)}t(Tc,"scatterND",(()=>$c));const $c=Nn({scatterND_:function(e,t,n){const r=wn(e,"indices","scatterND","int32"),s=wn(t,"updates","scatterND");Ec(s,r,n);const a={indices:r,updates:s},o={shape:n};return fn.runKernel("ScatterNd",a,o)}});var Cc={};t(Cc,"sparseToDense",(()=>Ac));const Ac=Nn({sparseToDense_:function(e,t,n,r=0){const s=wn(e,"sparseIndices","sparseToDense","int32"),a=wn(t,"sparseValues","sparseToDense","string_or_numeric"),o=wn(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return fn.runKernel("SparseToDense",i,u)}});var _c={};t(_c,"gatherND",(()=>Rc));const Rc=Nn({gatherND_:function(e,t){const n=wn(t,"indices","gatherND","int32"),r={params:wn(e,"x","gatherND","string_or_numeric"),indices:n};return fn.runKernel("GatherNd",r)}});var Dc={};function Fc(e,t){if(null==t)return e.shape.slice();if(N(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(Dc,"dropout",(()=>Oc));const Oc=Nn({dropout_:function(e,t,n,r){const s=wn(e,"x","dropout");if(y("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),y(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof qt?s.clone():s;const a=Fc(s,n),o=1-t,i=Po(Vu(Sa(Gl(a,0,1,"float32",r),o)),o);return ba(s,i)}});var Mc={};t(Mc,"inTopKAsync",(()=>Lc));const Lc=async function(e,t,n=1){const r=wn(e,"predictions","inTopK"),s=wn(t,"targets","inTopK");y(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),y(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),b(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];y(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=D("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Tn(c,s.shape,"bool")},zc={fft:ma,ifft:ya,rfft:ga,irfft:ka},Bc={hammingWindow:oo,hannWindow:io,frame:co,stft:po},Pc={flipLeftRight:fo,grayscaleToRGB:go,resizeNearestNeighbor:Oo,resizeBilinear:Fo,rotateWithOffset:yo,cropAndResize:ho,nonMaxSuppression:xo,nonMaxSuppressionAsync:Co,nonMaxSuppressionWithScore:Ao,nonMaxSuppressionWithScoreAsync:_o,nonMaxSuppressionPadded:Ro,nonMaxSuppressionPaddedAsync:Do,threshold:qo,transform:jo},Wc={bandPart:Jo,gramSchmidt:ci,qr:xi},Vc={absoluteDifference:Ti,computeWeightedLoss:Ii,cosineDistance:Ei,hingeLoss:$i,huberLoss:Ai,logLoss:Ri,meanSquaredError:Fi,sigmoidCrossEntropy:Li,softmaxCrossEntropy:Bi},Uc={sparseFillEmptyRows:Pi,sparseReshape:Wi,sparseSegmentMean:Vi,sparseSegmentSum:Ui},Gc={stringNGrams:Gi,stringSplit:Hi,stringToHashBucketFast:qi};n(oa,vc),n(oa,gi),n(oa,Qo),n(oa,Sc),n(oa,Tc),n(oa,nl),n(oa,Cc),n(oa,_c),n(oa,Dc),n(oa,no),n(oa,Mc);var Hc,qc,jc;oe().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),(qc=Hc||(Hc={}))[qc.DT_INVALID=0]="DT_INVALID",qc[qc.DT_FLOAT=1]="DT_FLOAT",qc[qc.DT_DOUBLE=2]="DT_DOUBLE",qc[qc.DT_INT32=3]="DT_INT32",qc[qc.DT_UINT8=4]="DT_UINT8",qc[qc.DT_INT16=5]="DT_INT16",qc[qc.DT_INT8=6]="DT_INT8",qc[qc.DT_STRING=7]="DT_STRING",qc[qc.DT_COMPLEX64=8]="DT_COMPLEX64",qc[qc.DT_INT64=9]="DT_INT64",qc[qc.DT_BOOL=10]="DT_BOOL",qc[qc.DT_QINT8=11]="DT_QINT8",qc[qc.DT_QUINT8=12]="DT_QUINT8",qc[qc.DT_QINT32=13]="DT_QINT32",qc[qc.DT_BFLOAT16=14]="DT_BFLOAT16",qc[qc.DT_QINT16=15]="DT_QINT16",qc[qc.DT_QUINT16=16]="DT_QUINT16",qc[qc.DT_UINT16=17]="DT_UINT16",qc[qc.DT_COMPLEX128=18]="DT_COMPLEX128",qc[qc.DT_HALF=19]="DT_HALF",qc[qc.DT_RESOURCE=20]="DT_RESOURCE",qc[qc.DT_VARIANT=21]="DT_VARIANT",qc[qc.DT_UINT32=22]="DT_UINT32",qc[qc.DT_UINT64=23]="DT_UINT64",qc[qc.DT_FLOAT_REF=101]="DT_FLOAT_REF",qc[qc.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",qc[qc.DT_INT32_REF=103]="DT_INT32_REF",qc[qc.DT_UINT8_REF=104]="DT_UINT8_REF",qc[qc.DT_INT16_REF=105]="DT_INT16_REF",qc[qc.DT_INT8_REF=106]="DT_INT8_REF",qc[qc.DT_STRING_REF=107]="DT_STRING_REF",qc[qc.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",qc[qc.DT_INT64_REF=109]="DT_INT64_REF",qc[qc.DT_BOOL_REF=110]="DT_BOOL_REF",qc[qc.DT_QINT8_REF=111]="DT_QINT8_REF",qc[qc.DT_QUINT8_REF=112]="DT_QUINT8_REF",qc[qc.DT_QINT32_REF=113]="DT_QINT32_REF",qc[qc.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",qc[qc.DT_QINT16_REF=115]="DT_QINT16_REF",qc[qc.DT_QUINT16_REF=116]="DT_QUINT16_REF",qc[qc.DT_UINT16_REF=117]="DT_UINT16_REF",qc[qc.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",qc[qc.DT_HALF_REF=119]="DT_HALF_REF",qc[qc.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",qc[qc.DT_VARIANT_REF=121]="DT_VARIANT_REF",qc[qc.DT_UINT32_REF=122]="DT_UINT32_REF",qc[qc.DT_UINT64_REF=123]="DT_UINT64_REF",function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(jc||(jc={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kc={};function Xc(e){return Kc[e]}function Yc(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Zc(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,o).map((e=>Zc(e,n,r,s)))}const i=Zc(t.inputNames.slice(e)[0],n,r,s),u=i.dataSync();return"number"===a.type?u[0]:Pe.toNestedArray(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function Zc(e,t,n,r){const[s,a]=tp(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[ep(s,e)]));return void 0!==o?t[ep(s,o)][a]:void 0}function Jc(e,t,n){return t[ep(e,n.currentContextId)]}function Qc(e,t){const[n,r,s]=tp(e);return[ep(n,t&&t.currentContextId),r,s]}function ep(e,t){return t?`${e}-${t}`:e}function tp(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function np(e,t,n){let r=Yc("pad",e,t,n);if("explicit"===r){r=Yc("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function rp(e){return e.kept?e:Ls(e)}var sp={};t(sp,"json",(()=>ap));const ap=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var op={};t(op,"json",(()=>ip));const ip=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var up={};t(up,"json",(()=>lp));const lp=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var cp={};t(cp,"json",(()=>pp));const pp=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var hp={};t(hp,"json",(()=>dp));const dp=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var fp={};t(fp,"json",(()=>mp));const mp=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var gp={};t(gp,"json",(()=>yp));const yp=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var bp={};t(bp,"json",(()=>xp));const xp=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var wp={};t(wp,"json",(()=>kp));const kp=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var vp={};t(vp,"json",(()=>Np));const Np=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var Sp={};t(Sp,"json",(()=>Ip));const Ip=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Tp={};t(Tp,"json",(()=>Ep));const Ep=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var $p={};t($p,"json",(()=>Cp));const Cp=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var Ap={};t(Ap,"json",(()=>_p));const _p=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var Rp={};t(Rp,"json",(()=>Dp));const Dp=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var Fp={};t(Fp,"json",(()=>Op));const Op=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var Mp={};t(Mp,"json",(()=>Lp));const Lp=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var zp={};t(zp,"json",(()=>Bp));const Bp=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var Pp={};t(Pp,"json",(()=>Wp));const Wp=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Vp=$n;class Up{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[sp,op,up,cp,hp,fp,gp,bp,wp,vp,Sp,Tp,$p,Ap,Rp,Fp,Mp,zp,Pp].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=Qc(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=Qc(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=Qc(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Xc(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=Hp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Hp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=th(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=th(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=jp(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=jp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=eh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=eh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=qp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=qp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=rh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=rh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=Qp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Qp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=nh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=nh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Yp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Yp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Zp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Zp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Xp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Xp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=Qc(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Kp(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=Qc(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=Qc(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Gp(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=oe().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==Vp)return new Vp(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Hp(e,t,n,r=!1){const s=e[t];return null!=s?Gp(s.s,r):n}function qp(e,t,n){const r=e[t];return r?r.b:n}function jp(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Kp(e){switch("string"==typeof e&&(e=Hc[e]),e){case Hc.DT_FLOAT:case Hc.DT_HALF:return"float32";case Hc.DT_INT32:case Hc.DT_INT64:case Hc.DT_INT8:case Hc.DT_UINT8:return"int32";case Hc.DT_BOOL:return"bool";case Hc.DT_DOUBLE:return"float32";case Hc.DT_STRING:return"string";default:return null}}function Xp(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Yp(e,t,n){const r=e[t];return r&&r.type?Kp(r.type):n}function Zp(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Kp(e))):n}function Jp(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Qp(e,t,n){const r=e[t];return r&&r.shape?Jp(r.shape):n}function eh(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function th(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>Gp(e,r))):n}function nh(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>Jp(e))):n}function rh(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class sh{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Zc(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Zc(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return jp(this.node.rawAttrs,e,t);if(null!=n.s)return Hp(this.node.rawAttrs,e,t);if(null!=n.b)return qp(this.node.rawAttrs,e,t);if(null!=n.shape)return Qp(this.node.rawAttrs,e,t);if(null!=n.type)return Yp(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return eh(this.node.rawAttrs,e,t);if(null!=n.list.s)return th(this.node.rawAttrs,e,t);if(null!=n.list.shape)return nh(this.node.rawAttrs,e,t);if(null!=n.list.b)return rh(this.node.rawAttrs,e,t);if(null!=n.list.type)return Zp(this.node.rawAttrs,e,t)}return t}}var ah={};n(ah,oa);function oh(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){Pe.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];Pe.assert(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function ih(e){return"number"!=typeof e&&!e.some((e=>e<0))}function uh(e,t,n){let r=lh(e,n);const s=!ih(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=lh(e.shape,r)})),!ih(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function lh(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class ch{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=wa(0),hi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),oh(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,hi(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Tn([],[0].concat(this.elementShape));const n=this.readMany(e);return oh(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Yo(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Tn([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return oh(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),ia(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Zo(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];pi((()=>{t=ca(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=ca(pa(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class ph{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);oh(t,e.shape,"TensorList shape mismatch: "),hi(e)})),this.idTensor=wa(0),this.maxNumElements=r,hi(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ph([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);oh(e,this.elementShape,"TensorList shape mismatch: ");const r=uh(this.elementShape,this.tensors,e);return pi((()=>{const e=this.tensors.map((e=>ca(e,r)));return Yo(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=uh(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,oh(r.shape,e,"TensorList shape mismatch: "),ca(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(oh(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");hi(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new ph([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);oh(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=uh(this.elementShape,this.tensors,t);return ca(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);oh(this.elementShape,t.shape,"TensorList shape mismatch: "),hi(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);oh(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=uh(this.elementShape,this.tensors,n);return 0===e.length?Tn([],[0].concat(r)):pi((()=>{const t=e.map((e=>ca(this.tensors[e],r)));return Yo(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);oh(this.elementShape,t,"TensorList shape mismatch: ");const n=uh(this.elementShape,this.tensors,t);return 0===this.size()?Tn([],[0].concat(n)):pi((()=>{const e=this.tensors.map((e=>ca(e,n)));return ia(e,0)}))}}function hh(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);oh(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Zo(e);return new ph(s,t,r)}function dh(e,t,n,r){return new ph([],e,t,r)}function fh(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new ph([],n,e.dtype,r),o=Zo(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}function mh(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=lh(e.shape.slice(1),n),o=0===r?0:e.size/r,i=pi((()=>{const n=[];e=ca(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,t[r],o];n[r]=ca(pa(e,i,u),a)}return e.dispose(),n})),u=new ph([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}const gh=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Yc("thenBranch",e,t,n),s=Yc("elseBranch",e,t,n),a=Yc("cond",e,t,n),o=Yc("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Yc("body",e,t,n),s=Yc("cond",e,t,n),a=Yc("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[rp(Yc("pred",e,t,n))];case"Switch":{const r=Yc("pred",e,t,n);let s=Yc("data",e,t,n);return s.kept||(s=rp(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==Zc(e,t,n)));if(r){return[rp(Zc(r,t,n))]}return}case"Enter":{const r=Yc("frameName",e,t,n),s=Yc("tensor",e,t,n);return n.enterFrame(r),[rp(s)]}case"Exit":{const r=Yc("tensor",e,t,n);return n.exitFrame(),[rp(r)]}case"NextIteration":{const r=Yc("tensor",e,t,n);return n.nextIteration(),[rp(r)]}case"TensorArrayV3":{const r=Yc("size",e,t,n),s=Yc("dtype",e,t,n),a=Yc("elementShape",e,t,n),o=Yc("dynamicSize",e,t,n),i=Yc("clearAfterRead",e,t,n),u=Yc("identicalElementShapes",e,t,n),l=Yc("name",e,t,n),c=new ch(l,s,r,a,u,o,i);return n.addTensorArray(c),[c.idTensor,wa(1)]}case"TensorArrayWriteV3":{const r=Yc("tensorArrayId",e,t,n),s=Yc("index",e,t,n),a=Yc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=Yc("tensorArrayId",e,t,n),s=Yc("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Yc("tensorArrayId",e,t,n),s=Yc("indices",e,t,n),a=Yc("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Yc("tensorArrayId",e,t,n),s=Yc("indices",e,t,n),a=Yc("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=Yc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=Yc("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Yc("tensorArrayId",e,t,n),s=Yc("tensor",e,t,n),a=Yc("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=Yc("tensorArrayId",e,t,n);return[wa(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Yc("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Yc("tensorListId",e,t,n),s=Yc("index",e,t,n),a=Yc("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=Yc("tensorListId",e,t,n),s=Yc("index",e,t,n),a=Yc("elementShape",e,t,n),o=Yc("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Yc("indices",e,t,n),s=fh(Yc("tensor",e,t,n),r,Yc("elementShape",e,t,n),Yc("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Yc("elementShape",e,t,n),s=Yc("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=Yc(a,e,t,n),i=dh(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Yc("tensorListId",e,t,n),s=Yc("indices",e,t,n),a=Yc("elementShape",e,t,n),o=Yc("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=Yc("tensorListId",e,t,n),s=Yc("elementShape",e,t,n),a=Yc("elementDType",e,t,n),o=Yc("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=hh(Yc("tensor",e,t,n),Yc("elementShape",e,t,n),Yc("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Yc("tensorListId",e,t,n),s=n.getTensorList(r.id),a=Yc("dtype",e,t,n),o=Yc("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=Yc("tensorListId",e,t,n),s=Yc("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Yc("tensorListId",e,t,n),s=Yc("elementShape",e,t,n),a=Yc("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Yc("tensor",e,t,n),s=Yc("elementShape",e,t,n),a=mh(r,Yc("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=Yc("tensorListId",e,t,n);return[wa(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=Yc("tensorListId",e,t,n),s=Yc("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function yh(e,t,n){const[r,s]=Yc("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,u="fusedbatchnorm"===r,l=Yc("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=Yc("strides",e,t,n),p=np(e,t,n),h=Yc("dataFormat",e,t,n).toUpperCase(),d=Yc("dilations",e,t,n);let[f,m]=Yc("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:Yc("leakyreluAlpha",e,t,n)}}function bh(e,t,n){return{boxes:Yc("boxes",e,t,n),scores:Yc("scores",e,t,n),maxOutputSize:Yc("maxOutputSize",e,t,n),iouThreshold:Yc("iouThreshold",e,t,n),scoreThreshold:Yc("scoreThreshold",e,t,n),softNmsSigma:Yc("softNmsSigma",e,t,n)}}class xh{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=wa(0),this.tensorMap=new Map,hi(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return wa(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),pi((()=>{const e=Zo(t),r=n.length,s=e.length;Pe.assert(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];hi(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return pi((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return Yo(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function wh(e,t,n,r,s=pi){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(Yc("a",e,t,n),Yc("b",e,t,n))];case"AddN":return[r.addN(Yc("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(Yc("a",e,t,n),Yc("b",e,t,n))];case"Mul":return[r.mul(Yc("a",e,t,n),Yc("b",e,t,n))];case"RealDiv":case"Div":return[r.div(Yc("a",e,t,n),Yc("b",e,t,n))];case"DivNoNan":return[r.divNoNan(Yc("a",e,t,n),Yc("b",e,t,n))];case"FloorDiv":return[r.floorDiv(Yc("a",e,t,n),Yc("b",e,t,n))];case"Sub":return[r.sub(Yc("a",e,t,n),Yc("b",e,t,n))];case"Minimum":return[r.minimum(Yc("a",e,t,n),Yc("b",e,t,n))];case"Maximum":return[r.maximum(Yc("a",e,t,n),Yc("b",e,t,n))];case"Pow":return[r.pow(Yc("a",e,t,n),Yc("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(Yc("a",e,t,n),Yc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(Yc("x",e,t,n))];case"Acos":return[r.acos(Yc("x",e,t,n))];case"Acosh":return[r.acosh(Yc("x",e,t,n))];case"Asin":return[r.asin(Yc("x",e,t,n))];case"Asinh":return[r.asinh(Yc("x",e,t,n))];case"Atan":return[r.atan(Yc("x",e,t,n))];case"Atan2":return[r.atan2(Yc("x",e,t,n),Yc("y",e,t,n))];case"Atanh":return[r.atanh(Yc("x",e,t,n))];case"Ceil":return[r.ceil(Yc("x",e,t,n))];case"Complex":return[r.complex(Yc("real",e,t,n),Yc("imag",e,t,n))];case"Cos":return[r.cos(Yc("x",e,t,n))];case"Cosh":return[r.cosh(Yc("x",e,t,n))];case"Elu":return[r.elu(Yc("x",e,t,n))];case"Erf":return[r.erf(Yc("x",e,t,n))];case"Exp":return[r.exp(Yc("x",e,t,n))];case"Expm1":return[r.expm1(Yc("x",e,t,n))];case"Floor":return[r.floor(Yc("x",e,t,n))];case"Log":return[r.log(Yc("x",e,t,n))];case"Log1p":return[r.log1p(Yc("x",e,t,n))];case"Imag":return[r.imag(Yc("x",e,t,n))];case"Neg":return[r.neg(Yc("x",e,t,n))];case"Reciprocal":return[r.reciprocal(Yc("x",e,t,n))];case"Real":return[r.real(Yc("x",e,t,n))];case"Relu":return[r.relu(Yc("x",e,t,n))];case"Round":return[r.round(Yc("x",e,t,n))];case"Selu":return[r.selu(Yc("x",e,t,n))];case"Sigmoid":return[r.sigmoid(Yc("x",e,t,n))];case"Sin":return[r.sin(Yc("x",e,t,n))];case"Sign":return[r.sign(Yc("x",e,t,n))];case"Sinh":return[r.sinh(Yc("x",e,t,n))];case"Softplus":return[r.softplus(Yc("x",e,t,n))];case"Sqrt":return[r.sqrt(Yc("x",e,t,n))];case"Square":return[r.square(Yc("x",e,t,n))];case"Tanh":return[r.tanh(Yc("x",e,t,n))];case"Tan":return[r.tan(Yc("x",e,t,n))];case"ClipByValue":return[r.clipByValue(Yc("x",e,t,n),Yc("clipValueMin",e,t,n),Yc("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(Yc("x",e,t,n))];case"Rsqrt":return[r.rsqrt(Zc(e.inputNames[0],t,n))];case"Prod":return[r.prod(Yc("x",e,t,n),Yc("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(Yc("x",e,t,n),Yc("alpha",e,t,n))];case"Prelu":return[r.prelu(Yc("x",e,t,n),Yc("alpha",e,t,n))];case"IsNan":return[r.isNaN(Zc(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return gh(e,t,n);case"convolution":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"Conv1D":{const s=Yc("stride",e,t,n),a=Yc("pad",e,t,n),o=Yc("dataFormat",e,t,n).toUpperCase(),i=Yc("dilation",e,t,n);return[r.conv1d(Yc("x",e,t,n),Yc("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=Yc("strides",e,t,n),a=np(e,t,n),o=Yc("dataFormat",e,t,n).toUpperCase(),i=Yc("dilations",e,t,n);return[r.conv2d(Yc("x",e,t,n),Yc("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=yh(e,t,n);return[r.fused.conv2d({x:Yc("x",e,t,n),filter:Yc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=yh(e,t,n);return[r.fused.depthwiseConv2d({x:Yc("x",e,t,n),filter:Yc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Yc("outputShape",e,t,n),a=Yc("strides",e,t,n),o=np(e,t,n);return[r.conv2dTranspose(Yc("x",e,t,n),Yc("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Yc("strides",e,t,n),a=np(e,t,n),o=Yc("dilations",e,t,n),i=Yc("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(Yc("input",e,t,n),Yc("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=Yc("strides",e,t,n),a=Yc("pad",e,t,n),o=Yc("dataFormat",e,t,n).toUpperCase(),i=Yc("dilations",e,t,n);return[r.conv3d(Yc("x",e,t,n),Yc("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Yc("strides",e,t,n),a=Yc("pad",e,t,n),o=Yc("kernelSize",e,t,n);return[r.avgPool(Yc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=Yc("strides",e,t,n),a=Yc("pad",e,t,n),o=Yc("kernelSize",e,t,n);return[r.maxPool(Yc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=Yc("strides",e,t,n),a=Yc("pad",e,t,n),o=Yc("kernelSize",e,t,n),i=Yc("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(Yc("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[u,l]}case"AvgPool3D":{const s=Yc("strides",e,t,n),a=Yc("pad",e,t,n),o=Yc("kernelSize",e,t,n);return[r.avgPool3d(Yc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=Yc("strides",e,t,n),a=Yc("pad",e,t,n),o=Yc("kernelSize",e,t,n);return[r.maxPool3d(Yc("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=Yc("strides",e,t,n),a=Yc("pad",e,t,n),o=Yc("dilations",e,t,n),i=s[1],u=s[2],l=o[1],c=o[2];return[r.dilation2d(Yc("x",e,t,n),Yc("filter",e,t,n),[i,u],a,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"Fill":{const s=Yc("shape",e,t,n),a=Yc("dtype",e,t,n),o=Yc("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=Yc("start",e,t,n),a=Yc("stop",e,t,n),o=Yc("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=Yc("logits",e,t,n),a=Yc("numSamples",e,t,n),o=Yc("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=Yc("indices",e,t,n),a=Yc("depth",e,t,n),o=Yc("onValue",e,t,n),i=Yc("offValue",e,t,n),u=Yc("dtype",e,t,n);return[r.oneHot(s,a,o,i,u)]}case"Ones":return[r.ones(Yc("shape",e,t,n),Yc("dtype",e,t,n))];case"OnesLike":return[r.onesLike(Yc("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(Yc("shape",e,t,n),Yc("dtype",e,t,n),Yc("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(Yc("shape",e,t,n),Yc("minval",e,t,n),Yc("maxval",e,t,n),Yc("dtype",e,t,n))];case"Range":{const s=Yc("start",e,t,n),a=Yc("stop",e,t,n),o=Yc("step",e,t,n);return[r.range(s,a,o,Yc("dtype",e,t,n))]}case"TruncatedNormal":{const s=Yc("shape",e,t,n),a=Yc("mean",e,t,n),o=Yc("stdDev",e,t,n),i=Yc("seed",e,t,n);return[r.truncatedNormal(s,a,o,Yc("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(Yc("shape",e,t,n),Yc("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(Yc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=ah)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=bh(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=bh(e,t,n),l=Yc("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=bh(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,u)]}case"Where":{const r=s.cast(Yc("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(Yc("x",e,t,n),Yc("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"LowerBound":{const s=Yc("sortedSequence",e,t,n),a=Yc("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=Yc("x",e,t,n),a=Yc("k",e,t,n),o=Yc("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=Yc("sortedSequence",e,t,n),a=Yc("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=Yc("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=Yc("x",e,t,n),a=Yc("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"ResizeBilinear":{const s=Yc("images",e,t,n),a=Yc("size",e,t,n),o=Yc("alignCorners",e,t,n),i=Yc("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=Yc("images",e,t,n),a=Yc("size",e,t,n),o=Yc("alignCorners",e,t,n),i=Yc("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=Yc("image",e,t,n),a=Yc("boxes",e,t,n),o=Yc("boxInd",e,t,n),i=Yc("cropSize",e,t,n),u=Yc("method",e,t,n),l=Yc("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,u,l)]}case"ImageProjectiveTransformV3":{const s=Yc("images",e,t,n),a=Yc("transforms",e,t,n),o=Yc("outputShape",e,t,n),i=Yc("fillValue",e,t,n),u=Yc("interpolation",e,t,n),l=Yc("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Yc("default",e,t,n);return[Zc(e.name,t,n)||s];case"Placeholder":return[Zc(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[rp(Yc("x",e,t,n))];case"IdentityN":return Yc("x",e,t,n).map((e=>rp(e)));case"Shape":return[r.tensor1d(Yc("x",e,t,n).shape,"int32")];case"ShapeN":return Yc("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(Yc("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(Yc("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=Yc("x",e,t,n),o=Yc("data",e,t,n),i=Yc("message",e,t,n),u=Yc("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"Equal":return[r.equal(Yc("a",e,t,n),Yc("b",e,t,n))];case"NotEqual":return[r.notEqual(Yc("a",e,t,n),Yc("b",e,t,n))];case"Greater":return[r.greater(Yc("a",e,t,n),Yc("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(Yc("a",e,t,n),Yc("b",e,t,n))];case"Less":return[r.less(Yc("a",e,t,n),Yc("b",e,t,n))];case"LessEqual":return[r.lessEqual(Yc("a",e,t,n),Yc("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(Yc("a",e,t,n),Yc("b",e,t,n))];case"LogicalNot":return[r.logicalNot(Yc("a",e,t,n))];case"LogicalOr":return[r.logicalOr(Yc("a",e,t,n),Yc("b",e,t,n))];case"Select":case"SelectV2":return[r.where(Yc("condition",e,t,n),Yc("a",e,t,n),Yc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(Yc("a",e,t,n),Yc("b",e,t,n),Yc("transposeA",e,t,n),Yc("transposeB",e,t,n))];case"Einsum":return[r.einsum(Yc("equation",e,t,n),...Yc("tensors",e,t,n))];case"Transpose":return[r.transpose(Yc("x",e,t,n),Yc("perm",e,t,n))];case"_FusedMatMul":const[s,a]=Yc("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,u=Yc("numArgs",e,t,n),l=Yc("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=Yc("args",e,t,n);return[r.fused.matMul({a:Yc("a",e,t,n),b:Yc("b",e,t,n),transposeA:Yc("transposeA",e,t,n),transposeB:Yc("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:p,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(Yc("x",e,t,n),Yc("axis",e,t,n),Yc("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(Yc("x",e,t,n),Yc("mean",e,t,n),Yc("variance",e,t,n),Yc("offset",e,t,n),Yc("scale",e,t,n),Yc("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(Yc("x",e,t,n),Yc("radius",e,t,n),Yc("bias",e,t,n),Yc("alpha",e,t,n),Yc("beta",e,t,n))];case"Softmax":return[r.softmax(Yc("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(Yc("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(Yc("sparseIndices",e,t,n),Yc("outputShape",e,t,n),Yc("sparseValues",e,t,n),Yc("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"Max":{const s=Yc("axis",e,t,n),a=Yc("keepDims",e,t,n);return[r.max(Yc("x",e,t,n),s,a)]}case"Mean":{const s=Yc("axis",e,t,n),a=Yc("keepDims",e,t,n);return[r.mean(Yc("x",e,t,n),s,a)]}case"Min":{const s=Yc("axis",e,t,n),a=Yc("keepDims",e,t,n);return[r.min(Yc("x",e,t,n),s,a)]}case"Sum":{const s=Yc("axis",e,t,n),a=Yc("keepDims",e,t,n);return[r.sum(Yc("x",e,t,n),s,a)]}case"All":{const s=Yc("axis",e,t,n),a=Yc("keepDims",e,t,n);return[r.all(Yc("x",e,t,n),s,a)]}case"Any":{const s=Yc("axis",e,t,n),a=Yc("keepDims",e,t,n);return[r.any(Yc("x",e,t,n),s,a)]}case"ArgMax":{const s=Yc("axis",e,t,n);return[r.argMax(Yc("x",e,t,n),s)]}case"ArgMin":{const s=Yc("axis",e,t,n);return[r.argMin(Yc("x",e,t,n),s)]}case"Prod":{const s=Yc("axis",e,t,n),a=Yc("keepDims",e,t,n);return[r.prod(Yc("x",e,t,n),s,a)]}case"Cumprod":{const s=Yc("axis",e,t,n),a=Yc("exclusive",e,t,n),o=Yc("reverse",e,t,n);return[r.cumprod(Yc("x",e,t,n),s,a,o)]}case"Cumsum":{const s=Yc("axis",e,t,n),a=Yc("exclusive",e,t,n),o=Yc("reverse",e,t,n);return[r.cumsum(Yc("x",e,t,n),s,a,o)]}case"Bincount":const s=Yc("x",e,t,n),a=Yc("weights",e,t,n),o=Yc("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=Yc("x",e,t,n),a=Yc("weights",e,t,n),o=Yc("size",e,t,n),i=Yc("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Yc("n",e,t,n),a=Yc("axis",e,t,n);let o=Yc("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=Yc("x",e,t,n),a=Yc("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=Yc("axis",e,t,n),a=Yc("batchDims",e,t,n),o=Yc("x",e,t,n),i=Yc("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=Yc("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=Yc("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=Yc("axis",e,t,n),a=Yc("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=Yc("begin",e,t,n),a=Yc("size",e,t,n);return[r.slice(Yc("x",e,t,n),s,a)]}case"StridedSlice":{const s=Yc("begin",e,t,n),a=Yc("end",e,t,n),o=Yc("strides",e,t,n),i=Yc("beginMask",e,t,n),u=Yc("endMask",e,t,n),l=Yc("ellipsisMask",e,t,n),c=Yc("newAxisMask",e,t,n),p=Yc("shrinkAxisMask",e,t,n),h=Yc("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,u,l,c,p)]}case"Pack":return pi((()=>{const s=Yc("axis",e,t,n),a=Yc("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,u=a.map((e=>{const t=Pe.arraysEqual(e.shape,o);if(!t&&!Pe.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(u,s)]}));case"Unpack":{const s=Yc("axis",e,t,n),a=Yc("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=Yc("reps",e,t,n);return[r.tile(Yc("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Yc("axis",e,t,n),a=Yc("numOrSizeSplits",e,t,n),o=Yc("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=Yc("indices",e,t,n),a=Yc("values",e,t,n),o=Yc("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=Yc("x",e,t,n),a=Yc("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=Yc("sparseIndices",e,t,n),a=Yc("outputShape",e,t,n),o=Yc("sparseValues",e,t,n),i=Yc("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(Yc("indices",e,t,n),Yc("values",e,t,n),Yc("denseShape",e,t,n),Yc("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(Yc("inputIndices",e,t,n),Yc("inputShape",e,t,n),Yc("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(Yc("data",e,t,n),Yc("indices",e,t,n),Yc("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(Yc("data",e,t,n),Yc("indices",e,t,n),Yc("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"FFT":return[r.fft(Yc("x",e,t,n))];case"IFFT":return[r.ifft(Yc("x",e,t,n))];case"RFFT":return[r.rfft(Yc("x",e,t,n))];case"IRFFT":return[r.irfft(Yc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(Yc("data",e,t,n),Yc("dataSplits",e,t,n),Yc("separator",e,t,n),Yc("nGramWidths",e,t,n),Yc("leftPad",e,t,n),Yc("rightPad",e,t,n),Yc("padWidth",e,t,n),Yc("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(Yc("input",e,t,n),Yc("delimiter",e,t,n),Yc("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(Yc("input",e,t,n),Yc("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=ah)=>{switch(e.op){case"Cast":return[r.cast(Yc("x",e,t,n),Yc("dtype",e,t,n))];case"ExpandDims":{const s=Yc("axis",e,t,n);return[r.expandDims(Yc("x",e,t,n),s)]}case"Squeeze":{const s=Yc("axis",e,t,n);return[r.squeeze(Yc("x",e,t,n),s)]}case"Reshape":return[r.reshape(Yc("x",e,t,n),Yc("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(Yc("x",e,t,n),Yc("padding",e,t,n),Yc("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(Yc("x",e,t,n),Yc("padding",e,t,n),Yc("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Yc("blockShape",e,t,n),a=Yc("paddings",e,t,n);return[r.spaceToBatchND(Yc("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=Yc("blockShape",e,t,n),a=Yc("crops",e,t,n);return[r.batchToSpaceND(Yc("x",e,t,n),s,a)]}case"DepthToSpace":{const s=Yc("blockSize",e,t,n),a=Yc("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(Yc("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(Yc("x",e,t,n),Yc("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(Yc("s0",e,t,n),Yc("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=Yc("keyDType",e,t,n),a=Yc("valueDType",e,t,n),o=new xh(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Yc("tableHandle",e,t,n,r),a=Yc("keys",e,t,n),o=Yc("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Yc("tableHandle",e,t,n,r),a=Yc("keys",e,t,n),o=Yc("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=Yc("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=Xc(e.op);if(a&&a.customExecutor)return a.customExecutor(new sh(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Pe.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class kh{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function vh(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>tp(e)[0]));let c=[];null!=r&&(c=r.map((e=>tp(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(Eh(e)||$h(e)||Ch(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),p.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}function Nh(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((e=>tp(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&a.push(e)}));const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&a.push(e)}))}return l}const Sh=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Ih=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Th=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Eh(e){return Sh.indexOf(e.op)>=0}function $h(e){return Ih.indexOf(e.op)>=0}function Ch(e){return Th.indexOf(e.op)>=0}class Ah{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Ah(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=vh(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return Nh(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[tp(e)[0]])),s=t.map((e=>tp(e)[0]));let a=s.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const u={},l={};return pi((()=>{const n=new kh(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=tp(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=wh(t,r,n,this._resourceManager);if(Pe.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map((e=>Zc(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=Jc(e.name,n,r);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=Qc(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=oe().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new kh(this.weightMap,r,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const o=t.map((e=>Zc(e,this.tensorsMap,a))),i=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[tp(e)[0]])),o=n.map((e=>tp(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:p}=vh(e,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=tp(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;h.length>0;){const e=this.processStack(a,h,t,d,g,m,o,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!Eh(e)&&!Zc(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return d}processStack(e,t,n,r,s,a,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Yc("isConstant",e.node,r,n)&&([c]=Qc(e.node.name,n)),null==r[e.node.name]){const p=wh(e.node,r,n,this._resourceManager);c||([c]=Qc(e.node.name,n));const h=n.currentContext;Pe.isPromise(p)?l.push(p.then((l=>(r[c]=l,n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u),l)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=Qc(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Zc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Zc(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=tp(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));Pe.assert(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&Pe.assert(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=tp(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=tp(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class _h{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Rh{constructor(e,t={},n=Bs){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new _h}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return Pe.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Ah(Up.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Up.Instance.transformGraph(e.modelInitializer);this.initializer=new Ah(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof qt?[n]:n).forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(e){if(!(e instanceof qt||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Dh(e,t={},n=Bs){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}model.json?tfjs-format=file`}
/** @license See the LICENSE file. */(e));const r=new Rh(e,t,n);return await r.load(),r}function Fh(e,t,n,r){return new(n||(n=Promise))((function(s,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function i(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function Oh(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}var Mh=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var s=r[n];t.push(s)}return t},Lh=function(){this.parent=null,this.children={},this.end=!1,this.word=[[],0,0]},zh=function(){function e(){this.root=new Lh}return e.prototype.insert=function(e,t,n){for(var r=this.root,s=Mh(e),a=0;a<s.length;a++)r.children[s[a]]||(r.children[s[a]]=new Lh,r.children[s[a]].parent=r,r.children[s[a]].word[0]=r.word[0].concat(s[a])),r=r.children[s[a]],a===s.length-1&&(r.end=!0,r.word[1]=t,r.word[2]=n)},e.prototype.commonPrefixSearch=function(e){for(var t=[],n=this.root.children[e[0]],r=0;r<e.length&&n;r++)n.end&&t.push(n.word),n=n.children[e[r+1]];return t.length||t.push([[e[0]],0,0]),t},e}();var Bh=function(){function e(e,t){void 0===t&&(t=6),this.vocabulary=e,this.reservedSymbolsCount=t,this.trie=new zh;for(var n=this.reservedSymbolsCount;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n)}return e.prototype.encode=function(e){var t=[],n=[],r=[];e=function(e){var t=e.normalize("NFKC");return t.length>0?"▁"+t.replace(/ /g,"▁"):t}(e);for(var s=Mh(e),a=0;a<=s.length;a++)t.push({}),n.push(0),r.push(0);for(a=0;a<s.length;a++)for(var o=this.trie.commonPrefixSearch(s.slice(a)),i=0;i<o.length;i++){var u=o[i],l={key:u[0],score:u[1],index:u[2]};null==t[a+(c=u[0].length)][a]&&(t[a+c][a]=[]),t[a+c][a].push(l)}for(var c=0;c<=s.length;c++)for(var p in t[c]){var h=t[c][p];for(i=0;i<h.length;i++){var d=h[i],f=d.score+r[c-d.key.length];(0===r[c]||f>=r[c])&&(r[c]=f,n[c]=h[i].index)}}for(var m=[],g=n.length-1;g>0;)m.push(n[g]),g-=this.vocabulary[n[g]][0].length;var y=[],b=!1;for(a=0;a<m.length;a++){var x=m[a];b&&0===x||y.push(x),b=0===x}return y.reverse()},e}();function Ph(e){return Fh(this,void 0,void 0,(function(){return Oh(this,(function(t){switch(t.label){case 0:return[4,Pe.fetch(e)];case 1:return[2,t.sent().json()]}}))}))}var Wh="https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1",Vh=[0,1,2],Uh=192;!function(){function e(){}e.prototype.loadModel=function(){return Fh(this,void 0,void 0,(function(){return Oh(this,(function(e){return[2,Dh(Wh,{fromTFHub:!0})]}))}))},e.prototype.load=function(){return Fh(this,void 0,void 0,(function(){var e,t,n;return Oh(this,(function(r){switch(r.label){case 0:return[4,Promise.all([this.loadModel(),Ph(Wh+"/vocab.json?tfjs-format=file")])];case 1:return e=r.sent(),t=e[0],n=e[1],this.model=t,this.tokenizer=new Bh(n,3),[2]}}))}))},e.prototype.embed=function(e){var t=this,n=pi((function(){var n=t.tokenizeStrings(e.queries,Uh),r=t.tokenizeStrings(e.responses,Uh);if(null!=e.contexts&&e.contexts.length!==e.responses.length)throw new Error("The length of response strings and context strings need to match.");var s=e.contexts||[];null==e.contexts&&(s.length=e.responses.length,s.fill(""));var a=t.tokenizeStrings(s,Uh),o={};return o.input_inp_text=n,o.input_res_text=r,o.input_res_context=a,t.model.execute(o,["Final/EncodeQuery/mul","Final/EncodeResult/mul"])}));return{queryEmbedding:n[0],responseEmbedding:n[1]}},e.prototype.tokenizeStrings=function(e,t){var n=this;return lo(e.map((function(e){return n.shiftTokens(n.tokenizer.encode(e),Uh)})),[e.length,Uh],"int32")},e.prototype.shiftTokens=function(e,t){e.unshift(1);for(var n=0;n<t;n++)n>=e.length?e[n]=2:Vh.includes(e[n])||(e[n]+=3);return e.slice(0,t)}}();var Gh=function(){function e(){}return e.prototype.loadModel=function(e){return Fh(this,void 0,void 0,(function(){return Oh(this,(function(t){return[2,e?Dh(e):Dh("https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1",{fromTFHub:!0})]}))}))},e.prototype.load=function(e){return void 0===e&&(e={}),Fh(this,void 0,void 0,(function(){var t,n,r;return Oh(this,(function(s){switch(s.label){case 0:return[4,Promise.all([this.loadModel(e.modelUrl),Ph(e.vocabUrl||"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/vocab.json")])];case 1:return t=s.sent(),n=t[0],r=t[1],this.model=n,this.tokenizer=new Bh(r),[2]}}))}))},e.prototype.embed=function(e){return Fh(this,void 0,void 0,(function(){var t,n,r,s,a,o,i,u,l=this;return Oh(this,(function(c){switch(c.label){case 0:for("string"==typeof e&&(e=[e]),t=e.map((function(e){return l.tokenizer.encode(e)})),n=t.map((function(e,t){return e.map((function(e,n){return[t,n]}))})),r=[],s=0;s<n.length;s++)r=r.concat(n[s]);return a=lo(r,[r.length,2],"int32"),o=ro(Pe.flatten(t),"int32"),i={indices:a,values:o},[4,this.model.executeAsync(i)];case 1:return u=c.sent(),a.dispose(),o.dispose(),[2,u]}}))}))},e}();class Hh{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class qh{refCount(e){return jh("refCount")}incRef(e){return jh("incRef")}timerAvailable(){return!0}time(e){return jh("time")}read(e){return jh("read")}readSync(e){return jh("readSync")}readToGPU(e,t){return jh("readToGPU")}numDataIds(){return jh("numDataIds")}disposeData(e,t){return jh("disposeData")}write(e,t,n){return jh("write")}move(e,t,n,r,s){return jh("move")}createTensorFromTexture(e,t,n){return jh("createTensorFromTexture")}memory(){return jh("memory")}floatPrecision(){return jh("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return jh("dispose")}}function jh(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var Kh={};function Xh(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,Qh(e,t,n)}function Yh(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,Qh(e,n,r),Qh(t,n,r)}function Zh(e,t,n){return Math.max(e,Math.min(t,n))}function Jh(e){return e%2==0?e:e+1}function Qh(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function ed(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function td(e,t){const n=Math.random();return t*n+(1-n)*e}function nd(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function rd(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function sd(e,t,n=""){rd(ld(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function ad(e){rd(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function od(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||Sd(e)&&!n)for(let r=0;r<e.length;++r)od(e[r],t,n);else t.push(e);return t}function id(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function ud(e){return 0===e.length}function ld(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function cd(e){return e%1==0}function pd(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function hd(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function dd(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return Xh(t),t}function fd(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function md(e,t=(e=>0),n,r){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const u=t(o);null!=n&&o>=n?a():null!=r?r(i,u):setTimeout(i,u)};i()}))}function gd(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function yd(e,t){const n=t.length;return rd((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),rd(e.every((e=>cd(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function bd(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:yd(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function xd(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function wd(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function kd(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function vd(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Nd(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function Sd(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function Id(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Td(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Ed(e){return"string"==typeof e||e instanceof String}function $d(e){return"boolean"==typeof e}function Cd(e){return"number"==typeof e}function Ad(e){return Array.isArray(e)?Ad(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Cd(e)?"float32":Ed(e)?"string":$d(e)?"bool":"float32"}function _d(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Rd(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Dd(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Fd(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=Fd(e+t*i,o,n,r)}return s}function Od(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Fd(0,e,t,n)}function Md(e,t){const n=Ld(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Ld(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function zd(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Od(e,new Float32Array(n));if("int32"===t)return Od(e,new Int32Array(n));if("bool"===t)return Od(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Bd(e){e.forEach((t=>{rd(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Pd(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Wd(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Vd(e){return e&&e.then&&"function"==typeof e.then}t(Kh,"shuffle",(()=>Xh)),t(Kh,"swap",(()=>Qh)),t(Kh,"shuffleCombo",(()=>Yh)),t(Kh,"clamp",(()=>Zh)),t(Kh,"nearestLargerEven",(()=>Jh)),t(Kh,"sum",(()=>ed)),t(Kh,"randUniform",(()=>td)),t(Kh,"distSquared",(()=>nd)),t(Kh,"assert",(()=>rd)),t(Kh,"assertShapesMatch",(()=>sd)),t(Kh,"arraysEqual",(()=>ld)),t(Kh,"assertNonNull",(()=>ad)),t(Kh,"flatten",(()=>od)),t(Kh,"isTypedArray",(()=>Sd)),t(Kh,"sizeFromShape",(()=>id)),t(Kh,"isScalarShape",(()=>ud)),t(Kh,"isInt",(()=>cd)),t(Kh,"tanh",(()=>pd)),t(Kh,"sizeToSquarishShape",(()=>hd)),t(Kh,"createShuffledIndices",(()=>dd)),t(Kh,"rightPad",(()=>fd)),t(Kh,"repeatedTry",(()=>md)),t(Kh,"inferFromImplicitShape",(()=>gd)),t(Kh,"parseAxisParam",(()=>yd)),t(Kh,"squeezeShape",(()=>bd)),t(Kh,"getTypedArrayFromDType",(()=>xd)),t(Kh,"getArrayFromDType",(()=>wd)),t(Kh,"checkConversionForErrors",(()=>kd)),t(Kh,"isValidDtype",(()=>vd)),t(Kh,"hasEncodingLoss",(()=>Nd)),t(Kh,"bytesPerElement",(()=>Id)),t(Kh,"bytesFromStringArray",(()=>Td)),t(Kh,"isString",(()=>Ed)),t(Kh,"isBoolean",(()=>$d)),t(Kh,"isNumber",(()=>Cd)),t(Kh,"inferDtype",(()=>Ad)),t(Kh,"isFunction",(()=>_d)),t(Kh,"nearestDivisor",(()=>Rd)),t(Kh,"computeStrides",(()=>Dd)),t(Kh,"toNestedArray",(()=>Od)),t(Kh,"makeOnesTypedArray",(()=>Md)),t(Kh,"makeZerosTypedArray",(()=>Ld)),t(Kh,"makeZerosNestedTypedArray",(()=>zd)),t(Kh,"assertNonNegativeIntegerDimensions",(()=>Bd)),t(Kh,"locToIndex",(()=>Pd)),t(Kh,"indexToLoc",(()=>Wd)),t(Kh,"isPromise",(()=>Vd));const Ud="tfjsflags";class Gd{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Hd,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(qd().getBool("IS_TEST")||qd().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];qd().getBool("IS_TEST")||qd().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Vd(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(Ud in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function Hd(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function qd(){return Kd}let jd,Kd=null;function Xd(){if(null==jd){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==ce)t=ce;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}jd=t}return jd}function Yd(e,t){const n=function(){const e=Xd();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Zd="Abs",Jd="Acos",Qd="Acosh",ef="Add",tf="AddN",nf="All",rf="Any",sf="ArgMax",af="ArgMin",of="Asin",uf="Asinh",lf="Atan",cf="Atanh",pf="Atan2",hf="AvgPool",df="AvgPoolGrad",ff="AvgPool3D",mf="AvgPool3DGrad",gf="BatchMatMul",yf="BatchToSpaceND",bf="Bincount",xf="BroadcastArgs",wf="Cast",kf="Ceil",vf="ClipByValue",Nf="Complex",Sf="ComplexAbs",If="Concat",Tf="Conv2D",Ef="Conv2DBackpropFilter",$f="Conv2DBackpropInput",Cf="Conv3D",Af="Conv3DBackpropFilterV2",_f="Conv3DBackpropInputV2",Rf="Cos",Df="Cosh",Ff="Cumprod",Of="Cumsum",Mf="CropAndResize",Lf="DenseBincount",zf="DepthToSpace",Bf="DepthwiseConv2dNative",Pf="DepthwiseConv2dNativeBackpropFilter",Wf="DepthwiseConv2dNativeBackpropInput",Vf="Diag",Uf="Dilation2D",Gf="Dilation2DBackpropInput",Hf="Dilation2DBackpropFilter",qf="RealDiv",jf="Einsum",Kf="Elu",Xf="EluGrad",Yf="Erf",Zf="Equal",Jf="Exp",Qf="ExpandDims",em="Expm1",tm="FFT",nm="Fill",rm="FlipLeftRight",sm="Floor",am="FloorDiv",om="FusedBatchNorm",im="GatherV2",um="GatherNd",lm="Greater",cm="GreaterEqual",pm="Identity",hm="IFFT",dm="Imag",fm="IsFinite",mm="IsInf",gm="IsNan",ym="LeakyRelu",bm="Less",xm="LessEqual",wm="LinSpace",km="Log",vm="Log1p",Nm="LogicalAnd",Sm="LogicalNot",Im="LogicalOr",Tm="LRN",Em="LRNGrad",$m="Max",Cm="Maximum",Am="MaxPool",_m="MaxPoolGrad",Rm="MaxPool3D",Dm="MaxPool3DGrad",Fm="MaxPoolWithArgmax",Om="Mean",Mm="Min",Lm="Minimum",zm="MirrorPad",Bm="Mod",Pm="Multinomial",Wm="Multiply",Vm="Neg",Um="NotEqual",Gm="NonMaxSuppressionV3",Hm="NonMaxSuppressionV4",qm="NonMaxSuppressionV5",jm="OnesLike",Km="OneHot",Xm="Pack",Ym="PadV2",Zm="Pow",Jm="Prelu",Qm="Prod",eg="RaggedGather",tg="RaggedRange",ng="RaggedTensorToTensor",rg="Range",sg="Real",ag="Reciprocal",og="Relu",ig="Reshape",ug="ResizeNearestNeighbor",lg="ResizeNearestNeighborGrad",cg="ResizeBilinear",pg="ResizeBilinearGrad",hg="Relu6",dg="Reverse",fg="Round",mg="Rsqrt",gg="ScatterNd",yg="SearchSorted",bg="Select",xg="Selu",wg="Slice",kg="Sin",vg="Sinh",Ng="Sign",Sg="Sigmoid",Ig="Softplus",Tg="Sqrt",Eg="Sum",$g="SpaceToBatchND",Cg="SplitV",Ag="Softmax",_g="SparseFillEmptyRows",Rg="SparseReshape",Dg="SparseSegmentMean",Fg="SparseSegmentSum",Og="SparseToDense",Mg="SquaredDifference",Lg="Square",zg="StridedSlice",Bg="StringNGrams",Pg="StringSplit",Wg="StringToHashBucketFast",Vg="Sub",Ug="Tan",Gg="Tanh",Hg="Tile",qg="TopK",jg="Transform",Kg="Transpose",Xg="Unique",Yg="Unpack",Zg="UnsortedSegmentSum",Jg="ZerosLike",Qg="Step",ey="FromPixels",ty="RotateWithOffset",ny="_FusedMatMul",ry="FusedConv2D",sy="FusedDepthwiseConv2D";var ay={};function oy(...e){qd().getBool("IS_TEST")||qd().getBool("PROD")||console.warn(...e)}function iy(...e){qd().getBool("IS_TEST")||qd().getBool("PROD")||console.log(...e)}t(ay,"warn",(()=>oy)),t(ay,"log",(()=>iy));const uy=Yd("kernelRegistry",(()=>new Map)),ly=Yd("gradRegistry",(()=>new Map));function cy(e,t){const n=my(e,t);return uy.get(n)}function py(e){return ly.get(e)}function hy(e){const t=uy.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function dy(e){const{kernelName:t,backendName:n}=e,r=my(t,n);uy.has(r)&&oy(`The kernel '${t}' for backend '${n}' is already registered`),uy.set(r,e)}function fy(e){const{kernelName:t}=e;ly.has(t)&&qd().getBool("DEBUG")&&oy(`Overriding the gradient for '${t}'`),ly.set(t,e)}function my(e,t){return`${t}_${e}`}var gy={};t(gy,"createScalarValue",(()=>_y)),t(gy,"encodeString",(()=>Oy)),t(gy,"toTypedArray",(()=>Ry)),t(gy,"now",(()=>Dy)),t(gy,"fetch",(()=>Fy)),t(gy,"decodeString",(()=>My));var yy={};t(yy,"hexToLong",(()=>xy)),t(yy,"fingerPrint64",(()=>Ay));const by=Ve.default||Ve;function xy(e){return by.fromString(e,!0,16)}const wy=xy("c3a5c85c97cb3127"),ky=xy("b492b66fbe98f273"),vy=xy("9ae16a3b2f90404f");function Ny(e){return e.xor(e.shru(47))}function Sy(e,t,n){const r=e.slice(t,t+n);return by.fromBytes(Array.from(r),!0,!0)}function Iy(e,t){return Sy(e,t,8)}function Ty(e,t){return Sy(e,t,4)}function Ey(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function $y(e,t,n=xy("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function Cy(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=Ey(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(Ey(s,44)),[s.add(r),a.add(o)]}(Iy(e,t),Iy(e,t+8),Iy(e,t+16),Iy(e,t+24),n,r)}function Ay(e,t=e.length){const n=by.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=vy.add(2*t),r=Iy(e,0).add(vy),s=Iy(e,t-8);return $y(Ey(s,37).mul(n).add(r),Ey(r,25).add(s).mul(n),n)}if(t>=4){const n=vy.add(2*t);return $y(Ty(e,0).shl(3).add(t),Ty(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return Ny(vy.mul(n).xor(wy.mul(r))).mul(vy)}return vy}(e,t):function(e,t=e.length){const n=vy.add(2*t),r=Iy(e,0).mul(ky),s=Iy(e,8),a=Iy(e,t-8).mul(n),o=Iy(e,t-16).mul(vy);return $y(Ey(r.add(s),43).add(Ey(a,30)).add(o),r.add(Ey(s.add(vy),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=vy.add(2*t),r=Iy(e,0).mul(vy),s=Iy(e,8),a=Iy(e,t-8).mul(n),o=Iy(e,t-16).mul(vy),i=Ey(r.add(s),43).add(Ey(a,30)).add(o),u=$y(i,r.add(Ey(s.add(vy),18)).add(a),n),l=Iy(e,16).mul(n),c=Iy(e,24),p=i.add(Iy(e,t-32)).mul(n),h=u.add(Iy(e,t-24)).mul(n);return $y(Ey(l.add(c),43).add(Ey(p,30)).add(h),l.add(Ey(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(ky).add(113),a=Ny(s.mul(vy).add(113)).mul(vy),o=[by.UZERO,by.UZERO],i=[by.UZERO,by.UZERO];r=r.mul(vy).add(Iy(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=Ey(r.add(s).add(o[0]).add(Iy(e,u+8)),37).mul(ky),s=Ey(s.add(o[1]).add(Iy(e,u+48)),42).mul(ky),r=r.xor(i[1]),s=s.add(o[0]).add(Iy(e,u+40)),a=Ey(a.add(i[0]),33).mul(ky),o=Cy(e,u,o[1].mul(ky),r.add(i[0])),i=Cy(e,u+32,a.add(i[1]),s.add(Iy(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const p=ky.add(a.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=Ey(r.add(s).add(o[0]).add(Iy(e,u+8)),37).mul(p),s=Ey(s.add(o[1]).add(Iy(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(Iy(e,u+40))),a=Ey(a.add(i[0]),33).mul(p),o=Cy(e,u,o[1].mul(p),r.add(i[0])),i=Cy(e,u+32,a.add(i[1]),s.add(Iy(e,u+16))),[a,r]=[r,a],$y($y(o[0],i[0],p).add(Ny(s).mul(wy)).add(a),$y(o[1],i[1],p).add(r),p)}function _y(e,t){return"string"===t?Oy(e):Ry([e],t)}function Ry(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=od(e)),qd().getBool("DEBUG")&&kd(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Dy(){return qd().platform.now()}function Fy(e,t){return qd().platform.fetch(e,t)}function Oy(e,t="utf-8"){return t=t||"utf-8",qd().platform.encode(e,t)}function My(e,t="utf-8"){return t=t||"utf-8",qd().platform.decode(e,t)}n(gy,Kh),n(gy,yy);class Ly{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new By)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=Dy();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:Dy()-o})}if(qd().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{zy(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function zy(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class By{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?fd(`${r}ms`,9):r.error,i=fd(e,25),u=t.rank,l=t.size,c=fd(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Py(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}function Wy(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!ld(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}function Vy(e,t,n,r){const s=Dd(t),a=function(e,t,n,r){const s=id(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?qy(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],Uy(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=Hy(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function Uy(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Ed(e)?`'${e}'`:"bool"===n?Gy(e):parseFloat(e.toFixed(7)).toString(),fd(r,t)}function Gy(e){return 0===e?"false":"true"}function Hy(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[Uy(qy(e)[0],0,n)]}return"bool"===n?[Gy(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=qy(r),a=qy(a)),["["+r.map(((e,t)=>Uy(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Uy(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?qy(e):Array.from(e)).map(((e,t)=>Uy(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...Hy(e.slice(r,a),l,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...Hy(e.slice(r,a),l,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...Hy(e.slice(r,a),l,n,c,s,t===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function qy(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class jy{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=id(e),null!=n){const e=n.length;rd(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||wd(t,this.size),this.strides=Dd(e)}set(e,...t){0===t.length&&(t=[0]),rd(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ky().makeTensor(this.values,this.shape,this.dtype)}}let Ky=null,Xy=null,Yy=null;function Zy(e){Ky=e}class Jy{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=id(e),this.strides=Dd(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Xy.buffer(this.shape,this.dtype,e)}bufferSync(){return Xy.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Od(this.shape,e,"complex64"===this.dtype)}arraySync(){return Od(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Ky().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>My(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Ky().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Ky().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>My(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ky().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ky().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Xy.print(this,e)}clone(){return this.throwIfDisposed(),Xy.clone(this)}toString(e=!1){return Vy(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Xy.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Ky().makeVariable(this,e,t,n)}}function Qy(){return Yd("Tensor",(()=>Jy))}Object.defineProperty(Jy,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Qy();class eb extends Jy{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!ld(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ky().disposeTensor(this),this.dataId=e.dataId,Ky().incRef(this,null)}dispose(){Ky().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(eb,Symbol.hasInstance,{value:e=>e instanceof Jy&&null!=e.assign&&e.assign instanceof Function});var tb,nb,rb,sb,ab,ob={};t(ob,"makeTypesMatch",(()=>cb)),t(ob,"assertTypesMatch",(()=>pb)),t(ob,"isTensorInList",(()=>hb)),t(ob,"getTensorsInContainer",(()=>db)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(tb||(tb={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(nb||(nb={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(rb||(rb={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(sb||(sb={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ab||(ab={}));const ib={float32:sb,int32:nb,bool:rb,complex64:ab};function ub(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ib[e][t]}function lb(e){return ub(e,"int32")}function cb(e,t){if(e.dtype===t.dtype)return[e,t];const n=ub(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function pb(e,t){rd(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function hb(e,t){return t.some((t=>t.id===e.id))}function db(e){const t=[];return fb(e,t,new Set),t}function fb(e,t,n){if(null==e)return;if(e instanceof Jy)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),fb(r,t,n))}}function mb(e){return null!=e.kernelName}class gb{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class yb{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new gb}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(oy(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Ly(this.backendInstance),!0}setupRegisteredKernels(){hy(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){hy(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof qh||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,oy(`Initialization of backend ${e} failed`),oy(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return oy(`Initialization of backend ${e} failed`),oy(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return yb.nextTensorId++}nextVariableId(){return yb.nextVariableId++}clone(e){const t=xb.runKernel(pm,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return xb.runKernel(wf,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=cy(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=mb(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(mb(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=cy(t,this.backendName);rd(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,p=mb(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(u,l,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=py(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(rd(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&Ed(e[0])&&(s=e.map((e=>Oy(e))));const a=r.write(s,t,n),o=new Jy(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=Td(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new Jy(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new eb(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Id(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof eb||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Id(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=py(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Ld(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=db(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(rd(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));rd(s instanceof Jy,(()=>"The result y returned by f() must be a tensor."));const a=Py(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Md(id(e),"float32");return xb.makeTensor(t,e,"float32")}(s.shape):n,Wy(e,a,(e=>this.tidy(e)),wb);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return rd(_d(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;rd(t.every((e=>e instanceof Jy)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),rd(n.value instanceof Jy,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),rd(_d(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];rd(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),rd(a.every((e=>e instanceof Jy)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Dy(),n=await this.backend.time(e);return n.wallMs=Dy()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new gb;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function bb(){const e=Xd();if(null==e._tfengine){const t=new Gd(e);e._tfengine=new yb(t)}var t;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */return t=e._tfengine.ENV,Kd=t,Zy((()=>e._tfengine)),e._tfengine}yb.nextTensorId=0,yb.nextVariableId=0;const xb=bb();function wb(e,t){const n={a:e,b:t};return xb.runKernel(ef,n)}var kb={};let vb;function Nb(e){vb=e}function Sb(e){if(void 0!==vb)return vb;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ib(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(kb,"mockIsMobile",(()=>Nb)),t(kb,"isMobile",(()=>Sb)),t(kb,"isBrowser",(()=>Ib));const Tb=qd();function Eb(e,t){let n=e;if(Sd(e))return"string"===t?[]:[e.length];if("object"==typeof e&&"texture"in e){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Sd(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&qd().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&$b(e,r,[]),r}function $b(e,t,n){if(n=n||[],!Array.isArray(e)&&!Sd(e))return void rd(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));rd(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),rd(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)$b(e[t],r,n.concat(t))}function Cb(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function Ab(e,t,n,r="numeric"){if(e instanceof Jy)return Cb(r,e.dtype,t,n),e;let s=Ad(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Cb(r,s,t,n),null==e||!Sd(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Eb(e,s);Sd(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?Ry(e,s):od(e,[],!0);return xb.makeTensor(o,a,s)}function _b(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>Ab(e,`${t}[${s}]`,n,r)))}Tb.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Tb.registerFlag("IS_BROWSER",(()=>Ib())),Tb.registerFlag("IS_NODE",(()=>void 0!==ce&&void 0!==ce.versions&&void 0!==ce.versions.node)),Tb.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Tb.registerFlag("PROD",(()=>!1)),Tb.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Tb.getBool("DEBUG"))),Tb.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Tb.registerFlag("IS_TEST",(()=>!1)),Tb.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Tb.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Tb.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),Tb.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Tb.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Rb="__op";function Db(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Rb;const s=(...e)=>{xb.startScope(n);try{const t=r(...e);return Vd(t)&&console.error("Cannot return a Promise inside of tidy."),xb.endScope(t),t}catch(e){throw xb.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Fb=Db({complex_:function(e,t){const n=Ab(e,"real","complex"),r=Ab(t,"imag","complex");sd(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return xb.runKernel(Nf,s)}});function Ob(e,t,n,r){if(null==r&&(r=Ad(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if("object"==typeof e&&"texture"in e){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from texture only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return e.channels=e.channels||"RGBA",xb.backend.createTensorFromTexture(e,t||n,r)}if(!Sd(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Bd(t);const e=id(t),r=id(n);rd(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==id(t.slice(e));rd(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Sd(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Ry(e,r):od(e,[],!0),xb.makeTensor(e,t,r)}function Mb(e,t,n){return Ob(e,t,Eb(e,n),n)}const Lb={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var zb=$n;async function Bb(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:Wb(await Promise.all(r)),specs:n}}function Pb(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=id(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=Lb[n.dtype],c=e.slice(s,s+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Qb()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=id(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=Lb[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=Mb(e,i,"float32"),o=Mb(r,i,"float32");n[t]=Fb(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=Mb(l,i,o))}return n}function Wb(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Vb=void 0!==zb&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ub(e){return Vb?zb.byteLength(e):new Blob([e]).size}function Gb(e){if(Vb)return zb.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function Hb(e){if(Vb){const t=zb.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function qb(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function jb(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Kb(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Xb(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function Yb(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Xb(e,n,r)}function Zb(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ub(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ub(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Jb(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Qb(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class ex{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ex.instance&&(ex.instance=new ex),ex.instance}static registerSaveRouter(e){ex.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ex.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ex.getHandlers(e,"save")}static getLoadHandlers(e,t){return ex.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?ex.getInstance().loadRouters:ex.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const tx=e=>ex.registerSaveRouter(e),nx=e=>ex.registerLoadRouter(e),rx=e=>ex.getSaveHandlers(e),sx=(e,t)=>ex.getLoadHandlers(e,t),ax="tensorflowjs",ox="models_store",ix="model_info_store";function ux(){if(!qd().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function lx(e){const t=e.result;t.createObjectStore(ox,{keyPath:"modelPath"}),t.createObjectStore(ix,{keyPath:"modelPath"})}class cx{constructor(e){if(this.indexedDB=ux(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(ax,1);r.onupgradeneeded=()=>lx(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(ox,"readonly"),r=t.objectStore(ox).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Zb(t),a=s.transaction(ix,"readwrite");let o=a.objectStore(ix);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction(ox,"readwrite");const i=u.objectStore(ox).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore(ix);const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}cx.URL_SCHEME="indexeddb://";const px=e=>{return qd().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(cx.URL_SCHEME)?(t=e.slice(cx.URL_SCHEME.length),new cx(t)):null;var t};ex.registerSaveRouter(px),ex.registerLoadRouter(px);class hx{constructor(){this.indexedDB=ux()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ax,1);n.onupgradeneeded=()=>lx(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(ix,"readonly"),a=s.objectStore(ix).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(cx.URL_SCHEME)?t.slice(cx.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(ax,1);r.onupgradeneeded=()=>lx(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(ix,"readwrite"),o=a.objectStore(ix),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction(ox,"readwrite");const r=u.objectStore(ox).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const dx="/",fx="tensorflowjs_models",mx="info",gx="model_topology",yx="weight_specs",bx="weight_data",xx="model_metadata";function wx(e){return{info:[fx,e,mx].join(dx),topology:[fx,e,gx].join(dx),weightSpecs:[fx,e,yx].join(dx),weightData:[fx,e,bx].join(dx),modelMetadata:[fx,e,xx].join(dx)}}function kx(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function vx(e){const t=e.split(dx);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(dx)}class Nx{constructor(e){if(!qd().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=wx(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Zb(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Gb(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw kx(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Hb(a),t}}Nx.URL_SCHEME="localstorage://";const Sx=e=>{return qd().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Nx.URL_SCHEME)?(t=e.slice(Nx.URL_SCHEME.length),new Nx(t)):null;var t};ex.registerSaveRouter(Sx),ex.registerLoadRouter(Sx);class Ix{constructor(){rd(qd().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),rd("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=fx+dx,n=dx+mx;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[vx(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=wx(e=(t=e).startsWith(Nx.URL_SCHEME)?t.slice(Nx.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return kx(n),r}}const Tx="://";class Ex{constructor(){this.managers={}}static getInstance(){return null==Ex.instance&&(Ex.instance=new Ex),Ex.instance}static registerManager(e,t){rd(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Tx)&&(e=e.slice(0,e.indexOf(Tx))),rd(e.length>0,(()=>"scheme must not be an empty string."));const n=Ex.getInstance();rd(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Ex.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Ex.getInstance().managers)}}function $x(e){if(-1===e.indexOf(Tx))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Ex.getSchemes().join(",")}`);return{scheme:e.split(Tx)[0],path:e.split(Tx)[1]}}async function Cx(e,t,n=!1){rd(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=ex.getLoadHandlers(e);rd(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),rd(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=ex.getSaveHandlers(t);rd(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),rd(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=$x(e).scheme,u=$x(e).path,l=i===$x(e).scheme,c=await s.load();n&&l&&await Ex.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await Ex.getManager(i).removeModel(u),p.modelArtifactsInfo}async function Ax(){const e=Ex.getSchemes(),t={};for(const n of e){const e=await Ex.getManager(n).listModels();for(const r in e){t[n+Tx+r]=e[r]}}return t}async function _x(e){const t=$x(e);return Ex.getManager(t.scheme).removeModel(t.path)}async function Rx(e,t){return Cx(e,t,!1)}async function Dx(e,t){return Cx(e,t,!0)}class Fx{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&qd().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(qd().get("IS_BROWSER")){qd().setPlatform("browser",new Fx);try{Ex.registerManager(Nx.URL_SCHEME,new Ix)}catch(e){}try{Ex.registerManager(cx.URL_SCHEME,new hx)}catch(e){}}const Ox=()=>a("foUwZ");let Mx;function Lx(e,t="float32",n){return t=t||"float32",Bd(e),new jy(e,t,n)}qd().get("IS_NODE")&&!qd().get("IS_BROWSER")&&qd().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=qd().global.fetch?qd().global.fetch(e,t):(null==Mx&&(Mx=Ox()),Mx(e,t))}now(){const e=ce.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const zx=Db({cast_:function(e,t){const n=Ab(e,"x","cast");if(!vd(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return xb.runKernel(wf,r,s)}});const Bx=Db({clone_:function(e){const t={x:Ab(e,"x","clone","string_or_numeric")};return xb.runKernel(pm,t)}});function Px(e,t=!1){console.log(e.toString(t))}bb();!function(e){Xy=e}({buffer:Lx,cast:zx,clone:Bx,print:Px});var Wx={};t(Wx,"copyModel",(()=>Rx)),t(Wx,"listModels",(()=>Ax)),t(Wx,"moveModel",(()=>Dx)),t(Wx,"removeModel",(()=>_x)),t(Wx,"browserFiles",(()=>Hx)),t(Wx,"browserHTTPRequest",(()=>ew)),t(Wx,"concatenateArrayBuffers",(()=>qb)),t(Wx,"decodeWeights",(()=>Pb)),t(Wx,"encodeWeights",(()=>Bb)),t(Wx,"fromMemory",(()=>sw)),t(Wx,"fromMemorySync",(()=>aw)),t(Wx,"getLoadHandlers",(()=>sx)),t(Wx,"getModelArtifactsForJSON",(()=>Yb)),t(Wx,"getModelArtifactsForJSONSync",(()=>Xb)),t(Wx,"getModelArtifactsInfoForJSON",(()=>Zb)),t(Wx,"getSaveHandlers",(()=>rx)),t(Wx,"getWeightSpecs",(()=>Jb)),t(Wx,"http",(()=>Qx)),t(Wx,"isHTTPScheme",(()=>Zx)),t(Wx,"loadWeights",(()=>Kx)),t(Wx,"registerLoadRouter",(()=>nx)),t(Wx,"registerSaveRouter",(()=>tx)),t(Wx,"weightsLoaderFactory",(()=>Xx)),t(Wx,"withSaveHandler",(()=>ow)),t(Wx,"withSaveHandlerSync",(()=>iw));function Vx(e){return new Promise((e=>setTimeout(e))).then(e)}class Ux{constructor(e){if(!qd().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ux.URL_SCHEME)&&(e=e.slice(Ux.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Kb(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Vx((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Vx((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Zb(e)}}}}Ux.URL_SCHEME="downloads://";class Gx{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Yb(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,qb(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>jb(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=jb(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Hx(e){return new Gx(e)}function qx(e,t,n,r){!function(e){rd(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){rd(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),rd(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),rd(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function jx(e,t){null==t&&(t={});const n=null==t.fetchFunc?qd().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await qx(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await qx(s,t.onProgress,.5,1)}async function Kx(e,t="",n,r){return Xx((e=>jx(e,{requestInit:r})))(e,t,n)}function Xx(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=Lb[u]*id(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=Pb(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}ex.registerSaveRouter((e=>qd().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ux.URL_SCHEME)?function(e="model"){return new Ux(e)}(e.slice(Ux.URL_SCHEME.length)):null));class Yx{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(rd("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=qd().platform.fetch,rd(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&rd(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Kb(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Zb(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Yb(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Jb(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,qb(await jx(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Zx(e){return null!=e.match(Yx.URL_SCHEME_REGEX)}Yx.URL_SCHEME_REGEX=/^https?:\/\//;const Jx=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Zx(e))):Zx(e),n)return Qx(e,t)}return null};function Qx(e,t){return new Yx(e,t)}function ew(e,t){return Qx(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ex.registerSaveRouter(Jx),ex.registerLoadRouter(Jx);class tw{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class nw{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class rw{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function sw(e,t,n,r){const s=arguments;return new rw(aw(...s))}function aw(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new tw(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tw({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tw({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function ow(e){return new nw(e)}function iw(e){return new nw(e)}var uw={};function lw(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function cw(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function pw(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(uw,"getBroadcastDims",(()=>lw)),t(uw,"getReductionAxes",(()=>cw)),t(uw,"assertAndGetBroadcastShape",(()=>pw));var hw={};function dw(e,t,n){if(ad(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Eb(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ob(e,t,r,n)}let fw;function mw(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=cy(ey,xb.backendName)){const n={pixels:e},r={numChannels:t};return xb.runKernel(ey,n,r)}const[u,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,u,l).data;else if(r||n)c=e.data;else if(a||s||i){if(null==fw)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");fw=new OffscreenCanvas(1,1).getContext("2d")}else fw=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});fw.canvas.width=u,fw.canvas.height=l,fw.drawImage(e,0,0,u,l),c=fw.getImageData(0,0,u,l).data}if(4===t)p=new Int32Array(c);else{const e=u*l;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return dw(p,[l,u,t],"int32")}function gw(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function yw(e,t=3){let n=null;if(qd().getBool("WRAP_TO_IMAGEBITMAP")&&gw(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return mw(n,t)}async function bw(e,t){let n=Ab(e,"img","toPixels");if(!(e instanceof Jy)){const e=n;n=zx(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=o[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*i,t[1]=s*i,t[2]=s*i):t[r]=s*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}t(hw,"fromPixelsAsync",(()=>yw)),t(hw,"toPixels",(()=>bw)),t(hw,"fromPixels",(()=>xw));const xw=Db({fromPixels_:mw});var ww={};t(ww,"assertParamsValid",(()=>kw)),t(ww,"maskToAxes",(()=>vw)),t(ww,"computeOutShape",(()=>Nw)),t(ww,"stridesWithElidedDims",(()=>Sw)),t(ww,"getNormalizedAxes",(()=>Ew)),t(ww,"startIndicesWithElidedDims",(()=>$w)),t(ww,"stopIndicesWithElidedDims",(()=>Cw)),t(ww,"startForAxis",(()=>_w)),t(ww,"stopForAxis",(()=>Rw)),t(ww,"stridesForAxis",(()=>Aw)),t(ww,"isSliceContinous",(()=>Dw)),t(ww,"computeFlatOffset",(()=>Fw)),t(ww,"parseSliceParams",(()=>Ow)),t(ww,"sliceInfo",(()=>Mw));function kw(e,t,n){const r=e.shape.length;rd(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),rd(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)rd(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function vw(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Nw(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function Sw(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function Iw(e,t,n){return n<=e?n:n-(t-1)}function Tw(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Ew(e,t,n,r,s,a,o,i,u){const l=e.length;let c=new Array(l),p=new Array(l),h=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=$w(o,u,l,r,e),p=Cw(i,u,l,s,e),h=Sw(a,u,l,e)}else for(let t=0;t<l;t++)c[t]=_w(o,r,a,e,t,u),p[t]=Rw(i,s,a,e,t,u),h[t]=Aw(a,t,u);return{begin:c,end:p,strides:h}}function $w(e,t,n,r,s){const a=[...s],o=Tw(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=Iw(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function Cw(e,t,n,r,s){const a=[...s],o=Tw(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=Iw(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=Zh(0,a[e],s[e])}return a}function Aw(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function _w(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=Zh(0,o,u-1),o}function Rw(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=i>0?Zh(0,o,u):Zh(-1,o,u-1),o}function Dw(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function Fw(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Ow(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{rd(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(rd(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function Mw(e,t,n,r,s,a,o,i,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[h.beginMask&1<<t,h.endMask&1<<t],a=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=Lw(h.begin[t],0,h.strides[t],r,s,a),h.end[t]=Lw(h.end[t],1,h.strides[t],r,s,a);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,u=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],u=!0):n?(i=1,u=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,u=!0),u){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==h.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function Lw(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var zw={};t(zw,"Serializable",(()=>Bw)),t(zw,"SerializationMap",(()=>Pw)),t(zw,"registerClass",(()=>Ww));class Bw{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Pw{constructor(){this.classNameMap={}}static getMap(){return null==Pw.instance&&(Pw.instance=new Pw),Pw.instance}static register(e){Pw.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ww(e){rd(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),rd("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),rd(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Pw.register(e)}
/** @license See the LICENSE file. */var Vw={};t(Vw,"fromUint8ToStringArray",(()=>Yv)),t(Vw,"fromStringArrayToUint8",(()=>Zv)),t(Vw,"slice_util",(()=>ww)),t(Vw,"upcastType",(()=>ub)),t(Vw,"segment_util",(()=>Uw));var Uw={};t(Uw,"segOpComputeOptimalWindowSize",(()=>jw)),t(Uw,"computeOutShape",(()=>Kw)),t(Uw,"collectGatherOpShapeInfo",(()=>Xw));var Gw={};t(Gw,"PARALLELIZE_THRESHOLD",(()=>Hw)),t(Gw,"computeOptimalWindowSize",(()=>qw));const Hw=30;function qw(e){return e<=Hw?e:Rd(e,Math.floor(Math.sqrt(e)))}function jw(e,t){let n,r=!1;for(e<=Hw?(n=e,r=!0):n=Rd(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Rd(e,n+1);return n}function Kw(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function Xw(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}var Yw={};function Zw(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Jw(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function Qw(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function ek(e,t){return Jw(e,t.map((e=>1)),t)}function tk(e,t,n){rd(Zw(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function nk(e,t){if(Zw(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function rk(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function sk(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(Yw,"axesAreInnerMostDims",(()=>Zw)),t(Yw,"combineLocations",(()=>Jw)),t(Yw,"computeOutAndReduceShapes",(()=>Qw)),t(Yw,"expandShapeToKeepDim",(()=>ek)),t(Yw,"assertAxesAreInnerMostDims",(()=>tk)),t(Yw,"getAxesPermutation",(()=>nk)),t(Yw,"getUndoAxesPermutation",(()=>rk)),t(Yw,"getInnerMostAxes",(()=>sk));var ak={};function ok(e,t){const n=e[0].length;e.forEach(((e,t)=>{rd(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),rd(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)rd(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function ik(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t(ak,"assertParamsConsistent",(()=>ok)),t(ak,"computeOutShape",(()=>ik));var uk={};function lk(e,t,n,r,s="NHWC",a){return hk(e,[...t,e[3]],n,a,r,null,null,kk(s))}function ck(e,t,n,r,s,a,o="channelsLast"){const[i,u]=mk(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return hk(e,l,n,r,s,a,!1,o)}function pk(e,t,n,r,s,a,o="NDHWC"){const[i,u,l]=gk(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,u,l,e[1],e[1]]}return dk(e,c,n,r,s,!1,p,a)}function hk(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[h,d,,f]=t,[m,g]=mk(n),[y,b]=mk(r),x=yk(h,y),w=yk(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=fk(e,t,n));const a=e[0],o=e[1],i=bk((a-t+2*r)/n+1,s),u=bk((o-t+2*r)/n+1,s);return[i,u]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);l={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=bk((t-a+h+d)/r+1,i),p=bk((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[u,S,v,N]:"channelsLast"===i&&(I=[u,v,N,S]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function dk(e,t,n,r,s,a=!1,o="channelsLast",i){let[u,l,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=gk(n),[w,k,v]=gk(r),N=yk(d,w),S=yk(f,k),I=yk(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,s,a,o,i,u,l,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=fk(e,t,r));const o=e[0],i=e[1],u=e[2],l=bk((o-t+2*s)/r+1,a),c=bk((i-t+2*s)/r+1,a),p=bk((u-t+2*s)/r+1,a);return[l,c,p,n]}([t,n,r,1],i,1,s,e,c);h=a[0],d=a[1],f=a[2]}else if("same"===e){h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+u-n,m=(f-1)*o+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,l,c,p,y,b,x,N,S,I,i),A=a?g*h:g;let _;return"channelsFirst"===o?_=[u,A,E,$,C]:"channelsLast"===o&&(_=[u,E,$,C,A]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:_,filterShape:t}}function fk(e,t,n,r=1){const s=yk(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function mk(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function gk(e){return"number"==typeof e?[e,e,e]:e}function yk(e,t){return t<=1?e:e+(e-1)*(t-1)}function bk(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function xk(e){const[t,n,r]=mk(e);return 1===t&&1===n&&1===r}function wk(e,t){return xk(e)||xk(t)}function kk(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function vk(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)rd(cd(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{rd(cd(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(uk,"computeDilation2DInfo",(()=>lk)),t(uk,"convertConv2DDataFormat",(()=>kk)),t(uk,"computeConv2DInfo",(()=>hk)),t(uk,"computePool2DInfo",(()=>ck)),t(uk,"computePool3DInfo",(()=>pk)),t(uk,"computeConv3DInfo",(()=>dk)),t(uk,"computeDefaultPad",(()=>fk)),t(uk,"tupleValuesAreOne",(()=>xk)),t(uk,"eitherStridesOrDilationsAreOne",(()=>wk)),t(uk,"checkPadOnDimRoundingMode",(()=>vk));var Nk={};t(Nk,"getFusedDyActivation",(()=>Fk)),t(Nk,"getFusedBiasGradient",(()=>Ok)),t(Nk,"applyActivation",(()=>Mk)),t(Nk,"shouldFuse",(()=>Lk));const Sk=Db({elu_:function(e){const t={x:Ab(e,"x","elu","float32")};return xb.runKernel(Kf,t)}});const Ik=Db({leakyRelu_:function(e,t=.2){const n={x:Ab(e,"x","leakyRelu")},r={alpha:t};return xb.runKernel(ym,n,r)}});const Tk=Db({mul_:function(e,t){let n=Ab(e,"a","mul"),r=Ab(t,"b","mul");[n,r]=cb(n,r);const s={a:n,b:r};return xb.runKernel(Wm,s)}});const Ek=Db({prelu_:function(e,t){const n={x:Ab(e,"x","prelu"),alpha:Ab(t,"alpha","prelu")};return xb.runKernel(Jm,n)}});const $k=Db({relu_:function(e){const t={x:Ab(e,"x","relu")};return xb.runKernel(og,t)}});const Ck=Db({relu6_:function(e){const t={x:Ab(e,"x","relu6")};return xb.runKernel(hg,t)}});const Ak=Db({reshape_:function(e,t){const n={x:Ab(e,"x","reshape","string_or_numeric")},r={shape:t};return xb.runKernel(ig,n,r)}});const _k=Db({sigmoid_:function(e){const t={x:Ab(e,"x","sigmoid","float32")};return xb.runKernel(Sg,t)}});const Rk=Db({step_:function(e,t=0){const n={x:Ab(e,"x","step")},r={alpha:t};return xb.runKernel(Qg,n,r)}});const Dk=Db({sum_:function(e,t=null,n=!1){let r=Ab(e,"x","sum");"bool"===r.dtype&&(r=zx(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return xb.runKernel(Eg,s,a)}});function Fk(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Tk(e,Rk(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ok(e,t){let n=t;const r=cw(e.shape,t.shape);return r.length>0&&(n=Dk(n,r)),Ak(n,e.shape)}function Mk(e,t,n,r){if("linear"===t)return e;if("relu"===t)return $k(e);if("elu"===t)return Sk(e);if("relu6"===t)return Ck(e);if("prelu"===t)return Ek(e,n);if("leakyrelu"===t)return Ik(e,r);if("sigmoid"===t)return _k(e);throw new Error(`Unknown fused activation ${t}.`)}const Lk=(e,t)=>!(e>0)||"linear"===t;var zk,Bk,Pk={};function Wk(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],o=r[r.length-n.length+s],i=r[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${i}`)}else r[o]=a}return r}function Vk(e){const t={FIRST_DIM_SIZE:zk.FIRST_DIM_SIZE,VALUE_ROWIDS:zk.VALUE_ROWIDS,ROW_LENGTHS:zk.ROW_LENGTHS,ROW_SPLITS:zk.ROW_SPLITS,ROW_LIMITS:zk.ROW_LIMITS,ROW_STARTS:zk.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function Uk(e){return 0===e.length?0:e[0]===zk.FIRST_DIM_SIZE?e.length-1:e.length}function Gk(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}t(Pk,"RowPartitionType",(()=>zk)),t(Pk,"combineRaggedTensorToTensorShapes",(()=>Wk)),t(Pk,"getRowPartitionTypesHelper",(()=>Vk)),t(Pk,"getRaggedRank",(()=>Uk)),t(Pk,"validateDefaultValueShape",(()=>Gk)),(Bk=zk||(zk={}))[Bk.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",Bk[Bk.VALUE_ROWIDS=1]="VALUE_ROWIDS",Bk[Bk.ROW_LENGTHS=2]="ROW_LENGTHS",Bk[Bk.ROW_SPLITS=3]="ROW_SPLITS",Bk[Bk.ROW_LIMITS=4]="ROW_LIMITS",Bk[Bk.ROW_STARTS=5]="ROW_STARTS";var Hk={};function qk(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(Hk,"getImageCenter",(()=>qk));var jk={};function Kk(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function Xk(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Yk(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function Zk(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Jk(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}t(jk,"getReshaped",(()=>Kk)),t(jk,"getPermuted",(()=>Xk)),t(jk,"getReshapedPermuted",(()=>Yk)),t(jk,"getSliceBeginCoords",(()=>Zk)),t(jk,"getSliceSize",(()=>Jk));var Qk={};function ev(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===id(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,u=s.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=i[e],u.push(i[e]);const c=[...Dd(e.shape).map((e=>e/l)),1].slice(0,a);return[u,o,l,c]}t(Qk,"prepareAndValidate",(()=>ev));var tv={};function nv(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function rv(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}nv(n,t,e)}function sv(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:id(t.shape)/i,sliceSize:o,strides:[...Dd(n.slice(0,s)),1],outputSize:id(n)}}t(tv,"validateUpdateShape",(()=>nv)),t(tv,"validateInput",(()=>rv)),t(tv,"calculateShapes",(()=>sv));var av={};t(av,"SELU_SCALEALPHA",(()=>ov)),t(av,"SELU_SCALE",(()=>iv));const ov=1.7580993408473768,iv=1.0507009873554805;var uv={};t(uv,"ERF_P",(()=>lv)),t(uv,"ERF_A1",(()=>cv)),t(uv,"ERF_A2",(()=>pv)),t(uv,"ERF_A3",(()=>hv)),t(uv,"ERF_A4",(()=>dv)),t(uv,"ERF_A5",(()=>fv));const lv=.3275911,cv=.254829592,pv=-.284496736,hv=1.421413741,dv=-1.453152027,fv=1.061405429;var mv={};function gv(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function yv(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function bv(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function xv(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function wv(e,t){return{real:e[2*t],imag:e[2*t+1]}}function kv(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function vv(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Nv(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(mv,"mergeRealAndImagArrays",(()=>gv)),t(mv,"splitRealAndImagArrays",(()=>yv)),t(mv,"complexWithEvenIndex",(()=>bv)),t(mv,"complexWithOddIndex",(()=>xv)),t(mv,"getComplexWithIndex",(()=>wv)),t(mv,"assignToTypedArray",(()=>kv)),t(mv,"exponents",(()=>vv)),t(mv,"exponent",(()=>Nv));var Sv={};t(Sv,"decodeEinsumEquation",(()=>Ev)),t(Sv,"getEinsumPermutation",(()=>$v)),t(Sv,"checkEinsumDimSizes",(()=>Cv)),t(Sv,"getEinsumComputePath",(()=>Av)),t(Sv,"isIdentityPermutation",(()=>_v));const Iv="->",Tv=/->/g;function Ev(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Tv,"").length)/Iv.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split(Iv);rd(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=r.split(","),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const u=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(i.indexOf(a[e][t]))}const l=i.length,c=[];for(let e=s.length;e<l;++e)c.push(e);return{allDims:i,summedDims:c,idDims:u}}function $v(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Cv(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:rd(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function Av(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=Rv(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function _v(e){return e.every(((e,t)=>e===t))}function Rv(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var Dv={};function Fv(e,t,n=0){let r=[];if("number"==typeof t)rd(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{rd(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}rd(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}t(Dv,"prepareSplitSize",(()=>Fv));var Ov={};function Mv(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Lv(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function zv(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(Ov,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>Mv)),t(Ov,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>Lv)),t(Ov,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>zv));var Bv={};function Pv(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Wv(e,t){return`size ${e} must be non-negative, not ${t}`}function Vv(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Uv(e,t){return`Input to reshape is a SparseTensor with ${id(e)}\n  dense values, but the requested shape requires a multiple of ${id(t)}. inputShape=${e} outputShape= ${t}`}function Gv(e,t){return`Input to reshape is a tensor with ${id(e)} dense values, but the requested shape has ${id(t)}. inputShape=${e} outputShape=${t}`}t(Bv,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>Pv)),t(Bv,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>Wv)),t(Bv,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>Vv)),t(Bv,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>Uv)),t(Bv,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>Gv));var Hv={};function qv(){return"segment ids must be >= 0"}function jv(){return"segment ids are not increasing"}function Kv(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Xv(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Yv(e){try{return e.map((e=>My(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Zv(e){return e.map((e=>Oy(e)))}t(Hv,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>qv)),t(Hv,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>jv)),t(Hv,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>Kv)),t(Hv,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>Xv)),n(Vw,Yw),n(Vw,uw),n(Vw,ak),n(Vw,uk),n(Vw,Nk),n(Vw,{}),n(Vw,Pk),n(Vw,Gw),n(Vw,Hk),n(Vw,jk),n(Vw,Qk),n(Vw,tv),n(Vw,av),n(Vw,uv),n(Vw,ay),n(Vw,mv),n(Vw,Sv),n(Vw,Dv),n(Vw,Ov),n(Vw,Bv),n(Vw,Hv);var Jv={};function Qv(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||eN)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function eN(e,t){return e>t?1:e<t?-1:0}function tN(e,t,n,r,s){return sN(e,t,n,r,s,0)}function nN(e,t,n,r,s,a){return sN(e,t,n,r,s,0,!1,a,!0)}function rN(e,t,n,r,s,a){return sN(e,t,n,r,s,a,!0)}function sN(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(iN);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=aN(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*oN(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&Qv(l,t,iN))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),u&&(m.validOutputs=d),m}function aN(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),f=(p-l)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(u,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function oN(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function iN(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function uN(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Lx(e,"int32"),s=Lx([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}function lN(){return xb}function cN(){return xb.memory()}function pN(e,t){return xb.tidy(e,t)}function hN(e){db(e).forEach((e=>e.dispose()))}function dN(e){return xb.keep(e)}function fN(e,t,n=1){return xb.registerBackend(e,t,n)}function mN(e,t){rd(_d(e),(()=>"The f passed in variableGrads(f) must be a function")),rd(null==t||Array.isArray(t)&&t.every((e=>e instanceof eb)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in xb.registeredVariables)t.push(xb.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;rd((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:o}=xb.gradients(e,t,null,!0);rd(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),rd(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:a,grads:i}}function gN(e){return xb.customGrad(e)}t(Jv,"nonMaxSuppressionV3Impl",(()=>tN)),t(Jv,"nonMaxSuppressionV4Impl",(()=>nN)),t(Jv,"nonMaxSuppressionV5Impl",(()=>rN)),t(Jv,"whereImpl",(()=>uN)),function(e){Yy=e}((function(e){qd().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}));var yN={};t(yN,"spectral",(()=>t$)),t(yN,"signal",(()=>n$)),t(yN,"image",(()=>r$)),t(yN,"linalg",(()=>s$)),t(yN,"losses",(()=>a$)),t(yN,"sparse",(()=>o$)),t(yN,"string",(()=>i$)),t(yN,"abs",(()=>_S)),t(yN,"acos",(()=>wI)),t(yN,"acosh",(()=>kI)),t(yN,"add",(()=>RN)),t(yN,"addN",(()=>vI)),t(yN,"all",(()=>NI)),t(yN,"any",(()=>SI)),t(yN,"argMax",(()=>II)),t(yN,"argMin",(()=>TI)),t(yN,"asin",(()=>EI)),t(yN,"asinh",(()=>$I)),t(yN,"atan",(()=>CI)),t(yN,"atan2",(()=>AI)),t(yN,"atanh",(()=>_I)),t(yN,"avgPool",(()=>RI)),t(yN,"avgPool3d",(()=>DI)),t(yN,"basicLSTMCell",(()=>OI)),t(yN,"batchToSpaceND",(()=>MI)),t(yN,"batchNorm",(()=>zI)),t(yN,"batchNorm2d",(()=>BI)),t(yN,"batchNorm3d",(()=>PI)),t(yN,"batchNorm4d",(()=>WI)),t(yN,"bincount",(()=>dS)),t(yN,"broadcastArgs",(()=>VI)),t(yN,"broadcastTo",(()=>wS)),t(yN,"buffer",(()=>Lx)),t(yN,"cast",(()=>zx)),t(yN,"ceil",(()=>UI)),t(yN,"clipByValue",(()=>GI)),t(yN,"clone",(()=>Bx)),t(yN,"complex",(()=>Fb)),t(yN,"concat",(()=>bN)),t(yN,"concat1d",(()=>HI)),t(yN,"concat2d",(()=>qI)),t(yN,"concat3d",(()=>jI)),t(yN,"concat4d",(()=>KI)),t(yN,"conv1d",(()=>XI)),t(yN,"conv2d",(()=>DN)),t(yN,"conv2dTranspose",(()=>YI)),t(yN,"conv3d",(()=>ZI)),t(yN,"conv3dTranspose",(()=>QI)),t(yN,"cos",(()=>eT)),t(yN,"cosh",(()=>tT)),t(yN,"cumprod",(()=>nT)),t(yN,"cumsum",(()=>rT)),t(yN,"denseBincount",(()=>sT)),t(yN,"depthToSpace",(()=>aT)),t(yN,"depthwiseConv2d",(()=>LN)),t(yN,"diag",(()=>oT)),t(yN,"dilation2d",(()=>iT)),t(yN,"div",(()=>yS)),t(yN,"divNoNan",(()=>lT)),t(yN,"dot",(()=>cT)),t(yN,"einsum",(()=>pT)),t(yN,"elu",(()=>Sk)),t(yN,"equal",(()=>uT)),t(yN,"erf",(()=>hT)),t(yN,"euclideanNorm",(()=>dT)),t(yN,"exp",(()=>uI)),t(yN,"expandDims",(()=>WS)),t(yN,"expm1",(()=>fT)),t(yN,"eye",(()=>VS)),t(yN,"fill",(()=>XN)),t(yN,"floor",(()=>mT)),t(yN,"floorDiv",(()=>gS)),t(yN,"gather",(()=>gT)),t(yN,"greater",(()=>mS)),t(yN,"greaterEqual",(()=>IS)),t(yN,"imag",(()=>xN)),t(yN,"isFinite",(()=>yT)),t(yN,"isInf",(()=>bT)),t(yN,"isNaN",(()=>xT)),t(yN,"leakyRelu",(()=>Ik)),t(yN,"less",(()=>wT)),t(yN,"lessEqual",(()=>fS)),t(yN,"linspace",(()=>kT)),t(yN,"localResponseNormalization",(()=>vT)),t(yN,"log",(()=>sI)),t(yN,"log1p",(()=>lI)),t(yN,"logSigmoid",(()=>ST)),t(yN,"logSoftmax",(()=>IT)),t(yN,"logSumExp",(()=>pI)),t(yN,"logicalAnd",(()=>TS)),t(yN,"logicalNot",(()=>TT)),t(yN,"logicalOr",(()=>ET)),t(yN,"logicalXor",(()=>$T)),t(yN,"lowerBound",(()=>RT)),t(yN,"matMul",(()=>WN)),t(yN,"max",(()=>RS)),t(yN,"maxPool",(()=>DT)),t(yN,"maxPool3d",(()=>FT)),t(yN,"maxPoolWithArgmax",(()=>OT)),t(yN,"maximum",(()=>MT)),t(yN,"mean",(()=>XS)),t(yN,"meshgrid",(()=>LT)),t(yN,"min",(()=>DS)),t(yN,"minimum",(()=>nI)),t(yN,"mirrorPad",(()=>zT)),t(yN,"mod",(()=>BT)),t(yN,"moments",(()=>PT)),t(yN,"mul",(()=>Tk)),t(yN,"multiRNNCell",(()=>WT)),t(yN,"multinomial",(()=>VT)),t(yN,"neg",(()=>US)),t(yN,"notEqual",(()=>YS)),t(yN,"oneHot",(()=>UT)),t(yN,"ones",(()=>ZS)),t(yN,"onesLike",(()=>GT)),t(yN,"outerProduct",(()=>HT)),t(yN,"pad",(()=>qT)),t(yN,"pad1d",(()=>jT)),t(yN,"pad2d",(()=>KT)),t(yN,"pad3d",(()=>XT)),t(yN,"pad4d",(()=>YT)),t(yN,"pool",(()=>JT)),t(yN,"pow",(()=>FS)),t(yN,"prelu",(()=>Ek)),t(yN,"print",(()=>Px)),t(yN,"prod",(()=>QT)),t(yN,"raggedGather",(()=>eE)),t(yN,"raggedRange",(()=>tE)),t(yN,"raggedTensorToTensor",(()=>nE)),t(yN,"rand",(()=>rE)),t(yN,"randomGamma",(()=>iE)),t(yN,"randomNormal",(()=>uE)),t(yN,"randomStandardNormal",(()=>lE)),t(yN,"randomUniform",(()=>cE)),t(yN,"range",(()=>vS)),t(yN,"real",(()=>wN)),t(yN,"reciprocal",(()=>pE)),t(yN,"relu",(()=>$k)),t(yN,"relu6",(()=>Ck)),t(yN,"reshape",(()=>Ak)),t(yN,"reverse",(()=>$N)),t(yN,"reverse1d",(()=>hE)),t(yN,"reverse2d",(()=>dE)),t(yN,"reverse3d",(()=>fE)),t(yN,"reverse4d",(()=>mE)),t(yN,"round",(()=>xS)),t(yN,"rsqrt",(()=>gE)),t(yN,"scalar",(()=>CN)),t(yN,"selu",(()=>yE)),t(yN,"separableConv2d",(()=>bE)),t(yN,"setdiff1dAsync",(()=>xE)),t(yN,"sigmoid",(()=>_k)),t(yN,"sign",(()=>wE)),t(yN,"sin",(()=>kE)),t(yN,"sinh",(()=>vE)),t(yN,"slice",(()=>kN)),t(yN,"slice1d",(()=>NE)),t(yN,"slice2d",(()=>SE)),t(yN,"slice3d",(()=>IE)),t(yN,"slice4d",(()=>TE)),t(yN,"softmax",(()=>EE)),t(yN,"softplus",(()=>NT)),t(yN,"spaceToBatchND",(()=>ZT)),t(yN,"fft",(()=>IN)),t(yN,"ifft",(()=>EN)),t(yN,"irfft",(()=>AN)),t(yN,"rfft",(()=>TN)),t(yN,"split",(()=>vN)),t(yN,"sqrt",(()=>OS)),t(yN,"square",(()=>MS)),t(yN,"squaredDifference",(()=>oI)),t(yN,"squeeze",(()=>BS)),t(yN,"stack",(()=>ES)),t(yN,"step",(()=>Rk)),t(yN,"stridedSlice",(()=>$E)),t(yN,"sub",(()=>bS)),t(yN,"sum",(()=>Dk)),t(yN,"tan",(()=>CE)),t(yN,"tanh",(()=>FI)),t(yN,"tensor",(()=>Mb)),t(yN,"tensor1d",(()=>GN)),t(yN,"tensor2d",(()=>YN)),t(yN,"tensor3d",(()=>dw)),t(yN,"tensor4d",(()=>AE)),t(yN,"tensor5d",(()=>_E)),t(yN,"tensor6d",(()=>RE)),t(yN,"tile",(()=>tS)),t(yN,"topk",(()=>DE)),t(yN,"truncatedNormal",(()=>FE)),t(yN,"unique",(()=>OE)),t(yN,"unsortedSegmentSum",(()=>ME)),t(yN,"unstack",(()=>$S)),t(yN,"upperBound",(()=>LE)),t(yN,"variable",(()=>zE)),t(yN,"where",(()=>kS)),t(yN,"whereAsync",(()=>BE)),t(yN,"zeros",(()=>NN)),t(yN,"zerosLike",(()=>SN)),t(yN,"op",(()=>Db)),t(yN,"OP_SCOPE_SUFFIX",(()=>Rb)),t(yN,"fused",(()=>_N));const bN=Db({concat_:function(e,t=0){rd(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=_b(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Bx(n[0]);const r=n,s={axis:t};return xb.runKernel(If,r,s)}});const xN=Db({imag_:function(e){const t={input:Ab(e,"input","imag")};return xb.runKernel(dm,t)}});const wN=Db({real_:function(e){const t={input:Ab(e,"input","real")};return xb.runKernel(sg,t)}});const kN=Db({slice_:function(e,t,n){const r=Ab(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return xb.runKernel(wg,s,a)}});const vN=Db({split_:function(e,t,n=0){const r={x:Ab(e,"x","split")},s={numOrSizeSplits:t,axis:n};return xb.runKernel(Cg,r,s)}});function NN(e,t="float32"){if("complex64"===t){const t=NN(e,"float32"),n=NN(e,"float32");return Fb(t,n)}const n=Ld(id(e),t);return xb.makeTensor(n,e,t)}const SN=Db({zerosLike_:function(e){const t={x:Ab(e,"x","zerosLike")};return xb.runKernel(Jg,t)}});const IN=Db({fft_:function(e){rd("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return xb.runKernel(tm,t)}});const TN=Db({rfft_:function(e,t){rd("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=kN(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=bN([e,NN(r)],e.shape.length-1),n=t}else s=e;const a=SN(s),o=Ak(Fb(s,a),[r,n]),i=IN(o),u=Math.floor(n/2)+1,l=wN(i),c=xN(i),p=vN(l,[u,n-u],l.shape.length-1),h=vN(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,Ak(Fb(p[0],h[0]),d)}});const EN=Db({ifft_:function(e){rd("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return xb.runKernel(hm,t)}});const $N=Db({reverse_:function(e,t){const n={x:Ab(e,"x","reverse")},r={dims:t};return xb.runKernel(dg,n,r)}});function CN(e,t){if((Sd(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Sd(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ob(e,[],[],t)}const AN=Db({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Ak(e,[n,t]);r=EN(s)}else{const s=[n,2*(t-1)],a=Ak(wN(e),[n,t]),o=Ak(xN(e),[n,t]),i=$N(kN(a,[0,1],[n,t-2]),1),u=Tk($N(kN(o,[0,1],[n,t-2]),1),CN(-1)),l=bN([a,i],1),c=bN([o,u],1),p=Ak(Fb(l,c),[s[0],s[1]]);r=EN(p)}if(r=wN(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Ak(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var _N={};t(_N,"conv2d",(()=>MN)),t(_N,"depthwiseConv2d",(()=>PN)),t(_N,"matMul",(()=>VN));const RN=Db({add_:function(e,t){let n=Ab(e,"a","add"),r=Ab(t,"b","add");[n,r]=cb(n,r);const s={a:n,b:r};return xb.runKernel(ef,s)}});const DN=Db({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Ab(e,"x","conv2d","float32"),u=Ab(t,"filter","conv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Ak(i,[1,i.shape[0],i.shape[1],i.shape[2]])),rd(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),rd(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),vk("conv2d",r,o);const p="NHWC"===s?l.shape[3]:l.shape[1];rd(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),rd(wk(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=xb.runKernel(Tf,h,d);return c?Ak(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const FN=Db({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=Ak(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Ak(t,[1,t.shape[0],t.shape[1],t.shape[2]])),rd(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),rd(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),rd(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];rd(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),rd(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),vk("conv2dDerFilter",s,o);const p={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return xb.runKernel(Ef,p,h)}});const ON=Db({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){rd(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=Ak(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),rd(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),rd(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),rd(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];rd(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),rd(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),vk("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=xb.runKernel($f,h,d);return l?Ak(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const MN=Db({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===Lk(xb.state.gradientDepth,u)){rd("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=DN(e,t,n,r,s,a,o);return null!=i&&(p=RN(p,i)),Mk(p,u,l,c)}const p=Ab(e,"x","conv2d","float32"),h=Ab(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Ak(p,[1,p.shape[0],p.shape[1],p.shape[2]])),rd(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),rd(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),vk("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];rd(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),rd(wk(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=hk(d.shape,h.shape,n,a,r,o);let y,b;if(null!=i&&(y=Ab(i,"bias","fused conv2d"),[y]=cb(y,p),"NHWC"===s?pw(g.outShape,y.shape):(rd(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),rd(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(rd(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)rd(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{pw(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=Ab(l,"prelu weights","fused conv2d")}const x=(e,t)=>{rd("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,l,c]=t,p=Fk(e,l,u);rd(xk(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[ON(i.shape,p,o,n,r),FN(i,p,o.shape,n,r)];if(null!=c){const e=Ok(c,p);h.push(e)}return h},w={x:d,filter:h,bias:y,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=gN(((e,t,n)=>{let r=xb.runKernel(ry,w,k);return n([t,e,r]),f&&(r=Ak(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=gN(((e,t,n,r)=>{let s=xb.runKernel(ry,w,k);return r([t,e,s,n]),f&&(s=Ak(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,y)}}});const LN=Db({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Ab(e,"x","depthwiseConv2d","float32"),u=Ab(t,"filter","depthwiseConv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=Ak(i,[1,i.shape[0],i.shape[1],i.shape[2]])),rd(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),rd(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const p="NHWC"===s?l.shape[3]:l.shape[1];rd(p===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${u.shape[2]}.`)),vk("depthwiseConv2d",r,o);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=xb.runKernel(Bf,h,d);return c?Ak(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const zN=Db({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=Ak(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Ak(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return xb.runKernel(Pf,l,c)}});const BN=Db({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=Ak(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=xb.runKernel(Wf,l,c);return u?Ak(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const PN=Db({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===Lk(xb.state.gradientDepth,u)){let p=LN(e,t,n,r,s,a,o);return null!=i&&(p=RN(p,i)),Mk(p,u,l,c)}const p=Ab(e,"x","depthwiseConv2d","float32"),h=Ab(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Ak(p,[1,p.shape[0],p.shape[1],p.shape[2]])),rd(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),rd(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),rd(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),rd(wk(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),vk("fused depthwiseConv2d",r,o);const m=hk(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=Ab(i,"bias","fused conv2d"),[g]=cb(g,p),pw(m.outShape,g.shape)),null!=l&&(y=Ab(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{rd(xk(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,l,c]=t,p=Fk(e,l,u),h=BN(i.shape,p,s,n,r,a,o),d=zN(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,Ok(g,p)]}return[h,d]},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=gN(((e,t,n)=>{let r=xb.runKernel(sy,x,w);return n([t,e,r]),f&&(r=Ak(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=gN(((e,t,n,r)=>{let s=xb.runKernel(sy,x,w);return r([t,e,s,n]),f&&(s=Ak(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,g)}}});const WN=Db({matMul_:function(e,t,n=!1,r=!1){let s=Ab(e,"a","matMul"),a=Ab(t,"b","matMul");[s,a]=cb(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return xb.runKernel(gf,o,i)}});const VN=Db({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Lk(xb.state.gradientDepth,a)){let u=WN(e,t,n,r);return null!=s&&(u=RN(u,s)),Mk(u,a,o,i)}let u=Ab(e,"a","fused matMul"),l=Ab(t,"b","fused matMul");[u,l]=cb(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],p=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=id(f),y=id(m);rd(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=pw(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,d]),x=Ak(u,n?[g,c,h]:[g,h,c]),w=Ak(l,r?[y,d,p]:[y,p,d]);let k,v;null!=s&&(k=Ab(s,"bias","fused matMul"),[k]=cb(k,u),pw(b,k.shape)),null!=o&&(v=Ab(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,u,l]=t,c=Fk(Ak(e,u.shape),u,a);let p,h;if(n||r?!n&&r?(p=WN(c,i,!1,!1),h=WN(c,o,!0,!1)):n&&!r?(p=WN(i,c,!1,!0),h=WN(o,c,!1,!1)):(p=WN(i,c,!0,!0),h=WN(c,o,!0,!0)):(p=WN(c,i,!1,!0),h=WN(o,c,!0,!1)),null!=s){return[p,h,Ok(l,c)]}return[p,h]},S={a:x,b:w,bias:k,preluActivationWeights:v},I={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=gN(((e,t,n)=>{const r=xb.runKernel(ny,S,I);return n([e,t,r]),{value:Ak(r,b),gradFunc:N}}));return e(x,w)}{const e=gN(((e,t,n,r)=>{const s=xb.runKernel(ny,S,I);return r([e,t,s,n]),{value:Ak(s,b),gradFunc:N}}));return e(x,w,k)}}});var UN={};function GN(e,t){ad(e);const n=Eb(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ob(e,null,n,t)}function HN(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function qN(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return GN(s,"float32")}t(UN,"enclosingPowerOfTwo",(()=>HN)),t(UN,"cosineWindow",(()=>qN));const jN=Db({hammingWindow_:function(e){return qN(e,.54,.46)}});const KN=Db({hannWindow_:function(e){return qN(e,.5,.5)}});function XN(e,t,n){const r={shape:e,value:t,dtype:n};return xb.runKernel(nm,{},r)}function YN(e,t,n){if(ad(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Eb(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ob(e,t,r,n)}const ZN=Db({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(kN(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=bN([kN(e,a,t-r),XN([r],s)]);o.push(i),a+=n}return 0===o.length?YN([],[0,t]):Ak(bN(o),[o.length,t])}});const JN=Db({stft_:function(e,t,n,r,s=KN){null==r&&(r=HN(t));const a=ZN(e,t,n),o=Tk(a,s(t));return TN(o,r)}});const QN=Db({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=Ab(e,"image","cropAndResize"),i=Ab(t,"boxes","cropAndResize","float32"),u=Ab(n,"boxInd","cropAndResize","int32"),l=i.shape[0];rd(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),rd(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),rd(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),rd(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),rd(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),rd("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return xb.runKernel(Mf,c,p)}});const eS=Db({flipLeftRight_:function(e){const t=Ab(e,"image","flipLeftRight","float32");rd(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return xb.runKernel(rm,n,{})}});const tS=Db({tile_:function(e,t){const n=Ab(e,"x","tile","string_or_numeric");rd(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return xb.runKernel(Hg,r,s)}});const nS=Db({grayscaleToRGB_:function(e){const t=Ab(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];rd(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),rd(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,tS(t,s)}});const rS=Db({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Ab(e,"image","rotateWithOffset","float32");rd(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return xb.runKernel(ty,a,o)}});function sS(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),rd(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),rd(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),rd(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),rd(1===t.rank,(()=>"scores must be a 1D tensor")),rd(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),rd(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const aS=Db({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ab(e,"boxes","nonMaxSuppression","float32"),o=Ab(t,"scores","nonMaxSuppression","float32"),i=sS(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return xb.runKernel(Gm,{boxes:a,scores:o},u)}});const oS=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ab(e,"boxes","nonMaxSuppressionAsync"),o=Ab(t,"scores","nonMaxSuppressionAsync"),i=sS(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=tN(l,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),GN(p,"int32")};const iS=Db({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Ab(e,"boxes","nonMaxSuppression"),i=Ab(t,"scores","nonMaxSuppression"),u=sS(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=xb.runKernel(qm,l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const uS=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Ab(e,"boxes","nonMaxSuppressionAsync"),i=Ab(t,"scores","nonMaxSuppressionAsync"),u=sS(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:h,selectedScores:d}=rN(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:GN(h,"int32"),selectedScores:GN(d)}};const lS=Db({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Ab(e,"boxes","nonMaxSuppression"),i=Ab(t,"scores","nonMaxSuppression"),u=sS(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=xb.runKernel(Hm,l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const cS=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Ab(e,"boxes","nonMaxSuppressionAsync"),i=Ab(t,"scores","nonMaxSuppressionAsync"),u=sS(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=nN(h,d,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:GN(f,"int32"),validOutputs:CN(m,"int32")}};const pS=Db({resizeBilinear_:function(e,t,n=!1,r=!1){const s=Ab(e,"images","resizeBilinear");rd(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),rd(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),rd(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Ak(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=xb.runKernel(cg,i,u);return o?Ak(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const hS=Db({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=Ab(e,"images","resizeNearestNeighbor");rd(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),rd(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),rd("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),rd(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=Ak(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=xb.runKernel(ug,i,u);return o?Ak(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const dS=Db({bincount_:function(e,t,n){const r=Ab(e,"x","bincount"),s=Ab(t,"weights","bincount");rd("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),rd(n>=0,(()=>`size must be non-negative, but got ${n}.`)),rd(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return xb.runKernel(bf,a,o)}});const fS=Db({lessEqual_:function(e,t){let n=Ab(e,"a","lessEqual","string_or_numeric"),r=Ab(t,"b","lessEqual","string_or_numeric");[n,r]=cb(n,r),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(xm,s)}});const mS=Db({greater_:function(e,t){let n=Ab(e,"a","greater","string_or_numeric"),r=Ab(t,"b","greater","string_or_numeric");[n,r]=cb(n,r),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(lm,s)}});const gS=Db({floorDiv_:function(e,t){let n=Ab(e,"a","floorDiv"),r=Ab(t,"b","floorDiv");[n,r]=cb(n,r);const s={a:n,b:r};return xb.runKernel(am,s)}});const yS=Db({div_:function(e,t){let n=Ab(e,"a","div"),r=Ab(t,"b","div");if([n,r]=cb(n,r),"int32"===n.dtype&&"int32"===r.dtype)return gS(n,r);const s={a:n,b:r};return xb.runKernel(qf,s,{})}});const bS=Db({sub_:function(e,t){let n=Ab(e,"a","sub"),r=Ab(t,"b","sub");[n,r]=cb(n,r);const s={a:n,b:r};return xb.runKernel(Vg,s)}});const xS=Db({round_:function(e){const t={x:Ab(e,"x","round")};return xb.runKernel(fg,t)}});const wS=Db({broadcastTo_:function(e,t){let n=Ab(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Ak(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Bx(n);const o={x:n},i={reps:a};return xb.runKernel(Hg,o,i)}});const kS=Db({where_:function(e,t,n){const r=Ab(t,"a","where"),s=Ab(n,"b","where"),a=Ab(e,"condition","where","bool"),o=pw(pw(a.shape,r.shape),s.shape),i={condition:wS(a,o),t:wS(r,o),e:wS(s,o)};return xb.runKernel(bg,i)}});function vS(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return xb.runKernel(rg,{},s)}const NS=Db({threshold_:function(e,t="binary",n=!1,r=.5){const s=Ab(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,c=Tk(GN([r]),255);if(rd(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),rd(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),rd("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),rd("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=vN(s,[1,1,1],-1);const e=Tk(o,.2989),t=Tk(i,.587),n=Tk(u,.114);l=RN(RN(e,t),n)}else l=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,u=GN([-1]),l=GN([0]),c=GN([0]);for(let p=0;p<e.size-1;p++){n=kN(e,0,p+1),r=kN(e,p+1),o=yS(Dk(n),t),i=yS(Dk(r),t);const h=Dk(Tk(n,vS(0,n.size)));s=yS(h,Dk(n));const d=XN(r.shape,n.size),f=RN(vS(0,r.size),d),m=Tk(r,f);a=yS(Dk(m),Dk(r));const g=bS(s,a),y=bS(s,a),b=Tk(o,i);c=Tk(Tk(b,g),y);const x=mS(c,l);l=kS(x,c,l),u=kS(x,GN([p]),u)}return u}(dS(zx(xS(l),"int32"),Mb([]),256),a)}const p=n?fS(l,c):mS(l,c);return zx(Tk(p,255),"int32")}});const SS=Db({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=Ab(e,"image","transform","float32"),i=Ab(t,"transforms","transform","float32");rd(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),rd(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),rd(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return xb.runKernel(jg,u,l)}});const IS=Db({greaterEqual_:function(e,t){let n=Ab(e,"a","greaterEqual","string_or_numeric"),r=Ab(t,"b","greaterEqual","string_or_numeric");[n,r]=cb(n,r),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(cm,s)}});const TS=Db({logicalAnd_:function(e,t){const n=Ab(e,"a","logicalAnd","bool"),r=Ab(t,"b","logicalAnd","bool");pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(Nm,s)}});const ES=Db({stack_:function(e,t=0){const n=_b(e,"tensors","stack","string_or_numeric");rd(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&rd(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return xb.runKernel(Xm,r,s)}});const $S=Db({unstack_:function(e,t=0){const n=Ab(e,"x","unstack","string_or_numeric");rd(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return xb.runKernel(Yg,r,s)}});const CS=Db({bandPart_:function(e,t,n){rd(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),rd(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Ab(e,"a","bandPart");rd(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Ak(vS(0,a,1,"int32"),[-1,1]),u=vS(0,o,1,"int32"),l=bS(i,u),c=TS(fS(l,CN(+t,"int32")),IS(l,CN(-n,"int32"))),p=NN([a,o],r.dtype);return Ak(ES($S(Ak(r,[-1,a,o])).map((e=>kS(c,e,p)))),s)}});var AS={};t(AS,"norm",(()=>zS));const _S=Db({abs_:function(e){const t=Ab(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return xb.runKernel(Sf,e)}{const e={x:t};return xb.runKernel(Zd,e)}}});const RS=Db({max_:function(e,t=null,n=!1){const r={x:Ab(e,"x","max")},s={reductionIndices:t,keepDims:n};return xb.runKernel($m,r,s)}});const DS=Db({min_:function(e,t=null,n=!1){const r={x:Ab(e,"x","min")},s={axis:t,keepDims:n};return xb.runKernel(Mm,r,s)}});const FS=Db({pow_:function(e,t){let n=Ab(e,"base","pow"),r=Ab(t,"exp","pow");[n,r]=cb(n,r);const s={a:n,b:r};return xb.runKernel(Zm,s)}});const OS=Db({sqrt_:function(e){const t={x:Ab(e,"x","sqrt","float32")};return xb.runKernel(Tg,t)}});const MS=Db({square_:function(e){const t=Ab(e,"x","square");return xb.runKernel("Square",{x:t},{})}});function LS(e,t,n=null){if(0===e.rank)return _S(e);if(1!==e.rank&&null===n)return LS(Ak(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Dk(_S(e),n);if(t===1/0)return RS(_S(e),n);if(t===-1/0)return DS(_S(e),n);if("euclidean"===t||2===t)return OS(Dk(FS(_S(e),CN(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return RS(Dk(_S(e),n[0]),n[1]-1);if(t===1/0)return RS(Dk(_S(e),n[1]),n[0]);if(t===-1/0)return DS(Dk(_S(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return OS(Dk(MS(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const zS=Db({norm_:function(e,t="euclidean",n=null,r=!1){const s=LS(e=Ab(e,"x","norm"),t,n);let a=s.shape;if(r){const t=yd(n,e.shape);a=ek(s.shape,t)}return Ak(s,a)}});const BS=Db({squeeze_:function(e,t){const n=Ab(e,"x","squeeze","string_or_numeric");return Ak(n,bd(n.shape,t).newShape)}});const PS=Db({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,rd(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)rd(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=vN(e,e.shape[0],0).map((e=>BS(e,[0])));rd(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(xb.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=Tk(Dk(Tk(n[r],e)),n[r]);e=bS(e,t)}return yS(e,zS(e,"euclidean"))})));return t?ES(n,0):n}});const WS=Db({expandDims_:function(e,t=0){const n=Ab(e,"x","expandDims","string_or_numeric");rd(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return xb.runKernel(Qf,r,s)}});const VS=Db({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Lx([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=Ak(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return tS(WS(o,0),[n[0],1,1]);if(2===n.length)return tS(WS(WS(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return tS(WS(WS(WS(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const US=Db({neg_:function(e){const t={x:Ab(e,"x","neg")};return xb.runKernel(Vm,t)}});var GS={};t(GS,"transpose",(()=>HS));const HS=Db({transpose_:function(e,t,n){const r=Ab(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),rd(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{rd(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?pN((()=>{let e=wN(r),t=xN(r);return e=xb.runKernel(Kg,{x:e},a),t=xb.runKernel(Kg,{x:t},a),n&&(t=US(t)),Fb(e,t)})):xb.runKernel(Kg,s,a)}});function qS(e,t=!1){return xb.tidy((()=>{rd(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=VS(n),a=Bx(e);const o=YN([[1]],[1,1]);let i=Bx(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=xb.tidy((()=>{const t=kN(a,[e,e],[n-e,1]),u=zS(t),l=kN(a,[e,e],[1,1]),c=kS(mS(l,0),YN([[-1]]),YN([[1]])),p=bS(l,Tk(c,u)),h=yS(t,p);i=1===h.shape[0]?Bx(o):bN([o,kN(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=US(yS(WN(c,p),u)),f=kN(a,[e,0],[n-e,r]),m=Tk(d,i),g=HS(i);if(0===e)a=bS(f,WN(m,WN(g,f)));else{const t=bS(f,WN(m,WN(g,f)));a=bN([kN(a,[0,0],[e,r]),t],0)}const y=HS(m),b=kN(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=bS(b,WN(WN(b,i),y));else{const t=bS(b,WN(WN(b,i),y));s=bN([kN(s,[0,0],[n,e]),t],1)}return[i,a,s]})),hN([t,u,l])}return!t&&n>r&&(s=kN(s,[0,0],[n,r]),a=kN(a,[0,0],[r,r])),[s,a]}))}const jS=Db({qr_:function(e,t=!1){if(rd(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return qS(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=$S(Ak(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=qS(e,t);s.push(n),a.push(r)}));return[Ak(ES(s,0),e.shape),Ak(ES(a,0),e.shape)]}}});var KS;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(KS||(KS={}));const XS=Db({mean_:function(e,t=null,n=!1){const r={x:Ab(e,"x","mean")},s={axis:t,keepDims:n};return xb.runKernel(Om,r,s)}});const YS=Db({notEqual_:function(e,t){let n=Ab(e,"a","notEqual","string_or_numeric"),r=Ab(t,"b","notEqual","string_or_numeric");[n,r]=cb(n,r),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(Um,s)}});function ZS(e,t="float32"){if("complex64"===t){const t=ZS(e,"float32"),n=NN(e,"float32");return Fb(t,n)}const n=Md(id(e),t);return xb.makeTensor(n,e,t)}const JS=Db({computeWeightedLoss_:function(e,t,n=KS.SUM_BY_NONZERO_WEIGHTS){const r=Ab(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Ab(t,"weights","computeWeightedLoss"));const a=null==s?r:Tk(r,s);if(n===KS.NONE)return a;if(n===KS.SUM)return Dk(a);if(n===KS.MEAN){if(null==s)return XS(a);{const e=r.size/s.size,t=yS(Dk(a),Dk(s));return e>1?yS(t,CN(e)):t}}if(n===KS.SUM_BY_NONZERO_WEIGHTS){if(null==s)return yS(Dk(a),CN(r.size));{const e=Tk(s,ZS(r.shape)),t=zx(Dk(YS(e,CN(0))),"float32");return yS(Dk(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const QS=Db({absoluteDifference_:function(e,t,n,r=KS.SUM_BY_NONZERO_WEIGHTS){const s=Ab(e,"labels","absoluteDifference"),a=Ab(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Ab(n,"weights","absoluteDifference")),sd(s.shape,a.shape,"Error in absoluteDifference: ");const i=_S(bS(s,a));return JS(i,o,r)}});const eI=Db({cosineDistance_:function(e,t,n,r,s=KS.SUM_BY_NONZERO_WEIGHTS){const a=Ab(e,"labels","cosineDistance"),o=Ab(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Ab(r,"weights","cosineDistance")),sd(a.shape,o.shape,"Error in cosineDistance: ");const u=CN(1),l=bS(u,Dk(Tk(a,o),n,!0));return JS(l,i,s)}});const tI=Db({hingeLoss_:function(e,t,n,r=KS.SUM_BY_NONZERO_WEIGHTS){let s=Ab(e,"labels","hingeLoss");const a=Ab(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Ab(n,"weights","hingeLoss")),sd(s.shape,a.shape,"Error in hingeLoss: ");const i=CN(1);s=bS(Tk(CN(2),s),i);const u=$k(bS(i,Tk(s,a)));return JS(u,o,r)}});const nI=Db({minimum_:function(e,t){let n=Ab(e,"a","minimum"),r=Ab(t,"b","minimum");[n,r]=cb(n,r),"bool"===n.dtype&&(n=zx(n,"int32"),r=zx(r,"int32")),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(Lm,s)}});const rI=Db({huberLoss_:function(e,t,n,r=1,s=KS.SUM_BY_NONZERO_WEIGHTS){const a=Ab(e,"labels","huberLoss"),o=Ab(t,"predictions","huberLoss");let i=null;null!=n&&(i=Ab(n,"weights","huberLoss")),sd(a.shape,o.shape,"Error in huberLoss: ");const u=CN(r),l=_S(bS(o,a)),c=nI(l,u),p=bS(l,c),h=RN(Tk(CN(.5),MS(c)),Tk(u,p));return JS(h,i,s)}});const sI=Db({log_:function(e){const t={x:Ab(e,"x","log","float32")};return xb.runKernel(km,t)}});const aI=Db({logLoss_:function(e,t,n,r=1e-7,s=KS.SUM_BY_NONZERO_WEIGHTS){const a=Ab(e,"labels","logLoss"),o=Ab(t,"predictions","logLoss");let i=null;null!=n&&(i=Ab(n,"weights","logLoss")),sd(a.shape,o.shape,"Error in logLoss: ");const u=CN(1),l=CN(r),c=US(Tk(a,sI(RN(o,l)))),p=Tk(bS(u,a),sI(RN(bS(u,o),l))),h=bS(c,p);return JS(h,i,s)}});const oI=Db({squaredDifference_:function(e,t){let n=Ab(e,"a","squaredDifference"),r=Ab(t,"b","squaredDifference");[n,r]=cb(n,r),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(Mg,s,{})}});const iI=Db({meanSquaredError_:function(e,t,n,r=KS.SUM_BY_NONZERO_WEIGHTS){const s=Ab(e,"labels","meanSquaredError"),a=Ab(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Ab(n,"weights","meanSquaredError")),sd(s.shape,a.shape,"Error in meanSquaredError: ");const i=oI(s,a);return JS(i,o,r)}});const uI=Db({exp_:function(e){const t={x:Ab(e,"x","exp")};return xb.runKernel(Jf,t)}});const lI=Db({log1p_:function(e){const t={x:Ab(e,"x","log1p")};return xb.runKernel(vm,t)}});const cI=Db({sigmoidCrossEntropy_:function(e,t,n,r=0,s=KS.SUM_BY_NONZERO_WEIGHTS){let a=Ab(e,"multiClassLabels","sigmoidCrossEntropy");const o=Ab(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Ab(n,"weights","sigmoidCrossEntropy")),sd(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=CN(r),t=CN(1),n=CN(.5);a=RN(Tk(a,bS(t,e)),Tk(n,e))}const u=function(e,t){const n=Ab(e,"labels","sigmoidCrossEntropyWithLogits"),r=Ab(t,"logits","sigmoidCrossEntropyWithLogits");sd(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=$k(r),a=Tk(r,n),o=lI(uI(US(_S(r))));return RN(bS(s,a),o)}(a,o);return JS(u,i,s)}});const pI=Db({logSumExp_:function(e,t=null,n=!1){const r=Ab(e,"x","logSumExp"),s=yd(t,r.shape),a=RS(r,s,!0),o=bS(r,a),i=uI(o),u=Dk(i,s),l=sI(u),c=RN(Ak(a,l.shape),l);if(n){const e=ek(c.shape,s);return Ak(c,e)}return c}});const hI=Db({softmaxCrossEntropy_:function(e,t,n,r=0,s=KS.SUM_BY_NONZERO_WEIGHTS){let a=Ab(e,"onehotLabels","softmaxCrossEntropy");const o=Ab(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Ab(n,"weights","softmaxCrossEntropy")),sd(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=CN(r),t=CN(1),n=CN(a.shape[1]);a=RN(Tk(a,bS(t,e)),yS(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=gN(((e,t,r)=>{const s=pI(t,[n],!0),a=bS(zx(t,"float32"),s);r([e,a]);const o=US(Tk(a,e));return{value:Dk(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=ek(e.shape,[n]);return[Tk(Ak(e,a),bS(zx(r,"float32"),uI(s))),Tk(Ak(e,a),bS(uI(s),zx(r,"float32")))]}}}));return r(e,t)}(a,o);return JS(u,i,s)}});const dI=Db({sparseFillEmptyRows_:function(e,t,n,r){const s=Ab(e,"indices","sparseFillEmptyRows","int32"),a=Ab(t,"values","sparseFillEmptyRows"),o=Ab(n,"denseShape","sparseFillEmptyRows","int32"),i=Ab(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=xb.runKernel(_g,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const fI=Db({sparseReshape_:function(e,t,n){const r=Ab(e,"inputIndices","sparseReshape","int32"),s=Ab(t,"inputShape","sparseReshape","int32"),a=Ab(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=xb.runKernel(Rg,o);return{outputIndices:i[0],outputShape:i[1]}}});const mI=Db({sparseSegmentMean_:function(e,t,n){const r=Ab(e,"data","sparseSegmentMean"),s=Ab(t,"indices","sparseSegmentMean","int32"),a=Ab(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return xb.runKernel(Dg,o)}});const gI=Db({sparseSegmentSum_:function(e,t,n){const r=Ab(e,"data","sparseSegmentSum"),s=Ab(t,"indices","sparseSegmentSum","int32"),a=Ab(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return xb.runKernel(Fg,o)}});const yI=Db({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=Ab(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=Ab(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},h=xb.runKernel(Bg,p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const bI=Db({stringSplit_:function(e,t,n=!0){const r=Ab(e,"input","stringSplit","string"),s=Ab(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=xb.runKernel(Pg,o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const xI=Db({stringToHashBucketFast_:function(e,t){const n=Ab(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return xb.runKernel(Wg,s,r)}});const wI=Db({acos_:function(e){const t={x:Ab(e,"x","acos")};return xb.runKernel(Jd,t)}});const kI=Db({acosh_:function(e){const t={x:Ab(e,"x","acosh")};return xb.runKernel(Qd,t)}});const vI=Db({addN_:function(e){rd(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),rd(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Ab(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!ld(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return xb.runKernel(tf,r)}});const NI=Db({all_:function(e,t=null,n=!1){const r={x:Ab(e,"x","all","bool")},s={axis:t,keepDims:n};return xb.runKernel(nf,r,s)}});const SI=Db({any_:function(e,t=null,n=!1){const r={x:Ab(e,"x","any","bool")},s={axis:t,keepDims:n};return xb.runKernel(rf,r,s)}});const II=Db({argMax_:function(e,t=0){const n={x:Ab(e,"x","argMax")},r={axis:t};return xb.runKernel(sf,n,r)}});const TI=Db({argMin_:function(e,t=0){const n={x:Ab(e,"x","argMin")},r={axis:t};return xb.runKernel(af,n,r)}});const EI=Db({asin_:function(e){const t={x:Ab(e,"x","asin")};return xb.runKernel(of,t)}});const $I=Db({asinh_:function(e){const t={x:Ab(e,"x","asinh")};return xb.runKernel(uf,t)}});const CI=Db({atan_:function(e){const t={x:Ab(e,"x","atan")};return xb.runKernel(lf,t)}});const AI=Db({atan2_:function(e,t){let n=Ab(e,"a","atan2"),r=Ab(t,"b","atan2");[n,r]=cb(n,r);const s={a:n,b:r};return xb.runKernel(pf,s)}});const _I=Db({atanh_:function(e){const t={x:Ab(e,"x","atanh")};return xb.runKernel(cf,t)}});const RI=Db({avgPool_:function(e,t,n,r,s){const a=Ab(e,"x","avgPool","float32");rd(wk(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=Ak(a,[1,a.shape[0],a.shape[1],a.shape[2]])),rd(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),vk("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=xb.runKernel(hf,u,l);return c=zx(c,a.dtype),i?Ak(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const DI=Db({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=Ab(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=Ak(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),rd(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),rd("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),vk("avgPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=xb.runKernel(ff,l,c);return p=zx(p,i.dtype),u?Ak(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const FI=Db({tanh_:function(e){const t={x:Ab(e,"x","tanh","float32")};return xb.runKernel(Gg,t)}});const OI=Db({basicLSTMCell_:function(e,t,n,r,s,a){const o=Ab(e,"forgetBias","basicLSTMCell"),i=Ab(t,"lstmKernel","basicLSTMCell"),u=Ab(n,"lstmBias","basicLSTMCell"),l=Ab(r,"data","basicLSTMCell"),c=Ab(s,"c","basicLSTMCell"),p=Ab(a,"h","basicLSTMCell"),h=bN([l,p],1),d=WN(h,i),f=RN(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=kN(f,[0,0],y),x=kN(f,[0,g],y),w=kN(f,[0,2*g],y),k=kN(f,[0,3*g],y),v=RN(Tk(_k(b),FI(x)),Tk(c,_k(RN(o,w))));return[v,Tk(FI(v),_k(k))]}});const MI=Db({batchToSpaceND_:function(e,t,n){const r=Ab(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));rd(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),rd(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),rd(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return xb.runKernel(yf,a,o)}});function LI(e){let t;return t=0===e.rank||1===e.rank?Ak(e,[1,1,1,e.size]):2===e.rank?Ak(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Ak(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}const zI=Db({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=Ab(e,"x","batchNorm"),i=Ab(t,"mean","batchNorm"),u=Ab(n,"variance","batchNorm");let l,c;null!=s&&(l=Ab(s,"scale","batchNorm")),null!=r&&(c=Ab(r,"offset","batchNorm")),rd(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),rd(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),rd(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:LI(o),scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},d=xb.runKernel(om,p,h);return Ak(d,o.shape)}});const BI=Db({batchNorm2d_:function(e,t,n,r,s,a){const o=Ab(e,"x","batchNorm"),i=Ab(t,"mean","batchNorm"),u=Ab(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ab(s,"scale","batchNorm")),null!=r&&(c=Ab(r,"offset","batchNorm")),rd(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),rd(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),rd(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&rd(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&rd(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),zI(o,i,u,c,l,a)}});const PI=Db({batchNorm3d_:function(e,t,n,r,s,a){const o=Ab(e,"x","batchNorm"),i=Ab(t,"mean","batchNorm"),u=Ab(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ab(s,"scale","batchNorm")),null!=r&&(c=Ab(r,"offset","batchNorm")),rd(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),rd(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),rd(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&rd(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&rd(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),zI(o,i,u,c,l,a)}});const WI=Db({batchNorm4d_:function(e,t,n,r,s,a){const o=Ab(e,"x","batchNorm"),i=Ab(t,"mean","batchNorm"),u=Ab(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ab(s,"scale","batchNorm")),null!=r&&(c=Ab(r,"offset","batchNorm")),rd(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),rd(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),rd(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&rd(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&rd(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),zI(o,i,u,c,l,a)}});const VI=Db({broadcastArgs_:function(e,t){const n=Ab(e,"s0","broadcastArgs","int32"),r=Ab(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return xb.runKernel(xf,s)}});const UI=Db({ceil_:function(e){const t={x:Ab(e,"x","ceil","float32")};return xb.runKernel(kf,t)}});const GI=Db({clipByValue_:function(e,t,n){const r=Ab(e,"x","clipByValue");if(rd(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return XN(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return xb.runKernel(vf,s,a)}});const HI=Db({concat1d_:function(e){return bN(e,0)}});const qI=Db({concat2d_:function(e,t){return bN(e,t)}});const jI=Db({concat3d_:function(e,t){return bN(e,t)}});const KI=Db({concat4d_:function(e,t){return bN(e,t)}});const XI=Db({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=Ab(e,"x","conv1d"),u=Ab(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=Ak(i,[1,i.shape[0],i.shape[1]])),rd(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),rd(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),vk("conv1d",r,o),rd(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),rd(wk(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),rd("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=Ak(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=Ak(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=DN(h,p,[1,n],r,"NHWC",[1,a],o);return Ak(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const YI=Db({conv2dTranspose_:function(e,t,n,r,s,a){const o=Ab(e,"x","conv2dTranspose"),i=Ab(t,"filter","conv2dTranspose");return ON(n,o,i,r,s,"NHWC",a)}});const ZI=Db({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=Ab(e,"x","conv3d"),i=Ab(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=Ak(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),rd(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),rd(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),rd(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),rd(wk(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),rd("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=xb.runKernel(Cf,c,p);return l?Ak(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const JI=Db({conv3DBackpropInput_:function(e,t,n,r,s){rd(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Ak(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];rd(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),rd(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),rd(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),rd(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),rd(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=xb.runKernel(_f,c,p);return i?Ak(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const QI=Db({conv3dTranspose_:function(e,t,n,r,s){const a=Ab(e,"x","conv3dTranspose"),o=Ab(t,"filter","conv3dTranspose");return JI(n,a,o,r,s)}});const eT=Db({cos_:function(e){const t={x:Ab(e,"x","cos","float32")};return xb.runKernel(Rf,t)}});const tT=Db({cosh_:function(e){const t={x:Ab(e,"x","cosh","float32")};return xb.runKernel(Df,t)}});const nT=Db({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:Ab(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return xb.runKernel(Ff,s,a)}});const rT=Db({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:Ab(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return xb.runKernel(Of,s,a)}});const sT=Db({denseBincount_:function(e,t,n,r=!1){const s=Ab(e,"x","denseBincount"),a=Ab(t,"weights","denseBincount");rd("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),rd(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),rd(n>=0,(()=>`size must be non-negative, but got ${n}.`)),rd(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return xb.runKernel(Lf,o,i)}});const aT=Db({depthToSpace_:function(e,t,n="NHWC"){const r=Ab(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];rd(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),rd(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),rd(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),rd(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return xb.runKernel(zf,i,u)}});const oT=Db({diag_:function(e){const t={x:Ab(e,"x","diag")};return xb.runKernel(Vf,t)}});const iT=Db({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=Ab(e,"x","dilation2d"),i=Ab(t,"filter","dilation2d");rd(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),rd(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),rd("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=Ak(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},h=xb.runKernel(Uf,c,p);return l?Ak(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const uT=Db({equal_:function(e,t){let n=Ab(e,"a","equal","string_or_numeric"),r=Ab(t,"b","equal","string_or_numeric");[n,r]=cb(n,r),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(Zf,s)}});const lT=Db({divNoNan_:function(e,t){let n=Ab(e,"a","div"),r=Ab(t,"b","div");[n,r]=cb(n,r);const s=yS(n,r),a=SN(s),o=uT(r,a);return kS(o,a,s)}});const cT=Db({dot_:function(e,t){const n=Ab(e,"t1","dot"),r=Ab(t,"t2","dot");rd(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(rd(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Ak(n,[1,-1]),t=Ak(r,[-1,1]),s=WN(e,t);return Ak(s,[])}if(1===n.rank&&2===r.rank){const e=Ak(n,[1,-1]),t=Ak(r,[r.shape[0],r.shape[1]]),s=WN(e,t);return Ak(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Ak(r,[-1,1]),t=WN(n,e);return Ak(t,[t.size])}{const e=Ak(r,[r.shape[0],r.shape[1]]);return WN(n,e)}}});const pT=Db({einsum_:function(e,...t){const n=t.map(((e,t)=>Ab(e,`tensors${t}`,"einsum"))),r={equation:e};return xb.runKernel(jf,n,r)}});const hT=Db({erf_:function(e){let t=Ab(e,"x","erf");rd("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=zx(t,"float32"));const n={x:t};return xb.runKernel(Yf,n)}});const dT=Db({euclideanNorm_:function(e,t=null,n=!1){return zS(e,"euclidean",t,n)}});const fT=Db({expm1_:function(e){const t={x:Ab(e,"x","expm1")};return xb.runKernel(em,t)}});const mT=Db({floor_:function(e){const t={x:Ab(e,"x","floor","float32")};return xb.runKernel(sm,t)}});const gT=Db({gather_:function(e,t,n=0,r=0){const s={x:Ab(e,"x","gather"),indices:Ab(t,"indices","gather","int32")},a={axis:n,batchDims:r};return xb.runKernel(im,s,a)}});const yT=Db({isFinite_:function(e){const t={x:Ab(e,"x","isFinite")};return xb.runKernel(fm,t)}});const bT=Db({isInf_:function(e){const t={x:Ab(e,"x","isInf")};return xb.runKernel(mm,t)}});const xT=Db({isNaN_:function(e){const t={x:Ab(e,"x","isNaN")};return xb.runKernel(gm,t)}});const wT=Db({less_:function(e,t){let n=Ab(e,"a","less","string_or_numeric"),r=Ab(t,"b","less","string_or_numeric");[n,r]=cb(n,r),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(bm,s)}});function kT(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return xb.runKernel(wm,{},r)}const vT=Db({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Ab(e,"x","localResponseNormalization");rd(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),rd(cd(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=Ak(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=xb.runKernel(Tm,u,l);return i?Ak(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const NT=Db({softplus_:function(e){const t={x:Ab(e,"x","softplus")};return xb.runKernel(Ig,t)}});const ST=Db({logSigmoid_:function(e){const t=Ab(e,"x","logSigmoid"),n=gN((e=>({value:US(NT(US(e))),gradFunc:t=>Tk(t,_k(US(e)))})));return n(t)}});const IT=Db({logSoftmax_:function(e,t=-1){const n=Ab(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=gN(((e,n)=>{const r=RS(e,t,!0),s=bS(e,r),a=bS(zx(s,"float32"),sI(Dk(uI(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=uI(r);return bS(e,Tk(Dk(e,t,!0),s))}}}));return r(n)}});const TT=Db({logicalNot_:function(e){const t={x:Ab(e,"x","logicalNot","bool")};return xb.runKernel(Sm,t)}});const ET=Db({logicalOr_:function(e,t){const n=Ab(e,"a","logicalOr","bool"),r=Ab(t,"b","logicalOr","bool");pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(Im,s)}});const $T=Db({logicalXor_:function(e,t){const n=Ab(e,"a","logicalXor","bool"),r=Ab(t,"b","logicalXor","bool");return pw(n.shape,r.shape),TS(ET(e,t),TT(TS(e,t)))}});var CT={};t(CT,"searchSorted",(()=>_T));const AT=2147483648;const _T=Db({searchSorted_:function(e,t,n="left"){const r=Ab(e,"sortedSequence","searchSorted"),s=Ab(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=Ak(r,[-1,a]),u=Ak(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(id(u.shape)>=AT)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=AT)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},c={side:n};return xb.runKernel(yg,l,c)}});function RT(e,t){return _T(e,t,"left")}const DT=Db({maxPool_:function(e,t,n,r,s){const a=Ab(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Ak(a,[1,a.shape[0],a.shape[1],a.shape[2]])),rd(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),rd(wk(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),vk("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=xb.runKernel(Am,u,l);return i?Ak(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const FT=Db({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=Ab(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=Ak(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),rd(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),rd("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),vk("maxPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=xb.runKernel(Rm,l,c);return u?Ak(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const OT=Db({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:Ab(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=xb.runKernel(Fm,a,o);return{result:i[0],indexes:i[1]}}});const MT=Db({maximum_:function(e,t){let n=Ab(e,"a","maximum"),r=Ab(t,"b","maximum");[n,r]=cb(n,r),"bool"===n.dtype&&(n=zx(n,"int32"),r=zx(r,"int32")),pw(n.shape,r.shape);const s={a:n,b:r};return xb.runKernel(Cm,s)}});function LT(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=Ab(e,"x","meshgrid",e instanceof Jy?e.dtype:"float32");if(void 0===t)return[r];let s=Ab(t,"y","meshgrid",t instanceof Jy?t.dtype:"float32");const a=id(r.shape),o=id(s.shape);return"xy"===n?(r=Ak(r,[1,-1]),s=Ak(s,[-1,1]),[WN(ZS([o,1],r.dtype),r),WN(s,ZS([1,a],s.dtype))]):(r=Ak(r,[-1,1]),s=Ak(s,[1,-1]),[WN(r,ZS([1,o],r.dtype)),WN(ZS([a,1],s.dtype),s)])}const zT=Db({mirrorPad_:function(e,t,n){rd("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Ab(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");rd(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)rd(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),rd(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return xb.runKernel(zm,o,a)}});const BT=Db({mod_:function(e,t){let n=Ab(e,"a","mod"),r=Ab(t,"b","mod");[n,r]=cb(n,r);const s={a:n,b:r};return xb.runKernel(Bm,s)}});const PT=Db({moments_:function(e,t=null,n=!1){const r=yd(t,(e=Ab(e,"x","moments")).shape),s=XS(e,r,n);let a=s.shape;n||(a=ek(s.shape,r));const o=MS(bS(zx(e,"float32"),Ak(s,a)));return{mean:s,variance:XS(o,r,n)}}});const WT=Db({multiRNNCell_:function(e,t,n,r){const s=Ab(t,"data","multiRNNCell"),a=_b(n,"c","multiRNNCell"),o=_b(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const VT=Db({multinomial_:function(e,t,n,r=!1){const s=Ab(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Ak(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=xb.runKernel(Pm,i,u);return 1===o?Ak(l,[l.size]):l}});const UT=Db({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Ab(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return xb.runKernel(Km,a,o)}});const GT=Db({onesLike_:function(e){const t={x:Ab(e,"x","onesLike")};return xb.runKernel(jm,t)}});const HT=Db({outerProduct_:function(e,t){const n=Ab(e,"v1","outerProduct"),r=Ab(t,"v2","outerProduct");rd(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=Ak(n,[-1,1]),a=Ak(r,[1,-1]);return WN(s,a)}});const qT=Db({pad_:function(e,t,n=0){const r=Ab(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return xb.runKernel(Ym,a,s)}});const jT=Db({pad1d_:function(e,t,n=0){return rd(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),qT(e,[t],n)}});const KT=Db({pad2d_:function(e,t,n=0){return rd(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),qT(e,t,n)}});const XT=Db({pad3d_:function(e,t,n=0){return rd(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),qT(e,t,n)}});const YT=Db({pad4d_:function(e,t,n=0){return rd(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),qT(e,t,n)}});const ZT=Db({spaceToBatchND_:function(e,t,n){const r=Ab(e,"x","spaceToBatchND");rd(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),rd(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),rd(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return xb.runKernel($g,s,a)}});const JT=Db({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Ab(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=Ak(i,[1,i.shape[0],i.shape[1],i.shape[2]])),rd(wk(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=ck(u.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?u:ZT(u,p,f),b=("avg"===n?()=>RI(y,t,a,g,o):()=>DT(y,t,a,g,o))(),x=d?b:MI(b,p,m);return l?Ak(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const QT=Db({prod_:function(e,t=null,n=!1){let r=Ab(e,"x","prod");"bool"===r.dtype&&(r=zx(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return xb.runKernel(Qm,s,a)}});const eE=Db({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>Ab(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:Ab(t,"paramsDenseValues","raggedGather"),indices:Ab(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=xb.runKernel(eg,s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const tE=Db({raggedRange_:function(e,t,n){const r=Ab(e,"starts","raggedRange"),s={starts:r,limits:Ab(t,"limits","raggedRange",r.dtype),deltas:Ab(n,"deltas","raggedRange",r.dtype)},a=xb.runKernel(tg,s);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const nE=Db({raggedTensorToTensor_:function(e,t,n,r,s){const a=Ab(e,"shape","raggedTensorToTensor","int32"),o=Ab(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:Ab(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>Ab(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return xb.runKernel(ng,i,u)}});const rE=Db({rand_:function(e,t,n){const r=id(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return xb.makeTensor(s,e,n)}});class sE{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Al.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class aE{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Al.alea(s.toString()),this.randn=new sE(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class oE{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Al.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const iE=Db({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new aE(t,n,r,s),o=Lx(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const uE=Db({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new sE(t,n,r,!1,s),o=Lx(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const lE=Db({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return uE(e,0,1,t,n)}});const cE=Db({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Lx(e,r),o=new oE(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const pE=Db({reciprocal_:function(e){const t={x:Ab(e,"x","reciprocal")};return xb.runKernel(ag,t)}});const hE=Db({reverse1d_:function(e){const t=Ab(e,"x","reverse");return rd(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),$N(t,0)}});const dE=Db({reverse2d_:function(e,t){const n=Ab(e,"x","reverse");return rd(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),$N(n,t)}});const fE=Db({reverse3d_:function(e,t){const n=Ab(e,"x","reverse");return rd(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),$N(n,t)}});const mE=Db({reverse4d_:function(e,t){const n=Ab(e,"x","reverse");return rd(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),$N(n,t)}});const gE=Db({rsqrt_:function(e){const t={x:Ab(e,"x","rsqrt","float32")};return xb.runKernel(mg,t)}});const yE=Db({selu_:function(e){const t={x:Ab(e,"x","selu")};return xb.runKernel(xg,t)}});const bE=Db({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=Ab(e,"x","separableConv2d"),u=Ab(t,"depthwiseFilter","separableConv2d"),l=Ab(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Ak(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");rd(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),rd(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),rd(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),rd(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),rd(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const h=u.shape[2],d=u.shape[3];rd(l.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${l.shape[2]}.`));const f=LN(c,u,r,s,o,a),m=DN(f,l,1,"valid",o);return p?Ak(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const xE=async function(e,t){const n=Ab(e,"x","setdiff1d"),r=Ab(t,"y","setdiff1d");rd(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),rd(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),rd(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new jy([i],n.dtype),l=new jy([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const wE=Db({sign_:function(e){const t={x:Ab(e,"x","sign")};return xb.runKernel(Ng,t)}});const kE=Db({sin_:function(e){const t={x:Ab(e,"x","sin","float32")};return xb.runKernel(kg,t)}});const vE=Db({sinh_:function(e){const t={x:Ab(e,"x","sinh")};return xb.runKernel(vg,t)}});const NE=Db({slice1d_:function(e,t,n){const r=Ab(e,"x","slice1d");return rd(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),kN(r,[t],[n])}});const SE=Db({slice2d_:function(e,t,n){const r=Ab(e,"x","slice2d");return rd(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),kN(r,t,n)}});const IE=Db({slice3d_:function(e,t,n){const r=Ab(e,"x","slice3d");return rd(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),kN(r,t,n)}});const TE=Db({slice4d_:function(e,t,n){const r=Ab(e,"x","slice4d");return rd(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),kN(r,t,n)}});const EE=Db({softmax_:function(e,t=-1){const n=Ab(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return xb.runKernel(Ag,r,s)}});const $E=Db({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const l={x:Ab(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return xb.runKernel(zg,l,c)}});const CE=Db({tan_:function(e){const t={x:Ab(e,"x","tan","float32")};return xb.runKernel(Ug,t)}});function AE(e,t,n){if(ad(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Eb(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ob(e,t,r,n)}function _E(e,t,n){if(ad(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Eb(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Ob(e,t,r,n)}function RE(e,t,n){if(ad(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Eb(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Ob(e,t=t||r,r,n)}const DE=Db({topk_:function(e,t=1,n=!0){const r=Ab(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=xb.runKernel(qg,a,o);return{values:i,indices:u}}});const FE=Db({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new sE(t,n,r,!0,s),o=Lx(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const OE=Db({unique_:function(e,t=0){const n=Ab(e,"x","unique","string_or_numeric");rd(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=xb.runKernel(Xg,r,s);return{values:a,indices:o}}});const ME=Db({unsortedSegmentSum_:function(e,t,n){const r=Ab(e,"x","unsortedSegmentSum"),s=Ab(t,"segmentIds","unsortedSegmentSum","int32");rd(cd(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return xb.runKernel(Zg,a,o)}});function LE(e,t){return _T(e,t,"right")}function zE(e,t=!0,n,r){return xb.makeVariable(e,t,n,r)}const BE=async function(e){const t=Ab(e,"condition","whereAsync","bool"),n=await t.data(),r=uN(t.shape,n);return e!==t&&t.dispose(),r};var PE={};t(PE,"booleanMaskAsync",(()=>WE));const WE=async function(e,t,n){const r=Ab(e,"tensor","boolMask"),s=Ab(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;rd(o>0,(()=>"mask cannot be scalar")),sd(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=Ak(r,l),p=Ak(s,[-1]),h=await BE(p),d=BS(h,[1]),f=gT(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var VE={};t(VE,"movingAverage",(()=>UE));const UE=Db({movingAverage_:function(e,t,n,r,s=!0){const a=Ab(e,"v","movingAverage"),o=Ab(t,"x","movingAverage"),i=Ab(n,"decay","movingAverage");pb(a,o),rd(ld(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const u=CN(1),l=bS(u,i);let c=Tk(bS(o,a),l);if(s){rd(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=Ab(r,"step","movingAverage");c=yS(c,bS(u,FS(i,e)))}return RN(a,c)}});var GE={};t(GE,"scatterND",(()=>HE));const HE=Db({scatterND_:function(e,t,n){const r=Ab(e,"indices","scatterND","int32"),s=Ab(t,"updates","scatterND");rv(s,r,n);const a={indices:r,updates:s},o={shape:n};return xb.runKernel(gg,a,o)}});var qE={};t(qE,"sparseToDense",(()=>jE));const jE=Db({sparseToDense_:function(e,t,n,r=0){const s=Ab(e,"sparseIndices","sparseToDense","int32"),a=Ab(t,"sparseValues","sparseToDense","string_or_numeric"),o=Ab(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return xb.runKernel(Og,i,u)}});var KE={};t(KE,"gatherND",(()=>XE));const XE=Db({gatherND_:function(e,t){const n=Ab(t,"indices","gatherND","int32"),r={params:Ab(e,"x","gatherND","string_or_numeric"),indices:n};return xb.runKernel(um,r)}});var YE={};function ZE(e,t){if(null==t)return e.shape.slice();if(ld(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}t(YE,"dropout",(()=>JE));const JE=Db({dropout_:function(e,t,n,r){const s=Ab(e,"x","dropout");if(rd("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),rd(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Jy?s.clone():s;const a=ZE(s,n),o=1-t,i=yS(mT(RN(cE(a,0,1,"float32",r),o)),o);return Tk(s,i)}});var QE={};t(QE,"inTopKAsync",(()=>e$));const e$=async function(e,t,n=1){const r=Ab(e,"predictions","inTopK"),s=Ab(t,"targets","inTopK");rd(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),rd(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),sd(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];rd(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=xd("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Mb(c,s.shape,"bool")},t$={fft:IN,ifft:EN,rfft:TN,irfft:AN},n$={hammingWindow:jN,hannWindow:KN,frame:ZN,stft:JN},r$={flipLeftRight:eS,grayscaleToRGB:nS,resizeNearestNeighbor:hS,resizeBilinear:pS,rotateWithOffset:rS,cropAndResize:QN,nonMaxSuppression:aS,nonMaxSuppressionAsync:oS,nonMaxSuppressionWithScore:iS,nonMaxSuppressionWithScoreAsync:uS,nonMaxSuppressionPadded:lS,nonMaxSuppressionPaddedAsync:cS,threshold:NS,transform:SS},s$={bandPart:CS,gramSchmidt:PS,qr:jS},a$={absoluteDifference:QS,computeWeightedLoss:JS,cosineDistance:eI,hingeLoss:tI,huberLoss:rI,logLoss:aI,meanSquaredError:iI,sigmoidCrossEntropy:cI,softmaxCrossEntropy:hI},o$={sparseFillEmptyRows:dI,sparseReshape:fI,sparseSegmentMean:mI,sparseSegmentSum:gI},i$={stringNGrams:yI,stringSplit:bI,stringToHashBucketFast:xI};n(yN,PE),n(yN,GS),n(yN,AS),n(yN,VE),n(yN,GE),n(yN,CT),n(yN,qE),n(yN,KE),n(yN,YE),n(yN,UN),n(yN,QE);class u$ extends Bw{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return hN(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return mN(e,t)}dispose(){null!=this.iterations_&&hN(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:CN(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(u$,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class l$ extends u${constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=xb.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=xb.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:pN((()=>SN(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:pN((()=>SN(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;pN((()=>{const e=RN(Tk(a,this.rho),Tk(MS(s),1-this.rho)),t=Tk(yS(OS(RN(o,this.epsilon)),OS(RN(a,this.epsilon))),s),n=RN(Tk(o,this.rho),Tk(MS(t),1-this.rho));a.assign(e),o.assign(n);const i=RN(Tk(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(hN(this.accumulatedGrads.map((e=>e.variable))),hN(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}l$.className="Adadelta",Ww(l$);class c$ extends u${constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=xb.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:pN((()=>XN(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;pN((()=>{const e=RN(a,MS(s));a.assign(e);const t=RN(Tk(yS(s,OS(RN(e,xb.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&hN(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}c$.className="Adagrad",Ww(c$);class p$ extends u${constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],pN((()=>{this.accBeta1=CN(t).variable(),this.accBeta2=CN(n).variable()})),null==r&&(this.epsilon=xb.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);pN((()=>{const n=bS(1,this.accBeta1),r=bS(1,this.accBeta2);t.forEach(((t,s)=>{const a=xb.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:pN((()=>SN(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:pN((()=>SN(a).variable(false)))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=RN(Tk(i,this.beta1),Tk(o,1-this.beta1)),c=RN(Tk(u,this.beta2),Tk(MS(o),1-this.beta2)),p=yS(l,n),h=yS(c,r);i.assign(l),u.assign(c);const d=RN(Tk(yS(p,RN(OS(h),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Tk(this.accBeta1,this.beta1)),this.accBeta2.assign(Tk(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&hN(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&hN(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),pN((()=>{this.accBeta1.assign(FS(this.beta1,this.iterations_+1)),this.accBeta2.assign(FS(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}p$.className="Adam",Ww(p$);class h$ extends u${constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],pN((()=>{this.iteration=CN(0).variable(),this.accBeta1=CN(t).variable()})),null==r&&(this.epsilon=xb.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);pN((()=>{const n=bS(1,this.accBeta1),r=yS(-this.learningRate,RN(Tk(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=xb.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:SN(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:SN(a).variable(false)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=RN(Tk(i,this.beta1),Tk(o,1-this.beta1)),c=Tk(u,this.beta2),p=_S(o),h=MT(c,p);i.assign(l),u.assign(h);const d=RN(Tk(yS(r,n),yS(l,RN(h,this.epsilon))),a);a.assign(d)})),this.iteration.assign(RN(this.iteration,1)),this.accBeta1.assign(Tk(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&hN(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&hN(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}h$.className="Adamax",Ww(h$);class d$ extends u${constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=xb.registeredVariables[t];pN((()=>{const e=RN(Tk(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=dN(CN(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}d$.className="SGD",Ww(d$);class f$ extends d${constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=CN(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=xb.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:pN((()=>SN(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&pN((()=>{let e;const t=RN(Tk(this.m,s),a);e=this.useNesterov?RN(Tk(this.c,RN(a,Tk(t,this.m))),r):RN(Tk(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&hN(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}f$.className="Momentum",Ww(f$);class m$ extends u${constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=xb.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=xb.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:pN((()=>SN(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:pN((()=>SN(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:pN((()=>SN(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;pN((()=>{const e=RN(Tk(o,this.decay),Tk(MS(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=RN(Tk(t,this.decay),Tk(a,1-this.decay)),u=yS(Tk(a,this.learningRate),OS(bS(e,RN(MS(s),this.epsilon)))),l=RN(Tk(i,this.momentum),u);o.assign(e),t.assign(s),i.assign(l);const c=bS(r,l);r.assign(c)}else{const e=RN(Tk(o,this.decay),Tk(MS(a),1-this.decay)),t=RN(Tk(i,this.momentum),yS(Tk(a,this.learningRate),OS(RN(e,this.epsilon))));o.assign(e),i.assign(t);const n=bS(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&hN(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&hN(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&hN(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}m$.className="RMSProp",Ww(m$);class g${static sgd(e){return new d$(e)}static momentum(e,t,n=!1){return new f$(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new m$(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new p$(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new l$(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new h$(e,t,n,r,s)}static adagrad(e,t=.1){return new c$(e,t)}}const y$={sgd:g$.sgd,momentum:g$.momentum,adadelta:g$.adadelta,adagrad:g$.adagrad,rmsprop:g$.rmsprop,adamax:g$.adamax,adam:g$.adam},b$="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function x$(){return new Promise((e=>b$((()=>e()))))}const w$={kernelName:Zd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(e,Rk(zx(n,"float32"),-1))}}},k$={kernelName:Jd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=MS(zx(n,"float32")),r=OS(bS(CN(1),t));return US(yS(e,r))}}}},v$={kernelName:Qd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=OS(bS(MS(zx(n,"float32")),1));return yS(e,t)}}}},N$={kernelName:ef,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=pw(n.shape,r.shape);return{a:()=>{let t=e;const r=cw(n.shape,s);return r.length>0&&(t=Dk(t,r)),Ak(t,n.shape)},b:()=>{let t=e;const n=cw(r.shape,s);return n.length>0&&(t=Dk(t,n)),Ak(t,r.shape)}}}},S$={kernelName:tf,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},I$={kernelName:sf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>SN(n)}}},T$={kernelName:af,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>SN(n)}}},E$={kernelName:of,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,OS(bS(CN(1),MS(zx(n,"float32")))))}}},$$={kernelName:uf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=OS(RN(CN(1),MS(zx(n,"float32"))));return yS(e,t)}}}},C$={kernelName:pf,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=pw(n.shape,r.shape);return{a:()=>{const t=RN(MS(n),MS(r));let a=Tk(e,yS(r,t));const o=cw(n.shape,s);return o.length>0&&(a=Dk(a,o)),Ak(a,n.shape)},b:()=>{const t=RN(MS(n),MS(r));let a=US(Tk(e,yS(n,t)));const o=cw(r.shape,s);return o.length>0&&(a=Dk(a,o)),Ak(a,r.shape)}}}},A$={kernelName:lf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,RN(MS(zx(n,"float32")),1))}}},_$={kernelName:cf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,bS(CN(1),MS(zx(n,"float32"))))}}};const R$=Db({avgPool3dGrad_:function(e,t,n,r,s,a){const o=Ab(e,"dy","avgPool3dGrad"),i=Ab(t,"input","avgPool3dGrad");let u=o,l=i,c=!1;4===i.rank&&(c=!0,u=Ak(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),l=Ak(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),rd(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),rd(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),vk("avgPool3dGrad",s,a);const p={dy:u,input:l},h={filterSize:n,strides:r,pad:s,dimRoundingMode:a},d=xb.runKernel(mf,p,h);return c?Ak(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),D$={kernelName:ff,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>R$(e,r,s,a,o,i)}}};const F$=Db({avgPoolGrad_:function(e,t,n,r,s){const a=Ab(e,"dy","avgPoolGrad"),o=Ab(t,"input","avgPoolGrad");rd(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,u=a,l=!1;3===o.rank&&(l=!0,i=Ak(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=Ak(a,[1,a.shape[0],a.shape[1],a.shape[2]])),rd(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),rd(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:u,input:i},p={filterSize:n,strides:r,pad:s},h=xb.runKernel(df,c,p);return l?Ak(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),O$={kernelName:hf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>F$(e,r,s,a,o)}}},M$={kernelName:gf,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>WN(e,s,!1,!1),b:()=>WN(e,r,!0,!1)}:a&&!o?{a:()=>WN(s,e,!1,!0),b:()=>WN(r,e,!1,!1)}:{a:()=>WN(s,e,!0,!0),b:()=>WN(e,r,!0,!0)}:{a:()=>WN(e,s,!1,!0),b:()=>WN(r,e,!0,!1)}}},L$={kernelName:yf,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>ZT(e,r,s)}}},z$={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>Dk(e,i,!0)}}},B$={kernelName:wf,gradFunc:e=>({x:()=>e.clone()})},P$={kernelName:kf,gradFunc:e=>({x:()=>SN(e)})},W$={kernelName:vf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>kS(TS(IS(r,s),fS(r,a)),e,SN(e))}}},V$={kernelName:Sf,inputsToSave:["x"],gradFunc:w$.gradFunc},U$={kernelName:If,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=yd(s,t[0].shape)[0],o=r.map((e=>e[a]));return vN(e,o,a).map((e=>()=>e))}},G$={kernelName:Tf,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:u}=n;return rd(xk(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>ON(r.shape,e,s,o,i,u),filter:()=>FN(r,e,s.shape,o,i,u)}}},H$={kernelName:$f,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:u}=n;return{dy:()=>DN(e,s,a,o,i,1,u),filter:()=>FN(e,r,s.shape,a,o,i,u)}}};const q$=Db({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Ak(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=Ak(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),rd(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),rd(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),rd(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),rd(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),rd(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},u={strides:r,pad:s,filterShape:n};return xb.runKernel(Af,i,u)}}),j$={kernelName:Cf,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;rd(xk(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>JI(o.shape,e,i,s,a),filter:()=>q$(o,e,i.shape,s,a)}}},K$={kernelName:Rf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(US(kE(zx(n,"float32"))),e)}}},X$={kernelName:Df,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(vE(zx(n,"float32")),e)}}},Y$={kernelName:Of,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=nk([s],r.rank);let n=rT(e,s,a,!o);return null!=t&&(n=HS(n,t)),n}}}},Z$={kernelName:Bf,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;rd(xk(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[u,l]=t;return rd(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),rd(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),rd(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),rd(wk(s,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`)),vk("depthwiseConv2d",a,o),{x:()=>BN(u.shape,e,l,s,a,i,o),filter:()=>zN(u,e,l.shape,s,a,i,o)}}},J$={kernelName:Uf,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>xb.runKernel(Gf,a,n),filter:()=>xb.runKernel(Hf,o,n)}}},Q$={kernelName:Kf,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>xb.runKernel(Xf,r)}}},eC={kernelName:Yf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Tk(uI(US(MS(n))),2/Math.sqrt(Math.PI));return{x:()=>Tk(e,r)}}},tC={kernelName:Jf,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(e,n)}}},nC={kernelName:Qf,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Ak(e,n.shape)}}},rC={kernelName:em,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(e,uI(n))}}},sC={kernelName:sm,gradFunc:e=>({x:()=>SN(e)})},aC={kernelName:am,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=pw(n.shape,r.shape);return{a:()=>{const t=yS(e,zx(r,"float32")),a=cw(n.shape,s);return a.length>0?Ak(Dk(t,a),n.shape):t},b:()=>{let t=Tk(e,zx(n,"float32"));const a=cw(r.shape,s);a.length>0&&(t=Ak(Dk(t,a),r.shape));const o=MS(r);return US(yS(t,zx(o,"float32")))}}}},oC={kernelName:om,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,u=null==i?CN(1):i,l=cw(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=bS(s,a),h=Tk(e,u),d=gE(RN(o,CN(r))),f=Tk(Tk(Tk(d,d),d),CN(-.5));return{x:()=>1===a.rank?Ak(Tk(Tk(e,tS(Ak(d,[1,1,1,a.shape[0]]),c)),u),s.shape):Ak(Tk(Tk(e,d),u),s.shape),mean:()=>{let e=Tk(Tk(d,CN(-1)),h);return 1===a.rank&&(e=Dk(e,l)),Ak(e,a.shape)},variance:()=>{let e=Tk(Tk(f,p),h);return 1===a.rank&&(e=Dk(e,l)),Ak(e,a.shape)},scale:()=>{const t=Tk(p,d);let n=Tk(e,t);return 1===a.rank&&(n=Dk(n,l)),Ak(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Dk(t,l)),Ak(t,a.shape)}}}},iC={kernelName:im,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,o=yd(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,i=t.slice(0,o),u=i.length,l=t.slice(a,t.length).slice(1),c=l.length,p=uC(0,u),h=uC(u+1,u+1+c),d=lC([i,[n],l]),f=Ak(e,d),m=Ak(s,[n]),g=lC([[u],p,h]),y=HS(f,g);let b=ME(y,m,r.shape[o]);const x=rk(g);return b=HS(b,x),b},indices:()=>s}}};function uC(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function lC(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const cC={kernelName:cm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>SN(n),b:()=>SN(r)}}},pC={kernelName:pm,gradFunc:e=>({x:()=>zx(e,"float32")})},hC={kernelName:fm,gradFunc:e=>({x:()=>SN(e)})},dC={kernelName:mm,gradFunc:e=>({x:()=>SN(e)})},fC={kernelName:gm,gradFunc:e=>({x:()=>SN(e)})},mC={kernelName:ym,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=mS(r,0);return{x:()=>kS(a,e,Tk(e,s))}}},gC={kernelName:vm,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,RN(n,1))}}},yC={kernelName:km,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,zx(n,"float32"))}}},bC={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=uI(r);return bS(e,Tk(Dk(e,s,!0),t))}}}};const xC=Db({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:o};return xb.runKernel(Em,i,u)}}),wC={kernelName:Tm,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:u}=n;return{x:()=>xC(r,s,e,a,o,i,u)}}};function kC(e,t,n,r){return t.rank<n.rank&&(t=Ak(t,ek(t.shape,r))),e.rank<n.rank&&(e=Ak(e,ek(e.shape,r))),{x:()=>Tk(e,zx(uT(n,t),e.dtype))}}const vC={kernelName:$m,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],o=kC(e,t[1],a,yd(s,a.shape));return{x:()=>o.x()}}},NC={kernelName:Cm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Tk(e,zx(IS(n,r),"float32")),b:()=>Tk(e,zx(wT(n,r),"float32"))}}};const SC=Db({maxPool3dGrad_:function(e,t,n,r,s,a,o){const i=Ab(e,"dy","maxPool3dGrad"),u=Ab(t,"input","maxPool3dGrad"),l=Ab(n,"output","maxPool3dGrad");let c=i,p=u,h=l,d=!1;4===u.rank&&(d=!0,c=Ak(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),p=Ak(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),h=Ak(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),rd(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),rd(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),rd(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),vk("maxPool3dGrad",a,o);const f={dy:c,input:p,output:h},m={filterSize:r,strides:s,pad:a,dimRoundingMode:o},g=xb.runKernel(Dm,f,m);return d?Ak(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),IC={kernelName:Rm,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=n;return{x:()=>SC(e,r,s,a,o,i,u)}}};const TC=Db({maxPoolGrad_:function(e,t,n,r,s,a,o){const i=Ab(e,"dy","maxPoolGrad"),u=Ab(t,"input","maxPoolGrad"),l=Ab(n,"output","maxPoolGrad");rd(u.rank===i.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${i.rank})`)),rd(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),rd(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),vk("maxPoolGrad",a,o);const c={dy:i,input:u,output:l},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return xb.runKernel(_m,c,p)}}),EC={kernelName:Ym,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>kN(e,a,r.shape)}}};function $C(e,t,n){const r=e.shape.length,s=r-n.length,a=Vw.getAxesPermutation(n,r);let o=e;null!=a&&(o=HS(e,a));const i=o.shape.slice(),u=i.splice(r-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(u);let l=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=Ak(t,r),a=nT(e,n,!0,!1),o=nT(e,n,!0,!0),i=Tk(a,o);return Tk(s,i)}(o.reshape(i),t,s);if(l=l.reshape(o.shape),null!=a){const e=Vw.getUndoAxesPermutation(a);l=HS(l,e)}return l}const CC={kernelName:$g,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>MI(e,r,s)}}},AC={kernelName:Cg,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>bN(e,r)}}};const _C=[w$,k$,v$,N$,S$,I$,T$,E$,$$,C$,A$,_$,D$,O$,M$,L$,z$,B$,P$,W$,V$,U$,H$,G$,j$,K$,X$,Y$,Z$,J$,{kernelName:qf,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=pw(n.shape,r.shape);return{a:()=>{const t=yS(e,zx(r,"float32")),a=cw(n.shape,s);return a.length>0?Ak(Dk(t,a),n.shape):t},b:()=>{let t=Tk(e,zx(n,"float32"));const a=cw(r.shape,s);a.length>0&&(t=Ak(Dk(t,a),r.shape));const o=MS(r);return US(yS(t,zx(o,"float32")))}}}},Q$,eC,tC,nC,rC,aC,sC,oC,iC,cC,pC,hC,dC,fC,mC,gC,yC,bC,wC,vC,vC,NC,IC,{kernelName:Am,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>TC(e,r,s,a,o,i)}}},{kernelName:Om,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=yd(s,r.shape),o=id(Qw(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=Ak(e,t);return yS(Tk(n,ZS(r.shape,"float32")),o)}}}},{kernelName:Mm,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=kC(e,o,a,yd(s,a.shape));return{x:()=>i.x()}}},{kernelName:Lm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Tk(e,zx(fS(n,r),"float32")),b:()=>Tk(e,zx(mS(n,r),"float32"))}}},{kernelName:zm,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>kN(e,a,r.shape)}}},{kernelName:Bm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=pw(n.shape,r.shape);return{a:()=>{const t=cw(n.shape,s);return t.length>0?Ak(Dk(e,t),n.shape):e},b:()=>{const t=Tk(e,US(mT(yS(n,r)))),a=cw(r.shape,s);return a.length>0?Ak(Dk(t,a),r.shape):t}}}},{kernelName:Wm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=pw(n.shape,r.shape);return{a:()=>{const t=Tk(e,zx(r,"float32")),a=cw(n.shape,s);return a.length>0?Ak(Dk(t,a),n.shape):t},b:()=>{const t=Tk(e,zx(n,"float32")),a=cw(r.shape,s);return a.length>0?Ak(Dk(t,a),r.shape):t}}}},{kernelName:Vm,gradFunc:e=>({x:()=>US(e)})},{kernelName:Km,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>NN(n.shape,"float32")}}},{kernelName:jm,gradFunc:e=>({x:()=>SN(e)})},{kernelName:Xm,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return $S(e,r).map((e=>()=>e))}},EC,EC,{kernelName:Zm,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=pw(a.shape,o.shape);return{a:()=>{const t=zx(o,"float32");let n=Tk(e,Tk(t,FS(a,bS(t,CN(1)))));const r=cw(a.shape,i);return r.length>0&&(n=Dk(n,r)),Ak(n,a.shape)},b:()=>{const t=mS(a,0),n=kS(t,sI(a),SN(a));let r=Tk(e,Tk(s,n));const u=cw(o.shape,i);return u.length>0&&(r=Dk(r,u)),Ak(r,o.shape)}}}},{kernelName:Jm,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=mS(n,0);return{x:()=>kS(s,e,Tk(e,r)),alpha:()=>{let t=kS(s,SN(e),Tk(e,n));const a=cw(r.shape,e.shape);return a.length>0&&(t=Dk(t,a)),Ak(t,r.shape)}}}},{kernelName:Qm,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map(((e,t)=>t)):"number"==typeof s?[s]:s,{x:()=>$C(r,e,a)}}},{kernelName:ag,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,US(MS(n)))}}},{kernelName:hg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Tk(fS(n,6),Rk(n));return{x:()=>Tk(e,zx(r,"float32"))}}},{kernelName:og,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(e,zx(Rk(n),"float32"))}}},{kernelName:ig,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ak(e,n.shape)}}},{kernelName:cg,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>xb.runKernel(pg,s,n)}}},{kernelName:ug,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>xb.runKernel(lg,s,n)}}},{kernelName:dg,gradFunc:(e,t,n)=>{const{dims:r}=n,s=yd(r,e.shape);return{x:()=>$N(e,s)}}},{kernelName:fg,gradFunc:e=>({x:()=>SN(e)})},{kernelName:mg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>US(yS(e,Tk(FS(n,1.5),2)))}}},{kernelName:bg,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>zx(SN(n),"float32"),t:()=>Tk(e,zx(n,e.dtype)),e:()=>Tk(e,zx(TT(n),e.dtype))}}},{kernelName:xg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=mS(n,CN(0)),r=CN(ov),s=CN(iv),a=Tk(e,s),o=Tk(Tk(e,r),uI(zx(n,"float32")));return kS(t,a,o)}}}},{kernelName:Sg,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(e,Tk(n,bS(CN(1),n)))}}},{kernelName:Ng,gradFunc:e=>({x:()=>SN(e)})},{kernelName:kg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(eT(zx(n,"float32")),e)}}},{kernelName:vg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(tT(zx(n,"float32")),e)}}},{kernelName:wg,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,u]=Ow(r,s,a),l=[];for(let t=0;t<e.rank;t++)l.push([i[t],o[t]-i[t]-u[t]]);return{x:()=>qT(e,l)}}},{kernelName:Ag,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=Tk(e,r);return{logits:()=>bS(a,Tk(Dk(a,[s],true),r))}}},{kernelName:Ig,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(e,_k(n))}}},CC,CC,AC,AC,{kernelName:Tg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,Tk(OS(zx(n,"float32")),2))}}},{kernelName:Mg,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=CN(2);return{a:()=>Tk(e,Tk(s,bS(n,r))),b:()=>Tk(e,Tk(s,bS(r,n)))}}},{kernelName:Lg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(e,Tk(zx(n,"float32"),2))}}},{kernelName:Qg,gradFunc:e=>({x:()=>SN(e)})},{kernelName:Vg,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=pw(n.shape,r.shape);return{a:()=>{let t=e;const r=cw(n.shape,s);return r.length>0&&(t=Dk(t,r)),Ak(t,n.shape)},b:()=>{let t=e;const n=cw(r.shape,s);return n.length>0&&(t=Dk(t,n)),Ak(US(t),r.shape)}}}},{kernelName:Eg,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;yd(a,r.shape).forEach((e=>{s[e]=1}));const o=Ak(e,s),i=Tk(o,ZS(r.shape,"float32"));return{x:()=>i}}},{kernelName:Ug,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yS(e,MS(eT(n)))}}},{kernelName:Gg,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tk(bS(CN(1),MS(n)),e)}}},{kernelName:Hg,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=SN(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=RN(t,kN(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=RN(t,kN(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=RN(t,kN(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=RN(t,kN(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:Kg,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=rk(s);return{x:()=>HS(e,a)}}},{kernelName:Yg,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>ES(e,s)}}},{kernelName:Zg,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=MT(t,SN(t)),r=gT(e,n);let s=IS(t,CN(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=WS(s,e+1);s=TS(s,ZS(r.shape,"bool"));const o=SN(r);return kS(s,r,o)}(e,n)}}},{kernelName:Jg,gradFunc:e=>({x:()=>SN(e)})}];for(const e of _C)fy(e);function RC(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(MC(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const o=RC(e[a],t,n,r);s[a]=o}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function DC(e,t=OC){return FC(e,t)}function FC(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(MC(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=FC(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function OC(e){return null===e?null:MC(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function MC(e){let t=!1;if(qd().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Jy)&&!(e instanceof Promise)&&!t)}function LC(e){return RC(e,zC)}function zC(e){return e instanceof Jy?{value:e.clone(),recurse:!1}:MC(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}Qy().prototype.abs=function(){return this.throwIfDisposed(),_S(this)},Qy().prototype.acos=function(){return this.throwIfDisposed(),wI(this)},Qy().prototype.acosh=function(){return this.throwIfDisposed(),kI(this)},Qy().prototype.add=function(e){return this.throwIfDisposed(),RN(this,e)},Qy().prototype.all=function(e,t){return this.throwIfDisposed(),NI(this,e,t)},Qy().prototype.any=function(e,t){return this.throwIfDisposed(),SI(this,e,t)},Qy().prototype.argMax=function(e){return this.throwIfDisposed(),II(this,e)},Qy().prototype.argMin=function(e){return this.throwIfDisposed(),TI(this,e)},Qy().prototype.asScalar=function(){return this.throwIfDisposed(),rd(1===this.size,(()=>"The array must have only 1 element.")),Ak(this,[])},Qy().prototype.asType=function(e){return this.throwIfDisposed(),zx(this,e)},Qy().prototype.as1D=function(){return this.throwIfDisposed(),Ak(this,[this.size])},Qy().prototype.as2D=function(e,t){return this.throwIfDisposed(),Ak(this,[e,t])},Qy().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Ak(this,[e,t,n])},Qy().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Ak(this,[e,t,n,r])},Qy().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Ak(this,[e,t,n,r,s])},Qy().prototype.asin=function(){return this.throwIfDisposed(),EI(this)},Qy().prototype.asinh=function(){return this.throwIfDisposed(),$I(this)},Qy().prototype.atan=function(){return this.throwIfDisposed(),CI(this)},Qy().prototype.atan2=function(e){return this.throwIfDisposed(),AI(this,e)},Qy().prototype.atanh=function(){return this.throwIfDisposed(),_I(this)},Qy().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),RI(this,e,t,n,r)},Qy().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),MI(this,e,t)},Qy().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),zI(this,e,t,n,r,s)},Qy().prototype.broadcastTo=function(e){return this.throwIfDisposed(),wS(this,e)},Qy().prototype.cast=function(e){return this.throwIfDisposed(),zx(this,e)},Qy().prototype.ceil=function(){return this.throwIfDisposed(),UI(this)},Qy().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),GI(this,e,t)},Qy().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Jy&&(e=[e]),bN([this,...e],t)},Qy().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),XI(this,e,t,n,r,s,a)},Qy().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),YI(this,e,t,n,r,s)},Qy().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),DN(this,e,t,n,r,s,a)},Qy().prototype.cos=function(){return this.throwIfDisposed(),eT(this)},Qy().prototype.cosh=function(){return this.throwIfDisposed(),tT(this)},Qy().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),nT(this,e,t,n)},Qy().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),rT(this,e,t,n)},Qy().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),aT(this,e,t)},Qy().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),LN(this,e,t,n,r,s,a)},Qy().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),iT(this,e,t,n,r,s)},Qy().prototype.divNoNan=function(e){return this.throwIfDisposed(),lT(this,e)},Qy().prototype.div=function(e){return this.throwIfDisposed(),yS(this,e)},Qy().prototype.dot=function(e){return this.throwIfDisposed(),cT(this,e)},Qy().prototype.elu=function(){return this.throwIfDisposed(),Sk(this)},Qy().prototype.equal=function(e){return this.throwIfDisposed(),uT(this,e)},Qy().prototype.erf=function(){return this.throwIfDisposed(),hT(this)},Qy().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),dT(this,e,t)},Qy().prototype.exp=function(){return this.throwIfDisposed(),uI(this)},Qy().prototype.expandDims=function(e){return this.throwIfDisposed(),WS(this,e)},Qy().prototype.expm1=function(){return this.throwIfDisposed(),fT(this)},Qy().prototype.fft=function(){return this.throwIfDisposed(),IN(this)},Qy().prototype.flatten=function(){return this.throwIfDisposed(),Ak(this,[this.size])},Qy().prototype.floor=function(){return this.throwIfDisposed(),mT(this)},Qy().prototype.floorDiv=function(e){return this.throwIfDisposed(),gS(this,e)},Qy().prototype.gather=function(e,t){return this.throwIfDisposed(),gT(this,e,t)},Qy().prototype.greaterEqual=function(e){return this.throwIfDisposed(),IS(this,e)},Qy().prototype.greater=function(e){return this.throwIfDisposed(),mS(this,e)},Qy().prototype.ifft=function(){return this.throwIfDisposed(),EN(this)},Qy().prototype.irfft=function(){return this.throwIfDisposed(),AN(this)},Qy().prototype.isFinite=function(){return this.throwIfDisposed(),yT(this)},Qy().prototype.isInf=function(){return this.throwIfDisposed(),bT(this)},Qy().prototype.isNaN=function(){return this.throwIfDisposed(),xT(this)},Qy().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Ik(this,e)},Qy().prototype.lessEqual=function(e){return this.throwIfDisposed(),fS(this,e)},Qy().prototype.less=function(e){return this.throwIfDisposed(),wT(this,e)},Qy().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),vT(this,e,t,n,r)},Qy().prototype.logSigmoid=function(){return this.throwIfDisposed(),ST(this)},Qy().prototype.logSoftmax=function(e){return this.throwIfDisposed(),IT(this,e)},Qy().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),pI(this,e,t)},Qy().prototype.log=function(){return this.throwIfDisposed(),sI(this)},Qy().prototype.log1p=function(){return this.throwIfDisposed(),lI(this)},Qy().prototype.logicalAnd=function(e){return this.throwIfDisposed(),TS(this,e)},Qy().prototype.logicalNot=function(){return this.throwIfDisposed(),TT(this)},Qy().prototype.logicalOr=function(e){return this.throwIfDisposed(),ET(this,e)},Qy().prototype.logicalXor=function(e){return this.throwIfDisposed(),$T(this,e)},Qy().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),WN(this,e,t,n)},Qy().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),DT(this,e,t,n,r)},Qy().prototype.max=function(e,t){return this.throwIfDisposed(),RS(this,e,t)},Qy().prototype.maximum=function(e){return this.throwIfDisposed(),MT(this,e)},Qy().prototype.mean=function(e,t){return this.throwIfDisposed(),XS(this,e,t)},Qy().prototype.min=function(e,t){return this.throwIfDisposed(),DS(this,e,t)},Qy().prototype.minimum=function(e){return this.throwIfDisposed(),nI(this,e)},Qy().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),zT(this,e,t)},Qy().prototype.mod=function(e){return this.throwIfDisposed(),BT(this,e)},Qy().prototype.mul=function(e){return this.throwIfDisposed(),Tk(this,e)},Qy().prototype.neg=function(){return this.throwIfDisposed(),US(this)},Qy().prototype.norm=function(e,t,n){return this.throwIfDisposed(),zS(this,e,t,n)},Qy().prototype.notEqual=function(e){return this.throwIfDisposed(),YS(this,e)},Qy().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),UT(this,e,t,n)},Qy().prototype.onesLike=function(){return this.throwIfDisposed(),GT(this)},Qy().prototype.pad=function(e,t){return this.throwIfDisposed(),qT(this,e,t)},Qy().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),JT(this,e,t,n,r,s,a)},Qy().prototype.pow=function(e){return this.throwIfDisposed(),FS(this,e)},Qy().prototype.prelu=function(e){return this.throwIfDisposed(),Ek(this,e)},Qy().prototype.prod=function(e,t){return this.throwIfDisposed(),QT(this,e,t)},Qy().prototype.reciprocal=function(){return this.throwIfDisposed(),pE(this)},Qy().prototype.relu=function(){return this.throwIfDisposed(),$k(this)},Qy().prototype.relu6=function(){return this.throwIfDisposed(),Ck(this)},Qy().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Ak(this,e.shape)},Qy().prototype.reshape=function(e){return this.throwIfDisposed(),Ak(this,e)},Qy().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),pS(this,e,t,n)},Qy().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),hS(this,e,t,n)},Qy().prototype.reverse=function(e){return this.throwIfDisposed(),$N(this,e)},Qy().prototype.rfft=function(){return this.throwIfDisposed(),TN(this)},Qy().prototype.round=function(){return this.throwIfDisposed(),xS(this)},Qy().prototype.rsqrt=function(){return this.throwIfDisposed(),gE(this)},Qy().prototype.selu=function(){return this.throwIfDisposed(),yE(this)},Qy().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),bE(this,e,t,n,r,s,a)},Qy().prototype.sigmoid=function(){return this.throwIfDisposed(),_k(this)},Qy().prototype.sign=function(){return this.throwIfDisposed(),wE(this)},Qy().prototype.sin=function(){return this.throwIfDisposed(),kE(this)},Qy().prototype.sinh=function(){return this.throwIfDisposed(),vE(this)},Qy().prototype.slice=function(e,t){return this.throwIfDisposed(),kN(this,e,t)},Qy().prototype.softmax=function(e){return this.throwIfDisposed(),EE(this,e)},Qy().prototype.softplus=function(){return this.throwIfDisposed(),NT(this)},Qy().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),ZT(this,e,t)},Qy().prototype.split=function(e,t){return this.throwIfDisposed(),vN(this,e,t)},Qy().prototype.sqrt=function(){return this.throwIfDisposed(),OS(this)},Qy().prototype.square=function(){return this.throwIfDisposed(),MS(this)},Qy().prototype.squaredDifference=function(e){return this.throwIfDisposed(),oI(this,e)},Qy().prototype.squeeze=function(e){return this.throwIfDisposed(),BS(this,e)},Qy().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Jy?[this,e]:[this,...e];return ES(n,t)},Qy().prototype.step=function(e){return this.throwIfDisposed(),Rk(this,e)},Qy().prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),$E(this,e,t,n,r,s,a,o,i)},Qy().prototype.sub=function(e){return this.throwIfDisposed(),bS(this,e)},Qy().prototype.sum=function(e,t){return this.throwIfDisposed(),Dk(this,e,t)},Qy().prototype.tan=function(){return this.throwIfDisposed(),CE(this)},Qy().prototype.tanh=function(){return this.throwIfDisposed(),FI(this)},Qy().prototype.tile=function(e){return this.throwIfDisposed(),tS(this,e)},Qy().prototype.toBool=function(){return this.throwIfDisposed(),zx(this,"bool")},Qy().prototype.toFloat=function(){return this.throwIfDisposed(),zx(this,"float32")},Qy().prototype.toInt=function(){return this.throwIfDisposed(),zx(this,"int32")},Qy().prototype.topk=function(e,t){return this.throwIfDisposed(),DE(this,e,t)},Qy().prototype.transpose=function(e){return this.throwIfDisposed(),HS(this,e)},Qy().prototype.unique=function(e){return this.throwIfDisposed(),OE(this,e)},Qy().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),ME(this,e,t)},Qy().prototype.unstack=function(e){return this.throwIfDisposed(),$S(this,e)},Qy().prototype.where=function(e,t){return this.throwIfDisposed(),kS(e,this,t)},Qy().prototype.zerosLike=function(){return this.throwIfDisposed(),SN(this)};class BC{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class PC extends BC{constructor(){super(PC.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function WC(e){return new HC(e)}function VC(e){return new qC(e)}function UC(e,t){return new rA(e,t)}PC.INITIAL_CAPACITY=32;class GC{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new QC(this,e)}filter(e){return new ZC(this,e)}map(e){return new JC(this,e)}mapAsync(e){return new eA(this,e)}serialMapAsync(e){return new eA(this,e).serial()}flatmap(e){return new nA(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new YC(this,e,t)}columnMajorBatch(e,t=!0,n=OC){return this.rowMajorBatch(e,t).map((e=>DC(e,n)))}concatenate(e,t){return new rA(WC([this,e]),t)}take(e){return e<0||null==e?this:new XC(this,e)}skip(e){return e<0||null==e?this:new KC(this,e)}prefetch(e){return new oA(this,e)}shuffle(e,t){return new iA(this,e,t)}serial(){return new jC(this)}}class HC extends GC{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:LC(e),done:!1}}}class qC extends GC{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class jC extends GC{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class KC extends GC{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;hN(e.value)}return this.upstream.next()}}class XC extends GC{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class YC extends GC{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class ZC extends GC{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;hN(e.value)}}}class JC extends GC{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ob.getTensorsInContainer(e.value),n=this.transform(e.value),r=ob.getTensorsInContainer(n);for(const e of t)ob.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class QC extends GC{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class eA extends GC{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ob.getTensorsInContainer(e.value),n=await this.transform(e.value),r=ob.getTensorsInContainer(n);for(const e of t)ob.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class tA extends GC{constructor(){super(),this.outputQueue=new PC,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class nA extends tA{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=ob.getTensorsInContainer(e.value),n=this.transform(e.value),r=ob.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)ob.isTensorInList(e,r)||e.dispose();return!0}}class rA extends GC{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var sA,aA;(aA=sA||(sA={}))[aA.FAIL=0]="FAIL",aA[aA.SHORTEST=1]="SHORTEST",aA[aA.LONGEST=2]="LONGEST";class oA extends GC{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new BC(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class iA extends oA{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Al.alea(n||gy.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class uA{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return gy.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),lA((async()=>(await n.iterator()).columnMajorBatch(e,t,cA)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,lA((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,lA((async()=>(await t.iterator()).filter((t=>pN((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return lA((async()=>(await t.iterator()).map((t=>pN((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return lA((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return lA((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,lA((async()=>UC(VC((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,lA((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=Al.alea(t||gy.now().toString());return lA((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,lA((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function lA(e,t=null){return new class extends uA{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function cA(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof Jy||gy.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Jy?ES(e):Mb(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}uA.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function pA(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&gy.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function hA(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(pA(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,u=i.data.get(o.dataId).values,l=gy.sizeFromShape(o.shape),c=n||o.dtype,p=gy.getArrayFromDType(c,l);for(let e=0;e<l;++e)p[e]=t(u[e],s);return i.makeTensorInfo(o.shape,c,p)}}function dA(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(pA(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,u=i.data.get(o.dataId).values,l=n||o.dtype,c=t(u,l,s);return i.makeTensorInfo(o.shape,l,c)}}const fA=hA(Kf,(e=>e>=0?e:Math.exp(e)-1)),mA={kernelName:Kf,backendName:"cpu",kernelFunc:fA};function gA(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const yA={kernelName:pm,backendName:"cpu",kernelFunc:gA};function bA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;pA([s],"leakyRelu");const o=gy.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,u=gy.getTypedArrayFromDType("float32",o);for(let e=0;e<i.length;e++)u[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(s.shape,"float32",u)}const xA={kernelName:ym,backendName:"cpu",kernelFunc:bA};function wA(e){return(t,n,r,s,a)=>{const o=Vw.assertAndGetBroadcastShape(t,n),i=o.length,u=gy.computeStrides(o),l=gy.sizeFromShape(o),c=gy.getTypedArrayFromDType(a,l),p=t.length,h=n.length,d=gy.computeStrides(t),f=gy.computeStrides(n),m=Vw.getBroadcastDims(t,o),g=Vw.getBroadcastDims(n,o);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<c.length;++t){const n=gy.indexToLoc(t,i,u),a=n.slice(-p);m.forEach((e=>a[e]=0));const o=gy.locToIndex(a,p,d),l=n.slice(-h);g.forEach((e=>l[e]=0));const y=gy.locToIndex(l,h,f);c[t]=e(r[o],s[y])}return[c,o]}}const kA=wA(((e,t)=>e<0?t*e:e));function vA(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;pA([r,s],"prelu");const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,[i,u]=kA(r.shape,s.shape,a,o,"float32");return n.makeTensorInfo(u,"float32",i)}const NA={kernelName:Jm,backendName:"cpu",kernelFunc:vA},SA=hA(og,(e=>Math.max(0,e))),IA={kernelName:og,backendName:"cpu",kernelFunc:SA},TA=hA(hg,(e=>Math.min(Math.max(0,e),6))),EA={kernelName:hg,backendName:"cpu",kernelFunc:TA};function $A(e){return(t,n,r)=>{const s=gy.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const CA=$A((e=>1/(1+Math.exp(-e)))),AA=hA(Sg,(e=>1/(1+Math.exp(-e)))),_A={kernelName:Sg,backendName:"cpu",kernelFunc:AA};function RA(e,t,n,r,s){if("linear"===n)return gA({inputs:{x:t},backend:e});if("relu"===n)return SA({inputs:{x:t},backend:e});if("elu"===n)return fA({inputs:{x:t},backend:e});if("relu6"===n)return TA({inputs:{x:t},backend:e});if("prelu"===n)return vA({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return bA({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return AA({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function DA(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",o)},i}const FA={kernelName:Nf,backendName:"cpu",kernelFunc:DA};function OA(e,t,n="float32"){if("complex64"===n){return DA({inputs:{real:OA(e,t,"float32"),imag:OA(e,t,"float32")},backend:e})}const r=gy.makeZerosTypedArray(gy.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function MA(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const LA={kernelName:sg,backendName:"cpu",kernelFunc:MA};function zA(e,t,n,r){if("int32"===r){return[t,"int32",Int32Array.from(e)]}if("bool"===r){const r=gy.toTypedArray([0],n),[s,a]=wA(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function BA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return gA({inputs:{x:s},backend:n});const e=OA(n,s.shape,s.dtype),t=BA({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=DA({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=MA({inputs:{input:s},backend:n}),t=BA({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!gy.hasEncodingLoss(s.dtype,a)){const e=gA({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const o=n.data.get(s.dataId).values,[i,u,l]=zA(o,s.shape,s.dtype,a);return n.makeTensorInfo(i,u,l)}const PA={kernelName:wf,backendName:"cpu",kernelFunc:BA};function WA(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:o}=n,i=s;pA([a,o],e);const u=i.data.get(a.dataId).values,l=i.data.get(o.dataId).values,c="string"===a.dtype?Vw.fromUint8ToStringArray(u):u,p="string"===a.dtype?Vw.fromUint8ToStringArray(l):l,h=r||a.dtype,[d,f]=t(a.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:s})=>{const{a:a,b:o}=e,i=s;if("complex64"===a.dtype||"complex64"===o.dtype){const e=BA({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,u=i.data.get(r.dataId).values,l=i.data.get(s.dataId).values,c=BA({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,b]=n(a.shape,o.shape,u,l,f,m),x=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),k=DA({inputs:{real:x,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(w),k}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,o.shape,e,n,s);return i.makeTensorInfo(l,s,u)}}}function VA(e){return(t,n,r,s,a,o)=>{const i=Vw.assertAndGetBroadcastShape(t,n),u=gy.sizeFromShape(i),l=i.length,c=gy.computeStrides(i),p=gy.getTypedArrayFromDType("float32",u),h=gy.getTypedArrayFromDType("float32",u),d=Vw.getBroadcastDims(t,i),f=Vw.getBroadcastDims(n,i),m=Vw.mergeRealAndImagArrays(r,s),g=Vw.mergeRealAndImagArrays(a,o),y=t.length,b=gy.computeStrides(t),x=n.length,w=gy.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=s.real,h[t]=s.imag}else for(let t=0;t<p.length;t++){const n=gy.indexToLoc(t,l,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=gy.locToIndex(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const o=gy.locToIndex(a,x,w),i=e(m[2*s],m[2*s+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const UA=wA(((e,t)=>e+t)),GA=VA(((e,t,n,r)=>({real:e+n,imag:t+r}))),HA=WA(ef,UA,GA),qA={kernelName:ef,backendName:"cpu",kernelFunc:HA};function jA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=gy.sizeFromShape(s.shape),i=gy.inferFromImplicitShape(a,o),u=gy.sizeFromShape(i);gy.assert(o===u,(()=>`The new shape (${i}) has ${u} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:s.dataId,shape:i,dtype:s.dtype}}const KA={kernelName:ig,backendName:"cpu",kernelFunc:jA};function XA(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;pA([s,a],"matMul");const u=s.shape.length,l=a.shape.length,c=o?s.shape[u-2]:s.shape[u-1],p=i?a.shape[l-1]:a.shape[l-2],h=o?s.shape[u-1]:s.shape[u-2],d=i?a.shape[l-2]:a.shape[l-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=gy.sizeFromShape(f),y=gy.sizeFromShape(m),b=uw.assertAndGetBroadcastShape(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([h,d]);gy.assert(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const x=i?[y,d,p]:[y,p,d],w=jA({inputs:{x:s},backend:n,attrs:{shape:o?[g,c,h]:[g,h,c]}}),k=jA({inputs:{x:a},backend:n,attrs:{shape:x}}),v=o?w.shape[1]:w.shape[2],N=o?w.shape[2]:w.shape[1],S=i?k.shape[1]:k.shape[2],I=Math.max(g,y),T=n.data.get(w.dataId).values,E=n.data.get(k.dataId).values,$=gy.computeStrides(w.shape),C=gy.computeStrides(k.shape),[A,_,R]=o?[$[0],1,$[1]]:[$[0],$[1],1],[D,F,O]=i?[1,C[1],C[0]]:[C[1],1,C[0]],M=N*S,L=Lx([I,N,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<I;e++)for(let t=0;t<N;t+=B)for(let n=0;n<S;n+=B)for(let r=0;r<v;r+=B){const s=Math.min(t+B,N),a=Math.min(n+B,S),o=Math.min(r+B,v);for(let i=t;i<s;i++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<o;s++){const r=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=T[r+i*_+s*R]*E[s*D+t*F+a]}z[e*M+(i*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const YA={kernelName:gf,backendName:"cpu",kernelFunc:XA};const ZA={kernelName:ny,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;let h,d,f;const m=[];h=XA({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),o&&(d=HA({inputs:{a:h,b:o},backend:n}),m.push(h),h=d),c&&(f=RA(n,h,c,i,p),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}};function JA(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const QA={kernelName:Zd,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;pA(t,"abs");let r=new Float32Array(gy.sizeFromShape(t.shape));return r=JA(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},e_=hA(Jd,(e=>Math.acos(e))),t_={kernelName:Jd,backendName:"cpu",kernelFunc:e_},n_=hA(Qd,(e=>Math.acosh(e))),r_={kernelName:Qd,backendName:"cpu",kernelFunc:n_};const s_={kernelName:tf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;pA(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=Lx(r[0].shape,r[0].dtype),o=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function a_(e,t,n,r,s){const a=t.length,o=gy.sizeFromShape(t),i=gy.computeStrides(t),u=gy.computeStrides(s),l=gy.getTypedArrayFromDType(n,gy.sizeFromShape(s));for(let t=0;t<o;++t){const n=gy.indexToLoc(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[gy.locToIndex(s,a,u)]=e[t]}return l}function o_(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;pA(s,"transpose");const o=s.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=s.shape[a[e]];const u=a_(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(u,i,s.dtype),shape:i,dtype:s.dtype}}const i_={kernelName:Kg,backendName:"cpu",kernelFunc:o_};const u_={kernelName:nf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;pA(s,"all");const i=gy.parseAxisParam(a,s.shape);let u=i;const l=Vw.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=o_({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Vw.getInnerMostAxes(u.length,s.shape.length)),Vw.assertAxesAreInnerMostDims("all",u,c.shape.length);const[p,h]=Vw.computeOutAndReduceShapes(c.shape,u),d=gy.sizeFromShape(h),f=gy.makeZerosTypedArray(gy.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=jA({inputs:{x:g},backend:n,attrs:{shape:Vw.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const l_={kernelName:rf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;pA(s,"any");const i=gy.parseAxisParam(a,s.shape);let u=i;const l=Vw.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=o_({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Vw.getInnerMostAxes(u.length,s.shape.length)),Vw.assertAxesAreInnerMostDims("any",u,c.shape.length);const[p,h]=Vw.computeOutAndReduceShapes(c.shape,u),d=gy.sizeFromShape(h),f=gy.makeZerosTypedArray(gy.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=jA({inputs:{x:g},backend:n,attrs:{shape:Vw.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const c_={kernelName:sf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;pA(s,"argMax");let o=gy.parseAxisParam(a,s.shape);const i=Vw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=o_({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Vw.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],Vw.assertAxesAreInnerMostDims("argMax",o,u.shape.length);const[c,p]=Vw.computeOutAndReduceShapes(u.shape,o),h=gy.sizeFromShape(c),d=gy.makeZerosTypedArray(h,"int32"),f=gy.sizeFromShape(p),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s>n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const p_={kernelName:af,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;pA(s,"argMin");let o=gy.parseAxisParam(a,s.shape);const i=Vw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=o_({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Vw.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],Vw.assertAxesAreInnerMostDims("argMin",o,u.shape.length);const[c,p]=Vw.computeOutAndReduceShapes(u.shape,o),h=gy.sizeFromShape(c),d=gy.makeZerosTypedArray(h,"int32"),f=gy.sizeFromShape(p),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s<n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},h_=hA(of,(e=>Math.asin(e))),d_={kernelName:of,backendName:"cpu",kernelFunc:h_},f_=hA(uf,(e=>Math.asinh(e))),m_={kernelName:uf,backendName:"cpu",kernelFunc:f_},g_=hA(lf,(e=>Math.atan(e))),y_={kernelName:lf,backendName:"cpu",kernelFunc:g_},b_=wA(((e,t)=>Math.atan2(e,t))),x_=WA(pf,b_),w_={kernelName:pf,backendName:"cpu",kernelFunc:x_},k_=hA(cf,(e=>Math.atanh(e))),v_={kernelName:cf,backendName:"cpu",kernelFunc:k_};function N_(e,t,n,r,s,a){const o=s.strideHeight,i=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,p=s.effectiveFilterWidth,h=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Lx(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*o-h,k=Math.max(0,w),v=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const o=n*i-d,c=Math.max(0,o),h=Math.min(s.inWidth,p+o);let y=f,b=0,w=0;for(let n=k;n<v;n+=u){const s=m+n*r[1];for(let n=c;n<h;n+=l){const o=e[s+n*r[2]+t];"max"===a&&o>y?y=o:"avg"===a&&(b+=o,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function S_(e,t,n,r,s=!1,a=!1){const o=Lx(r.outShape,"int32"),i=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Lx(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,p+g);for(let i=0;i<r.outWidth;++i){const p=i*u-f;let d=p;for(;d<0;)d+=c;const x=Math.min(r.inWidth,h+p);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=l){const o=n-g;for(let i=d;i<x;i+=c){const u=i-p,l=m.get(e,n,i,t);l>w&&(w=l,k=s?a?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*h+u)}}o.set(k,e,n,i,t)}}return o}function I_(e,t,n,r,s,a){const o=s.strideDepth,i=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,p=s.dilationWidth,h=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Lx(s.outShape,n),w=x.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],v=s.outShape[2]*s.outShape[3]*s.outShape[4],N=s.outShape[3]*s.outShape[4],S=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*k,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let k=0;k<s.outDepth;++k){const I=k*o-m;let T=I;for(;T<0;)T+=l;const E=Math.min(s.inDepth,h+I),$=n+k*v;for(let n=0;n<s.outHeight;++n){const o=n*i-g;let h=o;for(;h<0;)h+=c;const m=Math.min(s.inHeight,d+o),k=$+n*N;for(let n=0;n<s.outWidth;++n){const o=n*u-y;let i=o;for(;i<0;)i+=p;const d=Math.min(s.inWidth,f+o),g=k+n*S;let v=b,N=0,I=0;for(let n=T;n<E;n+=l){const s=x+n*r[1];for(let n=h;n<m;n+=c){const o=s+n*r[2];for(let n=i;n<d;n+=p){const s=e[o+n*r[3]+t];if("max"===a&&s>v?v=s:"avg"===a&&(N+=s,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/I:v}}}}return x}function T_(e,t){const n=Lx(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*s-d;let h=l;for(;h<0;)h+=i;const k=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let v=d;for(;v<0;)v+=u;const N=Math.min(t.inWidth,p+d);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=x;t<w;t+=o){const n=t-b;for(let r=h;r<k;r+=i){const s=r-l;for(let a=v;a<N;a+=u){const o=a-d,i=e.get(m,t,r,a,g);i>=S&&(S=i,I=n*c*p+s*c+o)}}}n.set(I,m,y,r,s,g)}}}return n}const E_={kernelName:hf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;pA(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;gy.assert(Vw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Vw.computePool2DInfo(s.shape,a,o,1,i,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&gy.arraysEqual(l.inShape,l.outShape))c=gA({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=gy.computeStrides(s.shape),r=N_(e,s.shape,s.dtype,t,l,"avg");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const $_={kernelName:ff,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;pA(s,"avgPool3d");const c=Vw.computePool3DInfo(s.shape,a,o,1,i,u,l),p=I_(n.data.get(s.dataId).values,s.shape,s.dtype,gy.computeStrides(s.shape),c,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}};const C_={kernelName:mf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;pA([s,a],"avgPool3DGrad");const c=Vw.computePool3DInfo(a.shape,o,i,1,u,l),p=c.strideDepth,h=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,S=v-1-c.padInfo.left,I=k-1-c.padInfo.top,T=Lx(a.shape,"float32"),E=1/(f*m*g),$=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-N,o=r-I,i=s-S;let u=0;for(let n=0;n<w;n+=y){const r=(a+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=b){const s=(o+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<v;n+=x){const a=(i+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;u+=$.get(e,r,s,a,t)}}}T.set(u*E,e,n,r,s,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const A_={kernelName:df,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;pA([s,a],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=r,c=Vw.computePool2DInfo(o.shape,i,u,1,l),p=c.strideHeight,h=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Lx(o.shape,"float32"),v=1/(d*f),N=n.data.get(s.dataId).values,S=Lx(s.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(s+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/h;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;o+=S.get(e,r,s,t)}}k.set(o*v,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const __={kernelName:om,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:o,mean:i,variance:u}=t;gy.assert(i.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),gy.assert(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),gy.assert(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),pA([s,i,u,a,o],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const c=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,h=n.data.get(u.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=h.length,x=p.length;let w=0,k=0,v=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-p[k++])*d[v++]/Math.sqrt(h[N++]+l),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function R_(e,t,n,r,s){const a=ww.isSliceContinous(r,t,n),o=gy.sizeFromShape(n),i=gy.computeStrides(r);if(a){const n=ww.computeFlatOffset(t,i);return"string"===s?e.slice(n,n+o):e.subarray(n,n+o)}const u=Lx(r,s,"string"===s?Vw.fromUint8ToStringArray(e):e),l=Lx(n,s);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===s?Vw.fromStringArrayToUint8(l.values):l.values}function D_(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r;pA(s,"slice");const[i,u]=ww.parseSliceParams(s,a,o);ww.assertParamsValid(s,i,u);const l=R_(n.data.get(s.dataId).values,i,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const F_={kernelName:wg,backendName:"cpu",kernelFunc:D_};const O_={kernelName:yf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;pA([s],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),u=Vw.getReshaped(s.shape,a,i),l=Vw.getPermuted(u.length,a.length),c=Vw.getReshapedPermuted(s.shape,a,i),p=Vw.getSliceBeginCoords(o,a.length),h=Vw.getSliceSize(c,o,a.length),d=jA({inputs:{x:s},backend:n,attrs:{shape:u}}),f=o_({inputs:{x:d},backend:n,attrs:{perm:l}}),m=jA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=D_({inputs:{x:m},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function M_(e,t,n,r,s){const a=gy.sizeFromShape(r),o=gy.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=a>0?t[n]:1)}return o}function L_(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],o=Lx([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<a;s++){const a=e.get(i,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,s),i,a):o.set(o.get(i,a)+1,i,a))}return o}const z_={kernelName:bf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=M_(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}};const B_={kernelName:xf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=Vw.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},P_=$A((e=>Math.ceil(e))),W_=dA(kf,P_),V_={kernelName:kf,backendName:"cpu",kernelFunc:W_},U_=hA(vf,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),G_={kernelName:vf,backendName:"cpu",kernelFunc:U_},H_={kernelName:Sf,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(gy.sizeFromShape(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,i=n.data.get(a.dataId).values,u=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=u[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function q_(e,t,n,r){const s=gy.getArrayFromDType(n,gy.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=gy.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?Vw.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=a[o++]}r+=e.shape[1]}))}return s}function j_(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const K_={kernelName:dm,backendName:"cpu",kernelFunc:j_};function X_(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=gy.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));Vw.assertParamsConsistent(o,a);let i=Vw.computeOutShape(t.map((e=>e.shape)),a);if(0===gy.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>gy.sizeFromShape(e.shape)>0));if(1===u.length)return gA({inputs:{x:u[0]},backend:n});if("complex64"===u[0].dtype){const e=u.map((e=>MA({inputs:{input:e},backend:n}))),t=u.map((e=>j_({inputs:{input:e},backend:n}))),r=X_({inputs:e,backend:n,attrs:{axis:a}}),s=X_({inputs:t,backend:n,attrs:{axis:a}}),o=DA({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}const l=u.map((e=>{const t=gy.sizeFromShape(e.shape.slice(a));return jA({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Vw.computeOutShape(l.map((e=>e.shape)),1);const p=1===l[0].shape[0],h=q_(c,i,t[0].dtype,p),d=Vw.computeOutShape(u.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Y_={kernelName:If,backendName:"cpu",kernelFunc:X_};function Z_(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=r;pA([s,a],"conv2d");const p=Vw.convertConv2DDataFormat(u),h=Vw.computeConv2DInfo(s.shape,a.shape,o,l,i,c,!1,p),d=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,b=h.padInfo.top,x="channelsLast"===h.dataFormat,w=new jy(h.outShape,s.dtype),k=gy.computeStrides(s.shape),v=gy.computeStrides(a.shape),N=k[0],S=x?k[1]:k[2],I=x?k[2]:1,T=x?1:k[1],E=w.strides[0],$=x?w.strides[1]:w.strides[2],C=x?w.strides[2]:1,A=x?1:w.strides[1],_=n.data.get(s.dataId).values,R=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<h.batchSize;++e){const t=e*N,n=e*E;for(let e=0;e<h.outHeight;++e){const r=n+e*$,s=e*h.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=h.inHeight)continue;const a=e*v[0],o=t+n*S;for(let e=0;e<h.outWidth;++e){const t=r+e*C,n=e*h.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=h.inWidth)continue;const s=o+r*I;let i=a+e*v[1];for(let e=0;e<h.inChannels;++e){const n=_[s+e*T];for(let e=0;e<h.outChannels;++e)D[t+e*A]+=n*R[i+e];i+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const J_={kernelName:Tf,backendName:"cpu",kernelFunc:Z_};const Q_={kernelName:Ef,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;pA([s,a],"conv2dBackpropFilter");const p=Vw.convertConv2DDataFormat(u),h=Vw.computeConv2DInfo(s.shape,c,o,1,i,l,!1,p),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,b=new jy(h.filterShape,"float32"),x=h.padInfo.left,w=h.padInfo.top,k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=new jy(s.shape,s.dtype,k),S=new jy(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(h.outHeight,(h.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(h.outWidth,(h.inWidth+x-r)/f);for(let o=0;o<h.inChannels;++o)for(let i=0;i<h.outChannels;++i){let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;u+=y?N.get(l,t,n,o)*S.get(l,c,e,i):N.get(l,o,t,n)*S.get(l,i,c,e)}}b.set(u,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const eR={kernelName:$f,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r;pA([s,a],"conv2dBackpropInput");const p=gy.computeStrides(a.shape),h=gy.computeStrides(s.shape);let d=Vw.convertConv2DDataFormat(l);const f=Vw.computeConv2DInfo(o,a.shape,i,1,u,c,!1,d),m=new jy(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=p,{batchSize:v,filterHeight:N,filterWidth:S,inChannels:I,inHeight:T,inWidth:E,outChannels:$,outHeight:C,outWidth:A,strideHeight:_,strideWidth:R}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,F=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=h[0],W=O?h[1]:h[2],V=O?h[2]:1,U=O?1:h[1];for(let e=0;e<v;++e)for(let t=0;t<I;++t)for(let n=0;n<T;++n){const r=n-D,s=Math.max(0,Math.ceil(r/_)),a=Math.min(C,(N+r)/_);for(let o=0;o<E;++o){const i=o-F,u=Math.max(0,Math.ceil(i/R)),l=Math.min(A,(S+i)/R);let c=0;for(let n=s;n<a;++n){const s=n*_-r;for(let r=u;r<l;++r){const a=P*e+W*n+V*r,o=x*(N-1-s)+w*(S-1-(r*R-i))+k*t;for(let e=0;e<$;++e){c+=y[a+U*e]*b[o+e]}}}g[M*e+L*n+z*o+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const tR={kernelName:Cf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r;pA([s,a],"conv3d");const l=Vw.computeConv3DInfo(s.shape,a.shape,o,u,i),{filterDepth:c,filterHeight:p,filterWidth:h,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new jy(l.outShape,s.dtype),k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=w.values,S=gy.computeStrides(s.shape),I=gy.computeStrides(a.shape);for(let e=0;e<l.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const r=n+e*w.strides[1],s=e*l.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=l.inDepth)continue;const a=e*I[0],o=t+n*S[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-x;for(let e=0;e<p;++e){const r=n+e*f;if(r<0||r>=l.inHeight)continue;const s=a+e*I[1],i=o+r*S[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-b;for(let e=0;e<h;++e){const t=r+e*m;if(t<0||t>=l.inWidth)continue;const a=s+e*I[2],o=i+t*l.inChannels;let u=a;for(let e=0;e<l.inChannels;++e){const t=k[o+e];for(let e=0;e<l.outChannels;++e)N[n+e]+=t*v[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const nR={kernelName:Af,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:u}=r;pA([s,a],"conv3dBackpropFilterV2");const l=gy.computeStrides(s.shape),c=gy.computeStrides(a.shape),p=Vw.computeConv3DInfo(s.shape,u,o,1,i),h=p.strideDepth,d=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new jy(p.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,S=n.data.get(a.dataId).values,[I,T,E,$]=c,C=n.data.get(s.dataId).values,[A,_,R,D]=l,F=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((F-e)/h)),n=Math.min(p.outDepth,(p.inDepth+F-e)/h),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),o=Math.min(p.outHeight,(p.inHeight+M-s)/d),i=s*k+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((O-r)/f)),l=Math.min(p.outWidth,(p.inWidth+O-r)/f),c=r*v+i;for(let i=0;i<p.inChannels;++i){const m=i*N+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let m=0;m<p.batchSize;++m){const p=m*A,y=m*I;for(let m=t;m<n;++m){const t=(e+m*h-F)*_+p,n=m*T+y;for(let e=a;e<o;++e){const a=(s+e*d-M)*R+t,o=e*E+n;for(let e=u;e<l;++e){const t=e*$+o;g+=C[(r+e*f-O)*D+a+i]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const rR={kernelName:_f,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:u}=r;pA([s],"conv3dBackpropInputV2");const l=gy.computeStrides(s.shape),c=gy.computeStrides(a.shape),p=Vw.computeConv3DInfo(u,a.shape,i,1,o),h=new jy(p.inShape,"float32"),d=h.values,[f,m,g,y]=h.strides,b=n.data.get(s.dataId).values,[x,w,k,v]=l,N=n.data.get(a.dataId).values,[S,I,T,E]=c,{batchSize:$,filterDepth:C,filterHeight:A,filterWidth:_,inChannels:R,inDepth:D,inHeight:F,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:V}=p,U=C-1-p.padInfo.front,G=A-1-p.padInfo.top,H=_-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<R;++t)for(let n=0;n<D;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(C+r)/P);for(let o=0;o<F;++o){const i=o-G,u=Math.max(0,Math.ceil(i/W)),l=Math.min(z,(A+i)/W);for(let c=0;c<O;++c){const p=c-H,h=Math.max(0,Math.ceil(p/V)),$=Math.min(B,(_+p)/V);let R=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=u;r<l;++r){const a=r*W-i;for(let o=h;o<$;++o){const i=x*e+w*n+k*r+v*o,u=S*(C-1-s)+I*(A-1-a)+T*(_-1-(o*V-p))+E*t;for(let e=0;e<M;++e){R+=b[i+e]*N[u+e]}}}}d[f*e+m*n+g*o+y*c+t]=R}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},sR=hA(Rf,(e=>Math.cos(e))),aR={kernelName:Rf,backendName:"cpu",kernelFunc:sR},oR=hA(Df,(e=>Math.cosh(e))),iR={kernelName:Df,backendName:"cpu",kernelFunc:oR};const uR={kernelName:Mf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,[c,p,h,d]=s.shape,f=a.shape[0],[m,g]=i,y=Lx([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,k=gy.computeStrides(s.shape),v=gy.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(s-n)*(p-1)/(m-1):0,f=g>1?(a-r)*(h-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+s)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=l}else if("bilinear"===u){const n=Math.floor(c),s=Math.ceil(c),i=c-n;for(let u=0;u<g;u++){const c=g>1?r*(h-1)+u*f:.5*(r+a)*(h-1);if(c<0||c>h-1){for(let n=0;n<d;n++){const r=n+u*v[2]+t*v[1]+e*v[0];y.values[r]=l}continue}const p=Math.floor(c),m=Math.ceil(c),b=c-p;for(let r=0;r<d;r++){let a=r+p*k[2]+n*k[1]+o*k[0];const l=w[a];a=r+m*k[2]+n*k[1]+o*k[0];const c=w[a];a=r+p*k[2]+s*k[1]+o*k[0];const h=w[a];a=r+m*k[2]+s*k[1]+o*k[0];const d=l+(c-l)*b,f=h+(w[a]-h)*b;a=r+u*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*i}}}else for(let n=0;n<g;++n){const s=g>1?r*(h-1)+n*f:.5*(r+a)*(h-1);if(s<0||s>h-1){for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=l}continue}const i=Math.round(s),u=Math.round(c);for(let r=0;r<d;r++){const s=r+i*k[2]+u*k[1]+o*k[0],a=r+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const lR={kernelName:Ff,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;pA(s,"cumprod");const u=Vw.getAxesPermutation([a],s.shape.length);let l=s;null!=u&&(l=o_({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Vw.getInnerMostAxes(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const p=ub(l.dtype,"int32"),h=gy.makeOnesTypedArray(gy.sizeFromShape(l.shape),p),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?1:d[n];else{const r=m(e,t-1);h[n]=o?d[r]*h[r]:d[n]*h[r]}}const g=n.makeTensorInfo(l.shape,p,h);if(null!=u){const e=o_({inputs:{x:g},backend:n,attrs:{perm:Vw.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}};const cR={kernelName:Of,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;pA(s,"cumsum");const u=Vw.getAxesPermutation([a],s.shape.length);let l=s;null!=u&&(l=o_({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Vw.getInnerMostAxes(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const p=ub(l.dtype,"int32"),h=gy.makeZerosTypedArray(gy.sizeFromShape(l.shape),p),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?0:d[n];else{const r=m(e,t-1);h[n]=o?d[r]+h[r]:d[n]+h[r]}}const g=n.makeTensorInfo(l.shape,p,h);if(null!=u){const e=o_({inputs:{x:g},backend:n,attrs:{perm:Vw.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}};const pR={kernelName:Lf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=M_(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===s.shape.length){const e=L_(n.bufferSync(s),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const hR={kernelName:zf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r;gy.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=s.shape[0],u=s.shape[1],l=s.shape[2],c=s.shape[3],p=u*a,h=l*a,d=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(i*p*h*d);let g=0;for(let e=0;e<i;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<h;++t){const s=Math.floor(t/a),o=(r*a+t%a)*d;for(let t=0;t<d;++t){const r=t+o+c*(s+l*(n+u*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,p,h,d],s.dtype,m)}};function dR(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:l}=r;pA([s,a],"depthwiseConv2DNative");const c=gy.computeStrides(s.shape),p=gy.computeStrides(a.shape);let h=u;null==h&&(h=[1,1]),gy.assert(Vw.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=Vw.computeConv2DInfo(s.shape,a.shape,o,h,i,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new jy(d.outShape,s.dtype),N=n.data.get(s.dataId).values,S=n.data.get(a.dataId).values,I=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*v.strides[1],s=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*p[0],o=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*p[1],i=o+r*d.inChannels;let u=t,l=s;for(let e=0;e<d.inChannels;++e){const t=N[i+e];for(let e=0;e<k;++e)I[u+e]+=t*S[l+e];u+=k,l+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const fR={kernelName:Bf,backendName:"cpu",kernelFunc:dR};const mR={kernelName:Pf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=r;pA([s,a],"depthwiseConv2dNativeBackpropFilter");const p=Vw.computeConv2DInfo(s.shape,c,o,i,u,l,!0),{strideHeight:h,strideWidth:d,filterHeight:f,filterWidth:m}=p,g=new jy(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,w=n.data.get(s.dataId).values,k=new jy(s.shape,s.dtype,w),v=n.data.get(a.dataId).values,N=new jy(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(p.outHeight,(p.inHeight+b-e)/h);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(p.outWidth,(p.inWidth+y-r)/d);for(let o=0;o<p.outChannels;++o){const i=Math.trunc(o/x),u=o%x;let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*h-b;for(let e=s;e<a;++e){const n=r+e*d-y;l+=k.get(u,t,n,i)*N.get(u,c,e,o)}}g.set(l,e,r,i,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const gR={kernelName:Wf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=r;pA([s,a],"depthwiseConv2DNativeBackpropInput");const p=gy.computeStrides(s.shape),h=gy.computeStrides(a.shape),d=Vw.computeConv2DInfo(c,a.shape,o,i,u,l,!0),f=new jy(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,k,v]=p,N=n.data.get(a.dataId).values,[S,I,T]=h,{batchSize:E,filterHeight:$,filterWidth:C,inChannels:A,inHeight:_,inWidth:R,outChannels:D,outHeight:F,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=C-1-d.padInfo.left,P=D/A;for(let e=0;e<E;++e)for(let t=0;t<A;++t)for(let n=0;n<_;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(F,($+r)/M);for(let o=0;o<R;++o){const i=o-B,u=Math.max(0,Math.ceil(i/L)),l=Math.min(O,(C+i)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=u;r<l;++r){const a=w*e+k*n+v*r,o=S*($-1-s)+I*(C-1-(r*L-i))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*N[o+e]}}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const yR={kernelName:Vf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=gy.sizeFromShape(r.shape),a=n.data.get(r.dataId).values,o=Lx([s,s],r.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*s+e]=a[e];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},bR={kernelName:Uf,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:o,dilations:i}=n,u=t,l=u.data.get(r.dataId).values,c=r.shape.length,p=u.data.get(s.dataId).values,h=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=Vw.computeDilation2DInfo(r.shape,s.shape,a,o,"NHWC",i),E=gy.sizeFromShape(T),$=T.length,C=gy.getArrayFromDType(r.dtype,E);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const o=a*k-x.left;for(let i=0;i<g;++i){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=o+n*I;if(d>=0&&d<m){const o=gy.locToIndex([e,a,d,i],c,gy.computeStrides(r.shape)),f=gy.locToIndex([t,n,i],h,gy.computeStrides(s.shape)),m=l[o]+p[f];m>u&&(u=m)}}}C[gy.locToIndex([e,t,a,i],$,gy.computeStrides(T))]=u}}}return{dataId:u.write(gy.toTypedArray(C,r.dtype),T,r.dtype),shape:T,dtype:r.dtype}}},xR={kernelName:Hf,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=gy.toNestedArray(r.shape,l.data.get(r.dataId).values),p=gy.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=Vw.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",u);gy.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=gy.toNestedArray(I,l.data.get(a.dataId).values),E=gy.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const l=s+n*S;if(l>=0&&l<f){const s=c[e][r][l][a]+p[t][n][a];s>o&&(o=s,i=t,u=n)}}}E[i][u][a]+=T[e][t][r][a]}}}return{dataId:l.write(gy.toTypedArray(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},wR={kernelName:Gf,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=gy.toNestedArray(r.shape,l.data.get(r.dataId).values),p=gy.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=Vw.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",u);gy.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=gy.toNestedArray(I,l.data.get(a.dataId).values),E=gy.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=s<0?0:s;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const l=s+n*S;if(l>=0&&l<f){const s=c[e][r][l][a]+p[t][n][a];s>o&&(o=s,i=r,u=l)}}}E[e][i][u][a]+=T[e][t][r][a]}}}return{dataId:l.write(gy.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},kR=wA(((e,t)=>e*t)),vR=VA(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),NR=WA(Wm,kR,vR),SR={kernelName:Wm,backendName:"cpu",kernelFunc:NR};function IR(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;let i;pA(s,"sum"),i="bool"===s.dtype?BA({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):gA({inputs:{x:s},backend:n});const u=i.shape.length,l=gy.parseAxisParam(a,i.shape),c=Vw.getAxesPermutation(l,u);let p=l,h=i;null!=c&&(h=o_({inputs:{x:i},backend:n,attrs:{perm:c}}),p=Vw.getInnerMostAxes(p.length,u)),Vw.assertAxesAreInnerMostDims("sum",p,h.shape.length);const[d,f]=Vw.computeOutAndReduceShapes(h.shape,p);let m=OA(n,d,Vw.upcastType(h.dtype,"int32"));const g=gy.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(h.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=jA({inputs:{x:m},backend:n,attrs:{shape:Vw.expandShapeToKeepDim(m.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),m}const TR={kernelName:Eg,backendName:"cpu",kernelFunc:IR};const ER={kernelName:jf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:u}=Vw.decodeEinsumEquation(s,a.length);Vw.checkEinsumDimSizes(o.length,u,a);const{path:l,steps:c}=Vw.getEinsumComputePath(i,u),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Vw.getEinsumPermutation(d,u[t]);let s;Vw.isIdentityPermutation(e)?s=a[t]:(s=o_({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);gy.arraysEqual(s.shape,o)||(s=jA({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=NR({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(l[e]>=0&&(h=IR({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}};const $R={kernelName:Xf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;pA([r,s],"eluGrad");const a=new Float32Array(gy.sizeFromShape(s.shape)),o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},CR=wA(((e,t)=>e===t?1:0)),AR=WA(Zf,CR,null,"bool"),_R={kernelName:Zf,backendName:"cpu",kernelFunc:AR},RR=Vw.ERF_P,DR=Vw.ERF_A1,FR=Vw.ERF_A2,OR=Vw.ERF_A3,MR=Vw.ERF_A4,LR=Vw.ERF_A5,zR=hA(Yf,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+RR*n);return t*(1-((((LR*r+MR)*r+OR)*r+FR)*r+DR)*r*Math.exp(-n*n))})),BR={kernelName:Yf,backendName:"cpu",kernelFunc:zR},PR=$A((e=>Math.exp(e))),WR=dA(Jf,PR,"float32"),VR={kernelName:Jf,backendName:"cpu",kernelFunc:WR};function UR(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,o=s.shape.length,i=s.shape.slice();let u=a;return a<0&&(gy.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+a+1),i.splice(u,0,1),jA({inputs:{x:s},backend:n,attrs:{shape:i}})}const GR={kernelName:Qf,backendName:"cpu",kernelFunc:UR},HR=$A((e=>Math.expm1(e))),qR=dA(em,HR),jR={kernelName:em,backendName:"cpu",kernelFunc:qR},KR=wA(((e,t)=>e/t)),XR=WA(qf,KR),YR={kernelName:qf,backendName:"cpu",kernelFunc:XR},ZR=wA(((e,t)=>e-t)),JR=VA(((e,t,n,r)=>({real:e-n,imag:t-r}))),QR=WA(Vg,ZR,JR),eD={kernelName:Vg,backendName:"cpu",kernelFunc:QR};function tD(e,t,n){const r=e.shape,s=r[0],a=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,l=[s,a],c=gy.sizeFromShape(l),p=gy.getTypedArrayFromDType("float32",c),h=gy.getTypedArrayFromDType("float32",c);for(let e=0;e<s;e++){const r=D_({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=D_({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=DA({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=nD(o,t,n),d=Vw.mergeRealAndImagArrays(l,c);for(let t=0;t<a;t++){const n=Vw.getComplexWithIndex(d,t);p[e*a+t]=n.real,h[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o)}const d=n.makeTensorInfo(l,"float32",p),f=n.makeTensorInfo(l,"float32",h),m=DA({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function nD(e,t,n){const r=gy.sizeFromShape(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((i=r)&i-1)){const s=rD(a,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",s.real),t=n.makeTensorInfo(i,"float32",s.imag),a=n.makeTensorInfo([],"float32",gy.createScalarValue(r,"float32")),o=gA({inputs:{x:a},backend:n}),u=YR.kernelFunc({inputs:{a:e,b:a},backend:n}),l=YR.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(u.dataId).values,p=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:p}}return s}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,o=0;for(let r=0;r<t;r++){const i=Vw.exponent(s*r,t,n),u=Vw.getComplexWithIndex(e,r);a+=u.real*i.real-u.imag*i.imag,o+=u.real*i.imag+u.imag*i.real}n&&(a/=t,o/=t),Vw.assignToTypedArray(r,a,o,s)}return r}(Vw.mergeRealAndImagArrays(a,o),r,t);return Vw.splitRealAndImagArrays(e)}var i}function rD(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=Vw.mergeRealAndImagArrays(e,t),o=n/2,i=Vw.complexWithEvenIndex(a),u=i.real,l=i.imag,c=[u.length],p=s.makeTensorInfo(c,"float32",u),h=s.makeTensorInfo(c,"float32",l),d=DA({inputs:{real:p,imag:h},backend:s}),f=Vw.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=DA({inputs:{real:b,imag:x},backend:s}),k=rD(u,l,o,r,s),v=k.real,N=k.imag,S=[v.length],I=s.makeTensorInfo(S,"float32",v),T=s.makeTensorInfo(S,"float32",N),E=DA({inputs:{real:I,imag:T},backend:s}),$=rD(m,g,o,r,s),C=$.real,A=$.imag,_=[C.length],R=s.makeTensorInfo(_,"float32",C),D=s.makeTensorInfo(_,"float32",A),F=DA({inputs:{real:R,imag:D},backend:s}),O=Vw.exponents(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=DA({inputs:{real:L,imag:z},backend:s}),P=NR({inputs:{a:B,b:F},backend:s}),W=HA({inputs:{a:E,b:P},backend:s}),V=QR({inputs:{a:E,b:P},backend:s}),U=MA({inputs:{input:W},backend:s}),G=MA({inputs:{input:V},backend:s}),H=j_({inputs:{input:W},backend:s}),q=j_({inputs:{input:V},backend:s}),j=X_({inputs:[U,G],backend:s,attrs:{axis:0}}),K=X_({inputs:[H,q],backend:s,attrs:{axis:0}}),X=s.data.get(j.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const sD={kernelName:tm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=gy.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=jA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=tD(o,!1,n),u=jA({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}};function aD(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,o=a||gy.inferDtype(s),i=gy.getArrayFromDType(o,gy.sizeFromShape(r));return function(e,t,n){e.fill(t)}(i,s),t.makeTensorInfo(r,o,i)}const oD={kernelName:nm,backendName:"cpu",kernelFunc:aD};const iD={kernelName:rm,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=gy.getTypedArrayFromDType(r.dtype,gy.sizeFromShape(r.shape)),[o,i,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*u*i*l;for(let e=0;e<i;e++){const n=e*(u*l);for(let e=0;e<u;e++){const r=e*l;for(let s=0;s<l;s++){const o=Math.round(u-e-1),i=t+n+r+s;let p=c[i];if(o>=0&&o<u){p=c[t+n+o*l+s]}a[i]=p}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},uD=$A((e=>Math.floor(e))),lD=dA(sm,uD),cD={kernelName:sm,backendName:"cpu",kernelFunc:lD},pD=wA(((e,t)=>Math.floor(e/t))),hD=WA(am,pD,null,"int32"),dD={kernelName:am,backendName:"cpu",kernelFunc:hD};const fD={kernelName:ry,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=Z_({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=jA({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=HA({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=HA({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===i.shape.length&&1!==i.shape[0]){const e=jA({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=RA(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=RA(n,m,d,i,f);n.disposeIntermediateTensorInfo(e)}return m}};const mD={kernelName:sy,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=dR({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=HA({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=RA(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function gD(e,t,n,r,s,a,o,i,u){const l=Lx([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*o[t],r.push(a)}if(c<0||c>=u/a)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<a;e++)l.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return l}const yD={kernelName:um,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=gy.sizeFromShape(r.shape),o=s.shape,i=o[o.length-1],[u,l,c,p]=Vw.prepareAndValidate(r,s);if(0===l)return n.makeTensorInfo(u,r.dtype,[]);const h=gD(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,l,i,c,p,r.shape,a);return n.makeTensorInfo(u,r.dtype,h.values)}};function bD(e,t,n){const r=Lx(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],o=s[2],i=t.locToIndex([a,o]);s[2]=t.values[i];const u=e.locToIndex(s);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}const xD={kernelName:im,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r;pA([s,a],"gatherV2");const u=gy.parseAxisParam(o,s.shape)[0],l=n.data.get(a.dataId).values,c=s.shape[u];for(let e=0;e<l.length;++e){const t=l[e];gy.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let p=i;null==i&&(p=0);const h=gy.sizeFromShape(a.shape),d=Vw.segment_util.collectGatherOpShapeInfo(s,a,u,p),f=jA({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=jA({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=bD(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},wD=wA(((e,t)=>e>t?1:0)),kD=WA(lm,wD,null,"bool"),vD={kernelName:lm,backendName:"cpu",kernelFunc:kD},ND=wA(((e,t)=>e>=t?1:0)),SD=WA(cm,ND,null,"bool"),ID={kernelName:cm,backendName:"cpu",kernelFunc:SD};const TD={kernelName:hm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=gy.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=jA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=tD(o,!0,n),u=jA({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}},ED=hA(fm,(e=>Number.isFinite(e)?1:0),"bool"),$D={kernelName:fm,backendName:"cpu",kernelFunc:ED},CD=hA(mm,(e=>Math.abs(e)===1/0?1:0),"bool"),AD={kernelName:mm,backendName:"cpu",kernelFunc:CD},_D=hA(gm,(e=>Number.isNaN(e)?1:0),"bool"),RD={kernelName:gm,backendName:"cpu",kernelFunc:_D},DD=wA(((e,t)=>e<t?1:0)),FD=WA(bm,DD,null,"bool"),OD={kernelName:bm,backendName:"cpu",kernelFunc:FD},MD=wA(((e,t)=>e<=t?1:0)),LD=WA(xm,MD,null,"bool"),zD={kernelName:xm,backendName:"cpu",kernelFunc:LD};function BD(e,t,n){const r=(t-e)/(n-1),s=gy.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const PD={kernelName:wm,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=BD(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},WD=$A((e=>Math.log(e))),VD=dA(km,WD),UD={kernelName:km,backendName:"cpu",kernelFunc:VD},GD=hA(vm,(e=>Math.log1p(e))),HD={kernelName:vm,backendName:"cpu",kernelFunc:GD},qD=wA(((e,t)=>e&&t)),jD=WA(Nm,qD,null,"bool"),KD={kernelName:Nm,backendName:"cpu",kernelFunc:jD},XD=hA(Sm,(e=>e?0:1),"bool"),YD={kernelName:Sm,backendName:"cpu",kernelFunc:XD},ZD=wA(((e,t)=>e||t)),JD=WA(Im,ZD,null,"bool"),QD={kernelName:Im,backendName:"cpu",kernelFunc:JD};const eF={kernelName:Tm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:u}=r;pA(s,"LRN");const l=s.shape[3],c=l-1,p=n.data.get(s.dataId).values,h=gy.sizeFromShape(s.shape),d=new Float32Array(h);function f(e){const t=e%l;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let e=0;e<h;e++){const t=f(e),n=p[e]*Math.pow(o+i*t,-u);d[e]=n}return n.makeTensorInfo(s.shape,s.dtype,d)}};const tF={kernelName:Em,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r;pA(o,"LRNGrad");const p=gy.sizeFromShape(o.shape),h=o.shape[3],d=n.data.get(o.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(p),y=p;for(let e=0;e<y;e++){const t=e%h,n=e-t+Math.max(0,t-i),r=e-t+Math.min(h,t+i+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=l*s+u;for(let t=n;t<r;t++){let n=-2*l*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(o.shape,s.dtype,g)}};function nF(e,t,n,r){const s=gy.getTypedArrayFromDType(r,gy.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}function rF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=n;let u=s.shape;const l=u.length,c=gy.parseAxisParam(a,u);let p=c;const h=Vw.getAxesPermutation(p,l);let d=i.data.get(s.dataId).values;if(null!=h){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[h[t]];d=a_(d,u,s.dtype,h,e),p=Vw.getInnerMostAxes(p.length,l),u=e}pA(s,"max"),Vw.assertAxesAreInnerMostDims("max",p,l);const[f,m]=Vw.computeOutAndReduceShapes(u,p),g=nF(d,gy.sizeFromShape(m),f,s.dtype),y=i.write(g,f,s.dtype);let b=f;if(o){b=Vw.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:s.dtype}}const sF={kernelName:$m,backendName:"cpu",kernelFunc:rF},aF=wA(((e,t)=>Math.max(e,t))),oF=WA(Cm,aF),iF={kernelName:Cm,backendName:"cpu",kernelFunc:oF};const uF={kernelName:Am,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;pA(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;gy.assert(Vw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Vw.computePool2DInfo(s.shape,a,o,1,i,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&gy.arraysEqual(l.inShape,l.outShape))c=gA({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=gy.computeStrides(s.shape),r=N_(e,s.shape,s.dtype,t,l,"max");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const lF={kernelName:Rm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;pA(s,"maxPool3d");const c=Vw.computePool3DInfo(s.shape,a,o,1,i,u,l),p=I_(n.data.get(s.dataId).values,s.shape,s.dtype,gy.computeStrides(s.shape),c,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}};const cF={kernelName:Dm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;pA([s,a],"maxPool3DGrad");const c=Vw.computePool3DInfo(a.shape,o,i,1,u,l),p=T_(n.bufferSync(a),c),h=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,S=Lx(a.shape,"float32"),I=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-k,o=r-N,i=s-v;let u=0;for(let n=0;n<b;n+=m){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(o+s)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<w;o+=y){const l=(i+o)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const h=b*x*w-1-p.get(e,r,a,l,t)===n*x*w+s*w+o?1:0;if(0===h)continue;u+=I.get(e,r,a,l,t)*h}}}S.set(u,e,n,r,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const pF={kernelName:_m,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;pA([a,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,h=Vw.computePool2DInfo(i.shape,u,l,1,c,p),d=n.data.get(i.dataId).values,f=Lx(h.outShape,i.dtype,S_(d,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=w-1-h.padInfo.left,v=x-1-h.padInfo.top,N=Lx(i.shape,"float32"),S=n.data.get(s.dataId).values,I=Lx(s.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=n-v,a=r-k;let o=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const i=(a+s)/g;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;const u=x*w-1-f.get(e,r,i,t)===n*w+s?1:0;if(0===u)continue;o+=I.get(e,r,i,t)*u}}N.set(o,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};function hF(e,t,n,r,s){const a=N_(e,0,n,gy.computeStrides(t),s,"max"),o=S_(e,t,n,s,!0,r);return[a.values,o.values]}const dF={kernelName:Fm,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,u=n;pA(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=Vw.computePool2DInfo(r.shape,s,a,[1,1],o),[p,h]=hF(l,r.shape,r.dtype,i,c),d=u.write(p,c.outShape,r.dtype),f=u.write(h,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const fF={kernelName:Om,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=gy.parseAxisParam(a,s.shape),u=Vw.computeOutAndReduceShapes(s.shape,i)[1],l=gy.sizeFromShape(u),c=[],p=n.makeTensorInfo([],"float32",new Float32Array([l]));c.push(p);const h=BA({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});c.push(h);const d=XR({inputs:{a:h,b:p},backend:n});c.push(d);const f=IR({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:o}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const mF={kernelName:Mm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;pA(s,"min");const i=gy.parseAxisParam(a,s.shape);let u=i;const l=Vw.getAxesPermutation(u,s.shape.length);let c=s;null!=l&&(c=o_({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Vw.getInnerMostAxes(u.length,s.shape.length)),Vw.assertAxesAreInnerMostDims("min",u,c.shape.length);const[p,h]=Vw.computeOutAndReduceShapes(c.shape,u),d=gy.sizeFromShape(h),f=gy.makeZerosTypedArray(gy.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=jA({inputs:{x:g},backend:n,attrs:{shape:Vw.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},gF=wA(((e,t)=>Math.min(e,t))),yF=WA(Lm,gF),bF={kernelName:Lm,backendName:"cpu",kernelFunc:yF};const xF={kernelName:zm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:o}=r;pA(s,"mirrorPad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===o?0:1,p=n.data.get(s.dataId).values,h=s.shape.length,d=gy.computeStrides(s.shape),f=gy.sizeFromShape(i),m=i.length,g=gy.computeStrides(i),y=gy.getTypedArrayFromDType(s.dtype,f);for(let e=0;e<f;e++){let t=gy.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=gy.locToIndex(t,h,d);y[e]=p[n]}return{dataId:n.write(y,i,s.dtype),shape:i,dtype:s.dtype}}},wF=wA(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),kF=WA(Bm,wF),vF={kernelName:Bm,backendName:"cpu",kernelFunc:kF};function NF(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=s.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const u=gy.parseAxisParam([i],s.shape),l=rF({inputs:{x:s},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=Vw.expandShapeToKeepDim(l.shape,u),p=jA({inputs:{x:l},backend:n,attrs:{shape:c}}),h=QR({inputs:{a:s,b:p},backend:n}),d=WR({inputs:{x:h},backend:n}),f=IR({inputs:{x:d},backend:n,attrs:{axis:u,keepDims:!1}}),m=jA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=XR({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const SF={kernelName:Ag,backendName:"cpu",kernelFunc:NF};const IF={kernelName:Pm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r;pA(s,"multinomial");const u=i?s:NF({inputs:{logits:s},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],p=n.data.get(u.dataId).values,h=[l,a],d=gy.makeZerosTypedArray(gy.sizeFromShape(h),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const r=Al.alea(o.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();d[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[s+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(h,"int32",d)}};function TF(e,t,n){const r=gy.createScalarValue(-1,n);return kR([],t,r,e,n)}const EF={kernelName:Vm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;pA(r,"neg");const s=n.data.get(r.dataId).values,[a,o]=TF(s,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,a)}},$F=Jv.nonMaxSuppressionV3Impl;const CF={kernelName:Gm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r;pA(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:p}=$F(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},AF=Jv.nonMaxSuppressionV4Impl;const _F={kernelName:Hm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=r;pA(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,{selectedIndices:h,validOutputs:d}=AF(c,p,o,i,u,l);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},RF=Jv.nonMaxSuppressionV5Impl;const DF={kernelName:qm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=r;pA(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,h=o,d=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=RF(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},FF=wA(((e,t)=>e!==t?1:0)),OF=WA(Um,FF,null,"bool"),MF={kernelName:Um,backendName:"cpu",kernelFunc:OF};const LF={kernelName:Km,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:u}=r;pA(s,"oneHot");const l=gy.sizeFromShape(s.shape),c=new Float32Array(l*o);c.fill(u);const p=n.data.get(s.dataId).values;for(let e=0;e<l;++e)p[e]>=0&&p[e]<o&&(c[e*o+p[e]]=i);return n.makeTensorInfo([...s.shape,o],a,c)}};function zF(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=MA({inputs:{input:r},backend:n}),t=zF({inputs:{x:e},backend:n}),s=j_({inputs:{input:r},backend:n}),a=zF({inputs:{x:s},backend:n}),o=DA({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return aD({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const BF={kernelName:Jg,backendName:"cpu",kernelFunc:zF};const PF={kernelName:jm,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=MA({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=j_({inputs:{input:s},backend:r}),o=zF({inputs:{x:a},backend:r}),i=DA({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return aD({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function WF(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return UR({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{gy.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),gy.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],u=X_({inputs:t.map((e=>{const t=UR({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const VF={kernelName:Xm,backendName:"cpu",kernelFunc:WF};const UF={kernelName:Ym,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;pA(s,"pad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=n.data.get(s.dataId).values,c=gy.sizeFromShape(s.shape),p=s.shape.length,h=gy.computeStrides(s.shape),d=gy.sizeFromShape(i),f=i.length,m=gy.computeStrides(i),g=gy.getTypedArrayFromDType(s.dtype,d);0!==o&&g.fill(o);for(let e=0;e<c;e++){const t=gy.indexToLoc(e,p,h).map(((e,t)=>e+u[t]));g[gy.locToIndex(t,f,m)]=l[e]}return{dataId:n.write(g,i,s.dtype),shape:i,dtype:s.dtype}}},GF=wA(((e,t)=>Math.pow(e,t))),HF=WA(Zm,GF),qF={kernelName:Zm,backendName:"cpu",kernelFunc:HF};function jF(e,t,n,r){const[s,a]=Vw.computeOutAndReduceShapes(e,r),o=ub(t,"int32"),i=gy.makeZerosTypedArray(gy.sizeFromShape(s),o),u=gy.sizeFromShape(a);for(let e=0;e<i.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:s,outDtype:o}}const KF={kernelName:Qm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;pA(s,"prod");const i=s.shape.length,u=gy.parseAxisParam(a,s.shape),l=Vw.getAxesPermutation(u,i);let c=u,p=s;const h=[];null!=l&&(p=o_({inputs:{x:s},backend:n,attrs:{perm:l}}),h.push(p),c=Vw.getInnerMostAxes(c.length,i));const d=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=jF(p.shape,p.dtype,d,c);let y=m;return o&&(y=Vw.expandShapeToKeepDim(m,u)),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function XF(e,t,n,r){const s=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=i[s],t=e[e.length-1]-r[o];for(let e=o;e<u;++e)i[s].push(r[e+1]+t)}o=r[o],u=r[u]}u!==o&&(s.push([o,u]),a+=u-o)}return{outSplits:i,valueSlices:s,numValues:a}}function YF(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function ZF(e,t,n,r,s){const a=t.slice();a[0]=s;const o=gy.getArrayFromDType(n,gy.sizeFromShape(a)),i=e.length;return function(e,t,n,r,s,a){const o=YF(t,2)[1],i=YF(a,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[u*i+t]=e[n*o+t];++u}}(e,t,r,0===i?0:i/t[0],o,a),[o,a]}function JF(e,t,n,r,s,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,r)=>{if(e<0||e>=n){const s=gy.indexToLoc(r,t.length,gy.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const u=r[0],{outSplits:l,valueSlices:c,numValues:p}=XF(a,o,e,u),h=function(e){const t=[];for(let n=0;n<e.length;++n){const r=e[n].length,s=gy.getArrayFromDType("int32",r);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(l),d=ZF(n,r,s,c,p);return[h,d[0],d[1]]}const QF={kernelName:eg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,u=s.map((e=>n.data.get(e.dataId).values)),l=s.map((e=>e.shape)),c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,[h,d,f]=JF(u,l,c,a.shape,a.dtype,p,o.shape),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},eO=2147483647;function tO(e,t,n,r,s,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,u=0===s.length,l=0===o.length,c=[];i||c.push(t[0]),u||c.push(s[0]),l||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===c.length?1:c[0],h=gy.getArrayFromDType("int32",p+1);h[0]=0;for(let t=0;t<p;++t){const n=i?e[0]:e[t],s=u?r[0]:r[t],o=l?a[0]:a[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&s<n||o<0&&s>n)c=0;else if(c=Math.ceil(Math.abs((s-n)/o)),c>eO)throw new Error("Requires ((limit - start) / delta) <= 2147483647");h[t+1]=h[t]+c}const d=h[p],f=gy.getArrayFromDType(n,d);let m=0;for(let t=0;t<p;++t){const n=h[t+1]-h[t];let r=i?e[0]:e[t];const s=l?a[0]:a[t];for(let e=0;e<n;++e)f[m++]=r,r+=s}return[h,f]}const nO={kernelName:tg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=tO(o,r.shape,r.dtype,i,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};var rO=Vw.RowPartitionType;class sO{constructor(e,t,n,r,s,a,o,i,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Vw.getRowPartitionTypesHelper(l),this.raggedRank=Vw.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===rO.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===rO.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case rO.VALUE_ROWIDS:return sO.getMaxWidthValueRowID(t);case rO.ROW_SPLITS:return sO.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${rO[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return oO(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;Vw.validateDefaultValueShape(n,t);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=Vw.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let e=0;e<r;++e,a+=t)s.push(a);for(let t=r;t<e;++t)s.push(-1);return gy.assert(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let o=0;o<s-1;++o){const s=e[o+1]-e[o];let i=Math.min(r,s),u=t[o];-1===u&&(i=0);for(let e=0;e<i;++e)a.push(u),u+=n;for(let e=0;e<s-i;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let u=t[i];a.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===i)u>=0&&(++o,o<r?u+=n:u=-1);else{if(o=0,i=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case rO.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case rO.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${rO[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case rO.FIRST_DIM_SIZE:return e[0];case rO.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case rO.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${rO[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=oO(t,!1),s=gy.getArrayFromDType(this.valuesDType,gy.sizeFromShape(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){a=this.calculateOutputIndex(e-1,a,n[e],t[e])}this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let o=r.slice();o=o.slice(e+1);const i=gy.sizeFromShape(o),u=t.length;let l=this.defaultValue;if(l.length!==i&&1!==l.length){const e=this.defaultValueShape;pN((()=>{const t=Ak(l,e),n=wS(t,o);l=n.dataSync()}))}let c=0,p=0,h=0;for(let e=0;e<=u;++e){let r=e<u?t[e]:-1;if(r!==h){if(p<h){const e=s.subarray(c*i);aO(a.subarray(p*i),e,(h-p)*i)}if(e>=u){const e=n.length;r=Math.floor(e/i)}if(r>h)if(1===this.defaultValue.length)a.subarray(h*i,r*i).fill(this.defaultValue[0]),h=r;else for(;r>h;){aO(a.slice(h*i),l,i),++h}r<0?(c=e+1,p=h):(c=e,p=h,h=p+1)}else++h}}}function aO(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function oO(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function iO(e,t,n,r,s,a,o,i,u,l){return new sO(e,t,n,r,s,a,o,i,u,l).compute()}const uO={kernelName:ng,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,h=i.map((e=>n.data.get(e.dataId).values)),d=i.map((e=>e.shape)),[f,m]=iO(l,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,u);return n.makeTensorInfo(f,a.dtype,m)}};function lO(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return gy.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/n)),a=gy.makeZerosTypedArray(s,r);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const cO={kernelName:rg,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:o}=n,i=lO(r,s,o,a);return t.makeTensorInfo([i.length],a,i)}},pO=hA(ag,(e=>1/e)),hO={kernelName:ag,backendName:"cpu",kernelFunc:pO};const dO={kernelName:cg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;pA(s,"resizeBilinear");const u=gy.computeStrides(s.shape),[l,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(gy.sizeFromShape([p,l,c,f])),y=[a&&l>1?h-1:h,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<l;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(h-1,Math.ceil(n)),i=e*u[0]+r*u[1],l=e*u[0]+a*u[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),c=i+n*u[2],p=l+n*u[2],h=i+a*u[2],y=l+a*u[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[p+e],a=t+(m[h+e]-t)*r,o=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=o}}}return n.makeTensorInfo([p,l,c,f],"float32",g)}};const fO={kernelName:pg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;pA([a,s],"resizeBilinearGrad");const i=gy.computeStrides(s.shape),[u,l,c,p]=s.shape,[,h,d]=a.shape,f=new Float32Array(u*l*c*p),m=[o&&h>1?l-1:l,o&&d>1?c-1:c],g=[o&&h>1?h-1:h,o&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<h;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),l-1),a=t+r*i[1],o=t+s*i[1],u=n-r,h=1-u;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,l=1-s,d=a+n*i[2],m=a+r*i[2],g=o+n*i[2],y=o+r*i[2],k=h*l,v=h*s,N=u*l,S=u*s;for(let e=0;e<p;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*S}}}}return n.makeTensorInfo([u,c,l,p],"float32",f)}};const mO={kernelName:ug,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;pA(s,"resizeNearestNeighbor");const u=gy.computeStrides(s.shape),[l,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(p*l*c*f),y=[a&&l>1?h-1:h,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<p;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=o?x*(e+.5):x*e;let r=Math.min(h-1,a?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=t+r*u[1];for(let e=0;e<c;e++){const t=o?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*u[2];for(let e=0;e<f;e++){const t=m[r+e];g[k++]=t}}}}return n.makeTensorInfo([p,l,c,f],s.dtype,g)}};const gO={kernelName:lg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;pA([a,s],"resizeNearestNeighborGrad");const i=gy.computeStrides(s.shape),u=gy.computeStrides(a.shape),[l,c,p,h]=s.shape,[,d,f]=a.shape,m=new Float32Array(l*c*p*h),g=n.data.get(a.dataId).values,y=[o&&d>1?c-1:c,o&&f>1?p-1:p],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,S=2*Math.ceil(v)+2;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],r=Math.floor(e*k),s=Math.floor(r-N/2);for(let r=0;r<p;r++){const a=n+r*i[2],l=Math.floor(r*v),y=Math.floor(l-S/2);for(let n=0;n<h;n++){let i=0;for(let a=0;a<N;a++){const l=a+s;if(l<0||l>=d)continue;const h=t+l*u[1],m=l*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const s=h+t*u[2],a=t*w;r===Math.min(p-1,o?Math.round(a):Math.floor(a))&&(i+=g[s+n])}}m[a+n]=i}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const yO={kernelName:dg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;pA(s,"reverse");const o=s.shape.length,i=gy.parseAxisParam(a,s.shape);if(0===o)return gA({inputs:{x:s},backend:n});const u=new jy(s.shape,s.dtype),l=n.bufferSync(s);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=s.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},bO={kernelName:ty,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,u=gy.getTypedArrayFromDType(r.dtype,gy.sizeFromShape(r.shape)),[l,c,p,h]=r.shape,[d,f]=Vw.getImageCenter(o,c,p),m=Math.sin(s),g=Math.cos(s),y=i.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let r=0;r<p;r++){const s=r*h;for(let o=0;o<h;o++){const i=[l,e,r,o],b=i[2],x=i[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;if("number"!=typeof a&&(v=3===o?255:a[o]),w>=0&&w<p&&k>=0&&k<c){v=y[t+k*(p*h)+w*h+o]}u[t+n+s+o]=v}}}}return{dataId:i.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},xO=hA(fg,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),wO={kernelName:fg,backendName:"cpu",kernelFunc:xO},kO=$A((e=>1/Math.sqrt(e))),vO=dA(mg,kO),NO={kernelName:mg,backendName:"cpu",kernelFunc:vO};function SO(e,t,n,r,s,a,o,i,u,l){const c=[r/s,s],p=e.values,h=t.values;if(0===r)return Lx(n,t.dtype);const d=Lx(c,t.dtype);"string"==typeof u||"number"==typeof u?d.values.fill(u):"boolean"==typeof u&&d.values.fill(+u);for(let e=0;e<a;e++){const a=[];let u=0;for(let t=0;t<o;t++){const n=p[e*o+t];a.push(n),u+=n*i[t]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=h[e*s+n]:d.values[u*s+n]=0===t.rank?h[0]:h[e*s+n]}return d}const IO={kernelName:gg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:p}=Vw.calculateShapes(a,s,o),h=SO(n.bufferSync(s),n.bufferSync(a),o,p,l,u,i,c,0,!0);return n.makeTensorInfo(o,h.dtype,h.values)}};function TO(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function EO(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}function $O(e,t,n,r,s,a){const o=gy.getArrayFromDType("int32",n*s);for(let i=0;i<n;++i){const n=e.slice(i*r,(i+1)*r),u=i*s;for(let e=0;e<s;++e)o[u+e]="left"===a?TO(n,t[e+u]):EO(n,t[e+u])}return o}const CO={kernelName:yg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=$O(n.data.get(s.dataId).values,n.data.get(a.dataId).values,s.shape[0],s.shape[1],a.shape[1],o);return n.makeTensorInfo(a.shape,"int32",i)}};const AO={kernelName:bg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;pA([r,s,a],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=ub(s.dtype,a.dtype),p=gy.makeZerosTypedArray(gy.sizeFromShape(s.shape),c);let h=0;const d=0===o||o>1||1===s.shape.length?1:gy.sizeFromShape(s.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<d;t++)1===i[e]?p[h++]=u[e]:p[h++]=l[e];return n.makeTensorInfo(s.shape,c,p)}},_O=Vw.SELU_SCALEALPHA,RO=Vw.SELU_SCALE,DO=hA(xg,(e=>e>=0?RO*e:_O*(Math.exp(e)-1))),FO={kernelName:xg,backendName:"cpu",kernelFunc:DO},OO=hA(Ng,(e=>e<0?-1:e>0?1:0)),MO={kernelName:Ng,backendName:"cpu",kernelFunc:OO},LO=hA(kg,(e=>Math.sin(e))),zO={kernelName:kg,backendName:"cpu",kernelFunc:LO},BO=hA(vg,(e=>Math.sinh(e))),PO={kernelName:vg,backendName:"cpu",kernelFunc:BO},WO=Math.log(1.1920928955078125e-7)+2,VO=hA(Ig,(e=>{const t=e>-WO,n=e<WO,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})),UO={kernelName:Ig,backendName:"cpu",kernelFunc:VO};const GO={kernelName:$g,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;pA([s],"spaceToBatchND");const i=gy.sizeFromShape(a),u=[[0,0]];u.push(...o);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=UF.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=Vw.getReshaped(l.shape,a,i,!1),p=Vw.getPermuted(c.length,a.length,!1),h=Vw.getReshapedPermuted(l.shape,a,i,!1),d=jA({inputs:{x:l},backend:n,attrs:{shape:c}}),f=o_({inputs:{x:d},backend:n,attrs:{perm:p}}),m=jA({inputs:{x:f},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function HO(e,t,n,r,s,a,o){const i=t[0],u=a[0],l=new Array(u),c=new Array(i),p=t[1];if(0===u){if(0!==i)throw new Error(Vw.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));return[gy.getArrayFromDType(n,0),[0,p],gy.getArrayFromDType(s,0),l,c]}let h=!0,d=0;const f=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(Vw.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=u)throw new Error(Vw.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,u));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,l,c]}{const t=f[u-1],a=gy.getArrayFromDType(n,t*p),h=gy.getArrayFromDType(s,t),d=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p],s=d[n],o=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<p;++n)a[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<u;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;h[t]=o}}return[a,[t,p],h,l,c]}}const qO={kernelName:_g,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[p,h,d,f,m]=HO(i,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function jO(e,t,n,r,s){const a=gy.sizeFromShape(r),o=t[0],i=s.length,u=[];let l=1,c=-1;for(let e=0;e<i;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(Vw.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,u.push(1)}else{if(t<0)throw new Error(Vw.getSparseReshapeNegativeOutputDimErrorMessage(e,t));l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error(Vw.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/l);if(l*e!==a)throw new Error(Vw.getSparseReshapeInputOutputMultipleErrorMessage(r,u));u[c]=e}if(gy.sizeFromShape(u)!==a)throw new Error(Vw.getSparseReshapeInputOutputMismatchErrorMessage(r,u));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*u[e+1]}const f=gy.getArrayFromDType(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],u]}const KO={kernelName:Rg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(s.dataId).values),i=n.data.get(r.dataId).values,u=Array.from(n.data.get(a.dataId).values),[l,c,p]=jO(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};function XO(e,t,n,r,s,a=!1,o=0){const i=r.length,u=[t[0],e.length/t[0]],l=u[1],c=i>0?s[i-1]+1:0;if(c<0)throw new Error(Vw.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=c;const h=p.reduce(((e,t)=>e*t),1),d=gy.getArrayFromDType(n,h);if(0===i)return c>0&&d.fill(o),[d,p];if(c<=0)throw new Error(Vw.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=s[f];for(;;){let t=0;if(m<i){if(t=s[m],y===t){++m;continue}if(y>=t)throw new Error(Vw.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(Vw.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(o,g*l,y*l);for(let t=f;t<m;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(Vw.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],u[0]));for(let t=0;t<l;t++)d[y*l+t]+=e[n*l+t]}if(a)for(let e=0;e<l;e++)d[y*l+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>i)break}return g<c&&d.fill(o,g*l,c*l),[d,p]}const YO={kernelName:Dg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=XO(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const ZO={kernelName:Fg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=XO(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}};const JO={kernelName:Og,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:h}=Vw.calculateShapes(a,s,i),d=!1,f=n.bufferSync(s);let m;switch(a.dtype){case"bool":m=SO(f,n.bufferSync(a),i,h,c,l,u,p,Boolean(n.data.get(o.dataId).values[0]),d);break;case"float32":m=SO(f,n.bufferSync(a),i,h,c,l,u,p,n.data.get(o.dataId).values[0],d);break;case"int32":m=SO(f,n.bufferSync(a),i,h,c,l,u,p,n.data.get(o.dataId).values[0],d);break;case"string":m=SO(f,n.bufferSync(a),i,h,c,l,u,p,gy.decodeString(n.data.get(o.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}};const QO={kernelName:Cg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=gy.parseAxisParam(o,s.shape)[0],u=Vw.prepareSplitSize(s,a,i),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map((e=>{const t=[...c];t[i]=e;const r=D_({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[i]+=e,r}))}},eM=$A((e=>Math.sqrt(e))),tM=hA(Tg,(e=>Math.sqrt(e))),nM={kernelName:Tg,backendName:"cpu",kernelFunc:tM},rM={kernelName:Lg,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;pA(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},sM=wA(((e,t)=>{const n=e-t;return n*n})),aM=WA(Mg,sM),oM={kernelName:Mg,backendName:"cpu",kernelFunc:aM},iM=hA(Qg,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),uM={kernelName:Qg,backendName:"cpu",kernelFunc:iM};function lM(e,t,n,r){const s=Lx(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+r[e];s.set(t.get(...o),...a)}return s}const cM={kernelName:zg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r;pA(s,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=ww.sliceInfo(s.shape,a,o,i,u,l,c,p,h);let k;if(m)k=jA({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){gy.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=ww.computeOutShape(b,x,w),t=D_({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=jA({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=lM(d,n.bufferSync(s),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class pM{constructor(e,t,n,r,s,a){this.separator=gy.encodeString(e),this.nGramWidths=t,this.leftPad=gy.encodeString(n),this.rightPad=gy.encodeString(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let o=0;o<s;++o){const i=this.getPadWidth(a),u=Math.max(0,i-o),l=Math.max(0,i-(s-(o+1))),c=a-(u+l),p=t+(u>0?0:o-i);let h=0;h+=u*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=l*this.rightPad.length;h+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=gy.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],u=this.getNumNGrams(i,a);this.createNGrams(e,r,o,s,u,a),s+=u})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,u=1;this.createNGrams(e,r,o,s,u,i)}}return[o,a]}}function hM(e,t,n,r,s,a,o,i){return new pM(n,r,s,a,o,i).compute(e,t)}const dM={kernelName:Bg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,h=n.data.get(c.dataId).values,d=n.data.get(p.dataId).values,[f,m]=hM(h,d,s,a,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};function fM(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function mM(e,t,n){const r=e.length,s=[];let a=0,o=0;const i=new Array(r);for(let u=0;u<r;++u){const r=s.length;fM(e[u],t,n,s);const l=s.length-r;i[u]=l,a+=l,o=Math.max(o,l)}const u=gy.getArrayFromDType("int32",2*a),l=new Array(a),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)u[2*p]=e,u[2*p+1]=t,l[p]=s[p],++p;return[u,l,c]}const gM={kernelName:Pg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,u=n.data.get(o.dataId).values[0],[l,c,p]=mM(i,u,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",l),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};function yM(e,t){const n=gy.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=gy.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const bM={kernelName:Wg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=yM(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",o)}},xM=hA(Ug,(e=>Math.tan(e))),wM={kernelName:Ug,backendName:"cpu",kernelFunc:xM},kM=hA(Gg,(e=>Math.tanh(e)));function vM(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=Lx(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const NM=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function SM(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(a-s/2);SM(e,t,Math.max(n,Math.floor(t-a*i/s+u)),Math.min(r,Math.floor(t+(s-a)*i/s+u)))}const s=e[t];let a=n,o=r;for(gy.swap(e,n,t),NM(e[r],s)>0&&gy.swap(e,n,r);a<o;){for(gy.swap(e,a,o),a++,o--;NM(e[a],s)<0;)a+=1;for(;NM(e[o],s)>0;)o-=1}0===NM(e[n],s)?gy.swap(e,n,o):(o+=1,gy.swap(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function IM(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],u=gy.getTypedArrayFromDType(n,o*r),l=gy.getTypedArrayFromDType("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(SM(o,r),o=o.slice(0,r)),s&&o.sort(NM);const c=t*r,p=u.subarray(c,c+r),h=l.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[Lx(c,n,u),Lx(c,"int32",l)]}function TM(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return gy.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return gy.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return gy.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function EM(e,t,n,r,s,a,o,i,u,l,c){return 0<=i&&i<t&&0<=u&&u<n?e[o*r+i*s+u*a+l]:c}function $M(e,t,n,r,s,a,o,i,u,l,c){return EM(e,t,n,r,s,a,o,Math.round(i),Math.round(u),l,c)}function CM(e,t,n,r,s,a,o,i,u,l,c){const p=Math.floor(i),h=Math.floor(u),d=p+1,f=h+1;return(d-i)*((f-u)*EM(e,t,n,r,s,a,o,p,h,l,c)+(u-h)*EM(e,t,n,r,s,a,o,p,f,l,c))+(i-p)*((f-u)*EM(e,t,n,r,s,a,o,d,h,l,c)+(u-h)*EM(e,t,n,r,s,a,o,d,f,l,c))}function AM(e,t,n,r){const s=gy.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const o={},i=new Int32Array(n[s]),u=new jy(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(u.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,l.push(t)}}const p=a.slice();p[1]=Object.keys(o).length;const h=new jy(p,r);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)h.set(u.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const _M=[ZA,QA,t_,r_,qA,s_,u_,l_,c_,p_,d_,m_,y_,w_,v_,E_,$_,C_,A_,YA,__,O_,z_,B_,PA,V_,G_,FA,H_,Y_,J_,Q_,eR,tR,nR,rR,aR,iR,uR,lR,cR,pR,hR,fR,mR,gR,yR,bR,xR,wR,ER,mA,$R,_R,BR,VR,GR,jR,sD,oD,iD,cD,dD,fD,mD,yD,xD,vD,ID,yA,TD,K_,$D,AD,RD,xA,OD,zD,PD,UD,HD,KD,YD,QD,eF,tF,sF,iF,uF,lF,cF,pF,dF,fF,mF,bF,xF,vF,IF,SR,EF,CF,_F,DF,MF,LF,PF,VF,UF,qF,NA,KF,QF,nO,uO,cO,LA,YR,hO,IA,EA,KA,dO,fO,mO,gO,yO,bO,wO,NO,IO,CO,AO,FO,_A,MO,zO,PO,F_,SF,UO,GO,qO,KO,YO,ZO,JO,QO,nM,rM,oM,uM,cM,dM,gM,bM,eD,TR,wM,{kernelName:Gg,backendName:"cpu",kernelFunc:kM},{kernelName:Hg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;pA(s,"tile");const o=vM(n.bufferSync(s),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:qg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r;pA(s,"topk");const i=n.data.get(s.dataId).values,[u,l]=IM(i,s.shape,s.dtype,a,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},{kernelName:jg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=n,[c,p,h,d]=s.shape,[f,m]=null!=l?l:[p,h],g=[c,f,m,d],y=gy.computeStrides(s.shape),b=y[0],x=y[1],w=y[2],k=gy.computeStrides(g),v=k[0],N=k[1],S=k[2],I=gy.getTypedArrayFromDType(s.dtype,gy.sizeFromShape(g));I.fill(u);const T=r.data.get(s.dataId).values,E=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?E:E.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<d;++s){let a;const l=t[6]*r+t[7]*n+1;if(0===l)continue;const c=(t[0]*r+t[1]*n+t[2])/l,d=(t[3]*r+t[4]*n+t[5])/l,f=TM(c,h,i),m=TM(d,p,i);switch(o){case"nearest":a=$M(T,p,h,b,x,w,e,m,f,s,u);break;case"bilinear":a=CM(T,p,h,b,x,w,e,m,f,s,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}I[e*v+n*N+r*S+s]=a}return r.makeTensorInfo(g,s.dtype,I)}return{dataId:r.write(I,g,s.dtype),shape:s.shape,dtype:s.dtype}}},i_,{kernelName:Xg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;pA(a,"unique");const o=r.data.get(a.dataId).values,{outputValues:i,outputShape:u,indices:l}=AM(o,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:Yg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s.shape.length,i=s.shape[a],u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==a&&(u[l++]=s.shape[e]);const c=new Array(o).fill(0),p=s.shape.slice();p[a]=1;const h=new Array(i);for(let e=0;e<h.length;e++){c[a]=e;const t=D_({inputs:{x:s},backend:n,attrs:{begin:c,size:p}});h[e]=jA({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return h}},{kernelName:Zg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r;pA(s,"unsortedSegmentSum");const i=[],u=[],l=s.shape.length-a.shape.length;let c=a;for(let e=0;e<l;++e){const t=UR({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<o;++e){const t=gy.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=AR({inputs:{a:r,b:c},backend:n}),o=BA({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),l=NR({inputs:{a:o,b:s},backend:n}),p=IR({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});i.push(p),u.push(r),u.push(a),u.push(o),u.push(l),u.push(p)}const p=WF({inputs:i,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},BF];for(const e of _M)dy(e);const RM=Jv.whereImpl;class DM extends qh{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Hh(this,lN())}nextDataId(){return DM.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,qd().get("IS_NODE")&&Vw.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&gy.isString(n[0])){const s=n.map((e=>gy.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return Vw.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>gy.decodeString(e)));return Lx(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Lx(e.shape,e.dtype,t)}makeOutput(e,t,n){return lN().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=gy.now();e();return{kernelMs:gy.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){pA([e],"where");const t=this.readSync(e.dataId);return RM(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}DM.nextDataId=0;function FM(){let e,t,n,r,s,a,o,i,u,l;return 2===qd().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",o="out vec4 outputColor;",i=qd().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:u,defineRound:l}}function OM(e,t,n="index"){const r=gy.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function MM(e,t,n="index"){const r=gy.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / outShapeStrides[${s}]`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function LM(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${r[s]}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}function zM(e){const t=gy.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}fN("cpu",(()=>new DM),1);const BM="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:PM}=Vw;function WM(e,t,n){const r=[];if(e.forEach((e=>{const t=gy.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=JM(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?UM(e,r):VM(e,r);const a=e.shapeInfo.logicalShape,o=t.logicalShape;a.length<=o.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=PM(e.shapeInfo.logicalShape,t.logicalShape),u=ZM(o),l=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+l]} = 0;`)).join("\n");let h="";h=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+l]}`)).join(", ");let d="return outputValue;";const f=1===gy.sizeFromShape(e.shapeInfo.logicalShape),m=1===gy.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&gy.arraysEqual(o,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=ZM(u),c=PM(e.shapeInfo.logicalShape,t.logicalShape),p=u-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\n");let f="";f=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${r}(${f});\n    }\n  `}(e,t));return s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=FM(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let l,c,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${GM}\n    ${HM}\n    ${qM}\n  `}(i);t.isPacked?(l=function(e,t,n){switch(e.length){case 0:return KM();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(gy.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let o=a,i="",u="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(l=function(e,t,n){switch(e.length){case 0:return KM();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(gy.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${MM(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=OM(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${MM(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=OM(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=OM(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=OM(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=jM);return[p,u,c,s,l,a,n.userCode].join("\n")}function VM(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=XM(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${u}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${YM(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],o=s[1];if(1===o&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=XM(n);if(1===o)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&gy.arraysEqual(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=gy.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col"];return`\n      ${VM(QM(e,u),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${eL(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${YM(e)}\n      }\n    `;const l=a[0],c=a[1],p=XM(r);if(1===c)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===l)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;return t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:u}=gy.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col","depth"];return`\n        ${VM(QM(e,l),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${eL(n,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${YM(e)}\n      }\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===o&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=XM(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:u,keptDims:l}=gy.squeezeShape(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${VM(QM(e,u),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${eL(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${YM(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=XM(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:u,keptDims:l}=gy.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${VM(QM(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${eL(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${s})) +\n          depth3;\n        ${YM(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=XM(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=gy.squeezeShape(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${VM(QM(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${eL(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${YM(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=XM(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function UM(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=FM();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=FM();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],u=FM();if(null!=a&&gy.arraysEqual(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${UM(QM(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${eL(a,r)});\n        }\n      `}const i=FM();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const u=o[0],l=o[1],c=Math.ceil(n[2]/2),p=c*Math.ceil(n[1]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${p}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=FM();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=u[0],c=u[1],p=Math.ceil(a[o-1]/2);let h=p*Math.ceil(a[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=a[o-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const GM="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",HM="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",qM="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jM="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function KM(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function XM(e){return`offset${e}`}function YM(e){const t=e.name,n=gy.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function ZM(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function JM(e,t,n){const{newShape:r,keptDims:s}=gy.squeezeShape(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):r,u=!e&&a>1&&!gy.arraysEqual(t,n)&&r.length<a||o;return{useSqueezeShape:u,uniformShape:u?i:t,keptDims:s}}function QM(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function eL(e,t){return t.map((t=>e[t])).join(", ")}const tL={},nL={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function rL(e,t){tL[e]=t}function sL(e,t){if(!(e in tL)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete tL[e]}),!1),qd().getBool("SOFTWARE_WEBGL_ENABLED")&&(nL.failIfMajorPerformanceCaveat=!1);return 1===e?n.getContext("webgl",nL)||n.getContext("experimental-webgl",nL):n.getContext("webgl2",nL)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;tL[e]=n}const n=tL[e];return null==n||n.isContextLost()?(delete tL[e],sL(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),tL[e])}var aL,oL,iL,uL,lL,cL;function pL(e,t){return[t,e]}function hL(e){const t=gy.sizeFromShape(e),n=Math.ceil(t/4);return gy.sizeToSquarishShape(n)}function dL(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function fL(e,t){const n=e;let r,s,a,o,i,u,l,c,p,h;return 2===qd().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,l=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,u=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,l=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,u=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function mL(e,t){const n=t();return qd().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}(oL=aL||(aL={}))[oL.DENSE=0]="DENSE",oL[oL.SHARED_BATCH=1]="SHARED_BATCH",(uL=iL||(iL={}))[uL.RENDER=0]="RENDER",uL[uL.UPLOAD=1]="UPLOAD",uL[uL.PIXELS=2]="PIXELS",uL[uL.DOWNLOAD=3]="DOWNLOAD",(cL=lL||(lL={}))[cL.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",cL[cL.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",cL[cL.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",cL[cL.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",cL[cL.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function gL(e){return!!(qd().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function yL(e,t){return EL(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function bL(e,t){const n=EL(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(mL(e,(()=>e.shaderSource(n,t))),mL(e,(()=>e.compileShader(n))),qd().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw wL(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const xL=/ERROR: [0-9]+:([0-9]+):/g;function wL(e,t){const n=xL.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,o=s.map(((e,t)=>gy.rightPad((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const u=o.slice(0,r-1),l=o.slice(r-1,r),c=o.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${gy.rightPad(l[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function kL(e,t){if(mL(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function vL(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(mL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),mL(e,(()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o))),mL(e,(()=>e.enableVertexAttribArray(i))),!0)}function NL(e,t,n,r){mL(e,(()=>function(e,t,n){$L(e,n),mL(e,(()=>e.activeTexture(e.TEXTURE0+n))),mL(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),mL(e,(()=>e.uniform1i(n,r)))}function SL(e,t,n){mL(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),mL(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function IL(e,t){mL(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),mL(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function TL(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function EL(e,t,n){const r=mL(e,(()=>t()));if(null==r)throw new Error(n);return r}function $L(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function CL(e,t=2){return gy.sizeFromShape(e.slice(0,e.length-t))}function AL(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function _L(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[CL(e),...AL(e)]),t}function RL(e){return e%2==0}function DL(e,t){if(e=e.slice(-2),t=t.slice(-2),gy.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(RL(n)&&RL(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&RL(e[0])&&RL(t[0])}let FL,OL;function ML(e){if(null==FL){const t=sL(e);FL=t.getParameter(t.MAX_TEXTURE_SIZE)}return FL}function LL(e){if(null==OL){const t=sL(e);OL=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,OL)}function zL(e){if(0===e)return 0;let t;const n=sL(e);return t=BL(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:BL(n,"EXT_disjoint_timer_query")?1:0,t}function BL(e,t){return null!=e.getExtension(t)}function PL(e){try{if(null!=sL(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function WL(e){if(0===e)return!1;const t=sL(e);if(1===e){if(!BL(t,"OES_texture_float"))return!1}else if(!BL(t,"EXT_color_buffer_float"))return!1;return UL(t)}function VL(e){if(0===e)return!1;const t=sL(e);if(1!==e){if(BL(t,"EXT_color_buffer_float"))return UL(t);const e="EXT_color_buffer_half_float";if(BL(t,e)){const n=t.getExtension(e);return function(e,t){const n=fL(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!BL(t,"OES_texture_float"))return!1;if(!BL(t,"WEBGL_color_buffer_float"))return!1;return UL(t)}function UL(e){const t=fL(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function GL(e){if(2!==e)return!1;return null!=sL(e).fenceSync}function HL(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&gy.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function qL(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=WM(s,o,t),u=bL(e.gl,i),l=e.createProgram(u);return qd().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o},jL(e,t,l))}function jL(e,t,n){const r={},s={},a={},o=[];let i,u,l,c=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===qd().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const h=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];r[i]=e.getUniformLocation(n,i,h),r[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,h),t.enableShapeUniforms&&(s[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,h),a[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,h))}return t.enableShapeUniforms&&(i=e.getUniformLocation(n,"outShape",h),l=e.getUniformLocation(n,"outShapeStrides",h),u=e.getUniformLocation(n,"outTexShape",h)),t.customUniforms&&t.customUniforms.forEach(((t,r)=>{o[r]=e.getUniformLocation(n,t.name,h)})),{uniformLocations:r,customUniformLocations:o,infLoc:c,nanLoc:p,inShapesLocations:s,inTexShapesLocations:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}}function KL(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!gy.arraysEqual(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!gy.arraysEqual(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function XL(e){return qd().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class YL{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Vw.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=XL(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function ZL(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function JL(e,t){return 1===t?[e]:ZL(e,t)}function QL(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}class ez{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Vw.assertAndGetBroadcastShape(t,n);const s=this.outputShape.length;this.enableShapeUniforms=XL(s);let a="";if(r)if(0===s||1===gy.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${ZM(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=JL("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function tz(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const nz={kernelName:pm,backendName:"webgl",kernelFunc:tz};function rz(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(a.dataId),i=tz({inputs:{x:r},backend:n}),u=tz({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:u},a}const sz={kernelName:Nf,backendName:"webgl",kernelFunc:rz},az="return (a < 0.) ? b * a : a;",oz="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const iz={kernelName:ym,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,o=n.makeTensorInfo([],"float32",gy.createScalarValue(a,"float32")),i=qd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ez(oz,s.shape,o.shape):new YL(az,s.shape,o.shape),u=n.runWebGLProgram(i,[s,o],"float32");return n.disposeIntermediateTensorInfo(o),u}},uz="return (a < 0.) ? b * a : a;",lz="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const cz={kernelName:Jm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=qd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ez(lz,r.shape,s.shape):new YL(uz,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}};class pz{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const hz="return abs(x);";const dz="return x;";class fz{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function mz({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:o}=s,i=a,u=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,u);return i.makeTensorInfo(o.shape,u,t)}let l;return l=qd().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new fz(o.shape,t):new pz(o.shape,e),i.runWebGLProgram(l,[o],u)}}function gz({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:o,backend:i})=>{const{a:u,b:l}=o,c=i;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},o=new YL(e,u.shape,l.shape);return c.runWebGLProgram(o,[s,a],ub(n.dtype,r.dtype))})),a=rz({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const p=a||ub(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?Vw.fromUint8ToStringArray(e):e,r="string"===u.dtype?Vw.fromUint8ToStringArray(t):t,[a,o]=s(u.shape,l.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=a,i}let h;return h=qd().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new ez(t,u.shape,l.shape,n):new YL(e,u.shape,l.shape),c.runWebGLProgram(h,[u,l],p)}}function yz(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?lz:uz;if("leakyrelu"===e)return t?oz:az;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class bz{constructor(e,t,n,r=!1,s=!1,a=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=XL(this.outputShape.length);const l=r?e[1]:e[2],c=Math.ceil(l/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const xz="return areal * breal - aimag * bimag;",wz="return areal * bimag + aimag * breal;";class kz{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Vw.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var vz={};t(vz,"simpleAbsImpl",(()=>JA)),t(vz,"addImpl",(()=>UA)),t(vz,"bincountImpl",(()=>M_)),t(vz,"bincountReduceImpl",(()=>L_)),t(vz,"castImpl",(()=>zA)),t(vz,"ceilImpl",(()=>P_)),t(vz,"concatImpl",(()=>q_)),t(vz,"equalImpl",(()=>CR)),t(vz,"expImpl",(()=>PR)),t(vz,"expm1Impl",(()=>HR)),t(vz,"floorImpl",(()=>uD)),t(vz,"gatherNdImpl",(()=>gD)),t(vz,"gatherV2Impl",(()=>bD)),t(vz,"greaterImpl",(()=>wD)),t(vz,"greaterEqualImpl",(()=>ND)),t(vz,"lessImpl",(()=>DD)),t(vz,"lessEqualImpl",(()=>MD)),t(vz,"linSpaceImpl",(()=>BD)),t(vz,"logImpl",(()=>WD)),t(vz,"maxImpl",(()=>nF)),t(vz,"maximumImpl",(()=>aF)),t(vz,"minimumImpl",(()=>gF)),t(vz,"multiplyImpl",(()=>kR)),t(vz,"negImpl",(()=>TF)),t(vz,"notEqualImpl",(()=>FF)),t(vz,"prodImpl",(()=>jF)),t(vz,"raggedGatherImpl",(()=>JF)),t(vz,"raggedRangeImpl",(()=>tO)),t(vz,"raggedTensorToTensorImpl",(()=>iO)),t(vz,"rangeImpl",(()=>lO)),t(vz,"rsqrtImpl",(()=>kO)),t(vz,"scatterImpl",(()=>SO)),t(vz,"sigmoidImpl",(()=>CA)),t(vz,"sliceImpl",(()=>R_)),t(vz,"sparseFillEmptyRowsImpl",(()=>HO)),t(vz,"sparseReshapeImpl",(()=>jO)),t(vz,"sparseSegmentReductionImpl",(()=>XO)),t(vz,"sqrtImpl",(()=>eM)),t(vz,"squaredDifferenceImpl",(()=>sM)),t(vz,"stridedSliceImpl",(()=>lM)),t(vz,"stringNGramsImpl",(()=>hM)),t(vz,"stringSplitImpl",(()=>mM)),t(vz,"stringToHashBucketFastImpl",(()=>yM)),t(vz,"subImpl",(()=>ZR)),t(vz,"tileImpl",(()=>vM)),t(vz,"topKImpl",(()=>IM)),t(vz,"transposeImpl",(()=>a_)),t(vz,"uniqueImpl",(()=>AM));const{addImpl:Nz,bincountImpl:Sz,bincountReduceImpl:Iz,castImpl:Tz,ceilImpl:Ez,concatImpl:$z,equalImpl:Cz,expImpl:Az,expm1Impl:_z,floorImpl:Rz,gatherNdImpl:Dz,gatherV2Impl:Fz,greaterImpl:Oz,greaterEqualImpl:Mz,lessImpl:Lz,lessEqualImpl:zz,linSpaceImpl:Bz,logImpl:Pz,maxImpl:Wz,maximumImpl:Vz,minimumImpl:Uz,multiplyImpl:Gz,negImpl:Hz,notEqualImpl:qz,prodImpl:jz,raggedGatherImpl:Kz,raggedRangeImpl:Xz,raggedTensorToTensorImpl:Yz,rangeImpl:Zz,rsqrtImpl:Jz,scatterImpl:Qz,sigmoidImpl:eB,simpleAbsImpl:tB,sliceImpl:nB,sparseFillEmptyRowsImpl:rB,sparseReshapeImpl:sB,sparseSegmentReductionImpl:aB,sqrtImpl:oB,stridedSliceImpl:iB,stringNGramsImpl:uB,stringSplitImpl:lB,stringToHashBucketFastImpl:cB,subImpl:pB,tileImpl:hB,topKImpl:dB,transposeImpl:fB,uniqueImpl:mB}=vz,gB="return a * b;";function yB(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=Vw.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new kz(xz,r.shape,s.shape),o=new kz(wz,r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=rz({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[o,i]=Gz(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(i,a);return n.texData.get(u.dataId).values=o,u}let o;return o=qd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ez(gB,r.shape,s.shape):new YL(gB,r.shape,s.shape),n.runWebGLProgram(o,[r,s],a)}const bB={kernelName:Wm,backendName:"webgl",kernelFunc:yB};class xB{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?LM(["r","c","d"],"inputShape"):OM(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":zM(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function wB(e,t,n){const r=[CL(e.shape),...AL(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[CL(t),...AL(t)],o=new xB(a,r),i=[r],u=n.runWebGLProgram(o,[s],e.dtype,i,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function kB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=n,i=gy.sizeFromShape(s.shape),u=gy.inferFromImplicitShape(a,i),l=gy.sizeFromShape(u);gy.assert(i===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(s.dataId);return!c.isPacked||DL(s.shape,u)||null!==c.texture&&DL(c.shape,u)?(o.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):wB(s,u,o)}const vB={kernelName:ig,backendName:"webgl",kernelFunc:kB};class NB{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const o=4*Math.floor(n/4),i=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${gy.isInt(e)?e.toPrecision(2):e}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class SB{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${u});\n      }\n    `}}function IB(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Vw.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:u,outSize:l}=s[o];let c,p;c="mean"===n?0===o?new NB({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new NB({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new SB({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),p=a,a=r.runWebGLProgram(c,[a],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return a}class TB{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=ZM(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class EB{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=ZM(this.rank),s=ZL("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function $B(e,t,n){const r=qd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new EB(e.shape,t):new TB(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function CB(e,t,n,r){const s=t,a=e.shape.length,o=gy.parseAxisParam(s,e.shape);let i=o;const u=Vw.getAxesPermutation(i,a),l=null!=u;let c=e;l&&(c=$B(e,u,r),i=Vw.getInnerMostAxes(i.length,a)),Vw.assertAxesAreInnerMostDims("sum",i,a);const[p,h]=Vw.computeOutAndReduceShapes(c.shape,i);let d=p;n&&(d=Vw.expandShapeToKeepDim(p,o));const f=gy.sizeFromShape(h),m=kB({inputs:{x:c},attrs:{shape:[gy.sizeFromShape(e.shape)/f,f]},backend:r}),g=IB(m,lb(e.dtype),"sum",r),y=kB({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),l&&r.disposeIntermediateTensorInfo(c),y}function AB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;return CB(s,a,o,n)}const _B={kernelName:Eg,backendName:"webgl",kernelFunc:AB};function RB(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,o=n,i=s.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=s.shape[a[e]];let l;if(o.shouldExecuteOnCPU([s])){const e=o.texData.get(s.dataId).values,t=fB(e,s.shape,s.dtype,a,u);l=o.makeTensorInfo(u,s.dtype);o.texData.get(l.dataId).values=t}else l=$B(s,a,o);return l}const DB={kernelName:Kg,backendName:"webgl",kernelFunc:RB};function FB({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,p=n?e.shape[l-2]:e.shape[l-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[l-1]:e.shape[l-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=gy.sizeFromShape(m),b=gy.sizeFromShape(g),x=uw.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);gy.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],k=r?[b,f,h]:[b,h,f],v=kB({inputs:{x:e},backend:s,attrs:{shape:w}}),N=kB({inputs:{x:t},backend:s,attrs:{shape:k}}),S=[v,N],I=Math.max(y,b),T=n?v.shape[1]:v.shape[2],E=null!=a,$=null!=o,C="leakyrelu"===u,A=null!=u?yz(u,!0):null;let _;if((1===d||1===f)&&T>1e3&&!1===(E||$||C||null!=A)){let e=v,t=N;n&&(e=RB({inputs:{x:v},backend:s,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=RB({inputs:{x:N},backend:s,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let o=e;1!==f&&(o=kB({inputs:{x:e},backend:s,attrs:{shape:[I,T,1]}}),S.push(o));const i=1===f?2:1;let u=t;a&&(u=kB({inputs:{x:t},backend:s,attrs:{shape:[I,1,T]}}),S.push(u));const l=yB({inputs:{a:o,b:u},backend:s});_=AB({inputs:{x:l},backend:s,attrs:{axis:i,keepDims:!0}}),S.push(l)}else{const u=ub(e.dtype,t.dtype),l=new bz(w,k,[I,d,f],n,r,E,A,$,C),c=[v,N];if(null!=a&&c.push(a),$&&c.push(o),C){const e=s.makeTensorInfo([],"float32",gy.createScalarValue(i,"float32"));c.push(e),S.push(e)}_=s.runWebGLProgram(l,c,u)}const R=kB({inputs:{x:_},backend:s,attrs:{shape:x}});S.push(_);for(const e of S)s.disposeIntermediateTensorInfo(e);return R}const OB={kernelName:ny,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;return FB({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}},MB="return abs(x);";const LB={kernelName:Zd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=tB(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=qd().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new fz(r.shape,MB):new pz(r.shape,MB),n.runWebGLProgram(s,[r],r.dtype)}},zB=mz({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),BB={kernelName:Jd,backendName:"webgl",kernelFunc:zB},PB=mz({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),WB={kernelName:Qd,backendName:"webgl",kernelFunc:PB},VB="return a + b;",UB=gz({opSnippet:VB,packedOpSnippet:VB,supportsComplex:!0,cpuKernelImpl:Nz}),GB={kernelName:ef,backendName:"webgl",kernelFunc:UB};class HB{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class qB{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const jB={kernelName:tf,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return tz({inputs:{x:s[0]},backend:r});if(s.length>qd().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>ub(e,t))),o=s.map((e=>e.shape)),i=qd().getBool("WEBGL_PACK")?new qB(s[0].shape,o):new HB(s[0].shape,o);return r.runWebGLProgram(i,s,a)}};const KB={kernelName:nf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=gy.parseAxisParam(a,s.shape);let l=u;const c=Vw.getAxesPermutation(l,i);let p=s;null!=c&&(p=RB({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Vw.getInnerMostAxes(l.length,i)),Vw.assertAxesAreInnerMostDims("all",l,i);const[h,d]=Vw.computeOutAndReduceShapes(p.shape,l),f=kB({inputs:{x:p},backend:n,attrs:{shape:[-1,gy.sizeFromShape(d)]}}),m=IB(f,f.dtype,"all",n);let g;if(o){g=kB({inputs:{x:m},backend:n,attrs:{shape:Vw.expandShapeToKeepDim(h,u)}})}else g=kB({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};const XB={kernelName:rf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=gy.parseAxisParam(a,s.shape);let l=u;const c=Vw.getAxesPermutation(l,i);let p=s;null!=c&&(p=RB({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Vw.getInnerMostAxes(l.length,i)),Vw.assertAxesAreInnerMostDims("any",l,i);const[h,d]=Vw.computeOutAndReduceShapes(p.shape,l),f=kB({inputs:{x:p},backend:n,attrs:{shape:[-1,gy.sizeFromShape(d)]}}),m=IB(f,f.dtype,"any",n);let g;if(o){g=kB({inputs:{x:m},backend:n,attrs:{shape:Vw.expandShapeToKeepDim(h,u)}})}else g=kB({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};class YB{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class ZB{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,gy.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,u=ZM(i),l=JL("coords",i);let c,p;if(1===a){p=i+1;const e=ZM(p);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[i-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[i-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[i-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[i-2]};`}else p=i,c=`\n        ${u} sourceLocR = coords;\n        ++${l[i-1]};\n        ${u} sourceLocG = coords;\n        ++${l[i-2]};\n        ${u} sourceLocA = coords;\n        --${l[i-1]};\n        ${u} sourceLocB = coords;\n        --${l[i-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),d="."+h[p-1],f=h.map((e=>"int "+e)),m=JL("sourceLocR",p-1).concat("inIdx.r"),g=JL("sourceLocG",p-1).concat("inIdx.g"),y=JL("sourceLocB",p-1).concat("inIdx.b"),b=JL("sourceLocA",p-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${l[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function JB(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const o=Vw.computeOptimalWindowSize(a),i={windowSize:o,inSize:a,batchSize:s,outSize:Math.ceil(a/o)},u=new YB(i,n,null==r),l=[t];null!=r&&l.push(r);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const p=JB(e,t,n,c);return e.disposeIntermediateTensorInfo(c),p}function QB(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=s[s.length-1],o=Vw.computeOptimalWindowSize(a),i=new ZB(s,o,n,null==r),u=null==r?[t]:[t,r],l=e.runWebGLProgram(i,u,"int32");if(l.shape.length===t.shape.length){const r=QB(e,t,n,l);return e.disposeIntermediateTensorInfo(l),r}return l}function eP(e,t,n,r){const s=[n];if(Vw.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!qd().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,u]=Vw.computeOutAndReduceShapes(o.shape,s),l=gy.sizeFromShape(u),c=kB({inputs:{x:o},backend:e,attrs:{shape:[-1,l]}});n.push(c);const p=JB(e,c,r);n.push(p);const h=kB({inputs:{x:p},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return QB(e,t,r)}const tP={kernelName:sf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=gy.parseAxisParam(a,s.shape);const i=Vw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=RB({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Vw.getInnerMostAxes(o.length,u.shape.length)),Vw.assertAxesAreInnerMostDims("argMax",[o[0]],u.shape.length);const c=eP(n,u,o[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const nP={kernelName:af,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=gy.parseAxisParam(a,s.shape);const i=Vw.getAxesPermutation(o,s.shape.length);let u=s;const l=[];null!=i&&(u=RB({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(u),o=Vw.getInnerMostAxes(o.length,u.shape.length)),Vw.assertAxesAreInnerMostDims("argMin",[o[0]],u.shape.length);const c=eP(n,u,o[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},rP=mz({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),sP={kernelName:of,backendName:"webgl",kernelFunc:rP},aP=mz({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),oP={kernelName:uf,backendName:"webgl",kernelFunc:aP},iP=mz({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),uP={kernelName:lf,backendName:"webgl",kernelFunc:iP},lP=gz({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),cP={kernelName:pf,backendName:"webgl",kernelFunc:lP},pP=mz({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),hP={kernelName:cf,backendName:"webgl",kernelFunc:pP};class dP{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class fP{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const mP={kernelName:hf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;HL(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;gy.assert(Vw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Vw.computePool2DInfo(s.shape,a,o,1,i,u);if(1===l.filterWidth&&1===l.filterHeight&&gy.arraysEqual(l.inShape,l.outShape))return tz({inputs:{x:s},backend:n});const c=new dP(l,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}};const gP={kernelName:ff,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r,c=Vw.computePool3DInfo(s.shape,a,o,[1,1,1],i,u,l),p=new fP(c,"avg",!1);return n.runWebGLProgram(p,[s],"float32")}};class yP{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bP{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xP={kernelName:mf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=r,p=Vw.computePool3DInfo(o.shape,i,u,[1,1,1],l,c),h=new bP(p);return n.runWebGLProgram(h,[s],o.dtype)}};const wP={kernelName:df,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;HL([s,a],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=r,c=Vw.computePool2DInfo(o.shape,i,u,1,l),p=new yP(c);return n.runWebGLProgram(p,[s],o.dtype)}};const kP={kernelName:gf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;return FB({a:s,b:a,transposeA:o,transposeB:i,backend:n})}};class vP{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Vw.assertAndGetBroadcastShape(e,t),Vw.assertAndGetBroadcastShape(e,n);let o="0.0";null!=r&&(Vw.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(Vw.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class NP{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Vw.assertAndGetBroadcastShape(e,t),Vw.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=r&&(Vw.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(Vw.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const SP={kernelName:om,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:o,scale:i}=e;gy.assert(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),gy.assert(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),gy.assert(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const l=[r,s,a];let c=null;null!=o&&(c=o.shape,l.push(o));let p=null;null!=i&&(p=i.shape,l.push(i));const h=qd().getBool("WEBGL_PACK_NORMALIZATION")?new NP(r.shape,s.shape,a.shape,c,p,u):new vP(r.shape,s.shape,a.shape,c,p,u);return t.runWebGLProgram(h,l,l[0].dtype)}};class IP{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=ZM(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return TP.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${TP[t]} = start[${t}] + coords.${TP[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const TP=["x","y","z","w","u","v"];class EP{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=ZM(this.rank),n=JL("coords",this.rank),r=JL("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function $P(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r,[i,u]=ww.parseSliceParams(s,a,o);if(ww.assertParamsValid(s,i,u),0===gy.sizeFromShape(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=nB(e.values,i,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,t)}const{isPacked:l}=n.texData.get(s.dataId),c=ww.isSliceContinous(s.shape,i,u);if(l||!c){const e=qd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new EP(u):new IP(u),t=[i];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),o=r.texData.get(a.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=ww.computeFlatOffset(t,gy.computeStrides(e.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||e.dataId};const u=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,u+1),a}(s,i,u,n)}const CP={kernelName:wg,backendName:"webgl",kernelFunc:$P},AP={kernelName:yf,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;gy.assert(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),u=Vw.getReshaped(s.shape,a,i),l=Vw.getPermuted(u.length,a.length),c=Vw.getReshapedPermuted(s.shape,a,i),p=Vw.getSliceBeginCoords(o,a.length),h=Vw.getSliceSize(c,o,a.length),d=[],f=kB({inputs:{x:s},backend:n,attrs:{shape:u}}),m=RB({inputs:{x:f},backend:n,attrs:{perm:l}}),g=kB({inputs:{x:m},backend:n,attrs:{shape:c}}),y=$P({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const _P={kernelName:bf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=n.readSync(s.dataId),u=n.readSync(a.dataId),l=Sz(i,u,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,l)}};const RP={kernelName:xf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),o=n.readSync(s.dataId),i=Vw.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},DP=gz({opSnippet:"return float(a != b);",cpuKernelImpl:qz,dtype:"bool"}),FP={kernelName:Um,backendName:"webgl",kernelFunc:DP};function OP(e){const{inputs:t,backend:n}=e,{input:r}=t;return tz({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const MP={kernelName:sg,backendName:"webgl",kernelFunc:OP};function LP(e,t){const n=new pz(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const zP={kernelName:wf,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===a.dtype)return tz({inputs:{x:a},backend:r});const t=NN(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=rz({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=OP({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!gy.hasEncodingLoss(a.dtype,o)){const e=tz({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(r.shouldExecuteOnCPU([a])){const e=r.texData.get(a.dataId).values,[t,n,s]=Tz(e,a.shape,a.dtype,o);return r.makeTensorInfo(t,n,s)}if("int32"===o)return LP(a,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",gy.getTypedArrayFromDType("bool",1)),t=DP({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},BP="return ceil(x);",PP=mz({opSnippet:BP,packedOpSnippet:BP,cpuKernelImpl:Ez}),WP={kernelName:kf,backendName:"webgl",kernelFunc:PP};class VP{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class UP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const GP={kernelName:vf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:o}=r;let i;i=qd().getBool("WEBGL_PACK_CLIP")?new UP(s.shape):new VP(s.shape);const u=[[a],[o]];return n.runWebGLProgram(i,[s],s.dtype,u)}};class HP{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function qP(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const jP={kernelName:Sf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new HP(r.shape),o=[qP(r,s.complexTensorInfos.real),qP(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class KP{constructor(e){this.outputShape=[],this.outputShape=Vw.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class XP{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Vw.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=ZM(r),a=JL("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=o[t],l=o.slice(-2),c=o.join();let p=`if (${u} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${YP(o,u,t)}),\n            vec2(${YP(l,u,t)}));\n        }`}const h=i.length,d=i[i.length-1];p+=`\n        return getChannel(\n          getT${h}(${YP(o,u,d)}),\n          vec2(${YP(l,u,d)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function YP(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function ZP(e){const{inputs:t,backend:n}=e,{input:r}=t;return tz({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const JP={kernelName:dm,backendName:"webgl",kernelFunc:ZP};function QP(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>OP({inputs:{input:e},backend:n}))),s=e.map((e=>ZP({inputs:{input:e},backend:n}))),a=QP(r,t,n),o=QP(s,t,n),i=rz({inputs:{real:a,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=gy.sizeFromShape(e.shape.slice(t));return kB({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=Vw.computeOutShape(s.map((e=>e.shape)),1),i=1===s[0].shape[0],u=$z(a,o,r,i),l=Vw.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,r,u);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=qd().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>a){const r=[];for(let s=0;s<e.length;s+=a){const o=e.slice(s,s+a);r.push(QP(o,t,n))}const s=QP(r,t,n);for(const e of r)n.disposeIntermediateTensorInfo(e);return s}if(qd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new XP(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const{tensors2D:o,outShape:i}=function(e,t,n){const r=Vw.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>kB({inputs:{x:e},attrs:{shape:[-1,gy.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),u=new KP(o.map((e=>e.shape))),l=n.runWebGLProgram(u,o,r);o.forEach((e=>n.disposeIntermediateTensorInfo(e)));const c=kB({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),c}function eW(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=gy.parseAxisParam(s,t[0].shape)[0],o=t.map((e=>e.shape));Vw.assertParamsConsistent(o,a);const i=Vw.computeOutShape(t.map((e=>e.shape)),a);if(0===gy.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>gy.sizeFromShape(e.shape)>0));return 1===u.length?tz({inputs:{x:u[0]},backend:n}):QP(u,a,n)}const tW={kernelName:If,backendName:"webgl",kernelFunc:eW};class nW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class rW{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=XL(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,u=e.filterHeight,l=e.filterWidth,c=l;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<l;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<l;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(p+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<l&&(a%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,p+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<l)){const e=a%2==0?gy.nearestLargerEven(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,p+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):p+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<l&&(a%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<l&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<l&&(p+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<l&&(p+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<l&&(p+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let h="",d="";n&&(h=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:s?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${h}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class aW{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length);const{dataFormat:n}=t,r=FM(),s="channelsLast"===n,a=s?1:2,o=s?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function oW(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function iW({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const u=e.shape,l=r.texData.get(e.dataId),c=n.inChannels,p=u[0]*u[1]*u[2],h=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=oW(a.shape,d);null!=e&&(a=kB({inputs:{x:a},backend:r,attrs:{shape:e}}),m.push(a))}if(null!=s){const e=oW(s.shape,d);null!=e&&(s=kB({inputs:{x:s},backend:r,attrs:{shape:e}}),m.push(s))}if(!((1===p||1===h)&&c>1e3)&&l.isPacked&&d&&null!=l.texture&&u[2]%2!=0&&gy.arraysEqual(l.shape.slice(-3),u.slice(-3))){const c=u[0]*u[1]*(u[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,gy.assert(DL(l.shape,p.shape),(()=>`packed reshape ${l.shape} to ${p.shape} isn't free`));const d=kB({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=FB({a:p,b:d,backend:r,transposeA:false,transposeB:false,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),y=r.texData.get(g.dataId);gy.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=h,y.shape=n.outShape,f=tz({inputs:{x:g},backend:r}),f.shape=n.outShape,m.push(g)}else{const u=n.outHeight*n.outWidth,l=kB({inputs:{x:e},backend:r,attrs:{shape:d?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),c=kB({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=FB({a:d?l:c,b:d?c:l,transposeA:!d,transposeB:false,backend:r,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o});f=kB({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),m.push(l),m.push(c),m.push(p)}for(const e of m)r.disposeIntermediateTensorInfo(e);return f}function uW({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=u*l*c,g=h*p,y=[n.batchSize,m,g],b=[];if(null!=a){const e=oW(a.shape,f);null!=e&&(a=kB({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}if(null!=s){const e=oW(s.shape,f);null!=e&&(s=kB({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}const x=kB({inputs:{x:t},backend:r,attrs:{shape:[1,m,gy.sizeFromShape(t.shape)/m]}});b.push(x);const w=new aW(y,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],v=r.runWebGLProgram(w,[e],"float32",k),N=kB({inputs:{x:v},backend:r,attrs:{shape:y}});b.push(v),b.push(N);const S=null!=s,I=null!=a,T="leakyrelu"===i,E=i?yz(i,!0):null,$=new bz(f?N.shape:x.shape,f?x.shape:N.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,E,I,T),C=f?[N,x]:[x,N];if(s&&C.push(s),I&&C.push(a),T){const e=r.makeTensorInfo([],"float32",gy.createScalarValue(o,"float32"));C.push(e),b.push(e)}const A=r.runWebGLProgram($,C,"float32"),_=kB({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});b.push(A);for(const e of b)r.disposeIntermediateTensorInfo(e);return _}const lW={kernelName:Tf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=r,p=Vw.convertConv2DDataFormat(u),h=Vw.computeConv2DInfo(s.shape,a.shape,o,l,i,c,!1,p);let d;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===p&&qd().getBool("WEBGL_EXP_CONV")){const e=new sW(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];d=n.runWebGLProgram(e,[s,a],"float32",t)}else if(qd().getBool("WEBGL_CONV_IM2COL"))d=uW({x:s,filter:a,convInfo:h,backend:n});else{const e=new nW(h);d=n.runWebGLProgram(e,[s,a],"float32")}else d=iW({x:s,filter:a,convInfo:h,backend:n});const f=kB({inputs:{x:d},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class cW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const fW={kernelName:Ef,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,p=Vw.convertConv2DDataFormat(u),h=Vw.computeConv2DInfo(s.shape,c,o,1,i,l,!1,p),d=new cW(h);return n.runWebGLProgram(d,[s,a],"float32")}};const mW={kernelName:$f,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,p=Vw.convertConv2DDataFormat(l),h=Vw.computeConv2DInfo(o,a.shape,i,1,u,c,!1,p),d=new pW(h);return n.runWebGLProgram(d,[s,a],"float32")}};const gW={kernelName:Cf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r,l=Vw.computeConv3DInfo(s.shape,a.shape,o,u,i),c=new rW(l);return n.runWebGLProgram(c,[s,a],"float32")}};const yW={kernelName:Af,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:u}=r,l=Vw.computeConv3DInfo(s.shape,u,o,1,i),c=new hW(l);return n.runWebGLProgram(c,[s,a],"float32")}};const bW={kernelName:_f,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:u}=r,l=Vw.computeConv3DInfo(u,a.shape,i,1,o),c=new dW(l);return n.runWebGLProgram(c,[s,a],"float32")}},xW=mz({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),wW={kernelName:Rf,backendName:"webgl",kernelFunc:xW},kW=mz({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),vW={kernelName:Df,backendName:"webgl",kernelFunc:kW};class NW{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,u]=e,[l]=t,[c,p]=n;this.outputShape=[l,c,p,u];const h="bilinear"===r?1:0,[d,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const SW={kernelName:Mf,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,c=new NW(s.shape,a.shape,i,u,l);return n.runWebGLProgram(c,[s,a,o],"float32")}};var IW,TW;(TW=IW||(IW={})).Prod="*",TW.Sum="+";class EW{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=this.op===IW.Prod?"1.0":"0.0",o=n?a:`getX(${$W(s,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=r?"end != "+(i-1):"end != 0",l=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${i}`:"end >= pow2",l=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ZM(s)} coords = getOutputCoords();\n        int end = ${CW(s,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${CW(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${$W(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function $W(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function CW(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function AW(e,t,n,r,s,a){const o=t.shape.length,i=Vw.getAxesPermutation([r],o);let u=t;null!=i&&(u=RB({inputs:{x:t},backend:n,attrs:{perm:i}}));const l=Vw.getInnerMostAxes(1,o)[0];if(l!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=u.shape[l];let p=tz({inputs:{x:u},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const r=new EW(e,u.shape,!1,a),s=[[t]],o=p;p=n.runWebGLProgram(r,[p],p.dtype,s),n.disposeIntermediateTensorInfo(o)}if(s){const t=new EW(e,u.shape,s,a),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=i){const e=RB({inputs:{x:p},backend:n,attrs:{perm:Vw.getUndoAxesPermutation(i)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(u),e}return p}const _W={kernelName:Ff,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return AW(IW.Prod,s,n,a,o,i)}};const RW={kernelName:Of,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return AW(IW.Sum,s,n,a,o,i)}};const DW={kernelName:Lf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=Sz(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=Iz(e,t,o,i);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class FW{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const OW={kernelName:zf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r,i=s.shape[0],u=("NHWC"===o?s.shape[1]:s.shape[2])*a,l=("NHWC"===o?s.shape[2]:s.shape[3])*a,c=("NHWC"===o?s.shape[3]:s.shape[1])/(a*a),p=new FW("NHWC"===o?[i,u,l,c]:[i,c,u,l],a,o);return n.runWebGLProgram(p,[s],s.dtype)}};class MW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=XL(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let u="",l="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class LW{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=XL(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,p=c;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${l}; r++) {\n      `;for(let e=0;e<c;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*u};\n          `,1===i){if(t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===u&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?gy.nearestLargerEven(u):u;u%2==0&&o%2==1||u%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,h+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let d="",f="";n&&(d=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const zW={kernelName:Bf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:l}=r;let c=u;null==c&&(c=[1,1]),gy.assert(Vw.eitherStridesOrDilationsAreOne(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const p=Vw.computeConv2DInfo(s.shape,a.shape,o,c,i,l,!0);let h;h=qd().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new LW(p):new MW(p);const d=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[s,a],"float32",d)}};class BW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const WW={kernelName:Pf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=r,p=Vw.computeConv2DInfo(s.shape,c,o,i,u,l,!0),h=new BW(p);return n.runWebGLProgram(h,[s,a],"float32")}};const VW={kernelName:Wf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=r,p=Vw.computeConv2DInfo(c,a.shape,o,i,u,l,!0),h=new PW(p);return n.runWebGLProgram(h,[s,a],"float32")}};class UW{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const GW={kernelName:Vf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=gy.sizeFromShape(r.shape),o=kB({inputs:{x:r},backend:n,attrs:{shape:[a]}}),i=new UW(a),u=n.runWebGLProgram(i,[o],o.dtype),l=kB({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}};class HW{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const qW={kernelName:Uf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:u}=r,l=Vw.computeDilation2DInfo(s.shape,a.shape,o,i,"NHWC",u);let c;const p=new HW(l);c=n.runWebGLProgram(p,[s,a],"float32");const h=kB({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),h}};const jW={kernelName:jf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:u}=Vw.decodeEinsumEquation(s,a.length);Vw.checkEinsumDimSizes(o.length,u,a);const{path:l,steps:c}=Vw.getEinsumComputePath(i,u),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Vw.getEinsumPermutation(d,u[t]);let s;Vw.isIdentityPermutation(e)?s=a[t]:(s=RB({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);gy.arraysEqual(s.shape,o)||(s=kB({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=yB({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(l[e]>=0&&(h=AB({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},KW=mz({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),XW={kernelName:Kf,backendName:"webgl",kernelFunc:KW},YW={kernelName:Xf,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=qd().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ez("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new YL("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},ZW=gz({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Cz}),JW={kernelName:Zf,backendName:"webgl",kernelFunc:ZW},QW=mz({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Vw.ERF_P};\n  float a1 = ${Vw.ERF_A1};\n  float a2 = ${Vw.ERF_A2};\n  float a3 = ${Vw.ERF_A3};\n  float a4 = ${Vw.ERF_A4};\n  float a5 = ${Vw.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),eV={kernelName:Yf,backendName:"webgl",kernelFunc:QW},tV=mz({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Az,dtype:"float32"}),nV={kernelName:Jf,backendName:"webgl",kernelFunc:tV};function rV(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let u=s;return s<0&&(gy.assert(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+s+1),i.splice(u,0,1),kB({inputs:{x:a},backend:r,attrs:{shape:i}})}const sV={kernelName:Qf,backendName:"webgl",kernelFunc:rV},aV="return exp(x) - 1.0;",oV=mz({opSnippet:aV,packedOpSnippet:aV,cpuKernelImpl:_z}),iV={kernelName:em,backendName:"webgl",kernelFunc:oV};class uV{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function lV(e,t,n){const r=n.texData.get(e.dataId),s=gy.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],o=kB({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),i=o.shape,u=new uV("real",i,t),l=new uV("imag",i,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(u,c,"float32"),h=n.runWebGLProgram(l,c,"float32"),d=rz({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const f=kB({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(d),f}const cV={kernelName:tm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return lV(r,!1,n)}};class pV{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function hV(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||gy.inferDtype(s),"string"===a){const e=gy.getArrayFromDType(a,gy.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new pV(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const dV={kernelName:nm,backendName:"webgl",kernelFunc:hV};class fV{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const mV={kernelName:rm,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new fV(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},gV="return floor(x);",yV=mz({opSnippet:gV,packedOpSnippet:gV,cpuKernelImpl:Rz}),bV={kernelName:sm,backendName:"webgl",kernelFunc:yV},xV=gz({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),wV={kernelName:am,backendName:"webgl",kernelFunc:xV};class kV{constructor(e){this.variableNames=["A"];const t=FM(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class vV{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=FM(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const NV={kernelName:ey,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],p=[l,u,a];if(i||o){const e=qd().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=SV&&e===IV||(IV=e,SV=document.createElement("canvas").getContext("2d",{willReadFrequently:IV})),SV.canvas.width=u,SV.canvas.height=l,SV.drawImage(s,0,0,u,l),s=SV.canvas}const h=n.makeTensorInfo(c,"int32");n.texData.get(h.dataId).usage=iL.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),s);const d=qd().getBool("WEBGL_PACK")?new vV(p):new kV(p),f=n.runWebGLProgram(d,[h],"int32");return n.disposeData(h.dataId),f}};let SV,IV=qd().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const TV={kernelName:ry,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=Vw.convertConv2DDataFormat(c),g=Vw.computeConv2DInfo(s.shape,a.shape,u,p,l,h,!1,m);let y;const b=[],x=null!=o,w=null!=i,k="leakyrelu"===d,v=()=>{const e=[s,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=kB({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,c)),w&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",gy.createScalarValue(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&qd().getBool("WEBGL_EXP_CONV")){const e=d?yz(d,!0):null,t=new sW(g,x,e,w,k),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=v();y=n.runWebGLProgram(t,s,"float32",r)}else if(qd().getBool("WEBGL_CONV_IM2COL"))y=uW({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=d?yz(d,!1):null,t=new nW(g,x,e,w,k),r=v();y=n.runWebGLProgram(t,r,"float32")}else y=iW({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const N=kB({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};const EV={kernelName:sy,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:p,activation:h,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),gy.assert(Vw.eitherStridesOrDilationsAreOne(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const g=Vw.computeConv2DInfo(s.shape,a.shape,u,m,l,p,!0),y=qd().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=h?yz(h,y):null,x=[s,a],w=null!=o,k=null!=i,v="leakyrelu"===h;if(w&&x.push(o),k&&x.push(i),v){const e=n.makeTensorInfo([],"float32",gy.createScalarValue(d,"float32"));x.push(e),f.push(e)}let N;N=y?new LW(g,w,b,k,v):new MW(g,w,b,k,v);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],I=n.runWebGLProgram(N,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class $V{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=ZM(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const CV={kernelName:um,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,o=a[a.length-1],i=gy.sizeFromShape(r.shape),[u,l,c,p]=Vw.prepareAndValidate(r,s),h=kB({inputs:{x:s},backend:n,attrs:{shape:[l,o]}}),d=kB({inputs:{x:r},backend:n,attrs:{shape:[gy.sizeFromShape(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=Dz(e,t,r.dtype,l,o,c,p,r.shape,i);return n.makeTensorInfo(u,r.dtype,a.values)}const f=new $V(o,p,[l,c],r.shape),m=n.runWebGLProgram(f,[d,h],d.dtype),g=kB({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class AV{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=ZM(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function _V(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r,u=gy.parseAxisParam(o,s.shape)[0];if(qd().get("DEBUG")){const e=n.readSync(a.dataId),t=s.shape[u];for(let n=0;n<e.length;++n){const r=e[n];gy.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const l=Vw.segment_util.collectGatherOpShapeInfo(s,a,u,i),c=gy.sizeFromShape(a.shape),p=[],h=kB({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=kB({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,c/l.batchSize]}});p.push(h),p.push(d);const f=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),r=Fz(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,r.dtype,r.values)}const m=new AV(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);p.push(g);const y=kB({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const RV={kernelName:im,backendName:"webgl",kernelFunc:_V},DV=gz({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Oz,dtype:"bool"}),FV={kernelName:lm,backendName:"webgl",kernelFunc:DV},OV=gz({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Mz}),MV={kernelName:cm,backendName:"webgl",kernelFunc:OV};const LV={kernelName:hm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return lV(r,!0,n)}},zV=mz({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),BV={kernelName:fm,backendName:"webgl",kernelFunc:zV},PV=mz({opSnippet:"return float(isinf(x));",dtype:"bool"}),WV={kernelName:mm,backendName:"webgl",kernelFunc:PV},VV=mz({opSnippet:"return float(isnan(x));",dtype:"bool"}),UV={kernelName:gm,backendName:"webgl",kernelFunc:VV},GV=gz({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Lz,dtype:"bool"}),HV={kernelName:bm,backendName:"webgl",kernelFunc:GV},qV=gz({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:zz,dtype:"bool"}),jV={kernelName:xm,backendName:"webgl",kernelFunc:qV};const KV={kernelName:wm,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=Bz(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},XV=mz({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:Pz}),YV={kernelName:km,backendName:"webgl",kernelFunc:XV},ZV=mz({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),JV={kernelName:vm,backendName:"webgl",kernelFunc:ZV},QV=gz({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),eU={kernelName:Nm,backendName:"webgl",kernelFunc:QV},tU=mz({opSnippet:"return float(!(x >= 1.0));"}),nU={kernelName:Sm,backendName:"webgl",kernelFunc:tU},rU=gz({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),sU={kernelName:Im,backendName:"webgl",kernelFunc:rU};class aU{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class oU{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const iU={kernelName:Tm,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:u}=r,l=qd().getBool("WEBGL_PACK_NORMALIZATION")?new oU(s.shape,a,o,i,u):new aU(s.shape,a,o,i,u);return n.runWebGLProgram(l,[s],s.dtype)}};class uU{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const lU={kernelName:Em,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r,p=new uU(s.shape,i,u,l,c);return n.runWebGLProgram(p,[s,a,o],s.dtype)}};function cU(e,t,n,r){const s=gy.sizeFromShape(t),a=kB({inputs:{x:e},attrs:{shape:[gy.sizeFromShape(e.shape)/s,s]},backend:r}),o=IB(a,e.dtype,"max",r),i=kB({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}function pU(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=s.shape.length,u=gy.parseAxisParam(a,s.shape);let l=u;const c=Vw.getAxesPermutation(l,i),p=null!=c,h=n.shouldExecuteOnCPU([s]);let d=s;if(p){if(h){const e=n.texData.get(d.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=fB(e,s.shape,s.dtype,c,t);d=n.makeTensorInfo(t,s.dtype);n.texData.get(d.dataId).values=r}else d=$B(s,c,n);l=Vw.getInnerMostAxes(l.length,i)}Vw.assertAxesAreInnerMostDims("max",l,i);const[f,m]=Vw.computeOutAndReduceShapes(d.shape,l);let g,y=f;if(o&&(y=Vw.expandShapeToKeepDim(f,u)),h){const e=n.texData.get(d.dataId).values,t=Wz(e,gy.sizeFromShape(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype);n.texData.get(g.dataId).values=t}else g=cU(d,m,y,n);return p&&n.disposeIntermediateTensorInfo(d),g}const hU={kernelName:$m,backendName:"webgl",kernelFunc:pU},dU=gz({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Vz}),fU={kernelName:Cm,backendName:"webgl",kernelFunc:dU};const mU={kernelName:Am,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;HL(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;gy.assert(Vw.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const l=Vw.computePool2DInfo(s.shape,a,o,1,i,u);if(1===l.filterWidth&&1===l.filterHeight&&gy.arraysEqual(l.inShape,l.outShape))return tz({inputs:{x:s},backend:n});const c=new dP(l,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}};const gU={kernelName:Rm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dataFormat:u,dimRoundingMode:l}=r,c=Vw.computePool3DInfo(s.shape,a,o,[1,1,1],i,l,u),p=new fP(c,"max",!1);return n.runWebGLProgram(p,[s],s.dtype)}};class yU{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=s-1-e.padInfo.top,i=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bU{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=u-1-e.padInfo.top,h=l-1-e.padInfo.left,d=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xU={kernelName:Dm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=r,p=Vw.computePool3DInfo(o.shape,i,u,[1,1,1],l,c),h=new fP(p,"max",!0),d=n.runWebGLProgram(h,[o],o.dtype),f=new bU(p),m=n.runWebGLProgram(f,[s,d],o.dtype);return n.disposeIntermediateTensorInfo(d),m}};const wU={kernelName:_m,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;HL([a,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,h=Vw.computePool2DInfo(i.shape,u,l,1,c,p),d=new dP(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new yU(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};function kU(e,t,n,r){let s=new dP(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");s=new dP(n,"max",!0,!0,t);return[a,r.runWebGLProgram(s,[e],"float32")]}const vU={kernelName:Fm,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,u=n;gy.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const l=[1,1];gy.assert(Vw.eitherStridesOrDilationsAreOne(a,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`));const c=Vw.computePool2DInfo(r.shape,s,a,l,o),[p,h]=kU(r,i,c,u);return[p,h]}};function NU(e,t,n,r){const s=gy.sizeFromShape(t),a=kB({inputs:{x:e},attrs:{shape:[gy.sizeFromShape(e.shape)/s,s]},backend:r}),o=IB(a,"float32","mean",r),i=kB({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}const SU={kernelName:Om,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,o=n,i=r.shape.length,u=gy.parseAxisParam(a,r.shape);let l=u;const c=Vw.getAxesPermutation(l,i),p=null!=c,h=o.shouldExecuteOnCPU([r]),d=[];let f=r;if(p){if(h){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=fB(e,r.shape,r.dtype,c,t);f=o.makeTensorInfo(t,r.dtype);o.texData.get(f.dataId).values=n}else f=$B(r,c,o);d.push(f),l=Vw.getInnerMostAxes(l.length,i)}Vw.assertAxesAreInnerMostDims("sum",l,i);const[m,g]=Vw.computeOutAndReduceShapes(f.shape,l);let y=m;s&&(y=Vw.expandShapeToKeepDim(m,u));const b=NU(f,g,y,o);for(const e of d)o.disposeIntermediateTensorInfo(e);return b}};const IU={kernelName:Mm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=gy.parseAxisParam(a,s.shape);let l=u;const c=Vw.getAxesPermutation(l,i);let p=s;null!=c&&(p=RB({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Vw.getInnerMostAxes(l.length,s.shape.length)),Vw.assertAxesAreInnerMostDims("min",l,i);const[h,d]=Vw.computeOutAndReduceShapes(p.shape,l),f=kB({inputs:{x:p},backend:n,attrs:{shape:[-1,gy.sizeFromShape(d)]}}),m=IB(f,f.dtype,"min",n);let g;if(o){g=kB({inputs:{x:m},backend:n,attrs:{shape:Vw.expandShapeToKeepDim(h,u)}})}else g=kB({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},TU=gz({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Uz}),EU={kernelName:Lm,backendName:"webgl",kernelFunc:TU};class $U{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=ZM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class CU{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=ZM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=JL("rc",r),u=JL("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const AU={kernelName:zm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,o=qd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CU(r.shape,s,a):new $U(r.shape,s,a);return t.runWebGLProgram(o,[r],r.dtype)}},_U=gz({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),RU={kernelName:Bm,backendName:"webgl",kernelFunc:_U};class DU{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const FU=gz({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),OU={kernelName:qf,backendName:"webgl",kernelFunc:FU},MU="return a - b;",LU=gz({opSnippet:MU,packedOpSnippet:MU,supportsComplex:!0,cpuKernelImpl:pB}),zU={kernelName:Vg,backendName:"webgl",kernelFunc:LU};function BU(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=gy.parseAxisParam([a],s.shape),i=pU({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=Vw.expandShapeToKeepDim(i.shape,o),l=kB({inputs:{x:i},backend:n,attrs:{shape:u}}),c=LU({inputs:{a:s,b:l},backend:n}),p=tV({inputs:{x:c},backend:n}),h=AB({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),d=kB({inputs:{x:h},backend:n,attrs:{shape:u}}),f=FU({inputs:{a:p,b:d},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),f}const PU={kernelName:Ag,backendName:"webgl",kernelFunc:BU};const WU={kernelName:Pm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r,u=i?s:BU({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=u.shape[0],c=u.shape[1],p=new DU(l,c,a),h=[[o]],d=n.runWebGLProgram(p,[u],"int32",h);return i||n.disposeIntermediateTensorInfo(u),d}};const VU={kernelName:Vm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=Hz(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=qd().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new fz(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new pz(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(s,[r],r.dtype)}},UU=Jv.nonMaxSuppressionV3Impl;const GU={kernelName:Gm,backendName:"webgl",kernelFunc:function(e){Vw.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:p}=UU(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},HU=Jv.nonMaxSuppressionV4Impl;const qU={kernelName:Hm,backendName:"webgl",kernelFunc:function(e){Vw.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),{selectedIndices:h,validOutputs:d}=HU(c,p,o,i,u,l);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},jU=Jv.nonMaxSuppressionV5Impl;const KU={kernelName:qm,backendName:"webgl",kernelFunc:function(e){Vw.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),h=o,d=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=jU(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class XU{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const YU={kernelName:Km,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:u}=r,l=gy.sizeFromShape(s.shape),c=new XU(l,o,i,u),p=kB({inputs:{x:s},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(c,[p],a);n.disposeIntermediateTensorInfo(p);const d=kB({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,o]}});return n.disposeIntermediateTensorInfo(h),d}};function ZU(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=OP({inputs:{input:r},backend:n}),t=ZU({inputs:{x:e},backend:n}),s=ZP({inputs:{input:r},backend:n}),a=ZU({inputs:{x:s},backend:n}),o=rz({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return hV({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const JU={kernelName:Jg,backendName:"webgl",kernelFunc:ZU};const QU={kernelName:jm,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=OP({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=ZP({inputs:{input:s},backend:r}),o=ZU({inputs:{x:a},backend:r}),i=rz({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return hV({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const eG={kernelName:Xm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return rV({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{gy.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),gy.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],u=eW({inputs:t.map((e=>{const t=rV({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class tG{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=ZM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class nG{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=ZM(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=JL("rc",r),u=JL("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p=[`${s} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const rG=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;if(0===gy.sizeFromShape(s.shape)){return hV({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+s.shape[t]+e[1])),value:o,dtype:s.dtype}})}const i=qd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new nG(s.shape,a,o):new tG(s.shape,a,o),u=[[o]];return n.runWebGLProgram(i,[s],s.dtype,u)},sG={kernelName:Ym,backendName:"webgl",kernelFunc:rG},aG=gz({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),oG={kernelName:Zm,backendName:"webgl",kernelFunc:aG};const iG={kernelName:Qm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,u=[],l=gy.parseAxisParam(a,s.shape);let c=l;const p=Vw.getAxesPermutation(c,i);let h,d=s;if(null!=p&&(d=RB({inputs:{x:s},backend:n,attrs:{perm:p}}),c=Vw.getInnerMostAxes(c.length,i),u.push(d)),Vw.assertAxesAreInnerMostDims("prod",c,i),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:s}=jz(d.shape,d.dtype,e,c);h=n.makeTensorInfo(r,s,t)}else{const[e,t]=Vw.computeOutAndReduceShapes(d.shape,c),r=gy.sizeFromShape(t),a=kB({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),o=IB(a,lb(s.dtype),"prod",n);h=kB({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(a),u.push(o)}if(o){u.push(h);const e=Vw.expandShapeToKeepDim(h.shape,l);h=kB({inputs:{x:h},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}};const uG={kernelName:eg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,u=s.map((e=>n.readSync(e.dataId))),l=s.map((e=>e.shape)),c=n.readSync(a.dataId),p=n.readSync(o.dataId),[h,d,f]=Kz(u,l,c,a.shape,a.dtype,p,o.shape,i),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};const lG={kernelName:tg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=Xz(o,r.shape,r.dtype,i,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};const cG={kernelName:ng,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),p=n.readSync(o.dataId),h=i.map((e=>n.readSync(e.dataId))),d=i.map((e=>e.shape)),[f,m]=Yz(l,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,u);return n.makeTensorInfo(f,a.dtype,m)}},pG=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:o}=n,i=Zz(r,s,a,o);return t.makeTensorInfo([i.length],o,i)},hG={kernelName:rg,backendName:"webgl",kernelFunc:pG},dG=mz({opSnippet:"return 1.0 / x;"}),fG={kernelName:ag,backendName:"webgl",kernelFunc:dG},mG=mz({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),gG={kernelName:og,backendName:"webgl",kernelFunc:mG},yG=mz({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),bG={kernelName:hg,backendName:"webgl",kernelFunc:yG};class xG{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class wG{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const kG={kernelName:cg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[u,l]=i,c=qd().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new wG(s.shape,u,l,a,o):new xG(s.shape,u,l,a,o);return n.runWebGLProgram(c,[s],"float32")}};class vG{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const NG={kernelName:pg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new vG(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class SG{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class IG{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const TG={kernelName:ug,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[u,l]=i,c=qd().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new IG(s.shape,u,l,a,o):new SG(s.shape,u,l,a,o);return n.runWebGLProgram(c,[s],s.dtype)}};class EG{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const $G={kernelName:lg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new EG(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class CG{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=ZM(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class AG{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=JL("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=ZM(n);function i(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const _G={kernelName:dg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,o=s.shape.length,i=gy.parseAxisParam(a,s.shape);if(0===o)return tz({inputs:{x:s},backend:n});const u=qd().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new AG(s.shape,i):new CG(s.shape,i);return n.runWebGLProgram(u,[s],s.dtype)}};class RG{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const DG={kernelName:ty,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,u=new RG(r.shape,a),[l,c]=Vw.getImageCenter(o,r.shape[1],r.shape[2]),p=[[l,c,Math.sin(s),Math.cos(s)]];return i.runWebGLProgram(u,[r],r.dtype,p)}},FG=mz({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),OG={kernelName:fg,backendName:"webgl",kernelFunc:FG},MG=mz({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Jz}),LG={kernelName:mg,backendName:"webgl",kernelFunc:MG};class zG{constructor(e,t,n,r,s,a,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const i=ZM(s.length),u=ZM(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const BG={kernelName:gg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:p}=Vw.calculateShapes(a,s,o),h=[p/l,l];if(0===p)return n.makeTensorInfo(o,s.dtype);const d=kB({inputs:{x:s},backend:n,attrs:{shape:[u,i]}}),f=kB({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new zG(u,i,d.shape.length,f.shape.length,c,h),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=kB({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class PG{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===qd().getNumber("WEBGL_VERSION")?"while (left < right) {":s,o="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const WG={kernelName:yg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=new PG(s.shape[0],s.shape[1],a.shape[1],o),u=[[s.shape[1]]];return n.runWebGLProgram(i,[s,a],"int32",u)}};class VG{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=o.join()}const a=ZM(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const UG={kernelName:bg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,o=new VG(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[r,s,a],ub(s.dtype,a.dtype))}},GG=mz({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Vw.SELU_SCALEALPHA};\n  float scale = ${Vw.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),HG={kernelName:xg,backendName:"webgl",kernelFunc:GG},qG=mz({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:eB}),jG={kernelName:Sg,backendName:"webgl",kernelFunc:qG},KG=mz({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),XG={kernelName:Ng,backendName:"webgl",kernelFunc:KG},YG=mz({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),ZG={kernelName:kg,backendName:"webgl",kernelFunc:YG},JG=mz({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),QG={kernelName:vg,backendName:"webgl",kernelFunc:JG},eH=mz({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),tH={kernelName:Ig,backendName:"webgl",kernelFunc:eH},nH={kernelName:$g,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;gy.assert(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...o);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=[],c=rG({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),p=Vw.getReshaped(c.shape,a,i,!1),h=Vw.getPermuted(p.length,a.length,!1),d=Vw.getReshapedPermuted(c.shape,a,i,!1),f=kB({inputs:{x:c},backend:n,attrs:{shape:p}}),m=RB({inputs:{x:f},backend:n,attrs:{perm:h}}),g=kB({inputs:{x:m},backend:n,attrs:{shape:d}});return l.push(c),l.push(f),l.push(m),l.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const rH={kernelName:_g,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),u=n.readSync(s.dataId),l=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[p,h,d,f,m]=rB(i,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const sH={kernelName:Rg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(s.dataId)),i=n.readSync(r.dataId),u=Array.from(n.readSync(a.dataId)),[l,c,p]=sB(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};const aH={kernelName:Dg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=aB(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const oH={kernelName:Fg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=aB(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}};const iH={kernelName:Og,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:h}=Vw.calculateShapes(a,s,i);if("string"===a.dtype){const e=n.bufferSync(s),t=n.bufferSync(a),r=gy.decodeString(n.readSync(o.dataId)[0]),d=Qz(e,t,i,h,c,l,u,p,r,false);return n.makeTensorInfo(i,d.dtype,d.values)}const d=new zG(l,u,s.shape.length,a.shape.length,p,[h,1],false),f=n.runWebGLProgram(d,[a,s,o],a.dtype),m=kB({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}};const uH={kernelName:Cg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=gy.parseAxisParam(o,s.shape)[0],u=Vw.prepareSplitSize(s,a,i),l=s.shape.length,c=new Array(l).fill(0),p=s.shape.slice();return u.map((e=>{const t=[...p];t[i]=e;const r=$P({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},lH="return sqrt(x);",cH=mz({opSnippet:lH,packedOpSnippet:lH,cpuKernelImpl:oB}),pH={kernelName:Tg,backendName:"webgl",kernelFunc:cH},hH={kernelName:Lg,backendName:"webgl",kernelFunc:mz({opSnippet:"return x * x;"})},dH="return (a - b) * (a - b);",fH=gz({opSnippet:dH,packedOpSnippet:dH}),mH={kernelName:Mg,backendName:"webgl",kernelFunc:fH};const gH={kernelName:Qg,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new pz(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class yH{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=ZM(n.length),a=ZM(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const bH={kernelName:zg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=ww.sliceInfo(s.shape,a,o,i,u,l,c,p,h);let k;if(m)k=kB({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){gy.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=ww.computeOutShape(b,x,w),t=$P({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=kB({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=Lx(s.shape,s.dtype,e),r=iB(d,t,w,b);k=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new yH(b,w,d);k=n.runWebGLProgram(e,[s],s.dtype)}}const v=kB({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}};const xH={kernelName:Bg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,h=n.readSync(c.dataId),d=n.readSync(p.dataId),[f,m]=uB(h,d,s,a,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};const wH={kernelName:Pg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),u=n.readSync(o.dataId)[0],[l,c,p]=lB(i,u,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",l),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};const kH={kernelName:Wg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=cB(o,s);return n.makeTensorInfo(a.shape,"int32",i)}},vH=mz({opSnippet:"return tan(x);"}),NH={kernelName:Ug,backendName:"webgl",kernelFunc:vH},SH=mz({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),IH={kernelName:Gg,backendName:"webgl",kernelFunc:SH};class TH{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=ZM(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function EH(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>gy.decodeString(e))):e,r=Lx(s.shape,s.dtype,t),o=hB(r,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new TH(s.shape,a);return n.runWebGLProgram(o,[s],s.dtype)}const $H={kernelName:Hg,backendName:"webgl",kernelFunc:EH};class CH{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class AH{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function _H(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function RH(e){let t=1;for(;t<e;)t*=2;return t}const DH={kernelName:qg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r,i=qd().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=qd().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=s.shape,c=l[l.length-1];if(n.shouldExecuteOnCPU([s])||c<i||a>u){const e=n.readSync(s.dataId),[t,r]=dB(e,l,s.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return l[l.length-1]=0,[n.makeTensorInfo(l,s.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===c)return[s,hV({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const p=n.texData.get(s.dataId),h=null!==p&&p.isPacked,d=h?n.unpackTensor(s):s,f=gy.sizeFromShape(l)/c,m=kB({inputs:{x:d},attrs:{shape:[f,c]},backend:n});h&&_H(n,d);const g=RH(a),y=RH(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const s=x(),a=new CH(r),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,s,"int32",o),_H(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new AH([f,e/2]),s=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(r,t,"int32",s),_H(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let k=b;b=$P({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),_H(n,k);let v=_V({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});_H(n,m);const N=l.slice(0,-1);N.push(a),k=b,b=kB({inputs:{x:b},attrs:{shape:N},backend:n}),_H(n,k);const S=v;return v=kB({inputs:{x:v},attrs:{shape:N},backend:n}),_H(n,S),[v,b]}};class FH{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const OH={kernelName:jg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=r,[c,p,h,d]=s.shape,[f,m]=null!=l?l:[p,h],g=new FH(p,h,o,i,u,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}};const MH={kernelName:Xg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;HL(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(a.dataId),{outputValues:i,outputShape:u,indices:l}=mB(o,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}};const LH={kernelName:Yg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s,i=o.shape.length,u=s.shape[a],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(l[c++]=o.shape[e]);const p=[],h=new Array(i).fill(0),d=o.shape.slice();d[a]=1;const f=new Array(u);for(let e=0;e<f.length;e++){h[a]=e;const t=$P({inputs:{x:o},backend:n,attrs:{begin:h,size:d}}),r=kB({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class zH{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,o=a*Math.ceil(s/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const BH=[OB,LB,BB,WB,GB,jB,KB,XB,tP,nP,sP,oP,uP,cP,hP,mP,gP,xP,wP,kP,SP,AP,_P,RP,zP,WP,GP,sz,jP,tW,lW,fW,mW,gW,yW,bW,wW,vW,SW,_W,RW,DW,OW,zW,WW,VW,GW,qW,jW,XW,YW,JW,eV,nV,sV,iV,cV,dV,mV,bV,wV,NV,TV,EV,CV,RV,FV,MV,nz,LV,JP,BV,WV,UV,iz,HV,jV,KV,YV,JV,eU,nU,sU,iU,lU,hU,fU,mU,gU,xU,wU,vU,SU,IU,EU,AU,RU,WU,bB,VU,GU,qU,KU,FP,YU,QU,eG,sG,oG,cz,iG,uG,lG,cG,hG,MP,OU,fG,gG,bG,vB,kG,NG,TG,$G,_G,DG,OG,LG,BG,WG,UG,HG,jG,XG,ZG,QG,CP,PU,tH,nH,rH,sH,aH,oH,iH,uH,pH,hH,mH,gH,bH,xH,wH,kH,zU,_B,NH,IH,$H,DH,OH,DB,MH,LH,{kernelName:Zg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r,i=s.shape.length,u=[];let l=0;const c=Vw.getAxesPermutation([l],i);let p=s;null!=c&&(p=RB({inputs:{x:s},backend:n,attrs:{perm:c}}),u.push(p),l=Vw.getInnerMostAxes(1,i)[0]);const h=Vw.segment_util.computeOutShape(p.shape,l,o),d=gy.sizeFromShape([p.shape[l]]),f=kB({inputs:{x:p},backend:n,attrs:{shape:[-1,d]}});u.push(f);const m=lb(s.dtype),g=(e,t,r,s,a)=>{const o=e.shape[0],i=e.shape[1],l=Vw.segment_util.segOpComputeOptimalWindowSize(i,a),c=new zH({windowSize:l,inSize:i,batchSize:o,numSegments:a},t),p=n.compileAndRun(c,[e,r],s);if(u.push(p),p.shape[1]===a)return p;const h=pG({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=EH({inputs:{x:h},backend:n,attrs:{reps:[i/l]}});u.push(h),u.push(d);return g(p,t,d,s,a)},y=kB({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:h}});let b=y;if(null!=c){u.push(y);const e=Vw.getUndoAxesPermutation(c);b=RB({inputs:{x:b},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},JU];for(const e of BH)dy(e);const PH=qd();PH.registerFlag("HAS_WEBGL",(()=>PH.getNumber("WEBGL_VERSION")>0)),PH.registerFlag("WEBGL_VERSION",(()=>PL(2)?2:PL(1)?1:0)),PH.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),PH.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===PH.get("WEBGL_VERSION"))),PH.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),PH.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),PH.registerFlag("WEBGL_PACK",(()=>PH.getBool("HAS_WEBGL"))),PH.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_PACK_CLIP",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_PACK_REDUCE",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_LAZILY_UNPACK",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_CONV_IM2COL",(()=>PH.getBool("WEBGL_PACK"))),PH.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>ML(PH.getNumber("WEBGL_VERSION")))),PH.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>LL(PH.getNumber("WEBGL_VERSION")))),PH.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=PH.getNumber("WEBGL_VERSION");return 0===e?0:zL(e)})),PH.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>PH.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!kb.isMobile())),PH.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>WL(PH.getNumber("WEBGL_VERSION")))),PH.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!PH.getBool("WEBGL_FORCE_F16_TEXTURES")&&PH.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),PH.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>VL(PH.getNumber("WEBGL_VERSION")))),PH.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>GL(PH.getNumber("WEBGL_VERSION")))),PH.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>PH.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),PH.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),PH.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>kb.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),PH.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),PH.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),PH.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),PH.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),PH.registerFlag("WEBGL_EXP_CONV",(()=>!1)),PH.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>PH.getBool("IS_TEST"))),PH.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),PH.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),PH.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));class WH{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=aL.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=FM();this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?MM(["r","c","d"],e):OM(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class VH{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=aL.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=FM();this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?MM(["r","c","d"],e):OM(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class UH{constructor(e){this.variableNames=["A"],this.outTexUsage=iL.DOWNLOAD;const t=FM();this.outputShape=e,this.userCode=`\n      ${BM}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class GH{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=iL.DOWNLOAD;const t=FM();this.outputShape=e,this.userCode=`\n      ${BM}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const HH={R:0,G:1,B:2,A:3};class qH{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=FM();this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${HH[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":zM(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class jH{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=FM();this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":zM(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function KH(e){const t=FM();return function(e,t){const n=EL(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(mL(e,(()=>e.shaderSource(n,t))),mL(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function XH(e){return function(e,t){const n=EL(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return mL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),mL(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function YH(e){return function(e,t){const n=EL(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return mL(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),mL(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function ZH(e,t,n,r,s,a){!function(e,t){const n=qd().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return EL(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return mL(e,(()=>e.bindTexture(i,o))),mL(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),mL(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),mL(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),mL(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===qd().getNumber("WEBGL_VERSION")?mL(e,(()=>e.texImage2D(i,0,r,t,n,0,s,a,null))):mL(e,(()=>e.texStorage2D(i,1,r,t,n))),mL(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function JH(e){return e.internalFormatFloat}function QH(e){return e.internalFormatHalfFloat}function eq(e){return e.downloadTextureFormat}function tq(e){return e.internalFormatPackedFloat}function nq(e){return e.internalFormatPackedHalfFloat}function rq(e,t,n,r,s,a,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=dL(e,t);return n*r*4}(a,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class sq{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=qd().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,rL(t,e)):this.gl=sL(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===qd().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=yL(this.gl,e),BL(this.gl,t))this.textureHalfFloatExtension=yL(this.gl,t);else if(qd().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),BL(this.gl,r))this.colorBufferHalfFloatExtension=yL(this.gl,r);else if(qd().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",BL(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!BL(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=XH(this.gl),this.indexBuffer=YH(this.gl),this.framebuffer=function(e){return EL(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=fL(this.gl,this.textureHalfFloatExtension)}get debug(){return qd().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;mL(e,(()=>e.finish())),mL(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),mL(e,(()=>e.deleteFramebuffer(this.framebuffer))),mL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),mL(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),mL(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=pL(t,n);return ZH(e,s,a,JH(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=pL(t,n);return ZH(e,s,a,QH(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=pL(t,n);return ZH(e,s,a,eq(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){mL(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===qd().getNumber("WEBGL_VERSION")?mL(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):mL(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===qd().getNumber("WEBGL_VERSION")?mL(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):mL(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),mL(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let o,i,u;mL(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,u=a.internalFormatPackedFloat),o.set(s),2===qd().getNumber("WEBGL_VERSION")?mL(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):mL(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,o))),mL(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=dL(t,n);return ZH(e,s,a,nq(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=dL(t,n);return ZH(e,s,a,tq(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(IL(this.gl,this.framebuffer),this.outputTexture=null),mL(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=pL(t,n),o=new Uint8Array(t*n*4);return mL(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return rq(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();mL(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return mL(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),mL(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),mL(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(qd().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return mL(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=KH(t));const n=function(e){return EL(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return mL(t,(()=>t.attachShader(n,this.vertexShader))),mL(t,(()=>t.attachShader(n,e))),function(e,t){if(mL(e,(()=>e.linkProgram(t))),!qd().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&kL(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return mL(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),vL(e,t,"clipSpacePos",n,3,20,0)&&vL(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&mL(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&kL(this.gl,this.program),mL(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return EL(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),mL(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),NL(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=dL(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&kL(this.gl,this.program),TL(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),mL(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),mL(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=yL(this.gl,2===qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await gy.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in qd().platform&&(n=qd().platform.setTimeoutCustom.bind(qd().platform)),gy.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),SL(this.gl,e,this.framebuffer),this.debug&&TL(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(SL(this.gl,this.outputTexture,this.framebuffer),this.debug&&TL(this.gl)):IL(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;SL(r,e,this.framebuffer),this.debug&&TL(r),this.outputTexture=e,mL(r,(()=>r.viewport(0,0,t,n))),mL(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),mL(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class aq{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=XL(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=JL("rc",this.rank),t=ZM(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class oq{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=uq(t,n),s=lq(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=iq(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let o;return r===lL.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===lL.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===lL.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===lL.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===lL.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=uq(n,r),a=lq(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const o=iq(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=qd().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function iq(e,t,n,r,s){const a=function(e,t){switch(e){case lL.PACKED_2X2_FLOAT32:return tq(t);case lL.PACKED_2X2_FLOAT16:return nq(t);case lL.UNPACKED_FLOAT32:return JH(t);case lL.UNPACKED_FLOAT16:return QH(t);case lL.PACKED_4X1_UNSIGNED_BYTE:return eq(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(s){const[t,n]=dL(e[0],e[1]);o=t*n}else{const[t,n]=pL(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function uq(e,t){if(e===iL.UPLOAD)return lL.PACKED_2X2_FLOAT32;if(e===iL.RENDER||null==e)return function(e){return qd().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?lL.PACKED_2X2_FLOAT32:lL.UNPACKED_FLOAT32:e?lL.PACKED_2X2_FLOAT16:lL.UNPACKED_FLOAT16}(t);if(e===iL.DOWNLOAD||e===iL.PIXELS)return lL.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function lq(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class cq{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=XL(this.outputShape.length);const t=e.length,n=JL("rc",t),r=ZM(t),s=QL(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const pq=Jv.whereImpl,hq={};const dq=qd().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class fq extends qh{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!qd().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof sq)t=e;else{const n=sL(qd().getNumber("WEBGL_VERSION"),e);t=new sq(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=sL(qd().getNumber("WEBGL_VERSION"));t=new sq(e),this.binaryCache=((n=qd().getNumber("WEBGL_VERSION"))in hq||(hq[n]={}),hq[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new oq(this.gpgpu),this.numMBBeforeWarning=null==qd().global.screen?1024:qd().global.screen.height*qd().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Hh(this,lN())}nextDataId(){return fq.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,r,s,a){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[r,s]},i.texShape=[r,s];const u=_L(t),l=new qH(u,!1,a),c=this.runWebGLProgram(l,[o],n,[[r,s]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if((qd().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||qd().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:iL.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,s){if(qd().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:iL.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new fz(o,dz):new pz(o,dz);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=gy.now()),"complex64"===r){const e=this.readSync(s.real.dataId),t=this.readSync(s.imag.dataId);c=Vw.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=gy.now()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=s){let t;t=i?new fz(r,dz):new pz(r,dz);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(qd().getBool("DEBUG")&&!qd().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===qd().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&qd().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...hL(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];l=Vw.mergeRealAndImagArrays(t,n)}else if(null==c)l=this.getValuesFromTexture(e);else{const e=gy.sizeFromShape(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=c){const e=this.gpgpu.gl;mL(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,l),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&lN().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:o,isPacked:i,texture:u}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new fz(s,dz):new pz(s,dz);const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:o}],o),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==u)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),c=lN().makeTensorFromTensorInfo(l),p=this.texData.get(l.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>gy.decodeString(e)));return Lx(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Lx(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!gL(n)){if(qd().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=gy.sizeFromShape(t);if(qd().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...hL(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=qd().getBool("WEBGL_PACK")&&!0===r,o=a?_L(t):t,i=a?new GH(o):new UH(o),u=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=gy.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=gy.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);o.kernelMs=gy.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:gy.now(),endMs:null}}endTimer(e){return qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=gy.now(),e)}async getQueryTime(e){if(qd().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=dq){return qd().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&gy.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Vw.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return pq(e.shape,t)}packedUnaryOp(e,t,n){const r=new fz(e.shape,t),s=this.compileAndRun(r,[e],n);return lN().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=tB(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(qd().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,hz,e.dtype);const t=new pz(e.shape,hz),n=this.compileAndRun(t,[e]);return lN().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&gy.isString(n[0])){const s=n.map((e=>gy.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return lN().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new cq(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new aq(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[CL(e.shape),...AL(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[CL(t),...AL(t)],a=new xB(s,n),o=[n],i=this.runWebGLProgram(a,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;if(null!=t){const e=gy.sizeFromShape(s),n=t[0]*t[1]*4;gy.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=_L(s);let i;i=r?new VH(o):new WH(o);const u=[null!=t?t:hL(o)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,u,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===aL.DENSE){const t=null!=a?a:hL(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===gy.sizeFromShape(o.shape))return i.values=gy.getTypedArrayFromDType(o.dtype,0),o;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&gy.sizeFromShape(t.shape)<=qd().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!DL(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:u}=JM(e.packedInputs,t.shape,a);let l="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=gy.computeStrides(i);p=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&gy.arraysEqual(t.shape,a),f=1===gy.sizeFromShape(t.shape),m=Vw.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&gy.arraysEqual(a,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${g}_${o?u:""}_${i.length}_${f}_${m}_${d}_${l}_${c}_${p}_${y}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${qd().getNumber("WEBGL_VERSION")}`,a}(e,l,c),h=this.getAndSaveBinary(p,(()=>qL(this.gpgpu,e,l,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),qd().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(KL(t.inShapeInfos,n),KL([t.outShapeInfo],[r]));const a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===qd().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],o=t.uniformLocations[`offset${s}`],i=t.inShapesLocations[`${s}Shape`],u=t.inTexShapesLocations[`${s}TexShape`];if(i){const{uniformShape:r}=JM(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(i,new Int32Array(r));break;case 2:e.gl.uniform2iv(i,new Int32Array(r));break;case 3:e.gl.uniform3iv(i,new Int32Array(r));break;case 4:e.gl.uniform4iv(i,new Int32Array(r))}}if(u&&e.gl.uniform2i(u,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(gy.sizeFromShape(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,r)}));const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=gy.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s&&t.program.customUniforms.forEach(((n,r)=>{const a=t.customUniformLocations[r],o=s[r];if("float"===n.type)e.gl.uniform1fv(a,o);else if("vec2"===n.type)e.gl.uniform2fv(a,o);else if("vec3"===n.type)e.gl.uniform3fv(a,o);else if("vec4"===n.type)e.gl.uniform4fv(a,o);else if("int"===n.type)e.gl.uniform1iv(a,o);else if("ivec2"===n.type)e.gl.uniform2iv(a,o);else if("ivec3"===n.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,o)}})),e.executeProgram()}(this.gpgpu,h,l,c,r),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=qd().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=gy.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!qd().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!qd().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=pN((()=>{if(!qd().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=qd().getBool("DEBUG");qd().set("DEBUG",!1);const t=this.abs(CN(1e-8)).dataSync()[0];if(qd().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=gy.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=qd().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=qd().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&qd().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map(((t,n)=>n>=e.length-2?gy.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=gy.squeezeShape(e);e=t.newShape}let s=gy.sizeFromShape(e),a=null;e.length<=1&&s<=n?a=[1,s]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>r&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=CL(e);let n=2,r=2;e.length&&([n,r]=AL(e)),s=t*(n/2)*(r/2),a=gy.sizeToSquarishShape(s).map((e=>2*e))}else a=gy.sizeToSquarishShape(s);return a}(n,i),t.texShape=c),null!=s){const e=_L(n);let a,o=c[1],p=c[0];const h=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&h||([o,p]=dL(c[0],c[1])),a=i?new jH(e,h):new qH(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?iL.PIXELS:iL.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);const g=[[p,o]],y=!0,b=this.runWebGLProgram(a,[f],r,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,qd().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=gy.now()-l)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*gy.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await x$(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw wL(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,inShapesLocations:a,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}=jL(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.inShapesLocations=a,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}createTensorFromTexture(e,t,n){const{texture:r,height:s,width:a,channels:o}=e,i=lN().backend;if(!i.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const u=i.writeTexture(r,t,n,s,a,o);return lN().makeTensorFromDataId(u,t,n,i)}}fq.nextDataId=0;kb.isBrowser()&&fN("webgl",(()=>new fq),2);class mq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,mq.prototype)}}class gq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,gq.prototype)}}class yq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,yq.prototype)}}class bq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,bq.prototype)}}class xq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,xq.prototype)}}class wq extends Error{constructor(e){super(e),Object.setPrototypeOf(this,wq.prototype)}}class kq{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function vq(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Nq(e,t){if(!e)throw new xq(t)}function Sq(e,t){let n=0;for(const r of e)r===t&&n++;return n}function Iq(e){return 1===e.length?e[0]:e}function Tq(e){return Array.isArray(e)?e:[e]}function Eq(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function $q(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let Cq={};function Aq(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function _q(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>_q(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?_q(t):e[n]=t.value)}}}function Rq(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in Cq)a=Cq[s];else if(a=t[s],null==a)throw new yq(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new yq(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,u;if(o in n?[i,u]=n[o]:o in Cq?[i,u]=Cq.className:o in t&&([i,u]=t[o]),null==i)throw new yq(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(Cq))e[t]=Cq[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Cq);for(const e of Object.keys(n))Cq[e]=n[e];_q(a.config);const r=u(i,a.config,n,s);return Cq=Object.assign({},t),r}{const e=Object.assign({},Cq);for(const e of Object.keys(n))Cq[e]=n[e];const t=new i(a.config);return Cq=Object.assign({},e),t}}}function Dq(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Fq(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Oq(e){if(null==e)throw new yq(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Mq(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new yq(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Lq(e,t,n=0,r=1/0){return Nq(n>=0),Nq(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function zq(e,t){Array.isArray(e)?(gy.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>zq(e,`element ${n+1} of ${t}`)))):gy.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Bq(e)}.`))}function Bq(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Bq(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Pq(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Wq=0;function Vq(){return Wq++}const Uq={};function Gq(e=""){return e in Uq||(Uq[e]=0),Uq[e]+=1,e+Uq[e].toString()}const Hq=["channelsFirst","channelsLast"],qq=["nearest","bilinear"],jq=["valid","same","causal"],Kq=["max","avg"],Xq=["sum","mul","concat","ave"],Yq=new Map;function Zq(e){Mq(Hq,"DataFormat",e)}function Jq(e){Mq(jq,"PaddingMode",e)}function Qq(e){Mq(Kq,"PoolMode",e)}const ej=[];function tj(e,t){ej.push(e);try{const e=t();return ej.pop(),e}catch(e){throw ej.pop(),e}}function nj(e){if(!aj(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===ej.length?"":ej.join("/")+"/")+e}function rj(e){if(!aj(e))throw new Error("Not a valid tensor name: '"+e+"'");Yq.has(e)||Yq.set(e,0);const t=Yq.get(e);if(Yq.set(e,Yq.get(e)+1),t>0){const n=`${e}_${t}`;return Yq.set(n,1),n}return e}const sj=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function aj(e){return!!e.match(sj)}function oj(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function ij(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function uj(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function lj(e,t){if(t<e)throw new yq(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}let cj;function pj(){return null==cj&&(cj=xb.backend.epsilon()),cj}function hj(e,t){return zx(e,t)}function dj(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Ak(e,n)}function fj(e,t,n){return pN((()=>{switch(e.rank){case 1:return NE(e,t,n);case 2:return SE(e,[t,0],[n,e.shape[1]]);case 3:return IE(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return TE(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return kN(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return kN(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new yq(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function mj(e,t,n){return pN((()=>{switch(e.rank){case 1:return NE(e,t,n);case 2:return SE(e,[0,t],[e.shape[0],n]);case 3:return IE(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return TE(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new yq(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function gj(e,t,n,r){return pN((()=>{switch(e.rank){case 1:return NE(e,t,n);case 2:switch(r){case 1:return fj(e,t,n);case 2:return mj(e,t,n);default:throw new yq(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return fj(e,t,n);case 2:return IE(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return mj(e,t,n);default:throw new yq(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return fj(e,t,n);case 2:return TE(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return TE(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return mj(e,t,n);default:throw new yq(`The axis is not within the rank of the tensor ${r}`)}default:throw new yq(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function yj(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),bN(e,t)}function bj(e,t){switch(e.rank){case 1:return HI([e,t]);case 2:return qI([e,t],0);case 3:return jI([e,t],0);case 4:return KI([e,t],0);default:throw new yq(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function xj(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new yq(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return tS(e,t)}function wj(e,t=0,n=1,r,s){return uE(e,t,n,r,s)}function kj(e,t,n,r){if(e.rank<2||t.rank<2)throw new bq(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new bq(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const s=!1,a=!1;return _N.matMul({a:e,b:t,transposeA:s,transposeB:a,bias:r?Sj(e.rank,r,"channelsLast"):null,activation:n})}{const s=e.shape.slice(),a=s.pop();e=Ak(e,[-1,a]);const o=t.shape.slice(),i=o.pop(),u=o.pop(),l=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Ak(HS(t,c),[u,-1]);const p=[...s,...l],h=!1,d=!1;return Ak(_N.matMul({a:e,b:t,transposeA:h,transposeB:d,bias:r?Sj(e.rank,r,"channelsLast"):null,activation:n}),p)}}function vj(e,t,n){return pN((()=>(t=Array.isArray(t)?GN(t,"int32"):zx(t,"int32"),gT(e,t,n))))}function Nj(e){return Tk(e,e)}function Sj(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new yq(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?Ak(t,[1,r[0],1,1,1]):Ak(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?Ak(t,[1,1,1,1,r[0]]):Ak(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?Ak(t,[1,r[0],1,1]):Ak(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?Ak(t,[1,1,1,r[0]]):Ak(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?Ak(t,[1,r[0],1]):Ak(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?Ak(t,[1,1,r[0]]):Ak(t,[1].concat(r))}else if(e<3)return t;throw new yq(`Unsupported input rank by biasAdd: ${t.rank}`)}function Ij(e,t,n){return pN((()=>(null==n&&(n="channelsLast"),Zq(n),RN(e,Sj(e.rank,t,n)))))}function Tj(e,t,n,r){return pN((()=>JE(e,t,n,r)))}function Ej(e,t,n=!1){return n?e():t()}const $j=["fanIn","fanOut","fanAvg"],Cj=["normal","uniform","truncatedNormal"];class Aj extends zw.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class _j extends Aj{apply(e,t){return NN(e,t)}}_j.className="Zeros",zw.registerClass(_j);class Rj extends Aj{apply(e,t){return ZS(e,t)}}Rj.className="Ones",zw.registerClass(Rj);class Dj extends Aj{constructor(e){if(super(),"object"!=typeof e)throw new yq(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new yq(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return pN((()=>Tk(CN(this.value),ZS(e,t))))}getConfig(){return{value:this.value}}}Dj.className="Constant",zw.registerClass(Dj);class Fj extends Aj{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return cE(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Fj.className="RandomUniform",zw.registerClass(Fj);class Oj extends Aj{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new bq(`randomNormal does not support dType ${t}.`);return wj(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Oj.className="RandomNormal",zw.registerClass(Oj);class Mj extends Aj{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new bq(`truncatedNormal does not support dType ${t}.`);return FE(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Mj.className="TruncatedNormal",zw.registerClass(Mj);class Lj extends Aj{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return pN((()=>{if(2!==e.length||e[0]!==e[1])throw new yq("Identity matrix initializer can only be used for 2D square matrices.");return Tk(this.gain,VS(e[0]))}))}getConfig(){return{gain:this.gain}}}Lj.className="Identity",zw.registerClass(Lj);class zj extends Aj{constructor(e){if(super(),e.scale<0)throw new yq(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Mq($j,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Mq(Cj,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(Zq(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=oj(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=oj(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=oj(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new bq(`${this.getClassName()} does not support dType ${t}.`);return FE(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return cE(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}zj.className="VarianceScaling",zw.registerClass(zj);class Bj extends zj{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return zj.className}}Bj.className="GlorotUniform",zw.registerClass(Bj);class Pj extends zj{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return zj.className}}Pj.className="GlorotNormal",zw.registerClass(Pj);class Wj extends zj{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return zj.className}}Wj.className="HeNormal",zw.registerClass(Wj);class Vj extends zj{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return zj.className}}Vj.className="HeUniform",zw.registerClass(Vj);class Uj extends zj{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return zj.className}}Uj.className="LeCunNormal",zw.registerClass(Uj);class Gj extends zj{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return zj.className}}Gj.className="LeCunNormal",zw.registerClass(Gj);class Hj extends Aj{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new bq("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return pN((()=>{if(e.length<2)throw new bq("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=wj(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=s$.gramSchmidt(t);return e[0]>e[1]&&(n=HS(n)),Tk(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Hj.className="Orthogonal",zw.registerClass(Hj);const qj={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function jj(e,t={}){return Rq(e,zw.SerializationMap.getMap().classNameMap,t,"initializer")}function Kj(e){return Aq(e)}function Xj(e){if("string"==typeof e){const t=e in qj?qj[e]:e;if("GlorotNormal"===t)return new Pj;if("GlorotUniform"===t)return new Bj;if("HeNormal"===t)return new Wj;if("HeUniform"===t)return new Vj;if("LeCunNormal"===t)return new Uj;if("LeCunUniform"===t)return new Gj;{const e={};return e.className=t,e.config={},jj(e)}}return e instanceof Aj?e:jj(e)}function Yj(e){return Array.isArray(e)&&Array.isArray(e[0])}function Zj(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Jj(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new yq(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Qj(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new yq(`Expected exactly 1 Shape; got ${e.length}`)}return e}function eK(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const tK="Variable";class nK{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Vq(),n=null==n?tK:n,this.originalName=nj(n),this.name=rj(this.originalName),this.trainable_=r,this.constraint=s,this.val=zE(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function rK(e){return e.map((e=>e.read()))}function sK(e){e.forEach((e=>{e[0].write(e[1])}))}class aK{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class oK{constructor(e,t,n,r,s,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=o,this.id=Vq(),null!=a&&(this.originalName=nj(a),this.name=rj(this.originalName)),this.rank=t.length}}let iK=0;class uK{constructor(e,t){this.callArgs=t,this.id=iK++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let lK=0;class cK extends zw.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=lK++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Eq(e)+"_"+Gq(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new gq(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new yq(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Iq(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Iq(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new mq(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new mq(`Layer ${this.name} is not connected, no input to return.`);return Iq(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new mq(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new mq(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Iq(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Tq(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Tq(this.inputSpec);if(e.length!==t.length)throw new yq(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new yq(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new yq(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new yq(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new yq(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],o=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(o))throw new yq(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new yq(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Tq(e);let r=!0;for(const e of n)if(!(e instanceof oK)){r=!1;break}let s=!0;for(const e of n)if(e instanceof oK){s=!1;break}if(r===s)throw new yq("Arguments to apply() must be all SymbolicTensors or all Tensors");return tj(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Tq(e))t.push(n.shape);this.build(Iq(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=Tq(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=Iq(a),null!=this.activityRegularizer)throw new bq("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=Tq(e);const t=[];for(const n of e)t.push(n.shape);return Iq(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new oK(a,n,this,Tq(e),t,this.name,r))):new oK(a,r,this,Tq(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new bq("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new mq(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new mq(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new gq(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return eK(this.weights)}build(e){this.built=!0}getWeights(e=!1){return rK(e?this.trainableWeights:this.weights)}setWeights(e){pN((()=>{const t=this.weights;if(t.length!==e.length)throw new yq(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=rK(t);for(let s=0;s<r.length;++s){const a=r[s],o=t[s],i=e[s];if(!gy.arraysEqual(a.shape,i.shape))throw new yq(`Layer weight shape ${a.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}sK(n)}))}addWeight(e,t,n,r,s,a,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new yq(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=i?i():Xj("zeros"));const u=r.apply(t,n),l=new nK(u,n,e,a,o);return u.dispose(),null!=s&&this.addLoss((()=>s.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Tq(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,o=null){const i=Tq(e);t=Tq(t),n=Tq(n),r=Tq(r),s=Zj(s),a=Zj(a);const u=[],l=[],c=[];for(const e of i)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new uK({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function pK(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=pK(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class hK extends cK{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Gq("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new yq("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new yq("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new yq("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new oK(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new uK({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new yq(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function dK(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new yq("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new hK({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}hK.className="InputLayer",zw.registerClass(hK);class fK{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof fK)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new yq(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return zx(t,e.dtype)}catch(n){throw new yq(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof oK){if(null==this.id2Value[e.id])throw new yq(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new yq(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof oK){if(null==this.id2Value[e.id])throw new yq(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new yq(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&hN(this.id2Mask)}}const mK=new kq,gK=new kq;function yK(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],i=o.map((e=>e.name)),u=[],l=t.names();for(const e of i)-1!==l.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let p,h=mK.get(c);if(null==h){const e=function(e,t){gy.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=xK(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:o}=xK(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in o)null==r[e]&&(r[e]=new Set),o[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:bK(r)}}(o,t);h=e.sorted,p=e.recipientCounts,mK.put(c,h),gK.put(c,p)}p={},s||Object.assign(p,gK.get(c));const d=new fK(t);for(let e=0;e<h.length;++e){if(null!=r){const e=cN().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=h[e],o=a.sourceLayer;if(o instanceof hK)continue;const l=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);l.push(n),c.push(r),null!=r&&(m=!0),s||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Tq(o.apply(l,n));let y=null;o.supportsMasking&&(y=o.computeMask(l,c));const b=wK(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}s||hN(f)}return d.disposeMasks(),a?u:u[0]}function bK(e){const t={};for(const n in e)t[n]=e[n].size;return t}function xK(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],o=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&o.pop();else{o.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function wK(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function kK(e,t){return pN((()=>OS(Dk(Tk(e,e),t,!0))))}qd().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=mK&&mK.setMaxEntries(e),null!=gK&&gK.setMaxEntries(e)}));class vK extends zw.Serializable{getConfig(){return{}}}class NK extends vK{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return pN((()=>{const t=kK(e,this.axis),n=GI(t,0,this.maxValue);return Tk(e,yS(n,RN(pj(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}NK.className="MaxNorm",zw.registerClass(NK);class SK extends vK{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return pN((()=>yS(e,RN(pj(),kK(e,this.axis)))))}getConfig(){return{axis:this.axis}}}SK.className="UnitNorm",zw.registerClass(SK);class IK extends vK{apply(e){return $k(e)}}IK.className="NonNeg",zw.registerClass(IK);class TK extends vK{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return pN((()=>{const t=kK(e,this.axis),n=RN(Tk(this.rate,GI(t,this.minValue,this.maxValue)),Tk(1-this.rate,t));return Tk(e,yS(n,RN(pj(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}TK.className="MinMaxNorm",zw.registerClass(TK);const EK={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function $K(e){return Aq(e)}function CK(e,t={}){return Rq(e,zw.SerializationMap.getMap().classNameMap,t,"constraint")}function AK(e){if(null==e)return null;if("string"==typeof e){return CK({className:e in EK?EK[e]:e,config:{}})}return e instanceof vK?e:CK(e)}async function _K(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];hN(r)}}function RK(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var DK,FK;(FK=DK||(DK={}))[FK.SILENT=0]="SILENT",FK[FK.VERBOSE=1]="VERBOSE";class OK{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class MK{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class LK extends OK{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=pN((()=>RN(this.totals[e],Tk(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:pN((()=>{const n=Tk(yS(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),dN(t[e])})))}}class zK extends OK{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const o=s[a];e.push(o.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class BK extends OK{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||x$,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");gy.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,s=null!=n?n():gy.now();return(...a)=>{const o=null!=n?n():gy.now();return o-s<t||(s=o,r=e(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await _K(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await _K(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await _K(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await _K(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await _K(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):gy.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await _K(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await _K(e),await this.trainEnd(e))}}function PK(e,t){if(null==e&&(e={}),e instanceof OK)return[e];if(Array.isArray(e)&&e[0]instanceof OK)return e;return Tq(e).map((e=>new BK(e,t)))}class WK{constructor(){}static registerCallbackConstructor(e,t){gy.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),WK.checkForDuplicate(t),null==WK.constructors[e]&&(WK.constructors[e]=[]),WK.constructors[e].push(t)}static checkForDuplicate(e){for(const t in WK.constructors){WK.constructors[+t].forEach((t=>{if(t===e)throw new yq("Duplicate callback constructor.")}))}}static clear(){WK.constructors={}}static createCallbacks(e){const t=[];for(const n in WK.constructors){const r=+n;e>=r&&t.push(...WK.constructors[r])}return t.map((e=>new e))}}function VK(e,t,n,r,s,a,o,i,u){const l=new zK,c=[new LK,...WK.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const p=new MK(c);return p.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:u}),{callbackList:p,history:l}}function UK(e,t={},n=!1){return Rq(e,zw.SerializationMap.getMap().classNameMap,t,"layer",n)}function GK(e,t){return pN((()=>{"float32"!==e.dtype&&(e=zx(e,"float32"));const n=Dk(Nj(e),t,!0),r=XN(n.shape,pj()),s=OS(MT(n,r));return yS(e,s)}))}function HK(e,t){return pN((()=>XS(Nj(bS(t,e)),-1)))}function qK(e,t){return pN((()=>XS(_S(bS(t,e)),-1)))}function jK(e,t){return pN((()=>{const n=bS(e,t),r=GI(_S(e),pj(),Number.MAX_VALUE),s=_S(yS(n,r));return Tk(100,XS(s,-1))}))}function KK(e,t){return pN((()=>{const n=GI(t,pj(),Number.MAX_VALUE),r=sI(RN(1,n)),s=GI(e,pj(),Number.MAX_VALUE),a=sI(RN(1,s));return XS(Nj(bS(r,a)),-1)}))}function XK(e,t,n=!1){return pN((()=>{if(n)t=EE(t);else{const e=Dk(t,t.shape.length-1,!0);t=yS(t,e)}return t=GI(t,pj(),1-pj()),US(Dk(Tk(zx(e,"float32"),sI(t)),t.shape.length-1))}))}function YK(e,t,n=!1){return pN((()=>{const r=zx(mT(function(e){const t=[oj(e.shape)];return Ak(e,t)}(e)),"int32"),s=(t=GI(t,pj(),1-pj())).shape;return XK(Ak(UT(r,s[s.length-1]),s),t,n)}))}function ZK(e,t){return pN((()=>{let n;return n=GI(t,pj(),1-pj()),n=sI(yS(n,bS(1,n))),XS(function(e,t){if(!gy.arraysEqual(e.shape,t.shape))throw new yq(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return pN((()=>{const n=$k(t),r=US(_S(t));return RN(bS(n,Tk(t,e)),lI(uI(r)))}))}(e,n),-1)}))}function JK(e,t){return pN((()=>{const n=GI(e,pj(),1),r=GI(t,pj(),1);return Dk(Tk(e,sI(yS(n,r))),-1)}))}function QK(e,t){return pN((()=>{const n=GK(e,-1),r=GK(t,-1),s=Tk(n,r);return US(Dk(s,-1))}))}WK.constructors={};const eX={meanSquaredError:HK,meanAbsoluteError:qK,meanAbsolutePercentageError:jK,meanSquaredLogarithmicError:KK,squaredHinge:function(e,t){return pN((()=>{const n=MT(0,bS(1,Tk(e,t)));return XS(Nj(n),-1)}))},hinge:function(e,t){return pN((()=>{const n=MT(0,bS(1,Tk(e,t)));return XS(n,-1)}))},categoricalHinge:function(e,t){return pN((()=>{const n=Dk(Tk(e,t),-1),r=RS(Tk(bS(1,e),t),-1);return MT(0,RN(1,bS(r,n)))}))},logcosh:function(e,t){return pN((()=>{const n=Math.log(2),r=bS(t,e),s=bS(RN(r,NT(Tk(-2,r))),n);return XS(s,-1)}))},categoricalCrossentropy:XK,sparseCategoricalCrossentropy:YK,binaryCrossentropy:ZK,kullbackLeiblerDivergence:JK,poisson:function(e,t){return pN((()=>{const n=sI(RN(pj(),t));return XS(bS(t,Tk(e,n)),-1)}))},cosineProximity:QK};function tX(e){if("string"==typeof e){if(e in eX)return eX[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new yq(t)}return e}function nX(e,t){return pN((()=>{const n=Tk(.5,GT(t)),r=hj(mS(t,n),e.dtype);return XS(uT(e,r),-1)}))}function rX(e,t){return pN((()=>hj(uT(II(e,-1),II(t,-1)),"float32")))}function sX(e,t){return pN((()=>zx(Dk(TS(uT(e,1),uT(t,1))),"float32")))}function aX(e,t){return pN((()=>{const n=sX(e,t),r=function(e,t){return pN((()=>zx(Dk(TS(uT(e,0),uT(t,1))),"float32")))}(e,t),s=RN(n,r);return zx(kS(mS(s,0),yS(n,s),0),"float32")}))}function oX(e,t){return ZK(e,t)}function iX(e,t){return e.rank===t.rank&&(e=BS(e,[e.rank-1])),(t=II(t,-1)).dtype!==e.dtype&&(t=zx(t,e.dtype)),zx(uT(e,t),"float32")}const uX=XK,lX=YK,cX={binaryAccuracy:nX,categoricalAccuracy:rX,precision:aX,categoricalCrossentropy:uX,sparseCategoricalCrossentropy:lX,mse:HK,MSE:HK,mae:qK,MAE:qK,mape:jK,MAPE:jK,cosine:QK};function pX(e){if("string"==typeof e&&e in cX)return cX[e];if("string"!=typeof e&&null!=e)return e;throw new yq(`Unknown metric ${e}`)}function hX(e){if(Nq(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(eX))if(eX[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(cX))if(cX[n]===e){t=n;break}return void 0!==t?t:e.name}}const dX=1048576;function fX(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!mX(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>dX&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function mX(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!mX(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!mX(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function gX(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}r("_".repeat(t)),yX(a,n,r),r("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)s?bX(i[e],n,r):xX(i[e],n,o,r),r((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;t=null!=e.collectedTrainableWeights?eK(e.collectedTrainableWeights):eK(e.trainableWeights);return t}(e),l=eK(e.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(t))}function yX(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function bX(e,t,n){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}yX([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function xX(e,t,n,r){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const o=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];o.push(`${n}[${r}][${s}]`)}const i=e.name,u=e.getClassName(),l=0===o.length?"":o[0];yX([`${i} (${u})`,a,s,e.countParams().toString(),l],t,r);for(let e=1;e<o.length;++e)yX(["","","","",o[e]],t,r)}function wX(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function kX(e,t){if(null===e)return null;if("string"==typeof e)return $q(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];wX(t,s,r)?n.push(r):n.push(kX(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=$q(n);t[e]=kX(r,e)}}return t}}function vX(e,t){if(null==e)return null;if("string"==typeof e)return Eq(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];wX(t,s,r)?n.push(r):n.push(vX(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],s=Eq(n);t[s]="name"!==n&&"className"!==n||"string"!=typeof r?vX(r,n):r}return t}}
/** @license See the LICENSE file. */class NX extends cK{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Gq(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Fq(this.inputs).length!==this.inputs.length)throw new yq(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Fq(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;Nq(0===n,"input layer has >1 nodes"),Nq(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof hK))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},o=[],i=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new gq(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(NX.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const r=l.inputTensors[e],s=l.inboundLayers[e],a=l.nodeIndices[e],o=l.tensorIndices[e];i(r,t,n,s,a,o)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);o.push(l)},u=[],l=[];for(const e of this.outputs)i(e,u,l);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const o=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,o),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],o=e.nodeIndices[r],i=s.inboundNodes[o],u=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,u),n[i.id]=i}}const p={};for(const e in t){const r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}const h={};for(const e in r){const t=r[e];t in h||(h[t]=[]),h[t].push(s[e])}let d=Object.keys(h).map((e=>parseInt(e,10))).sort(Dq);this.layers=[];for(const e of d){const t=h[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof NX&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,d=Object.keys(p).map((e=>parseInt(e,10))).sort(Dq);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of p[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new gq(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new gq(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new uK({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new yq("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new yq(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new yq(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new yq(`${e.length} of ${r} weights are not set: ${e}`)}sK(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 4.0.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=vX(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return pN((()=>{e=Tq(e);const n=new fK;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return yK(this.outputs,n,t)}))}computeMask(e,t){return pN((()=>{let n;return e=Tq(e),n=null==t?vq(null,e.length):Tq(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Zj(e);if(t.length!==this.inputLayers.length)throw new yq(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Dq);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${s.name}_${a}_${o}`];r.push(i)}const s=Zj(t.computeOutputShape(Iq(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n[`${t.name}_${a}_${e}`]=s[e]}}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];Nq(t in n),s.push(n[t])}return Iq(s)}runInternalGraph(e,t){null==t&&(t=vq(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],o=t[r];n[s.id]=[a,o]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Dq);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,o,i,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),i=Tq(t.call(e,l)),u=Tq(t.computeMask(e,n)),r=[e],o=[n]}else r=a.map((e=>e[0])),o=a.map((e=>e[1])),null==l.mask&&(l.mask=o),i=Tq(t.call(r,l)),u=Tq(t.computeMask(r,o));if(t.activityRegularizer)throw new bq("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=i[e],a=u[e];n[t.id]=[r,a]}}}}const s=[],a=[],o=[];for(const e of this.outputs){Nq(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];o.push(t.shape),s.push(t),a.push(r)}return[s,a,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof NX?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=NX.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new yq(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new yq("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new yq(`No such layer: ${e}`)}calculateLosses(){return pN((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=NX.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=NX.nodeKey(e,n);let o={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],i=r.tensorIndices[n];let u=t[NX.nodeKey(s,a)];null==u&&(u=0),e.push([s.name,u,i,o])}a.push(e)}}}const o={};o.name=e.name,o.className=r,o.config=s,o.inboundNodes=a,n.push(o)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=NX.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];r.push([n.name,o,i])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=NX.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];s.push([n.name,o,i])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function i(e,t){const n=[];let r;for(const a of t){const i=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(i in s))return void o(e,t);const c=s[i];if(c.inboundNodes.length<=u)return void o(e,t);const p=c.inboundNodes[u];n.push(p.outputTensors[l])}n.length>0&&e.apply(Iq(n),r)}function u(e){const n=e.name,a=UK(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new yq(`Corrupted configuration, expected array for nodeData: ${e}`);o(a,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!Oq(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)i(t,n)}}const p=[],h=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];Nq(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];Nq(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}return new e({inputs:p,outputs:h,name:l})}get stateful(){if(this._stateful)throw new yq("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){pN((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function SX(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function IX(e,t){return SX(e,t,"classWeight")}async function TX(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=pN((()=>{if(1===e.shape.length)return Bx(e);if(2===e.shape.length){if(e.shape[1]>1){return II(e,1)}if(1===e.shape[1])return Ak(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());hN(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),GN(s,"float32")}return null}function EX(e,t){return Tk(e,t)}function $X(e,t){let n,r;const s=t;n=s.xs,r=s.ys,gy.assert(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=CX("input",e.inputNames,n),o=CX("output",e.outputNames,r),i=a[0].shape[0];gy.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),gy.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)gy.assert(a[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)gy.assert(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:a,ys:o}}function CX(e,t,n){if(n instanceof Jy)return[n];if(Array.isArray(n))return gy.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new yq(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function AX(e,t,n){const r=null!=n.batchesPerEpoch;if(gy.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),gy.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),gy.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),gy.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),gy.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,o;if(s)if(_X(n.validationData))gy.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new bq("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,o=e.ys}const i=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const c=PK(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:h,history:d}=VK(c,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,s,l);h.setModel(e),e.history=d,await h.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const l={};await h.onEpochBegin(f);let c=0,p=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=$X(e,t.value),a={};a.batch=p,a.size=r[0].shape[0],await h.onBatchBegin(p,a);const o=[];if(null!=n.classWeight){const t=IX(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await TX(s[e],null,t[e]))}const l=r.concat(s).concat(o),d=i(l);hN(l);for(let e=0;e<u.length;++e){const t=u[e],n=d[e];a[t]=n,dN(n)}await h.onBatchEnd(p,a),RK(a),p++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=_X(n.validationData)?Tq(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Tq(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await h.onEpochEnd(f,l),f++,e.stopTraining_)break}return await h.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function _X(e){return"function"==typeof e.iterator}async function RX(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new bq("Verbose mode is not implemented yet.");gy.assert(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,u=0;for(;!r||u<n.batches;){const t=await o.next();if(a=pN((()=>{if(t.value){const{xs:n,ys:r}=$X(e,t.value),o=n.concat(r),l=pN((()=>s(o)));if(hN(o),0===u)for(let e=0;e<l.length;++e)a.push(CN(0));const c=o[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=a[e];a[e]=pN((()=>RN(a[e],Tk(c,t)))),u>0&&hN(n)}hN(l),i+=c,++u}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=yS(a[e],i),hN(t)}return Iq(a)}function DX(e){gy.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function FX(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>fj(e,t,n-t))):fj(e,t,n-t)}function OX(e,t){return pN((()=>null==e?null:Array.isArray(e)?e.map((e=>OX(e,t))):vj(e,"int32"===t.dtype?t:zx(t,"int32"))))}function MX(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}async function LX(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,o,i,u,l,c,p,h;e.isTraining=!0;try{const d=null==r.batchSize?32:r.batchSize;DX(d);const f=!1,m=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,f,d);s=m[0],a=m[1],h=m[2];let g,y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2!==r.validationData.length)throw 3===r.validationData.length?new bq("validationData including sample weights is not supported yet."):new yq(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);u=r.validationData[0],l=r.validationData[1];const t=!0,n=await e.standardizeUserData(u,l,null,null,t,d);c=n[0],p=n[1],g=c.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];c=FX(s,e,t),o=s,s=FX(s,0,e),p=FX(a,e,t),i=a,a=FX(a,0,e),g=c.concat(p)}else null!=r.validationSteps&&(y=!0);const b=s.concat(a).concat(h);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const N=PK(r.callbacks,r.yieldEvery),S=await async function(e,t,n,r,s,a,o,i,u,l,c,p,h,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==h&&(h=0);let m=!1;if(null!=u&&null!=l&&(m=!0),null!=f&&(m=!0,null==d))throw new yq("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=lj(0,g)),null==o&&(o=1);const{callbackList:b,history:x}=VK(i,o,a,h,g,d,s,m,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let o=h;o<a;++o){await b.onEpochBegin(o);const a={};if(null!=d)throw new bq("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new bq("batch shuffling is not implemneted yet");c&&gy.shuffle(y);const o=GN(y),i=MX(g,s);for(let c=0;c<i.length;++c){const p={};if(await b.onBatchBegin(c,p),pN((()=>{const h=i[c][0],d=i[c][1],f=fj(o,h,d-h);p.batch=c,p.size=d-h;const g=OX(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];p[t]=n,dN(n)}if(c===i.length-1&&m){const t=e.testLoop(u,l,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];dN(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,p),RK(p),e.stopTraining_)break}o.dispose()}if(await b.onEpochEnd(o,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,r.epochs,r.verbose,N,k,g,r.shuffle,v,r.initialEpoch,null,null);return S}finally{e.isTraining=!1,BX(s,t),BX(a,n),BX(o,t),BX(i,n),BX(c,u),BX(p,l),null!=h&&hN(h)}}function zX(e){const t=[];e instanceof Jy&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(dj(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function BX(e,t){if(null==e)return;const n=[];if(t instanceof Jy)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof Jy)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function PX(e){return Array.isArray(e)}function WX(e){return!function(e){return e instanceof Jy}(e)&&!PX(e)}function VX(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(PX(e)&&e.length>0)t=!0;else if(WX(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new yq(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(WX(e)){a=[];for(const n of t){if(null==e[n])throw new yq(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(PX(e)){if(e.length!==t.length)throw new yq(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new yq(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=zX(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new yq(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const a=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&a!==i)throw new yq(`${s} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${s} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function UX(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new yq(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new yq(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new yq(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const i=o.shape[a],u=n[e][a];if(null!=u&&u!==i)throw new yq(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class GX extends NX{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new yq("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");gX(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>y$.adagrad(.01),Adadelta:()=>y$.adadelta(1,.95,pj()),Adam:()=>y$.adam(.001,.9,.999,pj()),Adamax:()=>y$.adamax(.002,.9,.999,pj(),0),RMSProp:()=>y$.rmsprop(.001,.9,0,pj()),SGD:()=>y$.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new yq(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof u$))throw new yq("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new yq(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>tX(e)))}else{const n=tX(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new yq(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(tX(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],tj("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};tj("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,a;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===ZK?-1!==["accuracy","acc"].indexOf(o)?r=nX:-1!==["crossentropy","ce"].indexOf(o)&&(r=oX):this.lossFunctions[e]===YK?-1!==["accuracy","acc"].indexOf(o)?r=iX:-1!==["crossentropy","ce"].indexOf(o)&&(r=lX):-1!==["accuracy","acc"].indexOf(o)?r=rX:-1!==["crossentropy","ce"].indexOf(o)&&(r=uX),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),a=r,n=""+s}else{const e=pX(o);a=e,n=""+hX(o)}let t;tj(n,(()=>{t=a})),s(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;DX(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const o=this.testFunction;return Iq(this.testLoop(o,a,r,n.verbose,n.steps))}finally{BX(s[0],e),BX(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),RX(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new yq(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new yq(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new yq("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new fK;if(e instanceof Jy&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new yq(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new yq(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const o=yK(s,a);return n?o:o[0]}retrieveSymbolicTensors(e){const t=vq(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const o=a.indexOf(e[r]);if(-1!==o&&(t[r]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new yq(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return pN((()=>{const r=this.checkNumSamples(e);if(n)throw new bq("Verbose predictLoop() is not implemented yet.");const s=MX(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t){pN((()=>{const n=s[t][0],r=s[t][1],a=FX(e,n,r),o=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)o.push({key:this.inputs[e],value:a[e]});else o.push({key:this.inputs[0],value:a});const i=new fK(o);return yK(this.outputs,i)})).forEach(((e,t)=>a[t].push(e)))}return Iq(a.map((e=>bN(e,0))))}))}predict(e,t={}){const n=zX(e);UX(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return DX(r),this.predictLoop(n,r)}finally{BX(n,e)}}predictOnBatch(e){UX(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new gq("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===YK?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=Fq(e.map((e=>e.shape[0])));r.sort();const s=Fq(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new yq(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new yq(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!gy.arraysEqual(r,s))throw new yq(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=VX(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=VX(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[HK,ZK,XK];for(let s=0;s<e.length;++s){const a=e[s],o=t[s],i=n[s];if(null!=o){if(o===XK&&1===a.shape[a.shape.length-1])throw new yq(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const e=a.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new yq(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new yq(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[o,i]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=IX(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await TX(i[t],null,e[t]))}return[o,i,u]}testLoop(e,t,n,r=0,s){return pN((()=>{const a=this.checkNumSamples(t,n,s,"steps"),o=[];if(r>0)throw new bq("Verbose mode is not implemented yet.");if(null!=s)throw new bq("steps mode in testLoop() is not implemented yet");{const r=MX(a,n),s=GN(lj(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],i=r[n][1],u=fj(s,a,i-a),l=OX(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)o.push(CN(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=RN(o[e],Tk(i-a,t))}}for(let e=0;e<o.length;++e)o[e]=yS(o[e],a)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;if(Sq(e,r)>1){s+=`_${Sq(e.slice(0,n),r)}`}t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new fK(e),i=yK(this.outputs,o,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],i[e]);null!=s[e]&&(n=EX(n,s[e]));const a=XS(n);t.push(a),u=0===e?n:RN(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=XS(t(r[s],i[s]))}dN(n),a.push(n)}return u=XS(u),this.calculateLosses().forEach((e=>{u=RN(u,e)})),u}),!0,o)].concat(a)}}makeTestFunction(){this.testFunction=e=>pN((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const o=new fK(a),i=yK(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=XS(r(s[e],i[e]));n=0===e?a:RN(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=XS(n(s[r],i[r]));t.push(a)}return t}))}async fit(e,t,n={}){return LX(this,e,t,n)}async fitDataset(e,t){return AX(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),o=[];for(const e of a){const t=await e.data();o.push(t[0])}return hN(a),BX(n[0],e),BX(n[1],t),Iq(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=cN().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-cN().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Eq(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Eq(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=Eq(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Eq(hX(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Eq(hX(e))));{const e={};for(const t in this.metrics)e[t]=Eq(hX(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=UK(kX(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=$q(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>$q(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=$q(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>$q(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=$q(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Wx.getSaveHandlers(e);if(0===t.length)throw new yq(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new yq(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new yq("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Wx.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.0.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await Wx.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=Wx.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;fX(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){fX(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}GX.className="Model",zw.registerClass(GX);class HX extends GX{}HX.className="Functional",zw.registerClass(HX);class qX extends GX{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Gq("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new yq(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof qX||e instanceof GX;let n;if(t){if(n=e,1!==n.outputs.length)throw new yq("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new yq("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new yq("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=dK({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new yq(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new yq("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=pK(this.outputs[0])}this.inboundNodes=[],new uK({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:vq(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Qj(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new GX({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new gq("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new gq("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new gq("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new gq("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new yq("Legacy serialization format not supported yet.");s=t}else gy.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const o=new e(a);if(!(o instanceof qX))throw new bq(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of s){const t=UK(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new yq("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new yq("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}qX.className="Sequential",zw.registerClass(qX);class jX extends zw.Serializable{getConfig(){return{}}}class KX extends jX{apply(e,t=1){return function(e,t=1){if(1!==t)throw new bq(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Sk(e)}(e,t)}}KX.className="elu",zw.registerClass(KX);class XX extends jX{apply(e){return yE(e)}}XX.className="selu",zw.registerClass(XX);class YX extends jX{apply(e){return $k(e)}}YX.className="relu",zw.registerClass(YX);class ZX extends jX{apply(e){return pN((()=>nI(6,$k(e))))}}ZX.className="relu6",zw.registerClass(ZX);class JX extends jX{apply(e){return e}}JX.className="linear",zw.registerClass(JX);class QX extends jX{apply(e){return _k(e)}}QX.className="sigmoid",zw.registerClass(QX);class eY extends jX{apply(e){return function(e){return pN((()=>{const t=RN(.5,Tk(.2,e));return GI(t,0,1)}))}(e)}}eY.className="hardSigmoid",zw.registerClass(eY);class tY extends jX{apply(e){return NT(e)}}tY.className="softplus",zw.registerClass(tY);class nY extends jX{apply(e){return function(e){return pN((()=>yS(e,RN(_S(e),1))))}(e)}}nY.className="softsign",zw.registerClass(nY);class rY extends jX{apply(e){return FI(e)}}rY.className="tanh",zw.registerClass(rY);class sY extends jX{apply(e,t=-1){return EE(e,t)}}sY.className="softmax",zw.registerClass(sY);class aY extends jX{apply(e,t=-1){return IT(e,t)}}aY.className="logSoftmax",zw.registerClass(aY);class oY extends jX{apply(e,t=1){return pN((()=>Tk(_k(Tk(e,t)),e)))}}oY.className="swish",zw.registerClass(oY);class iY extends jX{apply(e){return pN((()=>Tk(e,FI(NT(e)))))}}function uY(e){return e.getClassName()}function lY(e,t={}){return Rq(e,zw.SerializationMap.getMap().classNameMap,t,"activation")}function cY(e){if(null==e){const e={className:"linear",config:{}};return lY(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},lY(t)}return e instanceof jX?e:lY(e)}function pY(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}iY.className="mish",zw.registerClass(iY);class hY extends zw.Serializable{}class dY extends hY{constructor(e){super(),pY(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return pN((()=>{let t=NN([1]);return this.hasL1&&(t=RN(t,Dk(Tk(this.l1,_S(e))))),this.hasL2&&(t=RN(t,Dk(Tk(this.l2,Nj(e))))),Ak(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}dY.className="L1L2",zw.registerClass(dY);const fY={l1l2:"L1L2"};function mY(e){return Aq(e)}function gY(e,t={}){return Rq(e,zw.SerializationMap.getMap().classNameMap,t,"regularizer")}function yY(e){if(null==e)return null;if("string"==typeof e){return gY({className:e in fY?fY[e]:e,config:{}})}return e instanceof hY?e:gY(e)}class bY extends cK{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Jj(e);let n=$k(e);return null!=this.maxValue&&(n=GI(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}bY.className="ReLU",zw.registerClass(bY);class xY extends cK{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Jj(e);return Ik(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}xY.className="LeakyReLU",zw.registerClass(xY);class wY extends cK{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Xj(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=yY(e.alphaRegularizer),this.alphaConstraint=AK(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new yq(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Qj(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new aK({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Jj(e),Ek(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Kj(this.alphaInitializer),alphaRegularizer:mY(this.alphaRegularizer),alphaConstraint:$K(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}wY.className="PReLU",zw.registerClass(wY);class kY extends cK{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new bq(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Jj(e);return Sk(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}kY.className="ELU",zw.registerClass(kY);class vY extends cK{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Jj(e);return Tk(n,zx(mS(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}vY.className="ThresholdedReLU",zw.registerClass(vY);class NY extends cK{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new sY).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Jj(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function SY(e,t,n){if("number"==typeof e)return vq(e,t);if(e.length!==t)throw new yq(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new yq(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function IY(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function TY(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+uj([n-t,0]);else{if("same"!==r)throw new yq(`Unsupport padding mode: ${r}.`);e*=t}return e}function EY(e,t){return pN((()=>(Zq(t),"channelsFirst"===t?HS(e,[0,2,3,1]):e)))}function $Y(e,t){return pN((()=>(Zq(t),"channelsFirst"===t?HS(e,[0,2,3,4,1]):e)))}function CY(e,t,n,r=1,s="valid",a,o=1){return pN((()=>{if(null==a&&(a="channelsLast"),Zq(a),3!==e.shape.length)throw new yq(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new yq(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new yq(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=HS(e,[0,2,1])),"causal"===s)throw new bq("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=XI(e,t,r,"same"===s?"same":"valid","NWC",o);return null!=n&&(i=Ij(i,n)),i}))}function AY(e,t,n,r=[1,1],s="valid",a,o,i=null){return pN((()=>{if(null==a&&(a="channelsLast"),Zq(a),3!==e.rank&&4!==e.rank)throw new yq(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new yq(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=EY(e,a);if("causal"===s)throw new bq("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=_N.conv2d({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===a&&(u=HS(u,[0,3,1,2])),u}))}function _Y(e,t,n,r=[1,1,1],s="valid",a,o){return pN((()=>{if(null==a&&(a="channelsLast"),Zq(a),4!==e.rank&&5!==e.rank)throw new yq(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new yq(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=$Y(e,a);if("causal"===s)throw new bq("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=ZI(i,t,r,"same"===s?"same":"valid","NDHWC",o),null!=n&&(i=Ij(i,n)),"channelsFirst"===a&&(i=HS(i,[0,4,1,2,3])),i}))}NY.className="Softmax",zw.registerClass(NY);class RY extends cK{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",RY.verifyArgs(t),this.rank=e,zq(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new bq(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=SY(t.kernelSize,e,"kernelSize"),this.strides=SY(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Jq(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Zq(this.dataFormat),this.activation=cY(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Xj(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=AK(t.biasConstraint),this.biasRegularizer=yY(t.biasRegularizer),this.activityRegularizer=yY(t.activityRegularizer),this.dilationRate=SY(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new yq(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new yq(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new yq(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Nq("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Lq(e.kernelSize,"number",1,3))throw new yq(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:uY(this.activation),useBias:this.useBias,biasInitializer:Kj(this.biasInitializer),biasRegularizer:mY(this.biasRegularizer),activityRegularizer:mY(this.activityRegularizer),biasConstraint:$K(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class DY extends RY{constructor(e,t){super(e,t),this.kernel=null,DY.verifyArgs(t),this.filters=t.filters,zq(this.filters,"filters"),this.kernelInitializer=Xj(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=AK(t.kernelConstraint),this.kernelRegularizer=yY(t.kernelRegularizer)}build(e){e=Qj(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new yq(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return pN((()=>{let t;e=Jj(e);const n=null==this.bias?null:this.bias.read(),r=Pq(this.activation.getClassName());if(null!=r&&2===this.rank)t=AY(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=CY(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=AY(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new bq("convolutions greater than 3D are not implemented yet.");t=_Y(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Qj(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=IY(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:Kj(this.kernelInitializer),kernelRegularizer:mY(this.kernelRegularizer),kernelConstraint:$K(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new yq(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class FY extends DY{constructor(e){super(2,e),FY.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Lq(e.kernelSize,"number",1,2))throw new yq(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}FY.className="Conv2D",zw.registerClass(FY);class OY extends DY{constructor(e){super(3,e),OY.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new yq(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}OY.className="Conv3D",zw.registerClass(OY);class MY extends FY{constructor(e){if(super(e),this.inputSpec=[new aK({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new yq(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Qj(e)).length)throw new yq("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new yq("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new aK({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return pN((()=>{let t=Jj(e);if(4!==t.shape.length)throw new yq(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const o=n[s],i=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],p=this.strides[1],h=[r,TY(o,c,u,this.padding),TY(i,p,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=HS(t,[0,2,3,1]));let d=YI(t,this.kernel.read(),h,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=HS(d,[0,3,1,2])),null!=this.bias&&(d=Ij(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Qj(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=TY(t[r],i,a,this.padding),t[s]=TY(t[s],u,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}MY.className="Conv2DTranspose",zw.registerClass(MY);class LY extends OY{constructor(e){if(super(e),this.inputSpec=[new aK({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new yq(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=Qj(e)).length)throw new yq("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new yq("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new aK({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return pN((()=>{let t=Jj(e);if(5!==t.shape.length)throw new yq(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,o;"channelsFirst"===this.dataFormat?(o=2,s=3,a=4):(o=1,s=2,a=3);const i=n[o],u=n[s],l=n[a],c=this.kernelSize[0],p=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,TY(i,d,c,this.padding),TY(u,f,p,this.padding),TY(l,m,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=HS(t,[0,2,3,4,1]));let y=QI(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=HS(y,[0,4,1,2,3])),null!==this.bias&&(y=Ij(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=Qj(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const o=this.kernelSize[0],i=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],p=this.strides[2];return t[n]=this.filters,t[r]=TY(t[r],l,o,this.padding),t[s]=TY(t[s],c,i,this.padding),t[a]=TY(t[a],p,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}LY.className="Conv3DTranspose",zw.registerClass(LY);class zY extends DY{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new yq("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new yq("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new yq(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Xj(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=yY(t.depthwiseRegularizer),this.depthwiseConstraint=AK(t.depthwiseConstraint),this.pointwiseInitializer=Xj(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=yY(t.pointwiseRegularizer),this.pointwiseConstraint=AK(t.pointwiseConstraint)}build(e){if((e=Qj(e)).length<this.rank+2)throw new yq(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new yq(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new aK({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return pN((()=>{let t;if(e=Jj(e),1===this.rank)throw new bq("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=HS(e,[0,2,3,1])),t=bE(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Ij(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=HS(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Kj(this.depthwiseInitializer),e.pointwiseInitializer=Kj(this.pointwiseInitializer),e.depthwiseRegularizer=mY(this.depthwiseRegularizer),e.pointwiseRegularizer=mY(this.pointwiseRegularizer),e.depthwiseConstraint=$K(this.depthwiseConstraint),e.pointwiseConstraint=$K(this.pointwiseConstraint),e}}zY.className="SeparableConv";class BY extends zY{constructor(e){super(2,e)}}BY.className="SeparableConv2D",zw.registerClass(BY);class PY extends DY{constructor(e){super(1,e),PY.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Lq(e.kernelSize,"number",1,1))throw new yq(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}PY.className="Conv1D",zw.registerClass(PY);class WY extends cK{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return pN((()=>{if(e=Jj(e),"channelsLast"===this.dataFormat){const t=gj(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return gj(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=gj(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return gj(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}WY.className="Cropping2D",zw.registerClass(WY);class VY extends cK{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Zq(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Mq(qq,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return pN((()=>{let t=Jj(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=HS(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?r$.resizeNearestNeighbor(t,[e,r]):r$.resizeBilinear(t,[e,r]);return HS(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?r$.resizeNearestNeighbor(t,[e,r]):r$.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}VY.className="UpSampling2D",zw.registerClass(VY);class UY extends RY{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Xj(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=AK(e.depthwiseConstraint),this.depthwiseRegularizer=yY(e.depthwiseRegularizer)}build(e){if((e=Qj(e)).length<4)throw new yq(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new yq(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return pN((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return pN((()=>{null==s&&(s="channelsLast"),Zq(s);let o=EY(e,s);if(4!==e.rank)throw new yq(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new yq(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=LN(o,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(o=HS(o,[0,3,1,2])),o}))}(e=Jj(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Ij(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Qj(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=IY(t,this.kernelSize[0],this.padding,this.strides[0]),a=IY(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Kj(this.depthwiseInitializer),e.depthwiseRegularizer=mY(this.depthwiseRegularizer),e.depthwiseConstraint=$K(this.depthwiseRegularizer),e}}UY.className="DepthwiseConv2D",zw.registerClass(UY);var GY={};function HY(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new yq("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function qY(e,t,n,r=!1,s,a,o=!1,i=!1){return pN((()=>{const u=t.shape.length;if(u<3)throw new yq(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(lj(2,u));if(t=HS(t,l),null!=a)throw new bq("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=zx(zx(s,"bool"),"float32")).rank===u-1&&(s=WS(s,-1)),s=HS(s,l)),r&&(t=$N(t,0),null!=s&&(s=$N(s,0)));const c=[];let p,h=n;const d=t.shape[0],f=$S(t);let m,g;null!=s&&(m=$S(s));for(let t=0;t<d;++t){const n=f[t],r=pN((()=>e(n,h)));if(null==s)p=r[0],h=r[1];else{const e=pN((()=>{const e=m[t],n=bS(GT(e),e);return{output:RN(Tk(r[0],e),Tk(h[0],n)),newStates:h.map(((t,s)=>RN(Tk(r[1][s],e),Tk(t,n))))}}));p=e.output,h=e.newStates}i&&c.push(p)}if(i){g=ES(c,1)}return[p,g,h]}))}t(GY,"ConvLSTM2DCell",(()=>aZ),(e=>aZ=e)),t(GY,"ConvLSTM2D",(()=>oZ),(e=>oZ=e));class jY extends cK{constructor(e){let t;if(super(e),null==e.cell)throw new yq("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new tZ({cells:e.cell}):e.cell,null==t.stateSize)throw new yq("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new aK({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return lj(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Yj(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return pN((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new bq("Constants support is not implemented in RNN yet.");Yj(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new aK({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!gy.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new yq(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new aK({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){pN((()=>{if(!this.stateful)throw new mq("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new yq("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>NN([n,e]))):this.states_=[NN([n,this.cell.stateSize])];else if(null==e)hN(this.states_),null!=this.keptStates&&(hN(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>NN([n,e]))):this.states_[0]=NN([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new yq(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):hN(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!gy.arraysEqual(r.shape,a))throw new yq(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>dN(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=HY(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],o=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new aK({shape:e.shape}));o=o.concat(this.stateSpec)}null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof oK){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return pN((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=Jj(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new yq(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},i=qY(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=i[0],l=i[1],c=i[2];this.stateful&&this.resetStates(c,r);const p=this.returnSequences?l:u;return this.returnState?[p].concat(c):p}))}getInitialState(e){return pN((()=>{let t=NN(e.shape);return t=Dk(t,[1,2]),t=dj(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?xj(t,[1,e]):t)):this.cell.stateSize>1?[xj(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===jY.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const r=UK(t.cell,n);return new e(Object.assign(t,{cell:r}))}}jY.className="RNN",zw.registerClass(jY);class KY extends cK{}class XY extends KY{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,zq(this.units,"units"),this.activation=cY(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Xj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Xj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Xj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=yY(e.kernelRegularizer),this.recurrentRegularizer=yY(e.recurrentRegularizer),this.biasRegularizer=yY(e.biasRegularizer),this.kernelConstraint=AK(e.kernelConstraint),this.recurrentConstraint=AK(e.recurrentConstraint),this.biasConstraint=AK(e.biasConstraint),this.dropout=ij([1,uj([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ij([1,uj([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Qj(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return pN((()=>{if(2!==e.length)throw new yq(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nZ({ones:()=>GT(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nZ({ones:()=>GT(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;s=kj(null!=a?Tk(e,a):e,this.kernel.read()),null!=this.bias&&(s=Ij(s,this.bias.read())),null!=o&&(n=Tk(n,o));let i=RN(s,kj(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:uY(this.activation),useBias:this.useBias,kernelInitializer:Kj(this.kernelInitializer),recurrentInitializer:Kj(this.recurrentInitializer),biasInitializer:Kj(this.biasInitializer),kernelRegularizer:mY(this.kernelRegularizer),recurrentRegularizer:mY(this.recurrentRegularizer),biasRegularizer:mY(this.biasRegularizer),activityRegularizer:mY(this.activityRegularizer),kernelConstraint:$K(this.kernelConstraint),recurrentConstraint:$K(this.recurrentConstraint),biasConstraint:$K(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}XY.className="SimpleRNNCell",zw.registerClass(XY);class YY extends jY{constructor(e){e.cell=new XY(e),super(e)}call(e,t){return pN((()=>{null!=this.cell.dropoutMask&&(hN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}YY.className="SimpleRNN",zw.registerClass(YY);class ZY extends KY{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new yq("GRUCell does not support reset_after parameter set to true.");this.units=e.units,zq(this.units,"units"),this.activation=cY(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=cY(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Xj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Xj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Xj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=yY(e.kernelRegularizer),this.recurrentRegularizer=yY(e.recurrentRegularizer),this.biasRegularizer=yY(e.biasRegularizer),this.kernelConstraint=AK(e.kernelConstraint),this.recurrentConstraint=AK(e.recurrentConstraint),this.biasConstraint=AK(e.biasConstraint),this.dropout=ij([1,uj([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ij([1,uj([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Qj(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return pN((()=>{if(2!==e.length)throw new yq(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nZ({ones:()=>GT(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nZ({ones:()=>GT(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let o,i,u;0<this.dropout&&this.dropout<1&&(e=Tk(e,s[0]));let l=kj(e,this.kernel.read());this.useBias&&(l=Ij(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Tk(r,a[0]));const c=this.recurrentKernel.read(),[p,h]=vN(c,[2*this.units,this.units],c.rank-1),d=kj(r,p),[f,m,g]=vN(l,3,l.rank-1),[y,b]=vN(d,2,d.rank-1);o=this.recurrentActivation.apply(RN(f,y)),i=this.recurrentActivation.apply(RN(m,b));const x=kj(Tk(i,r),h);u=this.activation.apply(RN(g,x));const w=RN(Tk(o,r),Tk(RN(1,US(o)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:uY(this.activation),recurrentActivation:uY(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Kj(this.kernelInitializer),recurrentInitializer:Kj(this.recurrentInitializer),biasInitializer:Kj(this.biasInitializer),kernelRegularizer:mY(this.kernelRegularizer),recurrentRegularizer:mY(this.recurrentRegularizer),biasRegularizer:mY(this.biasRegularizer),activityRegularizer:mY(this.activityRegularizer),kernelConstraint:$K(this.kernelConstraint),recurrentConstraint:$K(this.recurrentConstraint),biasConstraint:$K(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}ZY.className="GRUCell",zw.registerClass(ZY);class JY extends jY{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new ZY(e),super(e)}call(e,t){return pN((()=>{null!=this.cell.dropoutMask&&(hN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}JY.className="GRU",zw.registerClass(JY);class QY extends KY{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,zq(this.units,"units"),this.activation=cY(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=cY(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Xj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Xj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Xj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=yY(e.kernelRegularizer),this.recurrentRegularizer=yY(e.recurrentRegularizer),this.biasRegularizer=yY(e.biasRegularizer),this.kernelConstraint=AK(e.kernelConstraint),this.recurrentConstraint=AK(e.recurrentConstraint),this.biasConstraint=AK(e.biasConstraint),this.dropout=ij([1,uj([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ij([1,uj([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Qj(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends Aj{apply(t,r){const s=e.apply([n]),a=(new Rj).apply([n]),o=e.apply([2*n]);return bj(bj(s,a),o)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return pN((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new yq(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nZ({ones:()=>GT(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nZ({ones:()=>GT(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;let i,u,l,c;0<this.dropout&&this.dropout<1&&(e=Tk(e,a[0]));let p=kj(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Tk(r,o[0])),p=RN(p,kj(r,this.recurrentKernel.read())),this.useBias&&(p=Ij(p,this.bias.read()));const[h,d,f,m]=vN(p,4,p.rank-1);i=this.recurrentActivation.apply(h),u=this.recurrentActivation.apply(d),l=RN(Tk(u,s),Tk(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Tk(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:uY(this.activation),recurrentActivation:uY(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Kj(this.kernelInitializer),recurrentInitializer:Kj(this.recurrentInitializer),biasInitializer:Kj(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:mY(this.kernelRegularizer),recurrentRegularizer:mY(this.recurrentRegularizer),biasRegularizer:mY(this.biasRegularizer),activityRegularizer:mY(this.activityRegularizer),kernelConstraint:$K(this.kernelConstraint),recurrentConstraint:$K(this.recurrentConstraint),biasConstraint:$K(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}QY.className="LSTMCell",zw.registerClass(QY);class eZ extends jY{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new QY(e),super(e)}call(e,t){return pN((()=>{null!=this.cell.dropoutMask&&(hN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}eZ.className="LSTM",zw.registerClass(eZ);class tZ extends KY{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return pN((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=r[o],a=0===o?[e[0]].concat(n):[a[0]].concat(n),a=i.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Yj(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{tj(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(UK(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return rK(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}sK(t)}}function nZ(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,o=()=>null!=a?a(t(),n):Tj(t(),n),i=()=>Ej(o,t,r);if(!s||s<=1)return dN(i().clone());return Array(s).fill(void 0).map(i).map((e=>dN(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */tZ.className="StackedRNNCells",zw.registerClass(tZ);var rZ=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class sZ extends jY{constructor(e){if(e.unroll)throw new bq("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new bq("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new aK({ndim:5})]}call(e,t){return pN((()=>{if(null!=this.cell.dropoutMask&&(hN(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hN(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new yq("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return pN((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=NN([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){pN((()=>{if(!this.stateful)throw new mq("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new yq("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>NN(s))):this.states_=[NN(s)];else if(null==e)hN(this.states_),null!=this.keptStates&&(hN(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>NN(s))):this.states_[0]=NN(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new yq(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):hN(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!gy.arraysEqual(n.shape,r))throw new yq(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>dN(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,u=e[i?3:2],l=e[i?4:3],c=IY(u,r[0],s,a[0],o[0]),p=IY(l,r[1],s,a[1],o[1]);return[...e.slice(0,2),...i?[n,c,p]:[c,p,n]]}}sZ.className="ConvRNN2D";class aZ extends QY{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,zq(this.filters,"filters"),this.kernelSize=SY(n,2,"kernelSize"),this.kernelSize.forEach((e=>zq(e,"kernelSize"))),this.strides=SY(r||1,2,"strides"),this.strides.forEach((e=>zq(e,"strides"))),this.padding=s||"valid",Jq(this.padding),this.dataFormat=a||"channelsLast",Zq(this.dataFormat),this.dilationRate=SY(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>zq(e,"dilationRate")))}build(e){var t;e=Qj(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new yq(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Aj{apply(e,t){return yj([n.apply([r]),ZS([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return pN((()=>{if(3!==e.length)throw new yq(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nZ({ones:()=>GT(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?Tk(t[n],e):e;let u=i(r,o,0),l=i(r,o,1),c=i(r,o,2),p=i(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nZ({ones:()=>GT(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const h=this.recurrentDropoutMask;let d=i(s,h,0),f=i(s,h,1),m=i(s,h,2),g=i(s,h,3);const[y,b,x,w]=vN(this.kernel.read(),4,3),[k,v,N,S]=this.useBias?vN(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,k,this.padding),l=this.inputConv(l,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),p=this.inputConv(p,w,S,this.padding);const[I,T,E,$]=vN(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,I),f=this.recurrentConv(f,T),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const C=this.recurrentActivation.apply(RN(u,d)),A=this.recurrentActivation.apply(RN(l,f)),_=RN(Tk(A,a),Tk(C,this.activation.apply(RN(c,m)))),R=Tk(this.recurrentActivation.apply(RN(p,g)),this.activation.apply(_));return[R,R,_]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=rZ(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),r)}inputConv(e,t,n,r){const s=DN(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Ij(s,n,this.dataFormat):s}recurrentConv(e,t){return DN(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}aZ.className="ConvLSTM2DCell",zw.registerClass(aZ);class oZ extends sZ{constructor(e){const t=new aZ(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}oZ.className="ConvLSTM2D",zw.registerClass(oZ);class iZ extends cK{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return pN((()=>{this.invokeCallHook(e,t);const n=Jj(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Ej((()=>Tj(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}iZ.className="Dropout",zw.registerClass(iZ);class uZ extends iZ{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}uZ.className="SpatialDropout1D",zw.registerClass(uZ);class lZ extends cK{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,zq(this.units,"units"),this.activation=cY(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Xj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Xj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=AK(e.kernelConstraint),this.biasConstraint=AK(e.biasConstraint),this.kernelRegularizer=yY(e.kernelRegularizer),this.biasRegularizer=yY(e.biasRegularizer),this.activityRegularizer=yY(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Qj(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Qj(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return pN((()=>{this.invokeCallHook(e,t);const n=Jj(e),r=Pq(this.activation.getClassName());let s;return null!=r?s=kj(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=kj(n,this.kernel.read()),null!=this.bias&&(s=Ij(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:uY(this.activation),useBias:this.useBias,kernelInitializer:Kj(this.kernelInitializer),biasInitializer:Kj(this.biasInitializer),kernelRegularizer:mY(this.kernelRegularizer),biasRegularizer:mY(this.biasRegularizer),activityRegularizer:mY(this.activityRegularizer),kernelConstraint:$K(this.kernelConstraint),biasConstraint:$K(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}lZ.className="Dense",zw.registerClass(lZ);class cZ extends cK{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Qj(e);for(const t of e.slice(1))if(null==t)throw new yq(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],oj(e,1)]}call(e,t){return pN((()=>{this.invokeCallHook(e,t);let n=Jj(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=HS(n,e)}return function(e){if(e.rank<=1)throw new yq(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],oj(e.shape,1)];return Ak(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}cZ.className="Flatten",zw.registerClass(cZ);class pZ extends cK{constructor(e){super(e),this.supportsMasking=!0,this.activation=cY(e.activation)}call(e,t){return pN((()=>{this.invokeCallHook(e,t);const n=Jj(e);return this.activation.apply(n)}))}getConfig(){const e={activation:uY(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}pZ.className="Activation",zw.registerClass(pZ);class hZ extends cK{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return pN((()=>{return e=Jj(e),t=e,n=this.n,pN((()=>{if(2!==t.shape.length)throw new yq(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return xj(dj(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}hZ.className="RepeatVector",zw.registerClass(hZ);class dZ extends cK{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new yq("Can only specifiy one unknown dimension.");a=e}else s*=t}const o=oj(e);if(null!==a){if(0===s||o%s!=0)throw new yq(n);r[a]=o/s}else if(o!==s)throw new yq(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return pN((()=>{this.invokeCallHook(e,t);const n=Jj(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return Ak(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}dZ.className="Reshape",zw.registerClass(dZ);class fZ extends cK{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=lj(1,e.dims.length+1);if(!gy.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new aK({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Qj(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return HS(Jj(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}fZ.className="Permute",zw.registerClass(fZ);class mZ extends cK{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Jj(e);return SI(YS(n,this.maskValue),-1)}call(e,t){return pN((()=>{this.invokeCallHook(e,t);const n=Jj(e),r=SI(YS(n,this.maskValue),-1,!0);return Tk(n,zx(r,n.dtype))}))}}mZ.className="Masking",zw.registerClass(mZ);class gZ extends cK{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Tq(e.inputLength))}this.inputDim=e.inputDim,zq(this.inputDim,"inputDim"),this.outputDim=e.outputDim,zq(this.outputDim,"outputDim"),this.embeddingsInitializer=Xj(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=yY(e.embeddingsRegularizer),this.activityRegularizer=yY(e.activityRegularizer),this.embeddingsConstraint=AK(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return pN((()=>this.maskZero?(e=Jj(e),YS(e,SN(e))):null))}computeOutputShape(e){if(e=Qj(e),null==this.inputLength)return[...e,this.outputDim];const t=Tq(this.inputLength);if(t.length!==e.length-1)throw new yq(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new yq(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return pN((()=>{this.invokeCallHook(e,t);let n=Jj(e);"int32"!==n.dtype&&(n=hj(n,"int32"));const r=vj(this.embeddings.read(),Ak(n,[n.size]));return Ak(r,Qj(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Kj(this.embeddingsInitializer),embeddingsRegularizer:mY(this.embeddingsRegularizer),activityRegularizer:mY(this.activityRegularizer),embeddingsConstraint:$K(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}gZ.className="Embedding",zw.registerClass(gZ);class yZ extends cK{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new bq}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new yq("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Qj(e)]),e.length<2)throw new yq(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Fq(t),t.length>1)throw new yq(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===Fq(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return pN((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=uj(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=dj(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let o=Ak(r,[s].concat(oj(e.slice(1))));o=HS(o,[1,0]),o=Ak(o,a),t.push(o),n=!0}else if(e>1){const s=lj(1,e).concat([0]);t.push(HS(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=Ak(HS(Ak(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(lj(0,s-1));r=HS(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Fq(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return pN((()=>{if(null==t)return null;if(!Array.isArray(t))throw new yq("`mask` should be an Array");if(!Array.isArray(e))throw new yq("`inputs` should be an Array");if(t.length!==e.length)throw new yq(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:WS(e,0))))[0];for(let e=1;e<t.length-1;++e)n=TS(n,t[e]);return n}))}}class bZ extends yZ{constructor(e){super(e)}mergeFunction(e){return pN((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=RN(t,e[n]);return t}))}}bZ.className="Add",zw.registerClass(bZ);class xZ extends yZ{constructor(e){super(e)}mergeFunction(e){return pN((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Tk(t,e[n]);return t}))}}xZ.className="Multiply",zw.registerClass(xZ);class wZ extends yZ{constructor(e){super(e)}mergeFunction(e){return pN((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=RN(t,e[n]);return Tk(1/e.length,t)}))}}wZ.className="Average",zw.registerClass(wZ);class kZ extends yZ{constructor(e){super(e)}mergeFunction(e){return pN((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=MT(t,e[n]);return t}))}}kZ.className="Maximum",zw.registerClass(kZ);class vZ extends yZ{constructor(e){super(e)}mergeFunction(e){return pN((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=nI(t,e[n]);return t}))}}vZ.className="Minimum",zw.registerClass(vZ);class NZ extends yZ{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new yq("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(gy.arraysEqual(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new yq("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return pN((()=>yj(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new yq("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new yq("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new yq("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new yq(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return pN((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(zx(GT(e[n]),"bool")):t[n].rank<e[n].rank?r.push(WS(t[n],-1)):r.push(t[n]);const s=bN(r,this.axis);return NI(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function SZ(e,t){for(;e<0;)e+=t;return e}NZ.className="Concatenate",zw.registerClass(NZ);class IZ extends yZ{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){gy.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new bq("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new yq(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new yq(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>SZ(t,e[n].shape.length))):[SZ(this.axes,n.shape.length),SZ(this.axes,r.shape.length)],this.normalize&&(n=GK(n,t[0]),r=GK(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new bq("batchDot is not implemented for tensors of 4D or higher rank yet");if(gy.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),gy.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new bq("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return pN((()=>{let n,o;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=Ak(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=Ak(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?Dk(Tk(e,t),a[0]):Dk(Tk(HS(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;o=WN(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);o=BS(o,t)}return 1===o.shape.length&&(o=WS(o,1)),o}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[SZ(this.axes,e.length),SZ(this.axes,t.length)],n}computeOutputShape(e){gy.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new bq("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}IZ.className="Dot",zw.registerClass(IZ);class TZ extends cK{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return pN((()=>{this.invokeCallHook(e,t);const n=Jj(e);return Ej((()=>RN(wj(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}TZ.className="GaussianNoise",zw.registerClass(TZ);class EZ extends cK{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return pN((()=>{this.invokeCallHook(e,t);const n=Jj(e);if(this.rate>0&&this.rate<1){return Ej((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Tk(n,wj(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}EZ.className="GaussianDropout",zw.registerClass(EZ);class $Z extends cK{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Jj(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return pN((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Ej((()=>{const t=Jj(e),r=-1.7580993408473766;let s=IS(cE(n),this.rate);s=hj(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-a*r*this.rate,i=RN(Tk(t,s),Tk(RN(s,-1),r));return RN(Tk(i,a),o)}),(()=>Jj(e)),t.training||!1)}return e}))}}function CZ(e,t,n,r,s,a=.001){let o;if(2===e.rank)o=BI(e,t,n,r,s,a);else if(3===e.rank)o=PI(e,t,n,r,s,a);else{if(4!==e.rank)throw new bq(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=WI(e,t,n,r,s,a)}return o}function AZ(e,t,n,r,s=.001){return gy.arraysEqual(r.slice().sort(),lj(0,e.rank-1))?function(e,t,n,r,s=.001){return pN((()=>{const a=PT(e,r),o=a.mean,i=a.variance;return[CZ(e,o,i,n,t,s),o,i]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return pN((()=>{const a=PT(e,r),o=a.mean,i=a.variance,u=[];for(const t of lj(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=Ak(o,u),c=Ak(i,u),p=null==t?null:Ak(t,u),h=null==n?null:Ak(n,u);return[CZ(e,l,c,h,p,s),o,i]}))}(e,t,n,r,s)}$Z.className="AlphaDropout",zw.registerClass($Z);class _Z extends cK{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Xj(e.betaInitializer||"zeros"),this.gammaInitializer=Xj(e.gammaInitializer||"ones"),this.movingMeanInitializer=Xj(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Xj(e.movingVarianceInitializer||"ones"),this.betaConstraint=AK(e.betaConstraint),this.gammaConstraint=AK(e.gammaConstraint),this.betaRegularizer=yY(e.betaRegularizer),this.gammaRegularizer=yY(e.gammaRegularizer)}build(e){e=Qj(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new yq(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new aK({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return pN((()=>{const n=null!=t.training&&t.training,r=Jj(e),s=r.shape,a=s.length,o=lj(0,a),i=this.axis>=0?this.axis:this.axis+a;o.splice(i,1);const u=vq(1,a);u[i]=s[i];const l=o.slice();l.sort();const c=!gy.arraysEqual(l,lj(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Ak(this.movingMean.read(),u),t=Ak(this.movingVariance.read(),u),n=this.center?Ak(this.beta.read(),u):null,s=this.scale?Ak(this.gamma.read(),u):null;return CZ(r,e,t,n,s,this.epsilon)}return CZ(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,h,d]=AZ(r,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{pN((()=>{const r=1-n,s=e.read(),a=Tk(bS(s,t),r);e.write(bS(s,a))}))};return(()=>{f(this.movingMean,h,this.momentum),f(this.movingVariance,d,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Kj(this.betaInitializer),gammaInitializer:Kj(this.gammaInitializer),movingMeanInitializer:Kj(this.movingMeanInitializer),movingVarianceInitializer:Kj(this.movingVarianceInitializer),betaRegularizer:mY(this.betaRegularizer),gammaRegularizer:mY(this.gammaRegularizer),betaConstraint:$K(this.betaConstraint),gammaConstraint:$K(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}_Z.className="BatchNormalization",zw.registerClass(_Z);class RZ extends cK{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Xj(e.betaInitializer||"zeros"),this.gammaInitializer=Xj(e.gammaInitializer||"ones"),this.betaRegularizer=yY(e.betaRegularizer),this.gammaRegularizer=yY(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Qj(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Fq(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=Jj(e),r=n.shape,s=r.length;return pN((()=>{let{mean:e,variance:t}=PT(n,this.axis,!0);const a=vq(1,s);for(const e of this.axis)a[e]=r[e];const o=e=>null!=e&&e.shape.length!==s?Ak(e,a):e;let i=this.scale?o(this.gamma.read()):null,u=this.center?o(this.beta.read()):null;const l=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(l.push(r[e]),c.push(1)):(l.push(1),c.push(r[e]));return e=tS(e,l),t=tS(t,l),null!=i&&(i=tS(i,c)),null!=u&&(u=tS(u,c)),CZ(n,e,t,u,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Kj(this.betaInitializer),gammaInitializer:Kj(this.gammaInitializer),betaRegularizer:mY(this.betaRegularizer),gammaRegularizer:mY(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}RZ.className="LayerNormalization",zw.registerClass(RZ);class DZ extends cK{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new yq(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new yq(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new yq(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new aK({ndim:4})]}computeOutputShape(e){let t,n;return e=Qj(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return pN((()=>{return t=Jj(e),n=this.padding,r=this.dataFormat,pN((()=>{if(4!==t.rank)throw new yq(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new yq("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new yq(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],qT(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function FZ(e,t,n,r,s,a){return pN((()=>{let o;Zq(s),Qq(a),Jq(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=EY(e,s);const i="same"===r?"same":"valid";return o="max"===a?DT(e,t,n,i):RI(e,t,n,i),"channelsFirst"===s&&(o=HS(o,[0,3,1,2])),o}))}function OZ(e,t,n,r,s,a){return pN((()=>{let o;Zq(s),Qq(a),Jq(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=$Y(e,s);const i="same"===r?"same":"valid";return o="max"===a?FT(e,t,n,i):DI(e,t,n,i),"channelsFirst"===s&&(o=HS(o,[0,4,1,2,3])),o}))}DZ.className="ZeroPadding2D",zw.registerClass(DZ);class MZ extends cK{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new yq(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(zq(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new yq(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}zq(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Jq(this.padding),this.inputSpec=[new aK({ndim:3})]}computeOutputShape(e){const t=IY((e=Qj(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return pN((()=>{this.invokeCallHook(e,t),e=dj(Jj(e),2);const n=this.poolingFunction(Jj(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return BS(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class LZ extends MZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Zq(s),Jq(r),FZ(e,t,n,r,s,"max")}}LZ.className="MaxPooling1D",zw.registerClass(LZ);class zZ extends MZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Zq(s),Jq(r),FZ(e,t,n,r,s,"avg")}}zZ.className="AveragePooling1D",zw.registerClass(zZ);class BZ extends cK{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new yq(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];zq(this.poolSize,"poolSize"),zq(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Zq(this.dataFormat),Jq(this.padding),this.inputSpec=[new aK({ndim:4})]}computeOutputShape(e){e=Qj(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=IY(t,this.poolSize[0],this.padding,this.strides[0]),n=IY(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return pN((()=>(this.invokeCallHook(e,t),this.poolingFunction(Jj(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class PZ extends BZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Zq(s),Jq(r),FZ(e,t,n,r,s,"max")}}PZ.className="MaxPooling2D",zw.registerClass(PZ);class WZ extends BZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Zq(s),Jq(r),FZ(e,t,n,r,s,"avg")}}WZ.className="AveragePooling2D",zw.registerClass(WZ);class VZ extends cK{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new yq(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];zq(this.poolSize,"poolSize"),zq(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Zq(this.dataFormat),Jq(this.padding),this.inputSpec=[new aK({ndim:5})]}computeOutputShape(e){e=Qj(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=IY(t,this.poolSize[0],this.padding,this.strides[0]),n=IY(n,this.poolSize[1],this.padding,this.strides[1]),r=IY(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return pN((()=>(this.invokeCallHook(e,t),this.poolingFunction(Jj(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class UZ extends VZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Zq(s),Jq(r),OZ(e,t,n,r,s,"max")}}UZ.className="MaxPooling3D",zw.registerClass(UZ);class GZ extends VZ{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Zq(s),Jq(r),OZ(e,t,n,r,s,"avg")}}GZ.className="AveragePooling3D",zw.registerClass(GZ);class HZ extends cK{constructor(e){super(e),this.inputSpec=[new aK({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new bq}}class qZ extends HZ{constructor(e){super(e||{})}call(e,t){return pN((()=>{const t=Jj(e);return XS(t,1)}))}}qZ.className="GlobalAveragePooling1D",zw.registerClass(qZ);class jZ extends HZ{constructor(e){super(e||{})}call(e,t){return pN((()=>{const t=Jj(e);return RS(t,1)}))}}jZ.className="GlobalMaxPooling1D",zw.registerClass(jZ);class KZ extends cK{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Zq(this.dataFormat),this.inputSpec=[new aK({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new bq}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class XZ extends KZ{call(e,t){return pN((()=>{const t=Jj(e);return"channelsLast"===this.dataFormat?XS(t,[1,2]):XS(t,[2,3])}))}}XZ.className="GlobalAveragePooling2D",zw.registerClass(XZ);class YZ extends KZ{call(e,t){return pN((()=>{const t=Jj(e);return"channelsLast"===this.dataFormat?RS(t,[1,2]):RS(t,[2,3])}))}}YZ.className="GlobalMaxPooling2D",zw.registerClass(YZ);class ZZ extends cK{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=UK(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class JZ extends ZZ{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Qj(e)).length<3)throw new yq(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Qj(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return pN((()=>qY(((e,n)=>[Jj(this.layer.call(e,t)),[]]),e=Jj(e),[],!1,null,null,!1,!0)[1]))}}JZ.className="TimeDistributed",zw.registerClass(JZ);class QZ extends ZZ{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=UK(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=UK(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,Mq(Xq,"BidirectionalMergeMode",s),e.weights)throw new bq("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):Iq(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=HY(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new yq("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new aK({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),o.push(...r)}if(null!=r)throw new bq("Support for constants in Bidirectional layers is not implemented yet.");const i=a[0]instanceof oK;for(const e of a)if(e instanceof oK!==i)throw new yq("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return pN((()=>{const n=t.initialState;let r,s,a,o;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=$N(s,1)),"concat"===this.mergeMode?o=yj([r,s]):"sum"===this.mergeMode?o=RN(r,s):"ave"===this.mergeMode?o=Tk(.5,RN(r,s)):"mul"===this.mergeMode?o=Tk(r,s):null==this.mergeMode&&(o=[r,s]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){tj(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),tj(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=UK(t.layer);if(delete t.layer,null!=t.numConstants)throw new bq("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}QZ.className="Bidirectional",zw.registerClass(QZ);class eJ extends cK{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return pN((()=>("float32"!==(e=Jj(e)).dtype&&(e=hj(e,"float32")),RN(Tk(e,this.scale),this.offset))))}}eJ.className="Rescaling",zw.registerClass(eJ);const tJ=new Set(["bilinear","nearest"]);class nJ extends cK{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!tJ.has(e.interpolation))throw new yq(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=Qj(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return pN((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return r$.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return r$.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...tJ]} are supported`)}))}}nJ.className="Resizing",zw.registerClass(nJ);class rJ extends cK{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=Qj(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return pN((()=>{let n;if("int32"!==(e=Jj(e)).dtype&&(e=hj(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new yq(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=Jj(t.countWeights)}const r=RS(e),s=DS(e),a=mS(this.numTokens,r).bufferSync().get(0),o=IS(s,0).bufferSync().get(0);if(!a||!o)throw new yq(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,r){let s=Jj(e);if("int32"!==s.dtype&&(s=hj(s,"int32")),"int"===t)return s;const a=s.shape;if(0===s.rank&&(s=WS(s,-1)),"oneHot"===t&&1!==s.shape[s.shape.length-1]&&(s=WS(s,-1)),s.rank>2)throw new yq(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${s.rank}.`);const o=["multiHot","oneHot"].includes(t);let i;if(i=sT(s,void 0!==r&&"count"===t?r:[],n,o),"tfIdf"!==t)return i;if(r)return Tk(i,r);throw new yq("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}rJ.className="CategoryEncoding",zw.registerClass(rJ);var sJ,aJ;qd().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(sJ||(sJ={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(aJ||(aJ={}));var oJ={};t(oJ,"json",(()=>iJ));const iJ=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var uJ={};t(uJ,"json",(()=>lJ));const lJ=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var cJ={};t(cJ,"json",(()=>pJ));const pJ=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var hJ={};t(hJ,"json",(()=>dJ));const dJ=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var fJ={};t(fJ,"json",(()=>mJ));const mJ=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var gJ={};t(gJ,"json",(()=>yJ));const yJ=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var bJ={};t(bJ,"json",(()=>xJ));const xJ=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var wJ={};t(wJ,"json",(()=>kJ));const kJ=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var vJ={};t(vJ,"json",(()=>NJ));const NJ=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var SJ={};t(SJ,"json",(()=>IJ));const IJ=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var TJ={};t(TJ,"json",(()=>EJ));const EJ=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var $J={};t($J,"json",(()=>CJ));const CJ=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var AJ={};t(AJ,"json",(()=>_J));const _J=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var RJ={};t(RJ,"json",(()=>DJ));const DJ=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var FJ={};t(FJ,"json",(()=>OJ));const OJ=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var MJ={};t(MJ,"json",(()=>LJ));const LJ=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var zJ={};t(zJ,"json",(()=>BJ));const BJ=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var PJ={};t(PJ,"json",(()=>WJ));const WJ=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var VJ={};t(VJ,"json",(()=>UJ));const UJ=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var GJ={};n(GJ,yN)})();
//# sourceMappingURL=sentence_model.js.map
